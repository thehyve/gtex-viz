!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery"),require("file-saver")):"function"==typeof define&&define.amd?define(["exports","jquery","file-saver"],e):e((t=t||self).BatchGeneExpression={},t.$,t.saveAs)}(this,function(t,e,n){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n;var r={},a={},i=34,o=10,c=13;function s(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}function f(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}function l(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function u(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),a=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+l(-e,6):e>9999?"+"+l(e,6):l(e,4))+"-"+l(t.getUTCMonth()+1,2)+"-"+l(t.getUTCDate(),2)+(i?"T"+l(n,2)+":"+l(r,2)+":"+l(a,2)+"."+l(i,3)+"Z":a?"T"+l(n,2)+":"+l(r,2)+":"+l(a,2)+"Z":r||n?"T"+l(n,2)+":"+l(r,2)+"Z":"")}function d(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function l(t,e){var s,f=[],l=t.length,u=0,d=0,h=l<=0,b=!1;function p(){if(h)return a;if(b)return b=!1,r;var e,s,f=u;if(t.charCodeAt(f)===i){for(;u++<l&&t.charCodeAt(u)!==i||t.charCodeAt(++u)===i;);return(e=u)>=l?h=!0:(s=t.charCodeAt(u++))===o?b=!0:s===c&&(b=!0,t.charCodeAt(u)===o&&++u),t.slice(f+1,e-1).replace(/""/g,'"')}for(;u<l;){if((s=t.charCodeAt(e=u++))===o)b=!0;else if(s===c)b=!0,t.charCodeAt(u)===o&&++u;else if(s!==n)continue;return t.slice(f,e)}return h=!0,t.slice(f,l)}for(t.charCodeAt(l-1)===o&&--l,t.charCodeAt(l-1)===c&&--l;(s=p())!==a;){for(var g=[];s!==r&&s!==a;)g.push(s),s=p();e&&null==(g=e(g,d++))||f.push(g)}return f}function d(e,n){return e.map(function(e){return n.map(function(t){return b(e[t])}).join(t)})}function h(e){return e.map(b).join(t)}function b(t){return null==t?"":t instanceof Date?u(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,a=l(t,function(t,a){if(n)return n(t,a-1);r=t,n=e?function(t,e){var n=s(t);return function(r,a){return e(n(r),a,t)}}(t,e):s(t)});return a.columns=r||[],a},parseRows:l,format:function(e,n){return null==n&&(n=f(e)),[n.map(b).join(t)].concat(d(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=f(t)),d(t,e).join("\n")},formatRows:function(t){return t.map(h).join("\n")}}}d(","),d("\t");function h(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function b(t,e){return fetch(t,e).then(h)}var p="http://www.w3.org/1999/xhtml",g={svg:"http://www.w3.org/2000/svg",xhtml:p,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function v(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),g.hasOwnProperty(e)?{space:g[e],local:t}:t}function y(t){var e=v(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===p&&e.documentElement.namespaceURI===p?e.createElement(t):e.createElementNS(n,t)}})(e)}function m(){}function x(t){return null==t?m:function(){return this.querySelector(t)}}function w(){return[]}function _(t){return null==t?w:function(){return this.querySelectorAll(t)}}function M(t){return function(){return this.matches(t)}}function T(t){return new Array(t.length)}function S(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}S.prototype={constructor:S,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var k="$";function A(t,e,n,r,a,i){for(var o,c=0,s=e.length,f=i.length;c<f;++c)(o=e[c])?(o.__data__=i[c],r[c]=o):n[c]=new S(t,i[c]);for(;c<s;++c)(o=e[c])&&(a[c]=o)}function C(t,e,n,r,a,i,o){var c,s,f,l={},u=e.length,d=i.length,h=new Array(u);for(c=0;c<u;++c)(s=e[c])&&(h[c]=f=k+o.call(s,s.__data__,c,e),f in l?a[c]=s:l[f]=s);for(c=0;c<d;++c)(s=l[f=k+o.call(t,i[c],c,i)])?(r[c]=s,s.__data__=i[c],l[f]=null):n[c]=new S(t,i[c]);for(c=0;c<u;++c)(s=e[c])&&l[h[c]]===s&&(a[c]=s)}function E(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function N(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function D(t,e){return t.style.getPropertyValue(e)||N(t).getComputedStyle(t,null).getPropertyValue(e)}function I(t){return t.trim().split(/^|\s+/)}function P(t){return t.classList||new U(t)}function U(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function j(t,e){for(var n=P(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function L(t,e){for(var n=P(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function z(){this.textContent=""}function F(){this.innerHTML=""}function B(){this.nextSibling&&this.parentNode.appendChild(this)}function Y(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function O(){return null}function q(){var t=this.parentNode;t&&t.removeChild(this)}function H(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function G(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}U.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var V={},R=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(V={mouseenter:"mouseover",mouseleave:"mouseout"}));function X(t,e,n){return t=W(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function W(t,e,n){return function(r){var a=R;R=r;try{t.call(this,this.__data__,e,n)}finally{R=a}}}function Z(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?e.length=a:delete this.__on}}}function Q(t,e,n){var r=V.hasOwnProperty(t.type)?X:W;return function(a,i,o){var c,s=this.__on,f=r(e,i,o);if(s)for(var l=0,u=s.length;l<u;++l)if((c=s[l]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=f,c.capture=n),void(c.value=e);this.addEventListener(t.type,f,n),c={type:t.type,name:t.name,value:e,listener:f,capture:n},s?s.push(c):this.__on=[c]}}function J(t,e,n){var r=N(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}var K=[null];function tt(t,e){this._groups=t,this._parents=e}function et(){return new tt([[document.documentElement]],K)}function nt(t){return"string"==typeof t?new tt([[document.querySelector(t)]],[document.documentElement]):new tt([[t]],K)}function rt(){for(var t,e=R;t=e.sourceEvent;)e=t;return e}function at(t){var e=rt();return e.changedTouches&&(e=e.changedTouches[0]),function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var a=t.getBoundingClientRect();return[e.clientX-a.left-t.clientLeft,e.clientY-a.top-t.clientTop]}(t,e)}function it(t){return"string"==typeof t?new tt([document.querySelectorAll(t)],[document.documentElement]):new tt([null==t?[]:t],K)}tt.prototype=et.prototype={constructor:tt,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o,c=e[a],s=c.length,f=r[a]=new Array(s),l=0;l<s;++l)(i=c[l])&&(o=t.call(i,i.__data__,l,c))&&("__data__"in i&&(o.__data__=i.__data__),f[l]=o);return new tt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=_(t));for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,c=e[i],s=c.length,f=0;f<s;++f)(o=c[f])&&(r.push(t.call(o,o.__data__,f,c)),a.push(o));return new tt(r,a)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new tt(r,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),l=-1,this.each(function(t){b[++l]=t}),b;var n,r=e?C:A,a=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=i.length,c=new Array(o),s=new Array(o),f=new Array(o),l=0;l<o;++l){var u=a[l],d=i[l],h=d.length,b=t.call(u,u&&u.__data__,l,a),p=b.length,g=s[l]=new Array(p),v=c[l]=new Array(p);r(u,d,g,v,f[l]=new Array(h),b,e);for(var y,m,x=0,w=0;x<p;++x)if(y=g[x]){for(x>=w&&(w=x+1);!(m=v[w])&&++w<p;);y._next=m||null}}return(c=new tt(c,a))._enter=s,c._exit=f,c},enter:function(){return new tt(this._enter||this._groups.map(T),this._parents)},exit:function(){return new tt(this._exit||this._groups.map(T),this._parents)},join:function(t,e,n){var r=this.enter(),a=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(a=e(a)),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],l=n[c],u=f.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=f[h]||l[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new tt(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=E);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,c=n[i],s=c.length,f=a[i]=new Array(s),l=0;l<s;++l)(o=c[l])&&(f[l]=o);f.sort(e)}return new tt(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,c=i.length;o<c;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=v(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):D(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=I(t+"");if(arguments.length<2){for(var r=P(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?j:L)(this,t)}}:e?function(t){return function(){j(this,t)}}:function(t){return function(){L(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?z:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?F:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(B)},lower:function(){return this.each(Y)},append:function(t){var e="function"==typeof t?t:y(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:y(t),r=null==e?O:"function"==typeof e?e:x(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(q)},clone:function(t){return this.select(t?G:H)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=i.length;if(!(arguments.length<2)){for(c=e?Q:Z,null==n&&(n=!1),r=0;r<o;++r)this.each(c(i[r],e,n));return this}var c=this.node().__on;if(c)for(var s,f=0,l=c.length;f<l;++f)for(r=0,s=c[f];r<o;++r)if((a=i[r]).type===s.type&&a.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return J(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return J(this,t,e)}})(t,e))}};function ot(){}function ct(t,e){var n=new ot;if(t instanceof ot)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,a=-1,i=t.length;if(null==e)for(;++a<i;)n.set(a,t[a]);else for(;++a<i;)n.set(e(r=t[a],a,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}function st(){var t,e,n,r=[],a=[];function i(n,a,o,c){if(a>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,f,l,u=-1,d=n.length,h=r[a++],b=ct(),p=o();++u<d;)(l=b.get(s=h(f=n[u])+""))?l.push(f):b.set(s,[f]);return b.each(function(t,e){c(p,e,i(t,a,o,c))}),p}return n={object:function(t){return i(t,0,ft,lt)},map:function(t){return i(t,0,ut,dt)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var o,c=a[i-1];return null!=e&&i>=r.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,i)})})),null!=c?o.sort(function(t,e){return c(t.key,e.key)}):o}(i(t,0,ut,dt),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return a[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function ft(){return{}}function lt(t,e,n){t[e]=n}function ut(){return ct()}function dt(t,e,n){t.set(e,n)}function ht(){}ot.prototype=ct.prototype={constructor:ot,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var bt=ct.prototype;function pt(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",tissueSummary:t+"dataset/tissueSummary?datasetId=gtex_v7",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"metadata/tissueSiteDetail?format=json",tissueSites:t+"metadata/tissueSiteDetail?format=json",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}function gt(t){const e="tissueSiteDetail";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),n}function vt(t,e=!0,n){const r="geneExpression";if(!t.hasOwnProperty(r))throw"Parsing Error: required json attribute is missing: "+r;return t[r].forEach(t=>{["data","tissueSiteDetailId","geneSymbol","gencodeId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: required json attribute is missing: "+e}),t.values=e?t.data.map(t=>Math.log10(+t+1)):t.data,t.group=t.tissueSiteDetailId,t.label=t.geneSymbol,t.color=void 0===n?"#90c1c1":n[t.gencodeId]}),t[r]}function yt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}ht.prototype=function(t,e){var n=new ht;if(t instanceof ht)t.each(function(t){n.add(t)});else if(t){var r=-1,a=t.length;if(null==e)for(;++r<a;)n.add(t[r]);else for(;++r<a;)n.add(e(t[r],r,t))}return n}.prototype={constructor:ht,has:bt.has,add:function(t){return this["$"+(t+="")]=t,this},remove:bt.remove,clear:bt.clear,values:bt.keys,size:bt.size,empty:bt.empty,each:bt.each};var mt,xt,wt=(1===(mt=yt).length&&(xt=mt,mt=function(t,e){return yt(xt(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;mt(t[a],e)<0?n=a+1:r=a}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;mt(t[a],e)>0?r=a:n=a+1}return n}}).right;function _t(t){return null===t?NaN:+t}function Mt(t,e){var n=function(t,e){var n,r,a=t.length,i=0,o=-1,c=0,s=0;if(null==e)for(;++o<a;)isNaN(n=_t(t[o]))||(s+=(r=n-c)*(n-(c+=r/++i)));else for(;++o<a;)isNaN(n=_t(e(t[o],o,t)))||(s+=(r=n-c)*(n-(c+=r/++i)));if(i>1)return s/(i-1)}(t,e);return n?Math.sqrt(n):n}function Tt(t,e){var n,r,a,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=a=n;++o<i;)null!=(n=t[o])&&(r>n&&(r=n),a<n&&(a=n))}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=a=n;++o<i;)null!=(n=e(t[o],o,t))&&(r>n&&(r=n),a<n&&(a=n));return[r,a]}function St(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i}var kt=Math.sqrt(50),At=Math.sqrt(10),Ct=Math.sqrt(2);function $t(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=kt?10:i>=At?5:i>=Ct?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=kt?10:i>=At?5:i>=Ct?2:1)}function Et(t,e,n){if(null==n&&(n=_t),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,a=(r-1)*e,i=Math.floor(a),o=+n(t[i],i,t);return o+(+n(t[i+1],i+1,t)-o)*(a-i)}}function Nt(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r}function Dt(t,e){var n,r=t.length,a=r,i=-1,o=0;if(null==e)for(;++i<r;)isNaN(n=_t(t[i]))?--a:o+=n;else for(;++i<r;)isNaN(n=_t(e(t[i],i,t)))?--a:o+=n;if(a)return o/a}function It(t,e){var n,r=t.length,a=-1,i=[];if(null==e)for(;++a<r;)isNaN(n=_t(t[a]))||i.push(n);else for(;++a<r;)isNaN(n=_t(e(t[a],a,t)))||i.push(n);return Et(i.sort(yt),.5)}function Pt(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r}function Ut(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var jt=Array.prototype,Lt=jt.map,zt=jt.slice,Ft={name:"implicit"};function Bt(){var t,e,n=function t(){var e=ct(),n=[],r=[],a=Ft;function i(t){var i=t+"",o=e.get(i);if(!o){if(a!==Ft)return a;e.set(i,o=n.push(t))}return r[(o-1)%r.length]}return i.domain=function(t){if(!arguments.length)return n.slice();n=[],e=ct();for(var r,a,o=-1,c=t.length;++o<c;)e.has(a=(r=t[o])+"")||e.set(a,n.push(r));return i},i.range=function(t){return arguments.length?(r=zt.call(t),i):r.slice()},i.unknown=function(t){return arguments.length?(a=t,i):a},i.copy=function(){return t(n,r).unknown(a)},Ut.apply(i,arguments),i}().unknown(void 0),r=n.domain,a=n.range,i=[0,1],o=!1,c=0,s=0,f=.5;function l(){var n=r().length,l=i[1]<i[0],u=i[l-0],d=i[1-l];t=(d-u)/Math.max(1,n-c+2*s),o&&(t=Math.floor(t)),u+=(d-u-t*(n-c))*f,e=t*(1-c),o&&(u=Math.round(u),e=Math.round(e));var h=St(n).map(function(e){return u+t*e});return a(l?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),l()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],l()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,l()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,l()):o},n.padding=function(t){return arguments.length?(c=Math.min(1,s=+t),l()):c},n.paddingInner=function(t){return arguments.length?(c=Math.min(1,t),l()):c},n.paddingOuter=function(t){return arguments.length?(s=+t,l()):s},n.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),l()):f},n.copy=function(){return Bt(r(),i).round(o).paddingInner(c).paddingOuter(s).align(f)},Ut.apply(l(),arguments)}function Yt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Ot(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function qt(){}var Ht="\\s*([+-]?\\d+)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Vt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Rt=/^#([0-9a-f]{3})$/,Xt=/^#([0-9a-f]{6})$/,Wt=new RegExp("^rgb\\("+[Ht,Ht,Ht]+"\\)$"),Zt=new RegExp("^rgb\\("+[Vt,Vt,Vt]+"\\)$"),Qt=new RegExp("^rgba\\("+[Ht,Ht,Ht,Gt]+"\\)$"),Jt=new RegExp("^rgba\\("+[Vt,Vt,Vt,Gt]+"\\)$"),Kt=new RegExp("^hsl\\("+[Gt,Vt,Vt]+"\\)$"),te=new RegExp("^hsla\\("+[Gt,Vt,Vt,Gt]+"\\)$"),ee={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ne(t){var e;return t=(t+"").trim().toLowerCase(),(e=Rt.exec(t))?new ce((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Xt.exec(t))?re(parseInt(e[1],16)):(e=Wt.exec(t))?new ce(e[1],e[2],e[3],1):(e=Zt.exec(t))?new ce(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Qt.exec(t))?ae(e[1],e[2],e[3],e[4]):(e=Jt.exec(t))?ae(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Kt.exec(t))?fe(e[1],e[2]/100,e[3]/100,1):(e=te.exec(t))?fe(e[1],e[2]/100,e[3]/100,e[4]):ee.hasOwnProperty(t)?re(ee[t]):"transparent"===t?new ce(NaN,NaN,NaN,0):null}function re(t){return new ce(t>>16&255,t>>8&255,255&t,1)}function ae(t,e,n,r){return r<=0&&(t=e=n=NaN),new ce(t,e,n,r)}function ie(t){return t instanceof qt||(t=ne(t)),t?new ce((t=t.rgb()).r,t.g,t.b,t.opacity):new ce}function oe(t,e,n,r){return 1===arguments.length?ie(t):new ce(t,e,n,null==r?1:r)}function ce(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function se(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function fe(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new le(t,e,n,r)}function le(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ue(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Yt(qt,ne,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Yt(ce,oe,Ot(qt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ce(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ce(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+se(this.r)+se(this.g)+se(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Yt(le,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof le)return new le(t.h,t.s,t.l,t.opacity);if(t instanceof qt||(t=ne(t)),!t)return new le;if(t instanceof le)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,c=i-a,s=(i+a)/2;return c?(o=e===i?(n-r)/c+6*(n<r):n===i?(r-e)/c+2:(e-n)/c+4,c/=s<.5?i+a:2-i-a,o*=60):c=s>0&&s<1?0:o,new le(o,c,s,t.opacity)}(t):new le(t,e,n,null==r?1:r)},Ot(qt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new le(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new le(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new ce(ue(t>=240?t-240:t+120,a,r),ue(t,a,r),ue(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var de=Math.PI/180,he=180/Math.PI,be=.96422,pe=1,ge=.82521,ve=4/29,ye=6/29,me=3*ye*ye,xe=ye*ye*ye;function we(t){if(t instanceof _e)return new _e(t.l,t.a,t.b,t.opacity);if(t instanceof Ae){if(isNaN(t.h))return new _e(t.l,0,0,t.opacity);var e=t.h*de;return new _e(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof ce||(t=ie(t));var n,r,a=ke(t.r),i=ke(t.g),o=ke(t.b),c=Me((.2225045*a+.7168786*i+.0606169*o)/pe);return a===i&&i===o?n=r=c:(n=Me((.4360747*a+.3850649*i+.1430804*o)/be),r=Me((.0139322*a+.0971045*i+.7141733*o)/ge)),new _e(116*c-16,500*(n-c),200*(c-r),t.opacity)}function _e(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function Me(t){return t>xe?Math.pow(t,1/3):t/me+ve}function Te(t){return t>ye?t*t*t:me*(t-ve)}function Se(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function ke(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ae(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}Yt(_e,function(t,e,n,r){return 1===arguments.length?we(t):new _e(t,e,n,null==r?1:r)},Ot(qt,{brighter:function(t){return new _e(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new _e(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new ce(Se(3.1338561*(e=be*Te(e))-1.6168667*(t=pe*Te(t))-.4906146*(n=ge*Te(n))),Se(-.9787684*e+1.9161415*t+.033454*n),Se(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Yt(Ae,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Ae)return new Ae(t.h,t.c,t.l,t.opacity);if(t instanceof _e||(t=we(t)),0===t.a&&0===t.b)return new Ae(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*he;return new Ae(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new Ae(t,e,n,null==r?1:r)},Ot(qt,{brighter:function(t){return new Ae(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Ae(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return we(this).rgb()}}));var Ce=-.14861,$e=1.78277,Ee=-.29227,Ne=-.90649,De=1.97294,Ie=De*Ne,Pe=De*$e,Ue=$e*Ee-Ne*Ce;function je(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Le)return new Le(t.h,t.s,t.l,t.opacity);t instanceof ce||(t=ie(t));var e=t.r/255,n=t.g/255,r=t.b/255,a=(Ue*r+Ie*e-Pe*n)/(Ue+Ie-Pe),i=r-a,o=(De*(n-a)-Ee*i)/Ne,c=Math.sqrt(o*o+i*i)/(De*a*(1-a)),s=c?Math.atan2(o,i)*he-120:NaN;return new Le(s<0?s+360:s,c,a,t.opacity)}(t):new Le(t,e,n,null==r?1:r)}function Le(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ze(t){return function(){return t}}function Fe(t,e){return function(n){return t+n*e}}function Be(t){return 1==(t=+t)?Ye:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):ze(isNaN(e)?n:e)}}function Ye(t,e){var n=e-t;return n?Fe(t,n):ze(isNaN(t)?e:t)}Yt(Le,je,Ot(qt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Le(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Le(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*de,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),a=Math.sin(t);return new ce(255*(e+n*(Ce*r+$e*a)),255*(e+n*(Ee*r+Ne*a)),255*(e+n*(De*r)),this.opacity)}}));var Oe=function t(e){var n=Be(e);function r(t,e){var r=n((t=oe(t)).r,(e=oe(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=Ye(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);var qe,He=(qe=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],o=r>0?t[r-1]:2*a-i,c=r<e-1?t[r+2]:2*i-a;return function(t,e,n,r,a){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*r+o*a)/6}((n-r/e)*e,o,a,i,c)}},function(t){var e,n,r=t.length,a=new Array(r),i=new Array(r),o=new Array(r);for(e=0;e<r;++e)n=oe(t[e]),a[e]=n.r||0,i[e]=n.g||0,o[e]=n.b||0;return a=qe(a),i=qe(i),o=qe(o),n.opacity=1,function(t){return n.r=a(t),n.g=i(t),n.b=o(t),n+""}});function Ge(t,e){return e-=t=+t,function(n){return t+e*n}}var Ve=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Re=new RegExp(Ve.source,"g");function Xe(t,e){var n,r,a,i=Ve.lastIndex=Re.lastIndex=0,o=-1,c=[],s=[];for(t+="",e+="";(n=Ve.exec(t))&&(r=Re.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),c[o]?c[o]+=a:c[++o]=a),(n=n[0])===(r=r[0])?c[o]?c[o]+=r:c[++o]=r:(c[++o]=null,s.push({i:o,x:Ge(n,r)})),i=Re.lastIndex;return i<e.length&&(a=e.slice(i),c[o]?c[o]+=a:c[++o]=a),c.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)c[(n=s[r]).i]=n.x(t);return c.join("")})}function We(t,e){var n,r=typeof e;return null==e||"boolean"===r?ze(e):("number"===r?Ge:"string"===r?(n=ne(e))?(e=n,Oe):Xe:e instanceof ne?Oe:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}:Array.isArray(e)?function(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=We(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=We(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}:Ge)(t,e)}function Ze(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}}var Qe,Je,Ke,tn,en=180/Math.PI,nn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function rn(t,e,n,r,a,i){var o,c,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,s/=c),t*r<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*en,skewX:Math.atan(s)*en,scaleX:o,scaleY:c}}function an(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var c=[],s=[];return i=t(i),o=t(o),function(t,r,a,i,o,c){if(t!==a||r!==i){var s=o.push("translate(",null,e,null,n);c.push({i:s-4,x:Ge(t,a)},{i:s-2,x:Ge(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,c,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:Ge(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,c,s),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:Ge(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,c,s),function(t,e,n,r,i,o){if(t!==n||e!==r){var c=i.push(a(i)+"scale(",null,",",null,")");o.push({i:c-4,x:Ge(t,n)},{i:c-2,x:Ge(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,c,s),i=o=null,function(t){for(var e,n=-1,r=s.length;++n<r;)c[(e=s[n]).i]=e.x(t);return c.join("")}}}var on=an(function(t){return"none"===t?nn:(Qe||(Qe=document.createElement("DIV"),Je=document.documentElement,Ke=document.defaultView),Qe.style.transform=t,t=Ke.getComputedStyle(Je.appendChild(Qe),null).getPropertyValue("transform"),Je.removeChild(Qe),rn(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),cn=an(function(t){return null==t?nn:(tn||(tn=document.createElementNS("http://www.w3.org/2000/svg","g")),tn.setAttribute("transform",t),(t=tn.transform.baseVal.consolidate())?rn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):nn)},", ",")",")");Math.SQRT2;function sn(t){return function e(n){function r(e,r){var a=t((e=je(e)).h,(r=je(r)).h),i=Ye(e.s,r.s),o=Ye(e.l,r.l),c=Ye(e.opacity,r.opacity);return function(t){return e.h=a(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=c(t),e+""}}return n=+n,r.gamma=e,r}(1)}sn(function(t,e){var n=e-t;return n?Fe(t,n>180||n<-180?n-360*Math.round(n/360):n):ze(isNaN(t)?e:t)});var fn=sn(Ye);function ln(t){return+t}var un=[0,1];function dn(t){return t}function hn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function bn(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function pn(t,e,n){var r=t[0],a=t[1],i=e[0],o=e[1];return a<r?(r=hn(a,r),i=n(o,i)):(r=hn(r,a),i=n(i,o)),function(t){return i(r(t))}}function gn(t,e,n){var r=Math.min(t.length,e.length)-1,a=new Array(r),i=new Array(r),o=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<r;)a[o]=hn(t[o],t[o+1]),i[o]=n(e[o],e[o+1]);return function(e){var n=wt(t,e,1,r)-1;return i[n](a[n](e))}}function vn(t,e){return function(){var t,e,n,r,a,i,o=un,c=un,s=We,f=dn;function l(){return r=Math.min(o.length,c.length)>2?gn:pn,a=i=null,u}function u(e){return isNaN(e=+e)?n:(a||(a=r(o.map(t),c,s)))(t(f(e)))}return u.invert=function(n){return f(e((i||(i=r(c,o.map(t),Ge)))(n)))},u.domain=function(t){return arguments.length?(o=Lt.call(t,ln),f===dn||(f=bn(o)),l()):o.slice()},u.range=function(t){return arguments.length?(c=zt.call(t),l()):c.slice()},u.rangeRound=function(t){return c=zt.call(t),s=Ze,l()},u.clamp=function(t){return arguments.length?(f=t?bn(o):dn,u):f!==dn},u.interpolate=function(t){return arguments.length?(s=t,l()):s},u.unknown=function(t){return arguments.length?(n=t,u):n},function(n,r){return t=n,e=r,l()}}()(t,e)}function yn(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function mn(t){return(t=yn(Math.abs(t)))?t[1]:NaN}var xn,wn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function _n(t){return new Mn(t)}function Mn(t){if(!(e=wn.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}function Tn(t,e){var n=yn(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}_n.prototype=Mn.prototype,Mn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Sn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Tn(100*t,e)},r:Tn,s:function(t,e){var n=yn(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(xn=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+yn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function kn(t){return t}var An,Cn,$n,En=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Nn(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var a=t.length,i=[],o=0,c=e[0],s=0;a>0&&c>0&&(s+c+1>r&&(c=Math.max(1,r-s)),i.push(t.substring(a-=c,a+c)),!((s+=c+1)>r));)c=e[o=(o+1)%e.length];return i.reverse().join(n)}):kn,a=t.currency,i=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):kn,c=t.percent||"%";function s(t){var e=(t=_n(t)).fill,n=t.align,s=t.sign,f=t.symbol,l=t.zero,u=t.width,d=t.comma,h=t.precision,b=t.trim,p=t.type;"n"===p?(d=!0,p="g"):Sn[p]||(null==h&&(h=12),b=!0,p="g"),(l||"0"===e&&"="===n)&&(l=!0,e="0",n="=");var g="$"===f?a[0]:"#"===f&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",v="$"===f?a[1]:/[%p]/.test(p)?c:"",y=Sn[p],m=/[defgprs%]/.test(p);function x(t){var a,c,f,x=g,w=v;if("c"===p)w=y(t)+w,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),h),b&&(t=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(a>0){if(!+t[r])break t;a=0}}return a>0?t.slice(0,a)+t.slice(e+1):t}(t)),_&&0==+t&&(_=!1),x=(_?"("===s?s:"-":"-"===s||"("===s?"":s)+x,w=("s"===p?En[8+xn/3]:"")+w+(_&&"("===s?")":""),m)for(a=-1,c=t.length;++a<c;)if(48>(f=t.charCodeAt(a))||f>57){w=(46===f?i+t.slice(a+1):t.slice(a))+w,t=t.slice(0,a);break}}d&&!l&&(t=r(t,1/0));var M=x.length+t.length+w.length,T=M<u?new Array(u-M+1).join(e):"";switch(d&&l&&(t=r(T+t,T.length?u-w.length:1/0),T=""),n){case"<":t=x+t+w+T;break;case"=":t=x+T+t+w;break;case"^":t=T.slice(0,M=T.length>>1)+x+t+w+T.slice(M);break;default:t=T+x+t+w}return o(t)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),x.toString=function(){return t+""},x}return{format:s,formatPrefix:function(t,e){var n=s(((t=_n(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(mn(e)/3))),a=Math.pow(10,-r),i=En[8+r/3];return function(t){return n(a*t)+i}}}}function Dn(t,e,n,r){var a,i=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=kt?a*=10:i>=At?a*=5:i>=Ct&&(a*=2),e<t?-a:a}(t,e,n);switch((r=_n(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(mn(e)/3)))-mn(Math.abs(t)))}(i,o))||(r.precision=a),$n(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,mn(e)-mn(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=function(t){return Math.max(0,-mn(Math.abs(t)))}(i))||(r.precision=a-2*("%"===r.type))}return Cn(r)}function In(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,a,i,o,c=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=$t(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(a=Math.ceil(e-t+1));++c<a;)i[c]=(t+c)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(a=Math.ceil(t-e+1));++c<a;)i[c]=(t-c)/o;return r&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Dn(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,a=e(),i=0,o=a.length-1,c=a[i],s=a[o];return s<c&&(r=c,c=s,s=r,r=i,i=o,o=r),(r=$t(c,s,n))>0?r=$t(c=Math.floor(c/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=$t(c=Math.ceil(c*r)/r,s=Math.floor(s*r)/r,n)),r>0?(a[i]=Math.floor(c/r)*r,a[o]=Math.ceil(s/r)*r,e(a)):r<0&&(a[i]=Math.ceil(c*r)/r,a[o]=Math.floor(s*r)/r,e(a)),t},t}function Pn(){var t=vn(dn,dn);return t.copy=function(){return e=t,Pn().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown());var e},Ut.apply(t,arguments),In(t)}An=Nn({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Cn=An.format,$n=An.formatPrefix;var Un=new Date,jn=new Date;function Ln(t,e,n,r){function a(e){return t(e=new Date(+e)),e}return a.floor=a,a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,c=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return c;do{c.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return c},a.filter=function(n){return Ln(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(a.count=function(e,r){return Un.setTime(+e),jn.setTime(+r),t(Un),t(jn),Math.floor(n(Un,jn))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var zn=Ln(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});zn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ln(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):zn:null};var Fn=6e4,Bn=6048e5,Yn=(Ln(function(t){t.setTime(t-t.getMilliseconds())},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),Ln(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,e){t.setTime(+t+e*Fn)},function(t,e){return(e-t)/Fn},function(t){return t.getMinutes()}),Ln(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Fn)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),Ln(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Fn)/864e5},function(t){return t.getDate()-1}));function On(t){return Ln(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Fn)/Bn})}var qn=On(0),Hn=On(1),Gn=(On(2),On(3),On(4)),Vn=(On(5),On(6),Ln(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Ln(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Vn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ln(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};Ln(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Fn)},function(t,e){return(e-t)/Fn},function(t){return t.getUTCMinutes()}),Ln(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var Rn=Ln(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function Xn(t){return Ln(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Bn})}var Wn=Xn(0),Zn=Xn(1),Qn=(Xn(2),Xn(3),Xn(4)),Jn=(Xn(5),Xn(6),Ln(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Ln(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function Kn(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function tr(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function er(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Jn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ln(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var nr,rr,ar,ir={"-":"",_:" ",0:"0"},or=/^\s*\d+/,cr=/^%/,sr=/[\\^$*+?|[\]().{}]/g;function fr(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function lr(t){return t.replace(sr,"\\$&")}function ur(t){return new RegExp("^(?:"+t.map(lr).join("|")+")","i")}function dr(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function hr(t,e,n){var r=or.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function br(t,e,n){var r=or.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function pr(t,e,n){var r=or.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function gr(t,e,n){var r=or.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function vr(t,e,n){var r=or.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function yr(t,e,n){var r=or.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function mr(t,e,n){var r=or.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function xr(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function wr(t,e,n){var r=or.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function _r(t,e,n){var r=or.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Mr(t,e,n){var r=or.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Tr(t,e,n){var r=or.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Sr(t,e,n){var r=or.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function kr(t,e,n){var r=or.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Ar(t,e,n){var r=or.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Cr(t,e,n){var r=or.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function $r(t,e,n){var r=cr.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Er(t,e,n){var r=or.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Nr(t,e,n){var r=or.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function Dr(t,e){return fr(t.getDate(),e,2)}function Ir(t,e){return fr(t.getHours(),e,2)}function Pr(t,e){return fr(t.getHours()%12||12,e,2)}function Ur(t,e){return fr(1+Yn.count(Vn(t),t),e,3)}function jr(t,e){return fr(t.getMilliseconds(),e,3)}function Lr(t,e){return jr(t,e)+"000"}function zr(t,e){return fr(t.getMonth()+1,e,2)}function Fr(t,e){return fr(t.getMinutes(),e,2)}function Br(t,e){return fr(t.getSeconds(),e,2)}function Yr(t){var e=t.getDay();return 0===e?7:e}function Or(t,e){return fr(qn.count(Vn(t),t),e,2)}function qr(t,e){var n=t.getDay();return t=n>=4||0===n?Gn(t):Gn.ceil(t),fr(Gn.count(Vn(t),t)+(4===Vn(t).getDay()),e,2)}function Hr(t){return t.getDay()}function Gr(t,e){return fr(Hn.count(Vn(t),t),e,2)}function Vr(t,e){return fr(t.getFullYear()%100,e,2)}function Rr(t,e){return fr(t.getFullYear()%1e4,e,4)}function Xr(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+fr(e/60|0,"0",2)+fr(e%60,"0",2)}function Wr(t,e){return fr(t.getUTCDate(),e,2)}function Zr(t,e){return fr(t.getUTCHours(),e,2)}function Qr(t,e){return fr(t.getUTCHours()%12||12,e,2)}function Jr(t,e){return fr(1+Rn.count(Jn(t),t),e,3)}function Kr(t,e){return fr(t.getUTCMilliseconds(),e,3)}function ta(t,e){return Kr(t,e)+"000"}function ea(t,e){return fr(t.getUTCMonth()+1,e,2)}function na(t,e){return fr(t.getUTCMinutes(),e,2)}function ra(t,e){return fr(t.getUTCSeconds(),e,2)}function aa(t){var e=t.getUTCDay();return 0===e?7:e}function ia(t,e){return fr(Wn.count(Jn(t),t),e,2)}function oa(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Qn(t):Qn.ceil(t),fr(Qn.count(Jn(t),t)+(4===Jn(t).getUTCDay()),e,2)}function ca(t){return t.getUTCDay()}function sa(t,e){return fr(Zn.count(Jn(t),t),e,2)}function fa(t,e){return fr(t.getUTCFullYear()%100,e,2)}function la(t,e){return fr(t.getUTCFullYear()%1e4,e,4)}function ua(){return"+0000"}function da(){return"%"}function ha(t){return+t}function ba(t){return Math.floor(+t/1e3)}!function(t){nr=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,c=t.months,s=t.shortMonths,f=ur(a),l=dr(a),u=ur(i),d=dr(i),h=ur(o),b=dr(o),p=ur(c),g=dr(c),v=ur(s),y=dr(s),m={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:Dr,e:Dr,f:Lr,H:Ir,I:Pr,j:Ur,L:jr,m:zr,M:Fr,p:function(t){return a[+(t.getHours()>=12)]},Q:ha,s:ba,S:Br,u:Yr,U:Or,V:qr,w:Hr,W:Gr,x:null,X:null,y:Vr,Y:Rr,Z:Xr,"%":da},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:Wr,e:Wr,f:ta,H:Zr,I:Qr,j:Jr,L:Kr,m:ea,M:na,p:function(t){return a[+(t.getUTCHours()>=12)]},Q:ha,s:ba,S:ra,u:aa,U:ia,V:oa,w:ca,W:sa,x:null,X:null,y:fa,Y:la,Z:ua,"%":da},w={a:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=b[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return T(t,e,n,r)},d:_r,e:_r,f:Cr,H:Tr,I:Tr,j:Mr,L:Ar,m:wr,M:Sr,p:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.p=l[r[0].toLowerCase()],n+r[0].length):-1},Q:Er,s:Nr,S:kr,u:br,U:pr,V:gr,w:hr,W:vr,x:function(t,e,r){return T(t,n,e,r)},X:function(t,e,n){return T(t,r,e,n)},y:mr,Y:yr,Z:xr,"%":$r};function _(t,e){return function(n){var r,a,i,o=[],c=-1,s=0,f=t.length;for(n instanceof Date||(n=new Date(+n));++c<f;)37===t.charCodeAt(c)&&(o.push(t.slice(s,c)),null!=(a=ir[r=t.charAt(++c)])?r=t.charAt(++c):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),s=c+1);return o.push(t.slice(s,c)),o.join("")}}function M(t,e){return function(n){var r,a,i=er(1900);if(T(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=tr(er(i.y))).getUTCDay(),r=a>4||0===a?Zn.ceil(r):Zn(r),r=Rn.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=e(er(i.y))).getDay(),r=a>4||0===a?Hn.ceil(r):Hn(r),r=Yn.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?tr(er(i.y)).getUTCDay():e(er(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,tr(i)):e(i)}}function T(t,e,n,r){for(var a,i,o=0,c=e.length,s=n.length;o<c;){if(r>=s)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=w[a in ir?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return m.x=_(n,m),m.X=_(r,m),m.c=_(e,m),x.x=_(n,x),x.X=_(r,x),x.c=_(e,x),{format:function(t){var e=_(t+="",m);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",Kn);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,tr);return e.toString=function(){return t},e}}}(t),nr.format,nr.parse,rr=nr.utcFormat,ar=nr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||rr("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||ar("%Y-%m-%dT%H:%M:%S.%LZ");function pa(){var t=In(function(){var t,e,n,r,a,i=0,o=1,c=dn,s=!1;function f(e){return isNaN(e=+e)?a:c(0===n?.5:(e=(r(e)-t)*n,s?Math.max(0,Math.min(1,e)):e))}return f.domain=function(a){return arguments.length?(t=r(i=+a[0]),e=r(o=+a[1]),n=t===e?0:1/(e-t),f):[i,o]},f.clamp=function(t){return arguments.length?(s=!!t,f):s},f.interpolator=function(t){return arguments.length?(c=t,f):c},f.unknown=function(t){return arguments.length?(a=t,f):a},function(a){return r=a,t=a(i),e=a(o),n=t===e?0:1/(e-t),f}}()(dn));return t.copy=function(){return e=t,pa().domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown());var e},function(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}.apply(t,arguments)}function ga(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}function va(t){return He(t[t.length-1])}ga("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),ga("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),ga("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),ga("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),ga("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),ga("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),ga("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),ga("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),ga("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),va(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(ga)),va(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(ga));var ya=va(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(ga)),ma=va(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(ga)),xa=va(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(ga)),wa=va(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(ga)),_a=va(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(ga));va(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(ga)),va(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(ga));var Ma=va(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(ga));va(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(ga)),va(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(ga));var Ta=va(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(ga));va(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(ga));var Sa=va(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(ga));va(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(ga)),va(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(ga));var ka=va(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(ga));va(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(ga)),va(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(ga)),va(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(ga));var Aa=va(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(ga)),Ca=va(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(ga)),$a=va(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(ga)),Ea=va(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(ga)),Na=va(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(ga)),Da=va(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(ga));fn(je(300,.5,0),je(-240,.5,1));fn(je(-100,.75,.35),je(80,1.5,.8)),fn(je(260,.75,.35),je(80,1.5,.8)),je(),oe(),Math.PI,Math.PI;function Ia(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}Ia(ga("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));Ia(ga("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ia(ga("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ia(ga("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Pa(t=!0){const e=["rgb(100,118,120)","rgb(101,141,145)","rgb(103,126,82)","rgb(103,184,222)","rgb(108,110,88)","rgb(108,147,128)","rgb(119,144,182)","rgb(126,130,122)","rgb(133,173,186)","rgb(137,114,91)","rgb(145,170,157)","rgb(145,201,232)","rgb(147,105,66)","rgb(159,114,116)","rgb(159,188,191)","rgb(159,229,194)","rgb(163,163,171)","rgb(164,207,190)","rgb(172,108,130)","rgb(173,84,114)","rgb(174,195,222)","rgb(176,204,153)","rgb(179,180,150)","rgb(180,220,237)","rgb(183,202,121)","rgb(192,202,85)","rgb(193,191,193","rgb(195,97,136)","rgb(199,121,102)","rgb(207,202,76)","rgb(209,219,189)","rgb(213,251,255)","rgb(215,94,56)","rgb(218,114,126)","rgb(223,90,73)","rgb(224,247,217)","rgb(227,205,164)","rgb(228,168,185)","rgb(230,176,152)","rgb(232,212,175)","rgb(239,201,76)","rgb(240,124,108)","rgb(246,232,177)","rgb(249,228,173)","rgb(252,245,191)","rgb(255,188,103)","rgb(45,94,110)","rgb(51,153,204)","rgb(60,124,145)","rgb(62,87,145)","rgb(65,115,120)","rgb(89,216,229)","rgb(94,178,153)","rgb(95,124,134)"];return t?function(t){let e=t.length;for(;e>0;){let n=Math.floor(Math.random()*e),r=t[--e];t[e]=t[n],t[n]=r}return t}(e):e}function Ua(t,e="YlGnBu",n,r,a=!1){r=void 0===r?Nt(t):r,n=void 0===n?Pt(t):n;const i=pa(function(t){const e={BuGn:Ma,OrRd:Ta,PuBu:Sa,YlGnBu:ka,Blues:Aa,Oranges:Da,Greens:Ca,Purples:Ea,Reds:Na,Greys:$a,Grays:$a,RdBu:xa,RdGy:wa,PiYG:ya,PuOr:ma,RdYlBu:_a};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return a?i.domain([r,n]):i.domain([n,r]),i}class ja{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},a=12,i=10){this.margin=r,this.rootW=t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-i,id:"leftTree"},this.cell={w:void 0,h:a},this.topTreePanel={x:r.left+e,y:r.top,h:n-i,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function La(t,n,r,a,i,o="relative"){return function(t){if(0==e(`#${t}`).length){let e=`Input Error: DOM ID ${t} is not found.`;throw alert(e),e}}(t),void 0===i&&(i=`${t}-svg`),nt("#"+t).append("svg").attr("width",n).attr("height",r).attr("id",i).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}function za(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function Fa(t,e){var n,r,a,i,o,c=new qa(t),s=+t.value&&(c.value=t.value),f=[c];for(null==e&&(e=Ba);n=f.pop();)if(s&&(n.value=+n.data.value),(a=e(n.data))&&(o=a.length))for(n.children=new Array(o),i=o-1;i>=0;--i)f.push(r=n.children[i]=new qa(a[i])),r.parent=n,r.depth=n.depth+1;return c.eachBefore(Oa)}function Ba(t){return t.children}function Ya(t){t.data=t.data.data}function Oa(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function qa(t){this.data=t,this.depth=this.height=0,this.parent=null}qa.prototype=Fa.prototype={constructor:qa,count:function(){return this.eachAfter(za)},each:function(t){var e,n,r,a,i=this,o=[i];do{for(e=o.reverse(),o=[];i=e.pop();)if(t(i),n=i.children)for(r=0,a=n.length;r<a;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(t){for(var e,n,r,a=this,i=[a],o=[];a=i.pop();)if(o.push(a),e=a.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;a=o.pop();)t(a);return this},eachBefore:function(t){for(var e,n,r=this,a=[r];r=a.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)a.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,a=r&&r.length;--a>=0;)n+=r[a].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),a=null;for(t=n.pop(),e=r.pop();t===e;)a=t,t=n.pop(),e=r.pop();return a}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var a=r.length;t!==n;)r.splice(a,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return Fa(this).eachBefore(Ya)}};var Ha=Array.prototype.slice;function Ga(t){return t}var Va=1,Ra=2,Xa=3,Wa=4,Za=1e-6;function Qa(t){return"translate("+(t+.5)+",0)"}function Ja(t){return"translate(0,"+(t+.5)+")"}function Ka(){return!this.__axis}function ti(t,e){var n=[],r=null,a=null,i=6,o=6,c=3,s=t===Va||t===Wa?-1:1,f=t===Wa||t===Ra?"x":"y",l=t===Va||t===Xa?Qa:Ja;function u(u){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,h=null==a?e.tickFormat?e.tickFormat.apply(e,n):Ga:a,b=Math.max(i,0)+c,p=e.range(),g=+p[0]+.5,v=+p[p.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),m=u.selection?u.selection():u,x=m.selectAll(".domain").data([null]),w=m.selectAll(".tick").data(d,e).order(),_=w.exit(),M=w.enter().append("g").attr("class","tick"),T=w.select("line"),S=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(M),T=T.merge(M.append("line").attr("stroke","currentColor").attr(f+"2",s*i)),S=S.merge(M.append("text").attr("fill","currentColor").attr(f,s*b).attr("dy",t===Va?"0em":t===Xa?"0.71em":"0.32em")),u!==m&&(x=x.transition(u),w=w.transition(u),T=T.transition(u),S=S.transition(u),_=_.transition(u).attr("opacity",Za).attr("transform",function(t){return isFinite(t=y(t))?l(t):this.getAttribute("transform")}),M.attr("opacity",Za).attr("transform",function(t){var e=this.parentNode.__axis;return l(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),x.attr("d",t===Wa||t==Ra?o?"M"+s*o+","+g+"H0.5V"+v+"H"+s*o:"M0.5,"+g+"V"+v:o?"M"+g+","+s*o+"V0.5H"+v+"V"+s*o:"M"+g+",0.5H"+v),w.attr("opacity",1).attr("transform",function(t){return l(y(t))}),T.attr(f+"2",s*i),S.attr(f,s*b).text(h),m.filter(Ka).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Ra?"start":t===Wa?"end":"middle"),m.each(function(){this.__axis=y})}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=Ha.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:Ha.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(r=null==t?null:Ha.call(t),u):r&&r.slice()},u.tickFormat=function(t){return arguments.length?(a=t,u):a},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(c=+t,u):c},u}function ei(t){return ti(Xa,t)}function ni(t){return ti(Wa,t)}class ri{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=Fa(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),a=0;a<r.length;a++){var i=r[a];switch(i){case"(":var o={};n.branchset=[o],e.push(n),n=o;break;case",":o={},e[e.length-1].branchset.push(o),n=o;break;case")":n=e.pop();break;case":":break;default:var c=r[a-1];")"==c||"("==c||","==c?n.name=i:":"==c&&(n.length=parseFloat(i))}}return n}(t),t=>t.branchset).sum(t=>t.branchset?0:1).sort((t,e)=>t.value-e.value||t.data.length-e.data.length),this.leaves=this.root.leaves().sort((t,e)=>t.value-e.value||yt(t.data.length,e.data.length)),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce((t,e)=>t+e.y,0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{n(t),e(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.data.length?t.x-this.xScale(t.data.length):t.x).attr("y1",t=>t.y+this.yScale.bandwidth()/2).attr("y2",t=>t.y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);t.selectAll(".arm").data(a).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.x).attr("y1",t=>t.children[0].y+this.yScale.bandwidth()/2).attr("y2",t=>t.children[1].y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x).attr("cy",t=>t.y+this.yScale.bandwidth()/2).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call(ei(this.xScale).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort((t,e)=>t.height-e.height||yt(t.data.length,e.data.length))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce((t,e)=>t+e.x,0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{e(t),n(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.data.length?t.y-this.yScale(t.data.length):t.y).attr("x1",t=>t.x+this.xScale.bandwidth()/2).attr("x2",t=>t.x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);t.selectAll(".arm").data(a).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.y).attr("x1",t=>t.children[0].x+this.xScale.bandwidth()/2).attr("x2",t=>t.children[1].x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x+this.xScale.bandwidth()/2).attr("cy",t=>t.y).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").call(ni(this.yScale).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce((t,e)=>e.data.length?t+e.data.length:t,0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=Pn().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),this.xScale=Bt().domain(this.postorder.map(t=>t.data.name)).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),this.yScale=Bt().domain(this.postorder.map(t=>t.data.name)).range([0,this.height]).padding(.05)):this.yScale=Pn().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}var ai={value:function(){}};function ii(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new oi(r)}function oi(t){this._=t}function ci(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function si(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=ai,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}oi.prototype=ii.prototype={constructor:oi,on:function(t,e){var n,r,a=this._,i=(r=a,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,c=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<c;)if(n=(t=i[o]).type)a[n]=si(a[n],t.name,e);else if(null==e)for(n in a)a[n]=si(a[n],t.name,null);return this}for(;++o<c;)if((n=(t=i[o]).type)&&(n=ci(a[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new oi(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var fi,li,ui=0,di=0,hi=0,bi=1e3,pi=0,gi=0,vi=0,yi="object"==typeof performance&&performance.now?performance:Date,mi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function xi(){return gi||(mi(wi),gi=yi.now()+vi)}function wi(){gi=0}function _i(){this._call=this._time=this._next=null}function Mi(t,e,n){var r=new _i;return r.restart(t,e,n),r}function Ti(){gi=(pi=yi.now())+vi,ui=di=0;try{!function(){xi(),++ui;for(var t,e=fi;e;)(t=gi-e._time)>=0&&e._call.call(null,t),e=e._next;--ui}()}finally{ui=0,function(){var t,e,n=fi,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:fi=e);li=t,ki(r)}(),gi=0}}function Si(){var t=yi.now(),e=t-pi;e>bi&&(vi-=e,pi=t)}function ki(t){ui||(di&&(di=clearTimeout(di)),t-gi>24?(t<1/0&&(di=setTimeout(Ti,t-yi.now()-vi)),hi&&(hi=clearInterval(hi))):(hi||(pi=yi.now(),hi=setInterval(Si,bi)),ui=1,mi(Ti)))}function Ai(t,e,n){var r=new _i;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r}_i.prototype=Mi.prototype={constructor:_i,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?xi():+n)+(null==e?0:+e),this._next||li===this||(li?li._next=this:fi=this,li=this),this._call=t,this._time=n,ki()},stop:function(){this._call&&(this._call=null,this._time=1/0,ki())}};var Ci=ii("start","end","cancel","interrupt"),$i=[],Ei=0,Ni=1,Di=2,Ii=3,Pi=4,Ui=5,ji=6;function Li(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(s){var f,l,u,d;if(n.state!==Ni)return c();for(f in a)if((d=a[f]).name===n.name){if(d.state===Ii)return Ai(i);d.state===Pi?(d.state=ji,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete a[f]):+f<e&&(d.state=ji,d.timer.stop(),d.on.call("cancel",t,t.__data__,d.index,d.group),delete a[f])}if(Ai(function(){n.state===Ii&&(n.state=Pi,n.timer.restart(o,n.delay,n.time),o(s))}),n.state=Di,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Di){for(n.state=Ii,r=new Array(u=n.tween.length),f=0,l=-1;f<u;++f)(d=n.tween[f].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=d);r.length=l+1}}function o(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(c),n.state=Ui,1),i=-1,o=r.length;++i<o;)r[i].call(t,a);n.state===Ui&&(n.on.call("end",t,t.__data__,n.index,n.group),c())}function c(){for(var r in n.state=ji,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=Mi(function(t){n.state=Ni,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:a,on:Ci,tween:$i,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:Ei})}function zi(t,e){var n=Bi(t,e);if(n.state>Ei)throw new Error("too late; already scheduled");return n}function Fi(t,e){var n=Bi(t,e);if(n.state>Ii)throw new Error("too late; already running");return n}function Bi(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Yi(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>Di&&n.state<Ui,n.state=ji,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}function Oi(t,e,n){var r=t._id;return t.each(function(){var t=Fi(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Bi(t,r).value[e]}}function qi(t,e){var n;return("number"==typeof e?Ge:e instanceof ne?Oe:(n=ne(e))?(e=n,Oe):Xe)(t,e)}var Hi=et.prototype.constructor;function Gi(t){return function(){this.style.removeProperty(t)}}var Vi=0;function Ri(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Xi(){return++Vi}var Wi=et.prototype;Ri.prototype=function(t){return et().transition(t)}.prototype={constructor:Ri,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=x(t));for(var r=this._groups,a=r.length,i=new Array(a),o=0;o<a;++o)for(var c,s,f=r[o],l=f.length,u=i[o]=new Array(l),d=0;d<l;++d)(c=f[d])&&(s=t.call(c,c.__data__,d,f))&&("__data__"in c&&(s.__data__=c.__data__),u[d]=s,Li(u[d],e,n,d,u,Bi(c,n)));return new Ri(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=_(t));for(var r=this._groups,a=r.length,i=[],o=[],c=0;c<a;++c)for(var s,f=r[c],l=f.length,u=0;u<l;++u)if(s=f[u]){for(var d,h=t.call(s,s.__data__,u,f),b=Bi(s,n),p=0,g=h.length;p<g;++p)(d=h[p])&&Li(d,e,n,p,h,b);i.push(h),o.push(s)}return new Ri(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new Ri(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],l=n[c],u=f.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=f[h]||l[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new Ri(o,this._parents,this._name,this._id)},selection:function(){return new Hi(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Xi(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)if(o=c[f]){var l=Bi(o,e);Li(o,t,n,f,c,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Ri(r,this._parents,t,n)},call:Wi.call,nodes:Wi.nodes,node:Wi.node,size:Wi.size,empty:Wi.empty,each:Wi.each,on:function(t,e){var n=this._id;return arguments.length<2?Bi(this.node(),n).on.on(t):this.each(function(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?zi:Fi;return function(){var o=i(this,t),c=o.on;c!==r&&(a=(r=c).copy()).on(e,n),o.on=a}}(n,t,e))},attr:function(t,e){var n=v(t),r="transform"===n?cn:qi;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,a,i;return function(){var o,c,s=n(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===(c=s+"")?null:o===r&&c===a?i:(a=c,i=e(r=o,s));this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,a,i;return function(){var o,c,s=n(this);if(null!=s)return(o=this.getAttribute(t))===(c=s+"")?null:o===r&&c===a?i:(a=c,i=e(r=o,s));this.removeAttribute(t)}})(n,r,Oi(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===i?null:o===r?a:a=e(r=o,n)}}:function(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttribute(t);return o===i?null:o===r?a:a=e(r=o,n)}})(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=v(t);return this.tween(n,(r.local?function(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,a)),n}return a._value=e,a}:function(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,a)),n}return a._value=e,a})(r,e))},style:function(t,e,n){var r="transform"==(t+="")?on:qi;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=D(this,t),o=(this.style.removeProperty(t),D(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,Gi(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,a,i;return function(){var o=D(this,t),c=n(this),s=c+"";return null==c&&(this.style.removeProperty(t),s=c=D(this,t)),o===s?null:o===r&&s===a?i:(a=s,i=e(r=o,c))}}(t,r,Oi(this,"style."+t,e))).each(function(t,e){var n,r,a,i,o="style."+e,c="end."+o;return function(){var s=Fi(this,t),f=s.on,l=null==s.value[o]?i||(i=Gi(e)):void 0;f===n&&a===l||(r=(n=f).copy()).on(c,a=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,a,i=n+"";return function(){var o=D(this,t);return o===i?null:o===r?a:a=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,a;function i(){var i=e.apply(this,arguments);return i!==a&&(r=(a=i)&&function(t,e,n){return function(r){this.style.setProperty(t,e(r),n)}}(t,i,n)),r}return i._value=e,i}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Oi(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=Bi(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var a=Fi(this,t),i=a.tween;if(i!==n)for(var o=0,c=(r=n=i).length;o<c;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}:function(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=Fi(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var c={name:e,value:n},s=0,f=a.length;s<f;++s)if(a[s].name===e){a[s]=c;break}s===f&&a.push(c)}i.tween=a}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){zi(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){zi(this,t).delay=e}})(e,t)):Bi(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Fi(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Fi(this,t).duration=e}})(e,t)):Bi(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Fi(this,t).ease=e}}(e,t)):Bi(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,a=n.size();return new Promise(function(i,o){var c={value:o},s={value:function(){0==--a&&i()}};n.each(function(){var n=Fi(this,r),a=n.on;a!==t&&((e=(t=a).copy())._.cancel.push(c),e._.interrupt.push(c),e._.end.push(s)),n.on=e})})}};Math.PI,Math.PI;var Zi={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Qi(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Zi.time=xi(),Zi;return n}et.prototype.interrupt=function(t){return this.each(function(){Yi(this,t)})},et.prototype.transition=function(t){var e,n;t instanceof Ri?(e=t._id,t=t._name):(e=Xi(),(n=Zi).time=xi(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)(o=c[f])&&Li(o,t,e,f,c,n||Qi(o,e));return new Ri(r,this._parents,t,e)};class Ji{constructor(t,n,r=!1){e(`#${t}`).show();const a=r?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=e("<div/>").addClass(a).appendTo(`#${t}`),this.buttons={},this.tooltip=n}createDownloadSvgButton(t,e,n,r,a="fa-download"){this.createButton(t,a);nt(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);nt(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,n="fa-download"){const r=e("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return e("<i/>").addClass(`fa ${n}`).appendTo(r),this.buttons[t]=r,r}attachTooltip(t){this.tooltip=t}downloadSvg(t,r,a){let i=e(e(e(`${"#"+t}`))[0]),o=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),c=function(t){for(var n="",r=document.styleSheets,a=0;a<r.length;a++)try{if(null==r[a].cssRules)continue;for(var i=r[a].cssRules,o=0;o<i.length;o++){var c=i[o];if(void 0!==c.style){var s,f=void 0===c.selectorText?c.selectorText:c.selectorText.replace(`#${t[0].id} `,"");try{s=e(t).find(f)}catch(t){s=[]}s.length>0&&(n+=c.selectorText+" { "+c.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var l=document.createElement("style");return l.setAttribute("type","text/css"),l.innerHTML="<![CDATA[\n"+n+"\n]]>",l}(i.get());o.prepend(c),e("#"+a).html("").hide();let s=e(`#${a}`).append(o).html(),f=new Blob([s],{type:"image/svg+xml"});n(f,r),e(`#${a}`).html("").hide()}}class Ki{constructor(t,e=!1,n=30,r=-40,a=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=a}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),nt("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){nt("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=R.pageX,e=R.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;nt("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){nt("#"+this.id).html(t)}}class to{constructor(t,n=!0,r=10,a="YlGnBu",i=2,o="heatmapTooltip"){this.data=t,this.useLog=n,this.logBase=r,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=i,this.colorScheme=a,0==e(`#${o}`).length&&e("<div/>").attr("id",o).appendTo(e("body")),this.tooltip=new Ki(o),nt(`#${o}`).classed("heatmap-tooltip",!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new Ji(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){!function(t,e,n,r,a,i=10,o=10,c={h:10,w:40},s="h",f=!1){let l=[];if(f){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;l=(l=t.map(t=>t*e)).concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;l=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(l).enter().append("g").classed("legend",!0);"h"===s?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",c.h).attr("transform",`translate(${r.x}, ${r.y})`),u.append("rect").attr("x",(t,e)=>c.w*e).attr("y",5).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>a?Math.pow(o,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>c.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+c.h*l.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>c.h*e).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>c.h*e+c.h/2))}(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,r={w:1e3,h:1e3},a=30){this._setXScale(r.w,e),this._setYScale(r.h,n),this.draw(t,r,a)}draw(t,e={w:1e3,h:600},n=30,r=!0,a=null){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale();const i=t.selectAll(".exp-map-xlabel").data(this.xList),o=null==a?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+a;i.attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`}),i.enter().append("text").attr("class",(t,e)=>`exp-map-xlabel x${e}`).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","default").attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`}).merge(i).text(t=>t),i.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>`exp-map-ylabel y${e}`).attr("text-anchor","start").style("cursor","default").on("click",t=>{alert(`${t} is clicked. To be implemented`)}).on("mouseover",function(t){nt(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(t){nt(this).classed("normal",!0).classed("highlighted",!1)});const c=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);c.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`);const s=this;c.enter().append("rect").attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",function(e){const n=nt(this);s.cellMouseover(e,t,n)}).on("mouseout",function(t){nt(this);s.cellMouseout()}).merge(c).style("fill",t=>r&&0==t.value?"#DDDDDD":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value)),c.exit().remove()}cellMouseout(t){it("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const r=n.attr("row"),a=n.attr("col");e.selectAll(".exp-map-xlabel").filter(`.${r}`).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter(`.${a}`).classed("highlighted",!0),n.classed("highlighted",!0);const i=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${i}`)}_setXScale(t,e){this.xList=void 0!==e?e:st().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=Bt().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:st().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=Bt().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(){let t=this.useLog,e=this.data.map(e=>t?this._log(e.value):e.value);this.colorScale=Ua(e,this.colorScheme,0)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class eo{constructor(t,e,n,r="YlGnBu",a=2,i=new ja,o="dmapTooltip",c=!0,s=10,f=""){this.config=i.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new ri(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new ri(this.data.rowTree,"h"),heatmap:new to(this.data.heatmap,c,s,r,a,o)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=f,this.toolbar=void 0,this.tooltip=this.objects.heatmap.tooltip}createToolbar(t,e){return this.toolbar=new Ji(t,e),this.toolbar}render(t,e,n=!0,r=!0,a="top",i=5){this._updateConfig(a),this.visualComponents.svg=La(t,this.config.w,this.config.h,this.config.margin,e);let o=void 0,c=void 0;n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),o=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),c=this.objects.rowTree.yScale.domain()),""!=this.title&&(console.log(this.title),nt(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title)),this._renderHeatmap(this.objects.heatmap,o,c,i)}_renderTree(t,e,n){let r=this.visualComponents.svg;const a="row"==t?".exp-map-ylabel":".exp-map-xlabel",i=(this.visualComponents.tooltip,r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`));e.draw(i,n.w,n.h);return i.selectAll(".dendrogram-node").on("mouseover",function(t){nt(this).attr("r",6).attr("fill","red");let e=t.leaves().map(t=>t.data.name);r.selectAll(a).filter(t=>e.includes(t)).classed("highlighted",!0),r.selectAll(".leaf-color").filter(t=>e.includes(t)).classed("highlighted",!0)}).on("mouseout",function(){nt(this).attr("r",2).attr("fill","#333"),r.selectAll(a).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)}),i}_renderHeatmap(t,e,n,r=5){let a=this.visualComponents.svg;const i=this.config.panels.main,o=a.append("g").attr("id",i.id).attr("transform",`translate(${i.x}, ${i.y})`);t.redraw(o,e,n,{w:i.w,h:i.h}),t.drawColorLegend(a,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}var no=Math.PI,ro=2*no,ao=ro-1e-6;function io(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function oo(){return new io}function co(t){return function(){return t}}io.prototype=oo.prototype={constructor:io,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,c=n-t,s=r-e,f=i-t,l=o-e,u=f*f+l*l;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(l*c-s*f)>1e-6&&a){var d=n-i,h=r-o,b=c*c+s*s,p=d*d+h*h,g=Math.sqrt(b),v=Math.sqrt(u),y=a*Math.tan((no-Math.acos((b+u-p)/(2*g*v)))/2),m=y/v,x=y/g;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*f)+","+(e+m*l)),this._+="A"+a+","+a+",0,0,"+ +(l*d>f*h)+","+(this._x1=t+x*c)+","+(this._y1=e+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e;var o=(n=+n)*Math.cos(r),c=n*Math.sin(r),s=t+o,f=e+c,l=1^i,u=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+f:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+s+","+f),n&&(u<0&&(u=u%ro+ro),u>ao?this._+="A"+n+","+n+",0,1,"+l+","+(t-o)+","+(e-c)+"A"+n+","+n+",0,1,"+l+","+(this._x1=s)+","+(this._y1=f):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=no)+","+l+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};Math.PI;function so(t){this._context=t}function fo(t){return new so(t)}function lo(t){return t[0]}function uo(t){return t[1]}function ho(){var t=lo,e=null,n=co(0),r=uo,a=co(!0),i=null,o=fo,c=null;function s(s){var f,l,u,d,h,b=s.length,p=!1,g=new Array(b),v=new Array(b);for(null==i&&(c=o(h=oo())),f=0;f<=b;++f){if(!(f<b&&a(d=s[f],f,s))===p)if(p=!p)l=f,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),u=f-1;u>=l;--u)c.point(g[u],v[u]);c.lineEnd(),c.areaEnd()}p&&(g[f]=+t(d,f,s),v[f]=+n(d,f,s),c.point(e?+e(d,f,s):g[f],r?+r(d,f,s):v[f]))}if(h)return c=null,h+""||null}function f(){return function(){var t=lo,e=uo,n=co(!0),r=null,a=fo,i=null;function o(o){var c,s,f,l=o.length,u=!1;for(null==r&&(i=a(f=oo())),c=0;c<=l;++c)!(c<l&&n(s=o[c],c,o))===u&&((u=!u)?i.lineStart():i.lineEnd()),u&&i.point(+t(s,c,o),+e(s,c,o));if(f)return i=null,f+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:co(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:co(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:co(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o}().defined(a).curve(o).context(i)}return s.x=function(n){return arguments.length?(t="function"==typeof n?n:co(+n),e=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:co(+e),s):t},s.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:co(+t),s):e},s.y=function(t){return arguments.length?(n="function"==typeof t?t:co(+t),r=null,s):n},s.y0=function(t){return arguments.length?(n="function"==typeof t?t:co(+t),s):n},s.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:co(+t),s):r},s.lineX0=s.lineY0=function(){return f().x(t).y(n)},s.lineY1=function(){return f().x(t).y(r)},s.lineX1=function(){return f().x(e).y(n)},s.defined=function(t){return arguments.length?(a="function"==typeof t?t:co(!!t),s):a},s.curve=function(t){return arguments.length?(o=t,null!=i&&(c=o(i)),s):o},s.context=function(t){return arguments.length?(null==t?i=c=null:c=o(i=t),s):i},s}function bo(t){return t<0?-1:1}function po(t,e,n){var r=t._x1-t._x0,a=e-t._x1,i=(t._y1-t._y0)/(r||a<0&&-0),o=(n-t._y1)/(a||r<0&&-0),c=(i*a+o*r)/(r+a);return(bo(i)+bo(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(c))||0}function go(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function vo(t,e,n){var r=t._x0,a=t._y0,i=t._x1,o=t._y1,c=(i-r)/3;t._context.bezierCurveTo(r+c,a+c*e,i-c,o-c*n,i,o)}function yo(t){this._context=t}function mo(t){this._context=t}function xo(){R.preventDefault(),R.stopImmediatePropagation()}function wo(t){return function(){return t}}function _o(t,e,n){this.target=t,this.type=e,this.selection=n}function Mo(){R.stopImmediatePropagation()}function To(){R.preventDefault(),R.stopImmediatePropagation()}so.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},yo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:vo(this,this._t0,go(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,vo(this,go(this,n=po(this,t,e)),n);break;default:vo(this,this._t0,n=po(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new mo(t)}.prototype=Object.create(yo.prototype)).point=function(t,e){yo.prototype.point.call(this,e,t)},mo.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,a,i){this._context.bezierCurveTo(e,t,r,n,i,a)}};var So={name:"drag"},ko={name:"space"},Ao={name:"handle"},Co={name:"center"},$o={name:"x",handles:["e","w"].map(Lo),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Eo={name:"y",handles:["n","s"].map(Lo),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},No={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Lo),input:function(t){return t},output:function(t){return t}},Do={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Io={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Po={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Uo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},jo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Lo(t){return{type:t}}function zo(){return!R.button}function Fo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Bo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Yo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Oo(){return function(t){var e,n=Fo,r=zo,a=ii(o,"start","brush","end"),i=6;function o(e){var n=e.property("__brush",u).selectAll(".overlay").data([Lo("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Do.overlay).merge(n).each(function(){var t=Bo(this).extent;nt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([Lo("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Do.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Do[t.type]}),e.each(c).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function c(){var t=nt(this),e=Bo(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-i/2:e[0][0]-i/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-i/2:e[0][1]-i/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+i:i}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+i:i})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,e){return t.__brush.emitter||new f(t,e)}function f(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function l(){if(R.touches){if(R.changedTouches.length<R.touches.length)return To()}else if(e)return;if(r.apply(this,arguments)){var n,a,i,o,f,l,u,d,h,b,p,g,v,y=this,m=R.target.__data__.type,x="selection"===(R.metaKey?m="overlay":m)?So:R.altKey?Co:Ao,w=t===Eo?null:Uo[m],_=t===$o?null:jo[m],M=Bo(y),T=M.extent,S=M.selection,k=T[0][0],A=T[0][1],C=T[1][0],$=T[1][1],E=w&&_&&R.shiftKey,N=at(y),D=N,I=s(y,arguments).beforestart();"overlay"===m?M.selection=S=[[n=t===Eo?k:N[0],i=t===$o?A:N[1]],[f=t===Eo?C:n,u=t===$o?$:i]]:(n=S[0][0],i=S[0][1],f=S[1][0],u=S[1][1]),a=n,o=i,l=f,d=u;var P=nt(y).attr("pointer-events","none"),U=P.selectAll(".overlay").attr("cursor",Do[m]);if(R.touches)P.on("touchmove.brush",L,!0).on("touchend.brush touchcancel.brush",F,!0);else{var j=nt(R.view).on("keydown.brush",function(){switch(R.keyCode){case 16:E=w&&_;break;case 18:x===Ao&&(w&&(f=l-h*w,n=a+h*w),_&&(u=d-b*_,i=o+b*_),x=Co,z());break;case 32:x!==Ao&&x!==Co||(w<0?f=l-h:w>0&&(n=a-h),_<0?u=d-b:_>0&&(i=o-b),x=ko,U.attr("cursor",Do.selection),z());break;default:return}To()},!0).on("keyup.brush",function(){switch(R.keyCode){case 16:E&&(g=v=E=!1,z());break;case 18:x===Co&&(w<0?f=l:w>0&&(n=a),_<0?u=d:_>0&&(i=o),x=Ao,z());break;case 32:x===ko&&(R.altKey?(w&&(f=l-h*w,n=a+h*w),_&&(u=d-b*_,i=o+b*_),x=Co):(w<0?f=l:w>0&&(n=a),_<0?u=d:_>0&&(i=o),x=Ao),U.attr("cursor",Do[m]),z());break;default:return}To()},!0).on("mousemove.brush",L,!0).on("mouseup.brush",F,!0);!function(t){var e=t.document.documentElement,n=nt(t).on("dragstart.drag",xo,!0);"onselectstart"in e?n.on("selectstart.drag",xo,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(R.view)}Mo(),Yi(y),c.call(y),I.start()}function L(){var t=at(y);!E||g||v||(Math.abs(t[0]-D[0])>Math.abs(t[1]-D[1])?v=!0:g=!0),D=t,p=!0,To(),z()}function z(){var t;switch(h=D[0]-N[0],b=D[1]-N[1],x){case ko:case So:w&&(h=Math.max(k-n,Math.min(C-f,h)),a=n+h,l=f+h),_&&(b=Math.max(A-i,Math.min($-u,b)),o=i+b,d=u+b);break;case Ao:w<0?(h=Math.max(k-n,Math.min(C-n,h)),a=n+h,l=f):w>0&&(h=Math.max(k-f,Math.min(C-f,h)),a=n,l=f+h),_<0?(b=Math.max(A-i,Math.min($-i,b)),o=i+b,d=u):_>0&&(b=Math.max(A-u,Math.min($-u,b)),o=i,d=u+b);break;case Co:w&&(a=Math.max(k,Math.min(C,n-h*w)),l=Math.max(k,Math.min(C,f+h*w))),_&&(o=Math.max(A,Math.min($,i-b*_)),d=Math.max(A,Math.min($,u+b*_)))}l<a&&(w*=-1,t=n,n=f,f=t,t=a,a=l,l=t,m in Io&&U.attr("cursor",Do[m=Io[m]])),d<o&&(_*=-1,t=i,i=u,u=t,t=o,o=d,d=t,m in Po&&U.attr("cursor",Do[m=Po[m]])),M.selection&&(S=M.selection),g&&(a=S[0][0],l=S[1][0]),v&&(o=S[0][1],d=S[1][1]),S[0][0]===a&&S[0][1]===o&&S[1][0]===l&&S[1][1]===d||(M.selection=[[a,o],[l,d]],c.call(y),I.brush())}function F(){if(Mo(),R.touches){if(R.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),P.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,e){var n=t.document.documentElement,r=nt(t).on("dragstart.drag",null);e&&(r.on("click.drag",xo,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(R.view,p),j.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);P.attr("pointer-events","all"),U.attr("cursor",Do.overlay),M.selection&&(S=M.selection),Yo(S)&&(M.selection=null,c.call(y)),I.end()}}function u(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return o.move=function(e,n){e.selection?e.on("start.brush",function(){s(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){s(this,arguments).end()}).tween("brush",function(){var e=this,r=e.__brush,a=s(e,arguments),i=r.selection,o=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),f=We(i,o);function l(t){r.selection=1===t&&Yo(o)?null:f(t),c.call(e),a.brush()}return i&&o?l:l(1)}):e.each(function(){var e=arguments,r=this.__brush,a=t.input("function"==typeof n?n.apply(this,e):n,r.extent),i=s(this,e).beforestart();Yi(this),r.selection=null==a||Yo(a)?null:a,c.call(this),i.start().brush().end()})},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,r){var a=R;t.sourceEvent=R,R=t;try{e.apply(n,r)}finally{R=a}}(new _o(o,e,t.output(this.state.selection)),a.apply,a,[e,this.that,this.args])}},o.extent=function(t){return arguments.length?(n="function"==typeof t?t:wo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),o):n},o.filter=function(t){return arguments.length?(r="function"==typeof t?t:wo(!!t),o):r},o.handleSize=function(t){return arguments.length?(i=+t,o):i},o.on=function(){var t=a.on.apply(a,arguments);return t===a?o:t},o}(No)}var qo=function t(e){function n(t,n){var r,a;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*e()-1,i=2*e()-1,a=r*r+i*i}while(!a||a>1);return t+n*i*Math.sqrt(-2*Math.log(a)/a)}}return n.source=t,n}(function(){return Math.random()});const Ho={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},Go={nrd:function(t){let e=(Et(t,.75)-Et(t,.25))/1.34;return 1.06*Math.min(Mt(t),e)*Math.pow(t.length,-.2)}};class Vo{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0}render(t,e=500,n=357,r=.05,a,i=[-3,3],o="Y axis",c=!0,s=30,f=!0,l=0,u=!1,d=!1,h=!1,b=!1,p=!1,g=!1,v=0){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,e,n,r,a,i,o,c,s,f,l,u,d,h,b,p,g)}),this.updateYScale=function(i,o){t.selectAll("*").remove(),void 0===o&&(o=[]),this.render(t,e,n,r,a,[],i,c,s,f,l,u,d,h,b,p,g)},this.updateXScale=function(a){void 0===a&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,e,n,r,a,[],o,c,s,f,l,u,d,h,b,p,g)},void 0===i||0==i.length){let t=[];this.data.forEach(e=>t=t.concat(e.values)),i=Tt(t)}this.groups=st().key(t=>t.group).entries(this.data),this.scale={x:Bt().rangeRound([0,e]).domain(a||this.groups.map(t=>t.key)).paddingInner(r),subx:Bt(),y:Pn().rangeRound([n,0]).domain(i),z:Pn()},this.groups.forEach(e=>{let r=e.key,a=e.values,o=this.groupInfo[r];if(e.index=this.scale.x.domain().indexOf(r),void 0!==o){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(o[t])<=parseFloat(o.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,e)=>{return`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`}).text(t=>`${t}: ${parseFloat(parseFloat(o[t]).toPrecision(3)).toExponential()}`)}p&&a.sort((t,e)=>t.label<e.label?-1:t.label>e.label?1:0),this.scale.subx.domain(a.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),a.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(yt),this._drawViolin(t,n,u,e.index,g,v))});var c=18;if(b){const e=Bt().domain(a.map(t=>null==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+c})`).call(ei(e))}if(f){c=5;const e=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+c})`).call(ei(this.scale.subx));l>0&&e.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${l}, 2, 10)`)}});let y=f?55:0;if(this.xAxis=c?ei(this.scale.x):ei(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+y})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${s}, -10, 10)`),y=5,this.yAxis=ni(this.scale.y).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${y}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*y+nt(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(o),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),d&&this._addGroupDivider(t),h){const e=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");e.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=e.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;n.append("rect").attr("x",(t,e)=>5+60*e+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),n.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,e)=>17+60*e+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${r})`).text(e)}createTooltip(t){return 0==e(`#${t}`).length&&e("<div/>").attr("id",t).appendTo(e("body")),this.tooltip=new Ki(t),nt(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return this.toolbar=new Ji(t,e),this.toolbar}addBrush(t){const e=Oo();e.on("end",()=>{this.zoom(t,e)}),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,r=R.selection;if(void 0===e)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,e)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),a=Math.floor(r[1][0]/this.scale.x.bandwidth());return e>=n&&e<=a}));const n=Math.floor(this.scale.y.invert(r[1][1])),a=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,a]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout(function(){n=null},350);this.reset()}let a=t.transition().duration(750);t.select(".axis--x").transition(a).call(this.xAxis),t.select(".axis--y").transition(a).call(this.yAxis),this.groups.forEach((e,n)=>{let r=e.key,i=e.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=t.select(`#violin${e.index}-${n.label}`);i.select(".violin").transition(a).attr("d",ho().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const o=Et(n.values,.25),c=Et(n.values,.75);i.select(".violin-ir").transition(a).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(c)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(c)-this.scale.y(o)));const s=It(n.values);i.select(".violin-median").transition(a).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(s)).attr("y2",this.scale.y(s))})})}_drawViolin(t,e,n,r,a,i){let o=function(t,e,n){return function(r){return e.map(e=>[e,Dt(r,r=>t((e-r)/n))/n])}}(Ho.gaussian,this.scale.y.ticks(100),Go.nrd(e.values));const c=Tt(e.values),s=o(e.values).filter(t=>t[0]>=c[0]&&t[0]<=c[1]),f=t.append("g").attr("id",`violin${r}-${e.label}`).attr("class","violin-g").datum(e);if(e.values.length>=i&&s.length&&this._validVertices(s)){let i=Nt(s,t=>Math.abs(t[1]));this.scale.z.domain([-i,i]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);let o=ho().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const c=f.append("path").datum(s).attr("d",o).classed("violin",!0).style("fill",()=>void 0!==e.color?e.color:r%2==0?"#90c1c1":"#94a8b8"),l=Et(e.values,.25),u=Et(e.values,.75),d=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(u-l),r=Nt(e.values.filter(t=>t<=u+1.5*n)),a=Pt(e.values.filter(t=>t>=l-1.5*n));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(a)).style("stroke","#fff")}f.append("rect").attr("x",this.scale.z(-d)).attr("y",this.scale.y(u)).attr("width",Math.abs(this.scale.z(-d)-this.scale.z(d))).attr("height",Math.abs(this.scale.y(u)-this.scale.y(l))).attr("class","violin-ir");const h=It(e.values);if(f.append("line").attr("x1",this.scale.z(-d)).attr("x2",this.scale.z(d)).attr("y1",this.scale.y(h)).attr("y2",this.scale.y(h)).attr("class","violin-median"),a){let t=qo(0,d/2);const n=Math.abs(u-l),r=Nt(e.values.filter(t=>t<=u+1.5*n)),a=Pt(e.values.filter(t=>t>=l-1.5*n)),i=e.values.filter(t=>t<a||t>r);f.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(t())).attr("cy",t=>this.scale.y(t)).attr("r",2)}f.on("mouseover",()=>{c.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+h.toPrecision(4)+"<br/>")}),f.on("mouseout",()=>{c.classed("highlighted",!1)})}else if(i){let t=Nt(e.values,t=>Math.abs(t));this.scale.z.domain([-t,t]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const n=this.scale.z.domain()[1]/3;let r=qo(0,n/2);f.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",()=>this.scale.z(r())).attr("cy",t=>this.scale.y(t)).attr("r",2)}}_sanityCheck(t){const e=["group","label","values"];t.forEach(t=>{e.forEach(e=>{if(void 0===t[e])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const e=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==e.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+n/2:0;t.selectAll(".vline").data(e).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,n)=>n!=e.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,e)=>t.concat(e),[]).filter(t=>isNaN(t)).length}}function Ro(t,n=pt().tissue){!function(t,n=pt().tissue){b(n).then(function(n){let r=gt(n);r.forEach(t=>{t.id=t.tissueSiteDetailId,t.text=t.tissueSiteDetail}),r.sort((t,e)=>t.tissueSiteDetail<e.tissueSiteDetail?-1:t.tissueSiteDetail>e.tissueSiteDetail?1:0),e(`#${t}`).select2({placeholder:"Select a data set",data:r})}).catch(function(t){console.error(t)})}(t,n)}function Xo(t,e,n,r=pt(),a=!0){const i=a?r.topInTissueFiltered:r.topInTissue,o=0==$("#filterInfo").length?$("<div/>").attr("id","filterInfo").appendTo("#messageBox"):$("#filterInfo");a?o.html("Mitochondrial genes are excluded.<br/>"):o.html("Mitochondrial genes are included.<br/>"),b(i+t).then(function(i){const o="topExpressedGene";if(!i.hasOwnProperty(o))throw console.error(i),"Parse Error: required json attribute is missing: "+o;const c=i[o].map(t=>{if(!t.hasOwnProperty("gencodeId"))throw console.error(t),"Parse Error: required json attribute is missing: gencodeId";return t.gencodeId});Zo(e,n,c,void 0,r,a,function(){Qo(t)},t)}).catch(function(t){console.error(t)})}function Wo(t,n,r,a,i,o=pt(),c){b(o.tissueSites).then(function(s){let f=function(t,e=!1){const n=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"],r="tissueSiteDetail";if(!t.hasOwnProperty(r))throw"Parsing Error: required json attribute is missing: "+r;let a=t[r];["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach(t=>{if(!a[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`});let i=(a=!1===e?a:a.filter(t=>!n.includes(t.tissueSiteDetailId))).reduce((t,e)=>{let n=e.tissueSite,r={id:e.tissueSiteDetailId,name:e.tissueSiteDetail};return t.hasOwnProperty(n)||(t[n]=[]),t[n].push(r),t},{});return Object.keys(i).forEach(t=>{if(1===i[t].length){let e=i[t][0];delete i[t],i[e.name]=[e]}}),i}(s,!1);!function(t,n,r=!1,a=!1,i=4){const o="tissue-group-main-level";nt(`#${n}`).selectAll("*").remove();const c=e("<div/>").attr("class","col-xs-12 col-md-12").appendTo(e(`#${n}`));r?e(`<label class=${o}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(c):e(`<label class=${o}>`+'<input type="radio" name="allTissues" value="all"> All </label> '+`<label class=${o}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(c),e('input[name="allTissues"]').change(function(){switch(e(this).val()){case"all":e(".tissueGroup").prop("checked",!0),e(".tissueSubGroup").prop("checked",!0);break;case"reset":e(".tissueGroup").prop("checked",!1),e(".tissueSubGroup").prop("checked",!1)}});let s=Object.keys(t).sort((t,e)=>"Brain"==t?-1:"Brain"==e?1:t<e?-1:t>e?1:void 0),f=Object.keys(t).reduce((e,n)=>t[n].length>1?e+1+t[n].length:e+t[n].length,0),l=Math.floor(f/i),u=f%i,d=Math.floor(12/i);const h=St(0,i).map(t=>e(`<div id="section${t}" class="col-xs-12 col-md-${d}">`).appendTo(e(`#${n}`)));let b=0,p=0;s.forEach(n=>{let r=t[n];const a=n.replace(/ /g,"_");let i=t[n].length;i=1==i?i:i+1,0!=b&&i+b>l+u&&(b=0,p+=1),b+=i;let c=h[p];e(`<label class=${o}>`+`<input type="checkbox" id="${a}" class="tissueGroup"> `+`<span>${n}</span>`+"</label><br/>").appendTo(c),r.length>1&&r.sort((t,e)=>t.id>e.id?1:t.id<e.id?-1:0).forEach(function(t,n){let a=e("<label class=tissue-group-sub-level>"+`<input type="checkbox" id="${t.id}" class="tissueSubGroup"> `+`<span>${t.name}</span>`+"</label><br/>").appendTo(c);n==r.length-1&&a.addClass("last-site"),a.click(function(){e('input[name="allTissues"]').prop("checked",!1)})}),e("#"+a).click(function(){e('input[name="allTissues"]').prop("checked",!1),e("#"+a).is(":checked")?r.forEach(function(t){"id"!=t.id&&e("#"+t.id).prop("checked",!0)}):r.forEach(function(t){"id"!=t.id&&e("#"+t.id).prop("checked",!1)})})}),a&&(e('input[name="allTissues"][value="all"]').prop("checked",!0),e(".tissueGroup").prop("checked",!0),e(".tissueSubGroup").prop("checked",!0))}(f,n),$(`#${r}`).click(function(){void 0!==c&&c(),$(`#${t}`).removeClass("show"),$(`#${t}`).removeClass("in");let r=$("#genes").val().replace(/ /g,"").toUpperCase().split(",").filter(t=>""!=t);if(0==r.length)throw alert("Input Error: At least one gene must be provided."),"Gene input error";let s=function(t,n,r=!1){let a=[];return e(`#${n}`).find(":input").each(function(){if(e(this).is(":checked")){const n=e(this).attr("id");if(e(this).hasClass("tissueGroup")){let e=n.replace(/_/g," ");1==t[e].length&&(r?a.push(t[e][0].name):a.push(t[e][0].id))}else r?a.push(e(e(this).siblings()[0]).text()):a.push(n)}}),a.filter(t=>void 0!==t)}(f,n);if(0==s.length)throw alert("Input Error: At least one tissue must be selected."),"Tissue input error";Zo(a,i,r,s,o)})}).catch(function(t){console.error(t)})}function Zo(t,e,n,r,a=pt(),i,o,c){$("#spinner").show(),$(`#${t}`).empty(),$(`#${e}`).empty();const s=$("<div/><br/>").attr("class","col-xs-12 col-md-12").css("color","firebrick").appendTo(`#${t}`);let f="";n.length>50&&(f="Warning: Too many genes. Input list truncated to the first 50. <br/>",n=n.slice(0,50)),Promise.all([b(a.tissue),b(a.geneId+n.join(","))]).then(function(l){const u=gt(l[0]),d=function(t,e=!1,n=null){if(!t.hasOwnProperty("gene"))throw"Parsing Error: attribute gene doesn't exist.";if(0===t.gene.length)throw alert("No gene is found"),"Fatal Error: gene(s) not found";if(e){if(null===n)throw"Please provide a gene ID for search results validation";if(t.gene.length>1){let e=t.gene.filter(t=>t.geneSymbolUpper===n.toUpperCase()||t.gencodeId===n.toUpperCase());if(e.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";if(0===e.length)throw alert("No gene is found with "+n),"Fatal Error: gene not found";t.gene=e}return t.gene[0]}return t.gene}(l[1]);f+=function(t,e,n){let r="";if(0==e.length)r="Fatal Error: the gene list is empty.<br/>";else if(e.length<n.length){let t=[];e.forEach(e=>{t.push(e.gencodeId),t.push(e.geneSymbolUpper)});let a=n.filter(e=>!t.includes(e.toLowerCase())&&!t.includes(e.toUpperCase()));a.length>0&&(r=`Warning: Not all genes are found: ${a.join(",")}<br/>`)}return r}(0,d,n);const h=d.map(t=>t.gencodeId).join(","),p=void 0===r?void 0:r.join(",");b(void 0===p?a.medGeneExp+"&gencodeId="+h:a.medGeneExp+"&gencodeId="+h+"&tissueSiteDetailId="+p).then(function(n){$("#spinner").hide();const l=function(t){const e="medianGeneExpression";if(!t.hasOwnProperty(e))throw"expression data json format error.";return 0==t[e].length?"No expression data found.":void 0}(n);if(void 0!==l)s.html(f+l);else{s.html(f);const l=function(t){const e="medianGeneExpression";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attribute is missing: "+e;if(0===t[e].length)throw"parseMedianExpression finds no data.";["median","tissueSiteDetailId","gencodeId"].forEach(n=>{if(!t[e][0].hasOwnProperty(n))throw console.error(t[e][0]),`Parsing Error: required json attribute is missingp: ${n}`});let n=t[e];return n.forEach(function(t){t.value=Number(t.median),t.x=t.tissueSiteDetailId,t.y=t.gencodeId,t.displayValue=Number(t.median),t.id=t.gencodeId}),n}(n),h={root:t,violin:e,svg:`${t}-svg`,tooltip:"heatmapTooltip",toolbar:"heatmapToolbar",clone:"heatmapClone",buttons:{save:"heatmapSave",filter:"heatmapFilter",sort:"heatmapSortTissue",cluster:"heatmapClusterTissue"}};["toolbar","clone"].forEach(t=>{$("<div/>").attr("id",h[t]).appendTo($(`#${h.root}`))});const b=25,p=25;let g=void 0===r?Math.ceil(window.innerWidth/u.length):Math.ceil(window.innerWidth/r.length);g=g>b?b:g<p?p:g;let v={top:50,right:250,bottom:170,left:10},y=100,m=void 0===r?g*u.length+y+v.right+v.left:g*r.length+y+v.right+v.left;const x=new ja(m,y,100,v,12,10),w=new eo(n.clusters.tissue,n.clusters.gene,l,"YlGnBu",2,x,h.tooltip);d.length<3?w.render(h.root,h.svg,!0,!1):w.render(h.root,h.svg);const _=u.reduce((t,e)=>{if(!e.hasOwnProperty("tissueSiteDetailId"))throw"tissue has not attr tissueSiteDetailId";return t[e.tissueSiteDetailId]=e,t},{}),M=w.data.heatmap.reduce((t,e,n)=>{if(!e.hasOwnProperty("gencodeId"))throw"gene has no attr gencodeId";return t[e.gencodeId]=e,t},{});nt("#"+w.config.panels.main.id).selectAll(".exp-map-xlabel").text(t=>void 0===_[t]?t:_[t].tissueSiteDetail),nt("#"+w.config.panels.main.id).selectAll(".exp-map-ylabel").text(t=>void 0===M[t]?t:M[t].geneSymbol),Jo(w,_),function(t,e,n,r=pt(),a,i){let o=t.createToolbar(e.toolbar,t.tooltip);o.createDownloadSvgButton(e.buttons.save,e.svg,`${e.root}-save.svg`,e.clone);void 0!==a&&(()=>{const t=e.buttons.filter;o.createButton(t,"fa-filter"),nt(`#${t}`).on("click",function(){Xo(i,e.root,e.violin,r,!a)}).on("mouseover",function(){a?o.tooltip.show("Include Mitochondrial Genes"):o.tooltip.show("Exclude Mitochondrial Genes")}).on("mouseout",function(){o.tooltip.hide()})})();(()=>{const r=e.buttons.sort;o.createButton(r,"fa-sort-alpha-down"),nt(`#${r}`).on("click",function(){nt("#"+t.config.panels.top.id).style("display","None");let e=t.objects.heatmap.xList.sort();ec(e,t,n)}).on("mouseover",function(){o.tooltip.show("Sort Tissues Alphabetically")}).on("mouseout",function(){o.tooltip.hide()})})(),(()=>{const r=e.buttons.cluster;o.createButton(r,"fa-code-branch"),nt(`#${r}`).on("click",function(){nt("#"+t.config.panels.top.id).style("display","Block");let e=t.objects.columnTree.xScale.domain();ec(e,t,n)}).on("mouseover",function(){o.tooltip.show("Cluster Tissues")}).on("mouseout",function(){o.tooltip.hide()})})()}(w,h,_,a,i,c),function(t,e,n,r=pt()){const a=t.visualComponents.svg,i=t.tooltip;t.data.external=[];const o=Pa();(function(t){var e=[];for(var n in t)e.push(n);return e})(n).forEach((t,e)=>{n[t].color=o[e]});a.selectAll(".exp-map-cell").on("mouseover",function(r){const o=nt(this);t.objects.heatmap.cellMouseover(r,a,o);let c=void 0===e[r.x]?r.x:e[r.x].tissueSiteDetail,s=void 0===n[r.y]?r.y:n[r.y].geneSymbol;i.show(`Tissue: ${c}<br/> Gene: ${s}<br/> Median TPM: ${parseFloat(r.displayValue.toExponential()).toPrecision(4)}`)}).on("mouseout",function(t){a.selectAll("*").classed("highlighted",!1),i.hide()}),a.selectAll(".exp-map-ylabel").style("cursor","pointer").on("click",function(a){let i=nt(this),o="";i.classed("clicked")?(i.classed("clicked",!1),o="delete"):(i.classed("clicked",!0),o="add");Ko(o,a,n,e,t,r)})}(w,_,M,a),null!=o&&o()}}).catch(function(t){console.error(t)})}).catch(function(t){console.error(t)})}function Qo(t){it(".exp-map-xlabel").filter(e=>e==t).classed("query",!0)}function Jo(t,e){const n=t.config.panels.main.id,r=t.objects.heatmap;let a=nt(`#${n}`).selectAll(".exp-map-xcolor").data(r.xList),i=nt(`#${n}`).selectAll(".leaf-color").data(r.xList);a.attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[1]+5),i.attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[0]-10),a.enter().append("rect").attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[1]+5).attr("width",r.xScale.bandwidth()).attr("height",.5*r.yScale.bandwidth()).classed("exp-map-xcolor",!0).merge(a).style("fill",t=>void 0===e[t]?"#000000":`#${e[t].colorHex}`),a.exit().remove(),t.objects.heatmap.yScale.domain().length>15&&(i.enter().append("rect").attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[0]-10).attr("width",r.xScale.bandwidth()).attr("height",.5*r.yScale.bandwidth()).classed("leaf-color",!0).merge(i).style("fill",t=>void 0===e[t]?"#000000":`#${e[t].colorHex}`),i.exit().remove())}function Ko(t,e,n,r,a,i=pt()){switch(t){case"delete":{a.data.external=a.data.external.filter(t=>t.gencodeId!=e);tc(a.data.external,a,r);break}case"add":{const t=i.geneExp+e;const o={};o[e]=n[e].color;const c=a.objects.heatmap.xScale.domain();b(t).then(function(t){if(a.data.external===undefined)a.data.external=[];a.data.external=a.data.external.concat(vt(t,true,o)).filter(t=>{return c.indexOf(t.group)>-1});tc(a.data.external,a,r)}).catch(function(t){console.error(t)});break}default:{console.warn("action not understood.");break}}}function tc(t,e,n){const r={root:"violinRoot",tooltip:"violinTooltip",toolbar:"violinToolbar",clone:"violinClone",chart:"violinPlot",svg:"violinSvg",buttons:{save:"violinSave"}},a=`#${r.root}`,i=`#${r.tooltip}`;if(0==$(a).length)throw"Violin Plot Error: rootId does not exist.";if(0==$(i).length&&$("<div/>").attr("id",r.tooltip).appendTo($("body")),nt(a).selectAll("*").remove(),["toolbar","chart","clone"].forEach(t=>{$("<div/>").attr("id",r[t]).appendTo($(a))}),0==t.length)return void nt(a).style("opacity",0);let o=e.objects.heatmap.xScale.domain().map((t,e)=>({id:t,name:n[t].tissueSiteDetail}));const c=t.reduce((t,e)=>(t[e.label]=1,t),{}),s=Object.keys(c).length;if(0==s)return void nt(a).style("opacity",0);nt(a).style("opacity",1);const f=function(t=50,e=50,n=50,r=50){return{top:t,right:e,bottom:n,left:r}}(50,50,150,e.config.panels.main.x);let l=20*Object.keys(c).length*o.length;const u=function(t=1200,e=250,n=_setMargins()){return{width:t,height:e,outerWidth:t+(n.left+n.right),outerHeight:e+(n.top+n.bottom)}}(l=l<e.config.panels.main.w?e.config.panels.main.w:l,150,f),d=nt(`#${r.chart}`).append("svg").attr("width",u.outerWidth).attr("height",u.outerHeight).attr("id",r.svg).append("g").attr("transform",`translate(${f.left}, ${f.top})`),h=new Vo(t),b=h.createTooltip(r.tooltip);h.createToolbar(r.toolbar,b).createDownloadSvgButton(r.buttons.save,r.svg,`${r.root}-save.svg`,r.clone);const p=1!=s;h.render(d,u.width,u.height,.3,o.map(t=>t.id),[],"log10(TPM)",!0,30,!1,0,!1,p,!0);const g=Number(d.select("#violinLegend").select("rect").attr("width"));let v=Number(nt(`#${r.chart}`).select("svg").attr("width"));v=v<g+150?g+150:v,nt(`#${r.chart}`).select("svg").attr("width",v),function(t,e,n,r="top"){e.append("g").selectAll(".tcolor").data(t.scale.x.domain()).enter().append("rect").classed("tcolor",!0).attr("x",e=>t.scale.x(e)).attr("y",e=>"top"==r?t.scale.y.range()[1]-5:t.scale.y.range()[0]-5).attr("width",e=>t.scale.x.bandwidth()).attr("height",5).style("stroke-width",0).style("fill",t=>`#${n[t].colorHex}`).style("opacity",.7)}(h,d,n,"bottom"),function(t,e){t.select(".violin-x-axis").selectAll("text").text(t=>void 0===e[t]?t:e[t].tissueSiteDetail)}(d,n)}function ec(t,e,n){let r=void 0;const a=nt(".exp-map-xlabel.query");a.empty()||(r=a.datum());const i=nt("#"+e.config.panels.main.id),o=e.config.panels.main;e.objects.heatmap.redraw(i,t,e.objects.heatmap.yList,o),it(".exp-map-xlabel").text(t=>void 0===n[t]?t:n[t].tissueSiteDetail).classed("query",!1),Jo(e,n),void 0!==r&&Qo(r),nt("#violinRoot").style("opacity",0),it(".exp-map-ylabel").classed("clicked",!1),e.data.external=void 0}var nc={createDatasetMenu:Ro,launchTopExpressed:Xo,launch:Wo,searchById:Zo};t.BatchGeneExpression=nc,t.createDatasetMenu=Ro,t.launch=Wo,t.launchTopExpressed=Xo,t.searchById=Zo,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1tYXAuYnVuZGxlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvY3N2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9qc29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zcGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zb3VyY2VFdmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21vdXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9leGl0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2pvaW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2Rlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2RlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW1wdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZWFjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9tYXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbmVzdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9zZXQuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ndGV4RGF0YVBhcnNlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2RldmlhdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdmFyaWFuY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2V4dGVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcmFuZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9xdWFudGlsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWF4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWFuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWRpYW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21pbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaW5pdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2JhbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvc3RyaW5nLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy92YWx1ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcm91bmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9kZWNvbXBvc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9wYXJzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy96b29tLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jdWJlaGVsaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL251bWJlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZXhwb25lbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRTcGVjaWZpZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRQcmVmaXhBdXRvLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0Um91bmRlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0R3JvdXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFRyaW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25Sb3VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvbkZpeGVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaW50ZXJ2YWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWlsbGlzZWNvbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZHVyYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZGF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3NlY29uZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taW51dGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaG91ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy93ZWVrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3llYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbW9udGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTWludXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0hvdXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjRGF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1dlZWsuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjWWVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNb250aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29Gb3JtYXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2lzb1BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9zZXF1ZW50aWFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY29sb3JzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvcmFtcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL2NhdGVnb3J5MTAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9BY2NlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9EYXJrMi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1BhaXJlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1Bhc3RlbDEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0MS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL0JyQkcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUFJHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QaVlHLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1B1T3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRCdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZEd5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkWWxCdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsR24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvU3BlY3RyYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0J1R24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0J1UHUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0duQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL09yUmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnVHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVSZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUmRQdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxHbkJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbEduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbE9yQnIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JSZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0JsdWVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JlZW5zLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JleXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9QdXJwbGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvUmVkcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL09yYW5nZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL2N1YmVoZWxpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvcmFpbmJvdy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvc2luZWJvdy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvdmlyaWRpcy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2NvbG9ycy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWcuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy91dGlscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9jb3VudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hBZnRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQmVmb3JlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3N1bS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zb3J0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvYW5jZXN0b3JzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2Rlc2NlbmRhbnRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xlYXZlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9saW5rcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9heGlzLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvRGVuZHJvZ3JhbS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL25ld2ljay5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kaXNwYXRjaC9zcmMvZGlzcGF0Y2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvaW50ZXJydXB0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbnRlcnBvbGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZVR3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdGV4dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3JlbW92ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZHVyYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL3Npbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9lbGFzdGljLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi90cmFuc2l0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW50ZXJydXB0LmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvVG9vbGJhci5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL1Rvb2x0aXAuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9IZWF0bWFwLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvRGVuZHJvSGVhdG1hcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1wYXRoL3NyYy9wYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbWF0aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9wb2ludC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJlYS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbGluZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbW9ub3RvbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9ldmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2V2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9ub2V2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9icnVzaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2RyYWcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9ub3JtYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9kZWZhdWx0U291cmNlLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMva2RlLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvR3JvdXBlZFZpb2xpbi5qcyIsIi4uLy4uL3NyYy9CYXRjaEdlbmVFeHByZXNzaW9uLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvZ3RleE1lbnVCdWlsZGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL2tleXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEVPTCA9IHt9LFxuICAgIEVPRiA9IHt9LFxuICAgIFFVT1RFID0gMzQsXG4gICAgTkVXTElORSA9IDEwLFxuICAgIFJFVFVSTiA9IDEzO1xuXG5mdW5jdGlvbiBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucykge1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZFwiLCBcInJldHVybiB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xufVxuXG5mdW5jdGlvbiBjdXN0b21Db252ZXJ0ZXIoY29sdW1ucywgZikge1xuICB2YXIgb2JqZWN0ID0gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpO1xuICByZXR1cm4gZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgcmV0dXJuIGYob2JqZWN0KHJvdyksIGksIGNvbHVtbnMpO1xuICB9O1xufVxuXG4vLyBDb21wdXRlIHVuaXF1ZSBjb2x1bW5zIGluIG9yZGVyIG9mIGRpc2NvdmVyeS5cbmZ1bmN0aW9uIGluZmVyQ29sdW1ucyhyb3dzKSB7XG4gIHZhciBjb2x1bW5TZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgY29sdW1ucyA9IFtdO1xuXG4gIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICBmb3IgKHZhciBjb2x1bW4gaW4gcm93KSB7XG4gICAgICBpZiAoIShjb2x1bW4gaW4gY29sdW1uU2V0KSkge1xuICAgICAgICBjb2x1bW5zLnB1c2goY29sdW1uU2V0W2NvbHVtbl0gPSBjb2x1bW4pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbHVtbnM7XG59XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgd2lkdGgpIHtcbiAgdmFyIHMgPSB2YWx1ZSArIFwiXCIsIGxlbmd0aCA9IHMubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKDApICsgcyA6IHM7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciA8IDAgPyBcIi1cIiArIHBhZCgteWVhciwgNilcbiAgICA6IHllYXIgPiA5OTk5ID8gXCIrXCIgKyBwYWQoeWVhciwgNilcbiAgICA6IHBhZCh5ZWFyLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG4gIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSxcbiAgICAgIG1pbnV0ZXMgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgIHNlY29uZHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IFwiSW52YWxpZCBEYXRlXCJcbiAgICAgIDogZm9ybWF0WWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIDQpICsgXCItXCIgKyBwYWQoZGF0ZS5nZXRVVENNb250aCgpICsgMSwgMikgKyBcIi1cIiArIHBhZChkYXRlLmdldFVUQ0RhdGUoKSwgMilcbiAgICAgICsgKG1pbGxpc2Vjb25kcyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCI6XCIgKyBwYWQoc2Vjb25kcywgMikgKyBcIi5cIiArIHBhZChtaWxsaXNlY29uZHMsIDMpICsgXCJaXCJcbiAgICAgIDogc2Vjb25kcyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCI6XCIgKyBwYWQoc2Vjb25kcywgMikgKyBcIlpcIlxuICAgICAgOiBtaW51dGVzIHx8IGhvdXJzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIlpcIlxuICAgICAgOiBcIlwiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEJvZHkocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiXG4gICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gZm9ybWF0RGF0ZSh2YWx1ZSlcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHZhbHVlICs9IFwiXCIpID8gXCJcXFwiXCIgKyB2YWx1ZS5yZXBsYWNlKC9cIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdEJvZHk6IGZvcm1hdEJvZHksXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93c1xuICB9O1xufVxuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3ZcIjtcblxudmFyIGNzdiA9IGRzdihcIixcIik7XG5cbmV4cG9ydCB2YXIgY3N2UGFyc2UgPSBjc3YucGFyc2U7XG5leHBvcnQgdmFyIGNzdlBhcnNlUm93cyA9IGNzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIGNzdkZvcm1hdCA9IGNzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIGNzdkZvcm1hdEJvZHkgPSBjc3YuZm9ybWF0Qm9keTtcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Um93cyA9IGNzdi5mb3JtYXRSb3dzO1xuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3ZcIjtcblxudmFyIHRzdiA9IGRzdihcIlxcdFwiKTtcblxuZXhwb3J0IHZhciB0c3ZQYXJzZSA9IHRzdi5wYXJzZTtcbmV4cG9ydCB2YXIgdHN2UGFyc2VSb3dzID0gdHN2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0ID0gdHN2LmZvcm1hdDtcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Qm9keSA9IHRzdi5mb3JtYXRCb2R5O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG4iLCJmdW5jdGlvbiByZXNwb25zZUpzb24ocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUpzb24pO1xufVxuIiwiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2VcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG59XG5cbkNsYXNzTGlzdC5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIGNvbnRhaW5zOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRUcnVlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgKHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBjbGFzc2VkQWRkIDogY2xhc3NlZFJlbW92ZSkodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgID8gY2xhc3NlZFRydWVcbiAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImZ1bmN0aW9uIHJhaXNlKCkge1xuICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG4iLCJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUoZmFsc2UpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUodHJ1ZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwidmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG5leHBvcnQgdmFyIGV2ZW50ID0gbnVsbDtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50KSkge1xuICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQxKSB7XG4gICAgdmFyIGV2ZW50MCA9IGV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICB2YXIgZXZlbnQwID0gZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICBldmVudCA9IGV2ZW50MTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0gZmluYWxseSB7XG4gICAgZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW5cIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBqb2luOiBzZWxlY3Rpb25fam9pbixcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcIi4vc2VsZWN0aW9uL29uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY3VycmVudCA9IGV2ZW50LCBzb3VyY2U7XG4gIHdoaWxlIChzb3VyY2UgPSBjdXJyZW50LnNvdXJjZUV2ZW50KSBjdXJyZW50ID0gc291cmNlO1xuICByZXR1cm4gY3VycmVudDtcbn1cbiIsImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudFwiO1xuaW1wb3J0IHBvaW50IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdmFyIGV2ZW50ID0gc291cmNlRXZlbnQoKTtcbiAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSBldmVudCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICByZXR1cm4gcG9pbnQobm9kZSwgZXZlbnQpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgZXZlbnQpIHtcbiAgdmFyIHN2ZyA9IG5vZGUub3duZXJTVkdFbGVtZW50IHx8IG5vZGU7XG5cbiAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYLCBwb2ludC55ID0gZXZlbnQuY2xpZW50WTtcbiAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgcmV0dXJuIFtwb2ludC54LCBwb2ludC55XTtcbiAgfVxuXG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gbm9kZS5jbGllbnRMZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSBub2RlLmNsaWVudFRvcF07XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbc2VsZWN0b3IgPT0gbnVsbCA/IFtdIDogc2VsZWN0b3JdLCByb290KTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGVudGVyID0gdHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIiA/IG9uZW50ZXIoZW50ZXIpIDogZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJleHBvcnQgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAob2JqZWN0LCBmKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwO1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChmKG8gPSBvYmplY3RbaV0sIGksIG9iamVjdCksIG8pO1xuICB9XG5cbiAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwO1xuIiwiaW1wb3J0IG1hcCBmcm9tIFwiLi9tYXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gW10sXG4gICAgICBzb3J0S2V5cyA9IFtdLFxuICAgICAgc29ydFZhbHVlcyxcbiAgICAgIHJvbGx1cCxcbiAgICAgIG5lc3Q7XG5cbiAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xuICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkge1xuICAgICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgYXJyYXkuc29ydChzb3J0VmFsdWVzKTtcbiAgICAgIHJldHVybiByb2xsdXAgIT0gbnVsbCA/IHJvbGx1cChhcnJheSkgOiBhcnJheTtcbiAgICB9XG5cbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICBrZXlWYWx1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHZhbHVlc0J5S2V5ID0gbWFwKCksXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUmVzdWx0KCk7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleSh2YWx1ZSA9IGFycmF5W2ldKSArIFwiXCIpKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWVzQnlLZXkuZWFjaChmdW5jdGlvbih2YWx1ZXMsIGtleSkge1xuICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgIGlmICgrK2RlcHRoID4ga2V5cy5sZW5ndGgpIHJldHVybiBtYXA7XG4gICAgdmFyIGFycmF5LCBzb3J0S2V5ID0gc29ydEtleXNbZGVwdGggLSAxXTtcbiAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICBlbHNlIGFycmF5ID0gW10sIG1hcC5lYWNoKGZ1bmN0aW9uKHYsIGspIHsgYXJyYXkucHVzaCh7a2V5OiBrLCB2YWx1ZXM6IGVudHJpZXModiwgZGVwdGgpfSk7IH0pO1xuICAgIHJldHVybiBzb3J0S2V5ICE9IG51bGwgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTsgfSkgOiBhcnJheTtcbiAgfVxuXG4gIHJldHVybiBuZXN0ID0ge1xuICAgIG9iamVjdDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVPYmplY3QsIHNldE9iamVjdCk7IH0sXG4gICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gZW50cmllcyhhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApLCAwKTsgfSxcbiAgICBrZXk6IGZ1bmN0aW9uKGQpIHsga2V5cy5wdXNoKGQpOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0VmFsdWVzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0VmFsdWVzID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHJvbGx1cDogZnVuY3Rpb24oZikgeyByb2xsdXAgPSBmOyByZXR1cm4gbmVzdDsgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBtYXAoKTtcbn1cblxuZnVuY3Rpb24gc2V0TWFwKG1hcCwga2V5LCB2YWx1ZSkge1xuICBtYXAuc2V0KGtleSwgdmFsdWUpO1xufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIG1hcCwgcHJlZml4fSBmcm9tIFwiLi9tYXBcIjtcblxuZnVuY3Rpb24gU2V0KCkge31cblxudmFyIHByb3RvID0gbWFwLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZXQsXG4gIGhhczogcHJvdG8uaGFzLFxuICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgKz0gXCJcIjtcbiAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gIHNpemU6IHByb3RvLnNpemUsXG4gIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgZWFjaDogcHJvdG8uZWFjaFxufTtcblxuZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xuICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2V0KSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSkgeyBzZXQuYWRkKHZhbHVlKTsgfSk7XG5cbiAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R3RleFVybHMoKXtcbiAgICBjb25zdCBob3N0ID0gJ2h0dHBzOi8vZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nO1xuICAgIC8vIGNvbnN0IGhvc3QgPSAnbG9jYWwuZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gZ2VuZS1lcXRsIHZpc3VhbGl6ZXIgc3BlY2lmaWNcbiAgICAgICAgc2luZ2xlVGlzc3VlRXF0bDogaG9zdCArICdhc3NvY2lhdGlvbi9zaW5nbGVUaXNzdWVFcXRsP2Zvcm1hdD1qc29uJmRhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICBsZDogaG9zdCArICdkYXRhc2V0L2xkP2Zvcm1hdD1qc29uJmRhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICB0aXNzdWVTdW1tYXJ5OiBob3N0ICsgJ2RhdGFzZXQvdGlzc3VlU3VtbWFyeT9kYXRhc2V0SWQ9Z3RleF92NycsXG5cbiAgICAgICAgLy8gZXF0bCBEYXNoYm9hcmQgc3BlY2lmaWNcbiAgICAgICAgZHluZXF0bDogaG9zdCArICdhc3NvY2lhdGlvbi9keW5lcXRsJyxcbiAgICAgICAgc25wOiBob3N0ICsgJ3JlZmVyZW5jZS92YXJpYW50P2Zvcm1hdD1qc29uJnNucElkPScsXG4gICAgICAgIHZhcmlhbnRJZDogaG9zdCArICdkYXRhc2V0L3ZhcmlhbnQ/Zm9ybWF0PWpzb24mdmFyaWFudElkPScsXG5cbiAgICAgICAgLy8gdHJhbnNjcmlwdCwgZXhvbiwganVuY3Rpb24gZXhwcmVzc2lvbiBzcGVjaWZpY1xuICAgICAgICBleG9uRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuRXhvbkV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAgdHJhbnNjcmlwdEV4cDogaG9zdCArICdleHByZXNzaW9uL21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG4gICAgICAgIGp1bmN0aW9uRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG4gICAgICAgIHRyYW5zY3JpcHQ6IGhvc3QgKyAncmVmZXJlbmNlL3RyYW5zY3JpcHQ/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGV4b246IGhvc3QgKyAncmVmZXJlbmNlL2V4b24/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGdlbmVNb2RlbDogaG9zdCArICdkYXRhc2V0L2NvbGxhcHNlZEdlbmVNb2RlbEV4b24/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGdlbmVNb2RlbFVuZmlsdGVyZWQ6IGhvc3QgKyAnZGF0YXNldC9mdWxsQ29sbGFwc2VkR2VuZU1vZGVsRXhvbj9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcblxuICAgICAgICAvLyBnZW5lIGV4cHJlc3Npb24gdmlvbGluIHBsb3Qgc3BlY2lmaWNcbiAgICAgICAgZ2VuZUV4cDogaG9zdCArICdleHByZXNzaW9uL2dlbmVFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiBoZWF0IG1hcCBzcGVjaWZpY1xuICAgICAgICBtZWRHZW5lRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuR2VuZUV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZwYWdlU2l6ZT0xMDAwMCcsXG5cbiAgICAgICAgLy8gZ2VuZSBleHByZXNzaW9uIGJveHBsb3Qgc3BlY2lmaWNcbiAgICAgICAgZ2VuZUV4cEJveHBsb3Q6IGhvc3QgKyAnZXhwcmVzc2lvbi9nZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZib3hwbG90RGV0YWlsPWZ1bGwmZ2VuY29kZUlkPScsXG5cbiAgICAgICAgLy8gdG9wIGV4cHJlc3NlZCBnZW5lIGV4cHJlc3Npb24gc3BlY2lmaWNcbiAgICAgICAgdG9wSW5UaXNzdWVGaWx0ZXJlZDogaG9zdCArICdleHByZXNzaW9uL3RvcEV4cHJlc3NlZEdlbmU/ZGF0YXNldElkPWd0ZXhfdjcmZmlsdGVyTXRHZW5lPXRydWUmc29ydEJ5PW1lZGlhbiZzb3J0RGlyZWN0aW9uPWRlc2MmcGFnZVNpemU9NTAmdGlzc3VlU2l0ZURldGFpbElkPScsXG4gICAgICAgIHRvcEluVGlzc3VlOiBob3N0ICsgJ2V4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZT9kYXRhc2V0SWQ9Z3RleF92NyZzb3J0Qnk9bWVkaWFuJnNvcnREaXJlY3Rpb249ZGVzYyZwYWdlU2l6ZT01MCZ0aXNzdWVTaXRlRGV0YWlsSWQ9JyxcblxuICAgICAgICBnZW5lSWQ6IGhvc3QgKyAncmVmZXJlbmNlL2dlbmU/Zm9ybWF0PWpzb24mZ2VuY29kZVZlcnNpb249djE5Jmdlbm9tZUJ1aWxkPUdSQ2gzNyUyRmhnMTkmZ2VuZUlkPScsXG5cbiAgICAgICAgLy8gdGlzc3VlIG1lbnUgc3BlY2lmaWNcbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHJlZHVuZGFudCBVUkxzXG4gICAgICAgIHRpc3N1ZTogIGhvc3QgKyAnbWV0YWRhdGEvdGlzc3VlU2l0ZURldGFpbD9mb3JtYXQ9anNvbicsXG4gICAgICAgIHRpc3N1ZVNpdGVzOiBob3N0ICsgJ21ldGFkYXRhL3Rpc3N1ZVNpdGVEZXRhaWw/Zm9ybWF0PWpzb24nLFxuXG4gICAgICAgIC8vIGxvY2FsIHN0YXRpYyBmaWxlc1xuICAgICAgICBzYW1wbGU6ICd0bXBTdW1tYXJ5RGF0YS9ndGV4LlNhbXBsZS5jc3YnLFxuICAgICAgICBybmFzZXFDcmFtOiAndG1wU3VtbWFyeURhdGEvcm5hc2VxX2NyYW1fZmlsZXNfdjdfZGJHYVBfMDExNTE2LnR4dCcsXG4gICAgICAgIHdnc0NyYW06ICd0bXBTdW1tYXJ5RGF0YS93Z3NfY3JhbV9maWxlc192N19oZzM4X2RiR2FQXzAxMTUxNi50eHQnLFxuXG4gICAgICAgIC8vIGZpcmVDbG91ZFxuICAgICAgICBmY0JpbGxpbmc6ICdodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS9wcm9maWxlL2JpbGxpbmcnLFxuICAgICAgICBmY1dvcmtTcGFjZTogJ2h0dHBzOi8vYXBpLmZpcmVjbG91ZC5vcmcvYXBpL3dvcmtzcGFjZXMnLFxuICAgICAgICBmY1BvcnRhbFdvcmtTcGFjZTogJ2h0dHBzOi8vcG9ydGFsLmZpcmVjbG91ZC5vcmcvI3dvcmtzcGFjZXMnXG4gICAgfVxufVxuXG4vKipcbiAqIHBhcnNlIEdURXggZHluZXF0bCBqc29uXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gZnJvbSBHVEV4IGR5bmVxdGwgd2ViIHNlcnZpY2VcbiAqIEByZXR1cm5zIGRhdGEge0pTT059IG1vZGlmaWVkIGRhdGFcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUR5bkVxdGwoanNvbil7XG4gICAgLy8gY2hlY2sgcmVxdWlyZWQganNvbiBhdHRyaWJ1dGVzXG4gICAgWydkYXRhJywgJ2dlbm90eXBlcycsICdwVmFsdWUnLCAncFZhbHVlVGhyZXNob2xkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGQpKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanNvbik7XG4gICAgICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IFJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBqc29uLmV4cHJlc3Npb25fdmFsdWVzID0ganNvbi5kYXRhLm1hcCgoZCk9PnBhcnNlRmxvYXQoZCkpO1xuICAgIGpzb24uZ2Vub3R5cGVzID0ganNvbi5nZW5vdHlwZXMubWFwKChkKT0+cGFyc2VGbG9hdChkKSk7XG5cbiAgICBqc29uLmhvbW9SZWZFeHAgPSBqc29uLmV4cHJlc3Npb25fdmFsdWVzLmZpbHRlcigoZCxpKSA9PiB7XG4gICAgICAgIHJldHVybiBqc29uLmdlbm90eXBlc1tpXSA9PT0gMFxuICAgIH0pO1xuICAgIGpzb24uaG9tb0FsdEV4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09PSAyXG4gICAgfSk7XG4gICAganNvbi5oZXRlcm9FeHAgPSBqc29uLmV4cHJlc3Npb25fdmFsdWVzLmZpbHRlcigoZCxpKSA9PiB7XG4gICAgICAgIHJldHVybiBqc29uLmdlbm90eXBlc1tpXSA9PT0gMVxuICAgIH0pO1xuXG4gICAgLy8gZ2VuZXJhdGUgZ2Vub3R5cGUgdGV4dCBsYWJlbHNcbiAgICBsZXQgcmVmID0ganNvbi52YXJpYW50SWQuc3BsaXQoL18vKVsyXTtcbiAgICBsZXQgYWx0ID0ganNvbi52YXJpYW50SWQuc3BsaXQoL18vKVszXTtcbiAgICBqc29uLmhldCA9IHJlZiArIGFsdDtcbiAgICBqc29uLnJlZiA9IHJlZiArIHJlZjtcbiAgICBqc29uLmFsdCA9IGFsdCArIGFsdDtcblxuICAgIHJldHVybiBqc29uO1xufVxuXG5cbi8qKlxuICogUGFyc2UgdGhlIHNpbmdsZSB0aXNzdWUgZXF0bHMgZnJvbSBHVEV4IHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSB0aXNzdWVTaXRlVGFibGUge0pzb259IG9wdGlvbmFsIGZvciBtYXBwaW5nIHRpc3N1ZVNpdGVEZXRhaWxJZCB0byB0aXNzdWVTaXRlRGV0YWlsLCBhIGRpY3Rpb25hcnkgb2YgdGlzc3VlU2l0ZSBvYmplY3RzICh3aXRoIHRoZSBhdHRyIHRpc3N1ZVNpdGVEZXRhaWwpIGluZGV4ZWQgYnkgdGlzc3VlU2l0ZURldGFpbElkLCBhbmRcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBlcXRscyB3aXRoIGF0dHJpYnV0ZXMgcmVxdWlyZWQgZm9yIEdFViByZW5kZXJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2luZ2xlVGlzc3VlRXF0bHMoZGF0YSwgdGlzc3VlU2l0ZVRhYmxlID0gdW5kZWZpbmVkKXtcbiAgICBjb25zdCBhdHRyID0gJ3NpbmdsZVRpc3N1ZUVxdGwnO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGF0dHJpYnV0ZSBpcyBub3QgZm91bmQ6IFwiICsgYXR0cjtcbiAgICBbJ3ZhcmlhbnRJZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnbmVzJywgJ3BWYWx1ZSddLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShrKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICB9KTtcblxuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl0ubWFwKChkKT0+e1xuICAgICAgICBkLnggPSBkLnZhcmlhbnRJZDtcbiAgICAgICAgZC5kaXNwbGF5WCA9IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoZC52YXJpYW50SWQpO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgaWYgKHRpc3N1ZVNpdGVUYWJsZSkgZC5kaXNwbGF5WSA9IHRpc3N1ZVNpdGVUYWJsZVtkLnRpc3N1ZVNpdGVEZXRhaWxJZF0udGlzc3VlU2l0ZURldGFpbDtcbiAgICAgICAgZC52YWx1ZSA9IGQubmVzO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IGQubmVzLnRvUHJlY2lzaW9uKDMpO1xuICAgICAgICBkLnIgPSAtTWF0aC5sb2cxMChkLnBWYWx1ZSk7IC8vIHNldCByIHRvIGJlIHRoZSAtbG9nMTAocC12YWx1ZSlcbiAgICAgICAgZC5yRGlzcGxheVZhbHVlID0gcGFyc2VGbG9hdChkLnBWYWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDMpO1xuICAgICAgICByZXR1cm4gZDtcbiAgICB9KVxufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBnZW5lcyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVzKGRhdGEsIHNpbmdsZT1mYWxzZSwgZ2VuZUlkPW51bGwpe1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZSc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogYXR0cmlidXRlIGdlbmUgZG9lc24ndCBleGlzdC5cIjtcbiAgICBpZiAoZGF0YS5nZW5lLmxlbmd0aD09PTApe1xuICAgICAgICAgYWxlcnQoXCJObyBnZW5lIGlzIGZvdW5kXCIpO1xuICAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogZ2VuZShzKSBub3QgZm91bmRcIjtcbiAgICAgfVxuICAgIGlmIChzaW5nbGUpe1xuICAgICAgICBpZiAoZ2VuZUlkID09PSBudWxsKSB0aHJvdyBcIlBsZWFzZSBwcm92aWRlIGEgZ2VuZSBJRCBmb3Igc2VhcmNoIHJlc3VsdHMgdmFsaWRhdGlvblwiO1xuICAgICAgICBpZiAoZGF0YS5nZW5lLmxlbmd0aD4xKSB7IC8vIHdoZW4gYSBzaW5nbGUgZ2VuZSBJRCBoYXMgbXVsdGlwbGUgbWF0Y2hlc1xuICAgICAgICAgICAgIGxldCBmaWx0ZXJlZCA9IGRhdGEuZ2VuZS5maWx0ZXIoKGcpPT57XG4gICAgICAgICAgICAgICAgIHJldHVybiBnLmdlbmVTeW1ib2xVcHBlcj09PWdlbmVJZC50b1VwcGVyQ2FzZSgpIHx8IGcuZ2VuY29kZUlkID09PSBnZW5lSWQudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgIGlmIChmaWx0ZXJlZC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgIGFsZXJ0KFwiRmF0YWwgRXJyb3I6IGlucHV0IGdlbmUgSUQgaXMgbm90IHVuaXF1ZS5cIik7XG4gICAgICAgICAgICAgICAgIHRocm93IFwiRmF0YWwgRXJyb3I6IGlucHV0IGdlbmUgSUQgaXMgbm90IHVuaXF1ZS5cIjtcbiAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbHRlcmVkLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgIGFsZXJ0KFwiTm8gZ2VuZSBpcyBmb3VuZCB3aXRoIFwiICsgZ2VuZUlkKTtcbiAgICAgICAgICAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogZ2VuZSBub3QgZm91bmRcIjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgZGF0YS5nZW5lID0gZmlsdGVyZWRcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gZGF0YS5nZW5lWzBdXG4gICAgfVxuICAgIGVsc2UgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIHRpc3N1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3Vlcyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZVNpdGVEZXRhaWwnO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uW2F0dHJdO1xuXG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAndGlzc3VlU2l0ZURldGFpbCcsICdjb2xvckhleCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aXNzdWVzO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWVzIGFuZCByZXR1cm4gYSBsb29rdXAgdGFibGUgaW5kZXhlZCBieSB0aXNzdWVTaXRlRGV0YWlsSWRcbiAqIEBwYXJhbSBqc29uIGZyb20gd2ViIHNlcnZpY2UgdGlzc3VlU2l0ZURldGFpbFxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZURpY3QoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICd0aXNzdWVTaXRlRGV0YWlsJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0ciBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCB0aXNzdWVzID0ganNvblthdHRyXTtcbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICd0aXNzdWVTaXRlRGV0YWlsJywgJ2NvbG9ySGV4J10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCF0aXNzdWVzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgIH0pO1xuICAgIHJldHVybiB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWVzIHNhbXBsZSBjb3VudHMsIEdURXggcmVsZWFzZSBzcGVjaWZpY1xuICogQHBhcmFtIGpzb24gZnJvbSB3ZWIgc2VydmljZSB0aXNzdWVTdW1tYXJ5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZVNhbXBsZUNvdW50cyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZVN1bW1hcnknO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uW2F0dHJdO1xuXG4gICAgLy8gY2hlY2sganNvbiBzdHJ1Y3R1cmVcbiAgICBjb25zdCB0aXNzdWUgPSB0aXNzdWVzWzBdO1xuICAgIGlmICghdGlzc3VlLmhhc093blByb3BlcnR5KCd0aXNzdWVTaXRlRGV0YWlsSWQnKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGF0dHIgaXMgbWlzc2luZzogdGlzc3VlU2l0ZURldGFpbElkJztcbiAgICBpZiAoIXRpc3N1ZS5oYXNPd25Qcm9wZXJ0eSgncm5hU2VxQW5kR2Vub3R5cGVTYW1wbGVDb3VudCcpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0ciBpcyBtaXNzaW5nOiBybmFTZXFBbmRHZW5vdHlwZVNhbXBsZUNvdW50JztcbiAgICByZXR1cm4gdGlzc3Vlcztcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3VlIGdyb3Vwc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcGFyYW0gZm9yRXF0bCB7Qm9vbGVhbn0gcmVzdHJpY3QgdG8gZXF0bCB0aXNzdWVzXG4gKiBAcmV0dXJucyB7RGljdGlvbmFyeX0gb2YgbGlzdHMgb2YgdGlzc3VlcyBpbmRleGVkIGJ5IHRoZSB0aXNzdWUgZ3JvdXAgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVTaXRlcyhkYXRhLCBmb3JFcXRsPWZhbHNlKXtcbiAgICAvLyB0aGUgbGlzdCBvZiBpbnZhbGlkZSBlcXRsIHRpc3N1ZXMgZHVlIHRvIHNhbXBsZSBzaXplIDwgNzBcbiAgICAvLyBhIGhhcmQtY29kZWQgbGlzdCBiZWNhdXNlIHRoZSBzYW1wbGUgc2l6ZSBpcyBub3QgZWFzeSB0byByZXRyaWV2ZVxuICAgIGNvbnN0IGludmFsaWRUaXNzdWVzID0gWydCbGFkZGVyJywgJ0NlcnZpeF9FY3RvY2Vydml4JywgJ0NlcnZpeF9FbmRvY2Vydml4JywgJ0ZhbGxvcGlhbl9UdWJlJywgJ0tpZG5leV9Db3J0ZXgnXTtcblxuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlU2l0ZURldGFpbCc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBsZXQgdGlzc3VlcyA9IGRhdGFbYXR0cl07XG4gICAgWyd0aXNzdWVTaXRlJywndGlzc3VlU2l0ZURldGFpbElkJywndGlzc3VlU2l0ZURldGFpbCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgYHBhcnNlVGlzc3VlU2l0ZXMgYXR0ciBlcnJvci4gJHtkfSBpcyBub3QgZm91bmRgO1xuICAgIH0pO1xuICAgIHRpc3N1ZXMgPSBmb3JFcXRsPT09ZmFsc2U/dGlzc3Vlczp0aXNzdWVzLmZpbHRlcigoZCk9PntyZXR1cm4gIWludmFsaWRUaXNzdWVzLmluY2x1ZGVzKGQudGlzc3VlU2l0ZURldGFpbElkKX0pOyAvLyBhbiBhcnJheSBvZiB0aXNzdWVTaXRlRGV0YWlsSWQgb2JqZWN0c1xuXG4gICAgLy8gYnVpbGQgdGhlIHRpc3N1ZUdyb3VwcyBsb29rdXAgZGljdGlvbmFyeSBpbmRleGVkIGJ5IHRoZSB0aXNzdWUgZ3JvdXAgbmFtZSAoaS5lLiB0aGUgdGlzc3VlIG1haW4gc2l0ZSBuYW1lKVxuICAgIGxldCB0aXNzdWVHcm91cHMgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e1xuICAgICAgICBsZXQgZ3JvdXBOYW1lID0gZC50aXNzdWVTaXRlO1xuICAgICAgICBsZXQgc2l0ZSA9IHtcbiAgICAgICAgICAgIGlkOiBkLnRpc3N1ZVNpdGVEZXRhaWxJZCxcbiAgICAgICAgICAgIG5hbWU6IGQudGlzc3VlU2l0ZURldGFpbFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWFyci5oYXNPd25Qcm9wZXJ0eShncm91cE5hbWUpKSBhcnJbZ3JvdXBOYW1lXSA9IFtdOyAvLyBpbml0aWF0ZSBhbiBhcnJheVxuICAgICAgICBhcnJbZ3JvdXBOYW1lXS5wdXNoKHNpdGUpO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH0sIHt9KTtcblxuICAgIC8vIG1vZGlmeSB0aGUgdGlzc3VlIGdyb3VwcyB0aGF0IGhhdmUgb25seSBhIHNpbmdsZSBzaXRlXG4gICAgLy8gYnkgcmVwbGFjaW5nIHRoZSBncm91cCdzIG5hbWUgd2l0aCB0aGUgc2luZ2xlIHNpdGUncyBuYW1lIC0tIHJlc3VsdGluZyBhIGJldHRlciBBbHBoYWJldGljYWwgb3JkZXIgb2YgdGhlIHRpc3N1ZSBncm91cHNcblxuICAgIE9iamVjdC5rZXlzKHRpc3N1ZUdyb3VwcykuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKHRpc3N1ZUdyb3Vwc1tkXS5sZW5ndGggPT09IDEpeyAvLyBhIHNpbmdsZS1zaXRlIGdyb3VwXG4gICAgICAgICAgICBsZXQgc2l0ZSA9IHRpc3N1ZUdyb3Vwc1tkXVswXTsgLy8gdGhlIHNpbmdsZSBzaXRlXG4gICAgICAgICAgICBkZWxldGUgdGlzc3VlR3JvdXBzW2RdOyAvLyByZW1vdmUgdGhlIG9sZCBncm91cCBpbiB0aGUgZGljdGlvbmFyeVxuICAgICAgICAgICAgdGlzc3VlR3JvdXBzW3NpdGUubmFtZV0gPSBbc2l0ZV07IC8vIGNyZWF0ZSBhIG5ldyBncm91cCB3aXRoIHRoZSBzaXRlJ3MgbmFtZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRpc3N1ZUdyb3Vwcztcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgZXhvbnNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIGZ1bGwge0Jvb2xlYW59XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXhvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTW9kZWxFeG9ucyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ2NvbGxhcHNlZEdlbmVNb2RlbEV4b24nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKXtcbiAgICAgICAgY29uc29sZS5lcnJvcihqc29uKTtcbiAgICAgICAgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IFJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIH1cbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbJ3N0YXJ0JywgJ2VuZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghanNvblthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IFJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgIH0pO1xuICAgIHJldHVybiBqc29uW2F0dHJdLm1hcCgoZCk9PntcbiAgICAgICAgZC5jaHJvbVN0YXJ0ID0gZC5zdGFydDtcbiAgICAgICAgZC5jaHJvbUVuZCA9IGQuZW5kO1xuICAgICAgICByZXR1cm4gZDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUganVuY3Rpb25zXG4gKiBAcGFyYW0gZGF0YVxuICogQHJldHVybnMge0xpc3R9IG9mIGp1bmN0aW9uc1xuICogLy8ganVuY3Rpb24gYW5ub3RhdGlvbnMgYXJlIG5vdCBzdG9yZWQgaW4gTW9uZ29cbiAgICAvLyBzbyBoZXJlIHdlIHVzZSB0aGUganVuY3Rpb24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZSB0byBwYXJzZSB0aGUganVuY3Rpb24gSUQgZm9yIGl0cyBnZW5vbWljIGxvY2F0aW9uXG4gICAgLy8gYXNzdW1pbmcgdGhhdCBlYWNoIHRpc3N1ZSBoYXMgdGhlIHNhbWUganVuY3Rpb25zLFxuICAgIC8vIHRvIGdyYWIgYWxsIHRoZSBrbm93biBqdW5jdGlvbnMgb2YgYSBnZW5lLCB3ZSBvbmx5IG5lZWQgdG8gcXVlcnkgb25lIHRpc3N1ZVxuICAgIC8vIGhlcmUgd2UgYXJiaXRyYXJpbHkgcGljayBMaXZlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnVuY3Rpb25zKGpzb24pe1xuXG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5KdW5jdGlvbkV4cHJlc3Npb24nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcGFyc2VKdW5jdGlvbnMgaW5wdXQgZXJyb3IuICcgKyBhdHRyO1xuXG4gICAgLy8gY2hlY2sgcmVxdWlyZWQganNvbiBhdHRyaWJ1dGVzXG4gICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnanVuY3Rpb25JZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIC8vIHVzZSB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUganNvbiBvYmplY3RzIGFzIGEgdGVzdCBjYXNlXG4gICAgICAgIGlmKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanNvblthdHRyXVswXSk7XG4gICAgICAgICAgICB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganVuY3Rpb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0uZmlsdGVyKChkKT0+ZC50aXNzdWVTaXRlRGV0YWlsSWQ9PT0nTGl2ZXInKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gZC5qdW5jdGlvbklkLnNwbGl0KCdfJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tOiBwb3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21TdGFydDogcG9zWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tRW5kOiBwb3NbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25JZDogZC5qdW5jdGlvbklkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIHJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIHRyYW5zY3JpcHQgZXhvbiBvYmplY3QgbGlzdHMgaW5kZXhlZCBieSB0cmFuc2NyaXB0IElEcyAtLSBFTlNUIElEc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9ucyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ2V4b24nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogZXhvbic7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0ucmVkdWNlKChhLCBkKT0+e1xuICAgICAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzXG4gICAgICAgIFsndHJhbnNjcmlwdElkJywgJ2Nocm9tb3NvbWUnLCAnc3RhcnQnLCAnZW5kJywgJ2V4b25OdW1iZXInLCAnZXhvbklkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChhW2QudHJhbnNjcmlwdElkXSA9PT0gdW5kZWZpbmVkKSBhW2QudHJhbnNjcmlwdElkXSA9IFtdO1xuICAgICAgICBkLmNocm9tID0gZC5jaHJvbW9zb21lO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBkLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZC5lbmQ7XG4gICAgICAgIGFbZC50cmFuc2NyaXB0SWRdLnB1c2goZCk7XG4gICAgICAgIHJldHVybiBhO1xuICAgIH0sIHt9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zIGZyb20gdGhlIEdURXggd2ViIHNlcnZpY2U6ICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogQHBhcmFtIGRhdGEge0pzb259IGZyb20gd2ViIHNlcnZpY2UgZXhvblxuICogcmV0dXJucyBhIGxpc3Qgb2YgYWxsIEV4b25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25zVG9MaXN0KGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAnZXhvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBleG9uJztcbiAgICByZXR1cm4ganNvblthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gZnJvbSBHVEV4IHdlYiBzZXJ2aWNlICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogcmV0dXJucyBhIGxpc3Qgb2YgaXNvZm9ybSBvYmplY3RzIHNvcnRlZCBieSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0cyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3RyYW5zY3JpcHQnO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VJc29mb3JtcyBpbnB1dCBlcnJvcicpO1xuXG4gICAgLy8gY2hlY2sgcmVxdWlyZWQgYXR0cmlidXRlcywgdXNlIHRoZSBmaXJzdCB0cmFuc2NyaXB0IGFzIHRoZSB0ZXN0IGNhc2VcbiAgICBbJ3RyYW5zY3JpcHRJZCcsICdzdGFydCcsICdlbmQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICBpZighanNvblthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsga1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ganNvblthdHRyXS5zb3J0KChhLCBiKT0+e1xuICAgICAgICBjb25zdCBsMSA9IE1hdGguYWJzKGEuZW5kIC0gYS5zdGFydCkgKyAxO1xuICAgICAgICBjb25zdCBsMiA9IE1hdGguYWJzKGIuZW5kIC0gYi5zdGFydCkgKyAxO1xuICAgICAgICByZXR1cm4gLShsMS1sMik7IC8vIHNvcnQgYnkgaXNvZm9ybSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIGZpbmFsIChtYXNrZWQpIGdlbmUgbW9kZWwgZXhvbiBleHByZXNzaW9uXG4gKiBleHByZXNzaW9uIGlzIG5vcm1hbGl6ZWQgdG8gcmVhZHMgcGVyIGtiXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gb2YgZXhvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZXhvbnMge0xpc3R9IG9mIGV4b25zIHdpdGggcG9zaXRpb25zXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXhvbiBvYmplY3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25FeHByZXNzaW9uKGRhdGEsIGV4b25zKXtcbiAgICBjb25zdCBleG9uRGljdCA9IGV4b25zLnJlZHVjZSgoYSwgZCk9PnthW2QuZXhvbklkXSA9IGQ7IHJldHVybiBhO30sIHt9KTtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkV4b25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlRXhvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcblxuICAgIGNvbnN0IGV4b25PYmplY3RzID0gZGF0YVthdHRyXTtcbiAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgIFsnbWVkaWFuJywgJ2V4b25JZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWV4b25PYmplY3RzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6ICcgKyBkO1xuICAgIH0pO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGV4b24gY291bnRzXG4gICAgZXhvbk9iamVjdHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBjb25zdCBleG9uID0gZXhvbkRpY3RbZC5leG9uSWRdOyAvLyBmb3IgcmV0cmlldmluZyBleG9uIHBvc2l0aW9uc1xuICAgICAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgICAgICBbJ2VuZCcsICdzdGFydCddLmZvckVhY2goKHApPT57XG4gICAgICAgICAgICBpZiAoIWV4b24uaGFzT3duUHJvcGVydHkocCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VFeG9uRXhwcmVzc2lvbiBwb3NpdGlvbiBhdHRyIG5vdCBmb3VuZDogJyArIHA7XG4gICAgICAgIH0pO1xuICAgICAgICBkLmwgPSBleG9uLmVuZCAtIGV4b24uc3RhcnQgKyAxO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKGQubWVkaWFuKS9kLmw7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKGQubWVkaWFuKS9kLmw7XG4gICAgICAgIGQueCA9IGQuZXhvbklkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBleG9uLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZXhvbi5lbmQ7XG4gICAgICAgIGQudW5pdCA9ICdtZWRpYW4gJyArIGQudW5pdCArICcgcGVyIGJhc2UnO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGV4b25PYmplY3RzLnNvcnQoKGEsYik9PntcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydDxiLmNocm9tU3RhcnQpIHJldHVybiAtMTtcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydD5iLmNocm9tU3RhcnQpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTsgLy8gc29ydCBieSBnZW5vbWljIGxvY2F0aW9uIGluIGFzY2VuZGluZyBvcmRlclxufVxuXG4vKipcbiAqIFBhcnNlIGp1bmN0aW9uIG1lZGlhbiByZWFkIGNvdW50IGRhdGFcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBvZiB0aGUganVuY3Rpb24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHJldHVybnMge0xpc3R9IG9mIGp1bmN0aW9uIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG5cbiAgICBjb25zdCBqdW5jdGlvbnMgPSBkYXRhW2F0dHJdO1xuXG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBpZiAoanVuY3Rpb25zID09PSB1bmRlZmluZWQgfHwganVuY3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ05vIGp1bmN0aW9uIGRhdGEgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cblxuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGp1bmN0aW9uIHJlYWQgY291bnRzXG4gICAganVuY3Rpb25zLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnanVuY3Rpb25JZCcsICdtZWRpYW4nLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmICghZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNpbmdyIEVycm9yOiBwYXJzZUp1bmN0aW9uRXhwcmVzc2lvbiBhdHRyIG5vdCBmb3VuZDogJyArIGs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgbWVkaWFuID0gZC5tZWRpYW47XG4gICAgICAgIGxldCB0aXNzdWVJZCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLnRpc3N1ZUlkID0gdGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC54ID0gZC5qdW5jdGlvbklkO1xuICAgICAgICBkLnkgPSB0aXNzdWVJZDtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgIH0pO1xuXG4gICAgLy8gc29ydCBieSBnZW5vbWljIGxvY2F0aW9uIGluIGFzY2VuZGluZyBvcmRlclxuICAgIHJldHVybiBqdW5jdGlvbnMuc29ydCgoYSxiKT0+e1xuICAgICAgICBpZiAoYS5qdW5jdGlvbklkPmIuanVuY3Rpb25JZCkgcmV0dXJuIDE7XG4gICAgICAgIGVsc2UgaWYgKGEuanVuY3Rpb25JZDxiLmp1bmN0aW9uSWQpIHJldHVybiAtMTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdHJhbnNjcmlwdCBleHByZXNzaW9uXG4gKiBAcGFyYW0gZGF0YVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuVHJhbnNjcmlwdEV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygnUGFyc2luZyBFcnJvcjogcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvbiBpbnB1dCBlcnJvcicpO1xuICAgIC8vIHBhcnNlIEdURXggaXNvZm9ybSBtZWRpYW4gVFBNXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFsnbWVkaWFuJywgJ3RyYW5zY3JpcHRJZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdygnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgdHJhbnNjaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC5kaXNwbGF5VmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLnggPSBkLnRyYW5zY3JpcHRJZDtcbiAgICAgICAgZC55ID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC50aXNzdWVJZCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcGFyc2UgdHJhbnNjcmlwdCBleHByZXNzaW9uLCBhbmQgdHJhbnNwb3NlIHRoZSBtYXRyaXhcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb25UcmFuc3Bvc2UoZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5UcmFuc2NyaXB0RXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihkYXRhKTtcbiAgICAgICAgdGhyb3coJ1BhcnNpbmcgRXJyb3I6IHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb25UcmFuc3Bvc2UgaW5wdXQgZXJyb3IuJyk7XG4gICAgfVxuICAgIC8vIHBhcnNlIEdURXggaXNvZm9ybSBtZWRpYW4gVFBNXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFsnbWVkaWFuJywgJ3RyYW5zY3JpcHRJZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdygnUGFyc2luZyBFcnJvcjogUmVxdWlyZWQgdHJhbnNjcmlwdCBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWVkaWFuID0gZC5tZWRpYW47XG4gICAgICAgIGNvbnN0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIobWVkaWFuKTtcbiAgICAgICAgZC5kaXNwbGF5VmFsdWUgPSBOdW1iZXIobWVkaWFuKTtcbiAgICAgICAgZC55ID0gZC50cmFuc2NyaXB0SWQ7XG4gICAgICAgIGQueCA9IHRpc3N1ZUlkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIG1lZGlhbiBnZW5lIGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhIHtKc29ufSB3aXRoIGF0dHIgbWVkaWFuR2VuZUV4cHJlc3Npb25cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNZWRpYW5FeHByZXNzaW9uKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuR2VuZUV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgY29uc3QgYWRqdXN0ID0gMTtcbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBnZW5lIGV4cHJlc3Npb25cbiAgICAvLyBlcnJvci1jaGVja2luZyB0aGUgcmVxdWlyZWQgYXR0cmlidXRlczpcbiAgICBpZiAoZGF0YVthdHRyXS5sZW5ndGggPT09IDApIHRocm93ICdwYXJzZU1lZGlhbkV4cHJlc3Npb24gZmluZHMgbm8gZGF0YS4nO1xuICAgIFsnbWVkaWFuJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWRhdGFbYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZGF0YVthdHRyXVswXSk7XG4gICAgICAgICAgICB0aHJvdyBgUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZ3A6ICR7ZH1gO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbGV0IHJlc3VsdHMgPSBkYXRhW2F0dHJdO1xuICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihkKXtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLnkgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC5kaXNwbGF5VmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgZXhwcmVzc2lvbiBkYXRhIG9mIGEgZ2VuZSBmb3IgYSBncm91cGVkIHZpb2xpbiBwbG90XG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gZnJvbSBHVEV4IGdlbmUgZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHBhcmFtIGNvbG9ycyB7RGljdGlvbmFyeX0gdGhlIHZpb2xpbiBjb2xvciBmb3IgZ2VuZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2VuZUV4cHJlc3Npb25Gb3JWaW9saW4oZGF0YSwgdXNlTG9nPXRydWUsIGNvbG9ycz11bmRlZmluZWQpe1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZUV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBbJ2RhdGEnLCAndGlzc3VlU2l0ZURldGFpbElkJywgJ2dlbmVTeW1ib2wnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQudmFsdWVzID0gdXNlTG9nP2QuZGF0YS5tYXAoKGRkKT0+e3JldHVybiBNYXRoLmxvZzEwKCtkZCsxKX0pOmQuZGF0YTtcbiAgICAgICAgZC5ncm91cCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLmxhYmVsID0gZC5nZW5lU3ltYm9sO1xuICAgICAgICBkLmNvbG9yID0gY29sb3JzPT09dW5kZWZpbmVkPycjOTBjMWMxJzpjb2xvcnNbZC5nZW5jb2RlSWRdO1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIHRoZSBMRCAobGlua2FnZSBkaXNlcXVpbGlicml1bSBkYXRhKVxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBsZCB3ZWIgc2VydmljZVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VMRChkYXRhKSB7XG4gICAgY29uc3QgYXR0ciA9ICdsZCc7XG4gICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgbGV0IHBhcnNlZCA9IFtdO1xuICAgIGxldCB1bmlxdWUgPSB7fTtcbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgbGV0IGxhYmVscyA9IGRbMF0uc3BsaXQoXCIsXCIpLnNvcnQoKTsgLy8gc29ydCB0aGUgdmFyaWFudCBJRHNcbiAgICAgICAgdW5pcXVlW2xhYmVsc1swXV0gPSB0cnVlO1xuICAgICAgICB1bmlxdWVbbGFiZWxzWzFdXSA9IHRydWU7XG4gICAgICAgIHBhcnNlZC5wdXNoKHtcbiAgICAgICAgICAgIHg6IGxhYmVsc1swXSxcbiAgICAgICAgICAgIGRpc3BsYXlYOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGxhYmVsc1swXSksXG4gICAgICAgICAgICB5OiBsYWJlbHNbMV0sXG4gICAgICAgICAgICBkaXNwbGF5WTogZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChsYWJlbHNbMV0pLFxuICAgICAgICAgICAgdmFsdWU6IHBhcnNlRmxvYXQoZFsxXSksXG4gICAgICAgICAgICBkaXNwbGF5VmFsdWU6IHBhcnNlRmxvYXQoZFsxXSkudG9QcmVjaXNpb24oMykgLy8gdG9QcmVjaXNpb24oKSByZXR1cm5zIGEgc3RyaW5nXG4gICAgICAgIH0pXG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXModW5pcXVlKS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBwYXJzZWQucHVzaCh7XG4gICAgICAgICAgICB4OiBkLFxuICAgICAgICAgICAgZGlzcGxheVg6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoZCksXG4gICAgICAgICAgICB5OiBkLFxuICAgICAgICAgICAgZGlzcGxheVk6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQoZCksXG4gICAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogXCIxXCJcbiAgICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gcGFyc2VkO1xufVxuXG4vKiBwYXJzZSB0aGUgZXhwcmVzc2lvbiBkYXRhIG9mIGEgZ2VuZSBmb3IgYm94cGxvdFxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBnZW5lIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSB0aXNzdWVzIHtPYmplY3R9IG1hcHBpbmcgb2YgdGlzc3VlIGlkcyB0byBsYWJlbHMgKHRpc3N1ZSBuYW1lKVxuICogQHBhcmFtIGNvbG9ycyB7T2JqZWN0fSBtYXBwaW5nIG9mIHRpc3N1ZSBpZHMgdG8gYm94cGxvdCBjb2xvcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2VuZUV4cHJlc3Npb25Gb3JCb3hwbG90KGRhdGEsIHRpc3N1ZXM9dW5kZWZpbmVkLCBjb2xvcnM9dW5kZWZpbmVkKSB7XG4gICAgY29uc3QgYXR0ciA9ICdnZW5lRXhwcmVzc2lvbic7XG5cbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coYFBhcnNpbmcgZXJyb3I6IHJlcXVpcmVkIEpTT04gYXR0cmlidXRlICR7YXR0cn0gbWlzc2luZy5gKTtcblxuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgWydkYXRhJywgJ2dlbmNvZGVJZCcsICdnZW5lU3ltYm9sJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCddLmZvckVhY2goKGspPT57XG4gICAgICAgICAgICBpZiAoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93IGBQYXJzaW5nIGVycm9yOiByZXF1aXJlZCBKU09OIGF0dHJpYnV0ZSAke2t9IGlzIG1pc3NpbmcgZnJvbSBhIHJlY29yZC5gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZC5sYWJlbCA9IHRpc3N1ZXM9PT11bmRlZmluZWQ/ZC50aXNzdWVTaXRlRGV0YWlsSWQ6dGlzc3Vlc1tkLnRpc3N1ZVNpdGVEZXRhaWxJZF07XG4gICAgICAgIGQuY29sb3IgPSBjb2xvcnM9PT11bmRlZmluZWQ/JyM0NjgyYjQnOmNvbG9yc1tkLnRpc3N1ZVNpdGVEZXRhaWxJZF07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBnZW5lcmF0ZSB2YXJpYW50IElEIHNob3J0aGFuZFxuICogQHBhcmFtIGlkXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChpZCl7XG4gICAgbGV0IHRlbXAgPSBpZC5zcGxpdChcIl9cIik7XG4gICAgaWYodGVtcFsyXS5sZW5ndGggPT09IDEgJiYgdGVtcFszXS5sZW5ndGggPT09IDEpIHJldHVybiBpZDtcbiAgICBpZih0ZW1wWzJdLmxlbmd0aCA+IHRlbXBbM10ubGVuZ3RoKSB7XG4gICAgICAgIHRlbXBbMl0gPSBcImRlbFwiO1xuICAgICAgICB0ZW1wLnNwbGljZSgzLCAxKTsgLy8gZGVsZXRlIHRoZSBhbHRcbiAgICB9XG4gICAgZWxzZSBpZih0ZW1wWzNdLmxlbmd0aCA+IHRlbXBbMl0ubGVuZ3RoKSB7XG4gICAgICAgIHRlbXBbM10gPSBcImluc1wiO1xuICAgICAgICB0ZW1wLnNwbGljZSgyLCAxKTsgLy8gZGVsZXRlIHRoZSByZWZcbiAgICB9XG4gICAgZWxzZSB7IC8vIHRlbXBbM10ubGVuZ3RoID09IHRlbXBbMl0ubGVuZ3RoIGFuZCB0ZW1wWzNdLmxlbmd0aCA+IDFcbiAgICAgICAgdGVtcFszXSA9IFwic3ViXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDIsIDEpOyAvLyBkZWxldGUgdGhlIHJlZlxuICAgIH1cbiAgICByZXR1cm4gdGVtcC5qb2luKFwiX1wiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3RvclwiO1xuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCB2YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG59XG4iLCJpbXBvcnQgdmFyaWFuY2UgZnJvbSBcIi4vdmFyaWFuY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgdmFyIHYgPSB2YXJpYW5jZShhcnJheSwgZik7XG4gIHJldHVybiB2ID8gTWF0aC5zcXJ0KHYpIDogdjtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gMCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG1lYW4gPSAwLFxuICAgICAgdmFsdWUsXG4gICAgICBkZWx0YSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobSA+IDEpIHJldHVybiBzdW0gLyAobSAtIDEpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFttaW4sIG1heF07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgKiBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgLSBpKSAvIHN0ZXA7XG4gIH1cblxuICBpZiAocmV2ZXJzZSkgdGlja3MucmV2ZXJzZSgpO1xuXG4gIHJldHVybiB0aWNrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKTtcbiAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpXG4gICAgICA6IC1NYXRoLnBvdygxMCwgLXBvd2VyKSAvIChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHAsIHZhbHVlb2YpIHtcbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkgdmFsdWVvZiA9IG51bWJlcjtcbiAgaWYgKCEobiA9IHZhbHVlcy5sZW5ndGgpKSByZXR1cm47XG4gIGlmICgocCA9ICtwKSA8PSAwIHx8IG4gPCAyKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzWzBdLCAwLCB2YWx1ZXMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzW24gLSAxXSwgbiAtIDEsIHZhbHVlcyk7XG4gIHZhciBuLFxuICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgaTAgPSBNYXRoLmZsb29yKGkpLFxuICAgICAgdmFsdWUwID0gK3ZhbHVlb2YodmFsdWVzW2kwXSwgaTAsIHZhbHVlcyksXG4gICAgICB2YWx1ZTEgPSArdmFsdWVvZih2YWx1ZXNbaTAgKyAxXSwgaTAgKyAxLCB2YWx1ZXMpO1xuICByZXR1cm4gdmFsdWUwICsgKHZhbHVlMSAtIHZhbHVlMCkgKiAoaSAtIGkwKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IG4sXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBpZiAobSkgcmV0dXJuIHN1bSAvIG07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi9xdWFudGlsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBudW1iZXJzID0gW107XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBxdWFudGlsZShudW1iZXJzLnNvcnQoYXNjZW5kaW5nKSwgMC41KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEludGVycG9sYXRvcihkb21haW4sIGludGVycG9sYXRvcikge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5pbnRlcnBvbGF0b3IoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5pbnRlcnBvbGF0b3IoaW50ZXJwb2xhdG9yKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgbWFwID0gYXJyYXkubWFwO1xuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuIiwiaW1wb3J0IHttYXB9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IHZhciBpbXBsaWNpdCA9IHtuYW1lOiBcImltcGxpY2l0XCJ9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRpbmFsKCkge1xuICB2YXIgaW5kZXggPSBtYXAoKSxcbiAgICAgIGRvbWFpbiA9IFtdLFxuICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcblxuICBmdW5jdGlvbiBzY2FsZShkKSB7XG4gICAgdmFyIGtleSA9IGQgKyBcIlwiLCBpID0gaW5kZXguZ2V0KGtleSk7XG4gICAgaWYgKCFpKSB7XG4gICAgICBpZiAodW5rbm93biAhPT0gaW1wbGljaXQpIHJldHVybiB1bmtub3duO1xuICAgICAgaW5kZXguc2V0KGtleSwgaSA9IGRvbWFpbi5wdXNoKGQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlWyhpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdLCBpbmRleCA9IG1hcCgpO1xuICAgIHZhciBpID0gLTEsIG4gPSBfLmxlbmd0aCwgZCwga2V5O1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWluZGV4LmhhcyhrZXkgPSAoZCA9IF9baV0pICsgXCJcIikpIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKGQpKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBzY2FsZSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcmRpbmFsKGRvbWFpbiwgcmFuZ2UpLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImltcG9ydCB7cmFuZ2UgYXMgc2VxdWVuY2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCBvcmRpbmFsIGZyb20gXCIuL29yZGluYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFuZCgpIHtcbiAgdmFyIHNjYWxlID0gb3JkaW5hbCgpLnVua25vd24odW5kZWZpbmVkKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIG9yZGluYWxSYW5nZSA9IHNjYWxlLnJhbmdlLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICBzdGVwLFxuICAgICAgYmFuZHdpZHRoLFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IDAsXG4gICAgICBwYWRkaW5nT3V0ZXIgPSAwLFxuICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgZGVsZXRlIHNjYWxlLnVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgcmV2ZXJzZSA9IHJhbmdlWzFdIDwgcmFuZ2VbMF0sXG4gICAgICAgIHN0YXJ0ID0gcmFuZ2VbcmV2ZXJzZSAtIDBdLFxuICAgICAgICBzdG9wID0gcmFuZ2VbMSAtIHJldmVyc2VdO1xuICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDEsIG4gLSBwYWRkaW5nSW5uZXIgKyBwYWRkaW5nT3V0ZXIgKiAyKTtcbiAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgIGJhbmR3aWR0aCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmdJbm5lcik7XG4gICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICByZXR1cm4gb3JkaW5hbFJhbmdlKHJldmVyc2UgPyB2YWx1ZXMucmV2ZXJzZSgpIDogdmFsdWVzKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IFsrX1swXSwgK19bMV1dLCByb3VuZCA9IHRydWUsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZHdpZHRoO1xuICB9O1xuXG4gIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RlcDtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgcmVzY2FsZSgpKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgcGFkZGluZ091dGVyID0gK18pLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1pbigxLCBfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ091dGVyID0gK18sIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XG4gIH07XG5cbiAgc2NhbGUuYWxpZ24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxpZ24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBhbGlnbjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmQoZG9tYWluKCksIHJhbmdlKVxuICAgICAgICAucm91bmQocm91bmQpXG4gICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxuICAgICAgICAucGFkZGluZ091dGVyKHBhZGRpbmdPdXRlcilcbiAgICAgICAgLmFsaWduKGFsaWduKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHJlc2NhbGUoKSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgdmFyIGNvcHkgPSBzY2FsZS5jb3B5O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KCkge1xuICByZXR1cm4gcG9pbnRpc2goYmFuZC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhZGRpbmdJbm5lcigxKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleDMgPSAvXiMoWzAtOWEtZl17M30pJC8sXG4gICAgcmVIZXg2ID0gL14jKFswLTlhLWZdezZ9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5oZXgoKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbTtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleDMuZXhlYyhmb3JtYXQpKSA/IChtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4MGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSkgLy8gI2YwMFxuICAgICAgOiAobSA9IHJlSGV4Ni5leGVjKGZvcm1hdCkpID8gcmdibihwYXJzZUludChtWzFdLCAxNikpIC8vICNmZjAwMDBcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5yICYmIHRoaXMuciA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuZyAmJiB0aGlzLmcgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmIgJiYgdGhpcy5iIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImV4cG9ydCB2YXIgZGVnMnJhZCA9IE1hdGguUEkgLyAxODA7XG5leHBvcnQgdmFyIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2J9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGhcIjtcblxuLy8gaHR0cHM6Ly9iZXRhLm9ic2VydmFibGVocS5jb20vQG1ib3N0b2NrL2xhYi1hbmQtcmdiXG52YXIgSyA9IDE4LFxuICAgIFhuID0gMC45NjQyMixcbiAgICBZbiA9IDEsXG4gICAgWm4gPSAwLjgyNTIxLFxuICAgIHQwID0gNCAvIDI5LFxuICAgIHQxID0gNiAvIDI5LFxuICAgIHQyID0gMyAqIHQxICogdDEsXG4gICAgdDMgPSB0MSAqIHQxICogdDE7XG5cbmZ1bmN0aW9uIGxhYkNvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHtcbiAgICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICAgIHZhciBoID0gby5oICogZGVnMnJhZDtcbiAgICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbiAgfVxuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gcmdiMmxyZ2Ioby5yKSxcbiAgICAgIGcgPSByZ2IybHJnYihvLmcpLFxuICAgICAgYiA9IHJnYjJscmdiKG8uYiksXG4gICAgICB5ID0geHl6MmxhYigoMC4yMjI1MDQ1ICogciArIDAuNzE2ODc4NiAqIGcgKyAwLjA2MDYxNjkgKiBiKSAvIFluKSwgeCwgejtcbiAgaWYgKHIgPT09IGcgJiYgZyA9PT0gYikgeCA9IHogPSB5OyBlbHNlIHtcbiAgICB4ID0geHl6MmxhYigoMC40MzYwNzQ3ICogciArIDAuMzg1MDY0OSAqIGcgKyAwLjE0MzA4MDQgKiBiKSAvIFhuKTtcbiAgICB6ID0geHl6MmxhYigoMC4wMTM5MzIyICogciArIDAuMDk3MTA0NSAqIGcgKyAwLjcxNDE3MzMgKiBiKSAvIFpuKTtcbiAgfVxuICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncmF5KGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIG5ldyBMYWIobCwgMCwgMCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGxhYkNvbnZlcnQobCkgOiBuZXcgTGFiKGwsIGEsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLmEgPSArYTtcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoTGFiLCBsYWIsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGxyZ2IycmdiKCAzLjEzMzg1NjEgKiB4IC0gMS42MTY4NjY3ICogeSAtIDAuNDkwNjE0NiAqIHopLFxuICAgICAgbHJnYjJyZ2IoLTAuOTc4NzY4NCAqIHggKyAxLjkxNjE0MTUgKiB5ICsgMC4wMzM0NTQwICogeiksXG4gICAgICBscmdiMnJnYiggMC4wNzE5NDUzICogeCAtIDAuMjI4OTkxNCAqIHkgKyAxLjQwNTI0MjcgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiBscmdiMnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IybHJnYih4KSB7XG4gIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuXG5mdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgaWYgKG8uYSA9PT0gMCAmJiBvLmIgPT09IDApIHJldHVybiBuZXcgSGNsKE5hTiwgMCwgby5sLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IE1hdGguYXRhbjIoby5iLCBvLmEpICogcmFkMmRlZztcbiAgcmV0dXJuIG5ldyBIY2woaCA8IDAgPyBoICsgMzYwIDogaCwgTWF0aC5zcXJ0KG8uYSAqIG8uYSArIG8uYiAqIG8uYiksIG8ubCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxjaChsLCBjLCBoLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChsKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5jID0gK2M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGFiQ29udmVydCh0aGlzKS5yZ2IoKTtcbiAgfVxufSkpO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2IsIGRhcmtlciwgYnJpZ2h0ZXJ9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGhcIjtcblxudmFyIEEgPSAtMC4xNDg2MSxcbiAgICBCID0gKzEuNzgyNzcsXG4gICAgQyA9IC0wLjI5MjI3LFxuICAgIEQgPSAtMC45MDY0OSxcbiAgICBFID0gKzEuOTcyOTQsXG4gICAgRUQgPSBFICogRCxcbiAgICBFQiA9IEUgKiBCLFxuICAgIEJDX0RBID0gQiAqIEMgLSBEICogQTtcblxuZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgQ3ViZWhlbGl4KSByZXR1cm4gbmV3IEN1YmVoZWxpeChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcbiAgICAgIGJsID0gYiAtIGwsXG4gICAgICBrID0gKEUgKiAoZyAtIGwpIC0gQyAqIGJsKSAvIEQsXG4gICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcbiAgICAgIGggPSBzID8gTWF0aC5hdGFuMihrLCBibCkgKiByYWQyZGVnIC0gMTIwIDogTmFOO1xuICByZXR1cm4gbmV3IEN1YmVoZWxpeChoIDwgMCA/IGggKyAzNjAgOiBoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGN1YmVoZWxpeENvbnZlcnQoaCkgOiBuZXcgQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoQ3ViZWhlbGl4LCBjdWJlaGVsaXgsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSBpc05hTih0aGlzLmgpID8gMCA6ICh0aGlzLmggKyAxMjApICogZGVnMnJhZCxcbiAgICAgICAgbCA9ICt0aGlzLmwsXG4gICAgICAgIGEgPSBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyAqIGwgKiAoMSAtIGwpLFxuICAgICAgICBjb3NoID0gTWF0aC5jb3MoaCksXG4gICAgICAgIHNpbmggPSBNYXRoLnNpbihoKTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIDI1NSAqIChsICsgYSAqIChBICogY29zaCArIEIgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoQyAqIGNvc2ggKyBEICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEUgKiBjb3NoKSksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWRcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2JcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZVwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0XCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZ1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGFycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2VcIjtcblxudmFyIGNzc05vZGUsXG4gICAgY3NzUm9vdCxcbiAgICBjc3NWaWV3LFxuICAgIHN2Z05vZGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlclwiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJ2YXIgcmhvID0gTWF0aC5TUVJUMixcbiAgICByaG8yID0gMixcbiAgICByaG80ID0gNCxcbiAgICBlcHNpbG9uMiA9IDFlLTEyO1xuXG5mdW5jdGlvbiBjb3NoKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHNpbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gdGFuaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xufVxuXG4vLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4vLyBwMSA9IFt1eDEsIHV5MSwgdzFdXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwMCwgcDEpIHtcbiAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgaSxcbiAgICAgIFM7XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhbCBjYXNlLlxuICBlbHNlIHtcbiAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxuICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcbiAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBzID0gdCAqIFMsXG4gICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICB1eTAgKyB1ICogZHksXG4gICAgICAgIHcwICogY29zaHIwIC8gY29zaChyaG8gKiBzICsgcjApXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGkuZHVyYXRpb24gPSBTICogMTAwMDtcblxuICByZXR1cm4gaTtcbn1cbiIsImltcG9ydCB7Y3ViZWhlbGl4IGFzIGNvbG9yQ3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gY3ViZWhlbGl4KGh1ZSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGN1YmVoZWxpeEdhbW1hKHkpIHtcbiAgICB5ID0gK3k7XG5cbiAgICBmdW5jdGlvbiBjdWJlaGVsaXgoc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JDdWJlaGVsaXgoc3RhcnQpKS5oLCAoZW5kID0gY29sb3JDdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGN1YmVoZWxpeC5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xuXG4gICAgcmV0dXJuIGN1YmVoZWxpeDtcbiAgfSkoMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1YmVoZWxpeChodWUpO1xuZXhwb3J0IHZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4KGNvbG9yKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZSBhcyBpbnRlcnBvbGF0ZVZhbHVlLCBpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSb3VuZH0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge21hcCwgc2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbnZhciB1bml0ID0gWzAsIDFdO1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICByZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKGEsIGIpIHtcbiAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxuICAgICAgOiBjb25zdGFudChpc05hTihiKSA/IE5hTiA6IDAuNSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wZXIoZG9tYWluKSB7XG4gIHZhciBhID0gZG9tYWluWzBdLCBiID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSwgdDtcbiAgaWYgKGEgPiBiKSB0ID0gYSwgYSA9IGIsIGIgPSB0O1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5tYXgoYSwgTWF0aC5taW4oYiwgeCkpOyB9O1xufVxuXG4vLyBub3JtYWxpemUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIGludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmFuZ2UgdmFsdWUgeCBpbiBbYSxiXS5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IG5vcm1hbGl6ZShkMSwgZDApLCByMCA9IGludGVycG9sYXRlKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBub3JtYWxpemUoZDAsIGQxKSwgcjAgPSBpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBqID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDEsXG4gICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgciA9IG5ldyBBcnJheShqKSxcbiAgICAgIGkgPSAtMTtcblxuICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgaWYgKGRvbWFpbltqXSA8IGRvbWFpblswXSkge1xuICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcbiAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG5cbiAgd2hpbGUgKCsraSA8IGopIHtcbiAgICBkW2ldID0gbm9ybWFsaXplKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IGludGVycG9sYXRlKHJhbmdlW2ldLCByYW5nZVtpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICB2YXIgaSA9IGJpc2VjdChkb21haW4sIHgsIDEsIGopIC0gMTtcbiAgICByZXR1cm4gcltpXShkW2ldKHgpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAucmFuZ2Uoc291cmNlLnJhbmdlKCkpXG4gICAgICAuaW50ZXJwb2xhdGUoc291cmNlLmludGVycG9sYXRlKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpXG4gICAgICAudW5rbm93bihzb3VyY2UudW5rbm93bigpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgZG9tYWluID0gdW5pdCxcbiAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHVudHJhbnNmb3JtLFxuICAgICAgdW5rbm93bixcbiAgICAgIGNsYW1wID0gaWRlbnRpdHksXG4gICAgICBwaWVjZXdpc2UsXG4gICAgICBvdXRwdXQsXG4gICAgICBpbnB1dDtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHBpZWNld2lzZSA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgcmFuZ2UsIGludGVycG9sYXRlKSkpKHRyYW5zZm9ybShjbGFtcCh4KSkpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBjbGFtcCh1bnRyYW5zZm9ybSgoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4ubWFwKHRyYW5zZm9ybSksIGludGVycG9sYXRlTnVtYmVyKSkpKHkpKSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IG1hcC5jYWxsKF8sIG51bWJlciksIGNsYW1wID09PSBpZGVudGl0eSB8fCAoY2xhbXAgPSBjbGFtcGVyKGRvbWFpbikpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IHNsaWNlLmNhbGwoXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gXyA/IGNsYW1wZXIoZG9tYWluKSA6IGlkZW50aXR5LCBzY2FsZSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKCkodHJhbnNmb3JtLCB1bnRyYW5zZm9ybSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsIi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWwoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIGlmICgoaSA9ICh4ID0gcCA/IHgudG9FeHBvbmVudGlhbChwIC0gMSkgOiB4LnRvRXhwb25lbnRpYWwoKSkuaW5kZXhPZihcImVcIikpIDwgMCkgcmV0dXJuIG51bGw7IC8vIE5hTiwgwrFJbmZpbml0eVxuICB2YXIgaSwgY29lZmZpY2llbnQgPSB4LnNsaWNlKDAsIGkpO1xuXG4gIC8vIFRoZSBzdHJpbmcgcmV0dXJuZWQgYnkgdG9FeHBvbmVudGlhbCBlaXRoZXIgaGFzIHRoZSBmb3JtIFxcZFxcLlxcZCtlWy0rXVxcZCtcbiAgLy8gKGUuZy4sIDEuMmUrMykgb3IgdGhlIGZvcm0gXFxkZVstK11cXGQrIChlLmcuLCAxZSszKS5cbiAgcmV0dXJuIFtcbiAgICBjb2VmZmljaWVudC5sZW5ndGggPiAxID8gY29lZmZpY2llbnRbMF0gKyBjb2VmZmljaWVudC5zbGljZSgyKSA6IGNvZWZmaWNpZW50LFxuICAgICt4LnNsaWNlKGkgKyAxKVxuICBdO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbChNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xufVxuIiwiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHRoaXMuZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiO1xuICB0aGlzLmFsaWduID0gbWF0Y2hbMl0gfHwgXCI+XCI7XG4gIHRoaXMuc2lnbiA9IG1hdGNoWzNdIHx8IFwiLVwiO1xuICB0aGlzLnN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCI7XG4gIHRoaXMuemVybyA9ICEhbWF0Y2hbNV07XG4gIHRoaXMud2lkdGggPSBtYXRjaFs2XSAmJiArbWF0Y2hbNl07XG4gIHRoaXMuY29tbWEgPSAhIW1hdGNoWzddO1xuICB0aGlzLnByZWNpc2lvbiA9IG1hdGNoWzhdICYmICttYXRjaFs4XS5zbGljZSgxKTtcbiAgdGhpcy50cmltID0gISFtYXRjaFs5XTtcbiAgdGhpcy50eXBlID0gbWF0Y2hbMTBdIHx8IFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PSBudWxsID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PSBudWxsID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IHZhciBwcmVmaXhFeHBvbmVudDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWwoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuICh4ICogMTAwKS50b0ZpeGVkKHApOyB9LFxuICBcImJcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKTsgfSxcbiAgXCJjXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggKyBcIlwiOyB9LFxuICBcImRcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxMCk7IH0sXG4gIFwiZVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7IH0sXG4gIFwiZlwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRml4ZWQocCk7IH0sXG4gIFwiZ1wiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvUHJlY2lzaW9uKHApOyB9LFxuICBcIm9cIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KTsgfSxcbiAgXCJwXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIGZvcm1hdFJvdW5kZWQoeCAqIDEwMCwgcCk7IH0sXG4gIFwiclwiOiBmb3JtYXRSb3VuZGVkLFxuICBcInNcIjogZm9ybWF0UHJlZml4QXV0byxcbiAgXCJYXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IH0sXG4gIFwieFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cFwiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllclwiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbVwiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyAmJiBsb2NhbGUudGhvdXNhbmRzID8gZm9ybWF0R3JvdXAobG9jYWxlLmdyb3VwaW5nLCBsb2NhbGUudGhvdXNhbmRzKSA6IGlkZW50aXR5LFxuICAgICAgY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA/IGZvcm1hdE51bWVyYWxzKGxvY2FsZS5udW1lcmFscykgOiBpZGVudGl0eSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCB8fCBcIiVcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PSBudWxsICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMF0gOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVsxXSA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGR1cmluZyBmb3JtYXR0aW5nLCB0cmVhdCBhcyBwb3NpdGl2ZS5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogXCItXCIpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGVcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkZWNpbWFsOiBcIi5cIixcbiAgdGhvdXNhbmRzOiBcIixcIixcbiAgZ3JvdXBpbmc6IFszXSxcbiAgY3VycmVuY3k6IFtcIiRcIiwgXCJcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG51bWVyYWxzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgIH0pO1xuICB9O1xufVxuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgeyBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGkwID0gMDsgfSBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrcywgdGlja0luY3JlbWVudH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQgY29udGludW91cywge2NvcHksIGlkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgc3RhcnQgPSBkW2kwXSxcbiAgICAgICAgc3RvcCA9IGRbaTFdLFxuICAgICAgICBzdGVwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH1cblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsInZhciB0MCA9IG5ldyBEYXRlLFxuICAgIHQxID0gbmV3IERhdGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGludGVydmFsO1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW10sIHByZXZpb3VzO1xuICAgIHN0YXJ0ID0gaW50ZXJ2YWwuY2VpbChzdGFydCk7XG4gICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgIGRvIHJhbmdlLnB1c2gocHJldmlvdXMgPSBuZXcgRGF0ZSgrc3RhcnQpKSwgb2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCk7XG4gICAgd2hpbGUgKHByZXZpb3VzIDwgc3RhcnQgJiYgc3RhcnQgPCBzdG9wKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkgZGF0ZS5zZXRUaW1lKGRhdGUgLSAxKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB0MC5zZXRUaW1lKCtzdGFydCksIHQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDApLCBmbG9vcmkodDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAsIHQxKSk7XG4gICAgfTtcblxuICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgIDogaW50ZXJ2YWwuZmlsdGVyKGZpZWxkXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGludGVydmFsO1xufVxuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciBtaWxsaXNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAvLyBub29wXG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxubWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGspICogayk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWlsbGlzZWNvbmQ7XG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kLnJhbmdlO1xuIiwiZXhwb3J0IHZhciBkdXJhdGlvblNlY29uZCA9IDFlMztcbmV4cG9ydCB2YXIgZHVyYXRpb25NaW51dGUgPSA2ZTQ7XG5leHBvcnQgdmFyIGR1cmF0aW9uSG91ciA9IDM2ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uRGF5ID0gODY0ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uV2VlayA9IDYwNDhlNTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBkYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkYXk7XG5leHBvcnQgdmFyIGRheXMgPSBkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgbWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSBkYXRlLmdldFNlY29uZHMoKSAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1pbnV0ZTtcbmV4cG9ydCB2YXIgbWludXRlcyA9IG1pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXIsIGR1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIGhvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQgLSBkYXRlLmdldE1pbnV0ZXMoKSAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGhvdXI7XG5leHBvcnQgdmFyIGhvdXJzID0gaG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG5mdW5jdGlvbiB3ZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHN1bmRheSA9IHdlZWtkYXkoMCk7XG5leHBvcnQgdmFyIG1vbmRheSA9IHdlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHR1ZXNkYXkgPSB3ZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB0aHVyc2RheSA9IHdlZWtkYXkoNCk7XG5leHBvcnQgdmFyIGZyaWRheSA9IHdlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciBzdW5kYXlzID0gc3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBtb25kYXlzID0gbW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHdlZG5lc2RheXMgPSB3ZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHRodXJzZGF5cyA9IHRodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBzYXR1cmRheXMgPSBzYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciBtb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb250aDtcbmV4cG9ydCB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciB1dGNNaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01pbnV0ZTtcbmV4cG9ydCB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXJ9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciB1dGNIb3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNIb3VyO1xuZXhwb3J0IHZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXl9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciB1dGNEYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0RheTtcbmV4cG9ydCB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbmZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciB1dGNTdW5kYXkgPSB1dGNXZWVrZGF5KDApO1xuZXhwb3J0IHZhciB1dGNNb25kYXkgPSB1dGNXZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5ID0gdXRjV2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5ID0gdXRjV2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXkgPSB1dGNXZWVrZGF5KDQpO1xuZXhwb3J0IHZhciB1dGNGcmlkYXkgPSB1dGNXZWVrZGF5KDUpO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheSA9IHV0Y1dlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5cyA9IHV0Y1N1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheXMgPSB1dGNUdWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5cyA9IHV0Y0ZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXlzID0gdXRjU2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IHtcbiAgdGltZURheSxcbiAgdGltZVN1bmRheSxcbiAgdGltZU1vbmRheSxcbiAgdGltZVRodXJzZGF5LFxuICB0aW1lWWVhcixcbiAgdXRjRGF5LFxuICB1dGNTdW5kYXksXG4gIHV0Y01vbmRheSxcbiAgdXRjVGh1cnNkYXksXG4gIHV0Y1llYXJcbn0gZnJvbSBcImQzLXRpbWVcIjtcblxuZnVuY3Rpb24gbG9jYWxEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbn1cblxuZnVuY3Rpb24gdXRjRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbn1cblxuZnVuY3Rpb24gbmV3WWVhcih5KSB7XG4gIHJldHVybiB7eTogeSwgbTogMCwgZDogMSwgSDogMCwgTTogMCwgUzogMCwgTDogMH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdExvY2FsZShsb2NhbGUpIHtcbiAgdmFyIGxvY2FsZV9kYXRlVGltZSA9IGxvY2FsZS5kYXRlVGltZSxcbiAgICAgIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsXG4gICAgICBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLFxuICAgICAgbG9jYWxlX3BlcmlvZHMgPSBsb2NhbGUucGVyaW9kcyxcbiAgICAgIGxvY2FsZV93ZWVrZGF5cyA9IGxvY2FsZS5kYXlzLFxuICAgICAgbG9jYWxlX3Nob3J0V2Vla2RheXMgPSBsb2NhbGUuc2hvcnREYXlzLFxuICAgICAgbG9jYWxlX21vbnRocyA9IGxvY2FsZS5tb250aHMsXG4gICAgICBsb2NhbGVfc2hvcnRNb250aHMgPSBsb2NhbGUuc2hvcnRNb250aHM7XG5cbiAgdmFyIHBlcmlvZFJlID0gZm9ybWF0UmUobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgcGVyaW9kTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICB3ZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBtb250aFJlID0gZm9ybWF0UmUobG9jYWxlX21vbnRocyksXG4gICAgICBtb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfbW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydE1vbnRocyksXG4gICAgICBzaG9ydE1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG5cbiAgdmFyIGZvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0V2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0U2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0TW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdE1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0SG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdERheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0TWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0TWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0UGVyaW9kLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0U2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0V2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0V2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0WWVhcixcbiAgICBcIllcIjogZm9ybWF0RnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFpvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHV0Y0Zvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFVUQ1Nob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0VVRDV2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0VVRDU2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0VVRDTW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0VVRDSG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0VVRDTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0VVRDUGVyaW9kLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0VVRDV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICBcIllcIjogZm9ybWF0VVRDRnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHBhcnNlcyA9IHtcbiAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IHBhcnNlV2Vla2RheSxcbiAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgIFwiY1wiOiBwYXJzZUxvY2FsZURhdGVUaW1lLFxuICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImZcIjogcGFyc2VNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IHBhcnNlSG91cjI0LFxuICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcbiAgICBcImpcIjogcGFyc2VEYXlPZlllYXIsXG4gICAgXCJMXCI6IHBhcnNlTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBwYXJzZU1pbnV0ZXMsXG4gICAgXCJwXCI6IHBhcnNlUGVyaW9kLFxuICAgIFwiUVwiOiBwYXJzZVVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IHBhcnNlU2Vjb25kcyxcbiAgICBcInVcIjogcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBwYXJzZVdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IHBhcnNlV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IHBhcnNlTG9jYWxlRGF0ZSxcbiAgICBcIlhcIjogcGFyc2VMb2NhbGVUaW1lLFxuICAgIFwieVwiOiBwYXJzZVllYXIsXG4gICAgXCJZXCI6IHBhcnNlRnVsbFllYXIsXG4gICAgXCJaXCI6IHBhcnNlWm9uZSxcbiAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIC8vIFRoZXNlIHJlY3Vyc2l2ZSBkaXJlY3RpdmUgZGVmaW5pdGlvbnMgbXVzdCBiZSBkZWZlcnJlZC5cbiAgZm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgZm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIHV0Y0Zvcm1hdHMpO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIsIGZvcm1hdHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIHN0cmluZyA9IFtdLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBqID0gMCxcbiAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgICBjLFxuICAgICAgICAgIHBhZCxcbiAgICAgICAgICBmb3JtYXQ7XG5cbiAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKTtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHNwZWNpZmllci5jaGFyQ29kZUF0KGkpID09PSAzNykge1xuICAgICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgICAgaWYgKChwYWQgPSBwYWRzW2MgPSBzcGVjaWZpZXIuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpO1xuICAgICAgICAgIGVsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgIGlmIChmb3JtYXQgPSBmb3JtYXRzW2NdKSBjID0gZm9ybWF0KGRhdGUsIHBhZCk7XG4gICAgICAgICAgc3RyaW5nLnB1c2goYyk7XG4gICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1BhcnNlKHNwZWNpZmllciwgbmV3RGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciBkID0gbmV3WWVhcigxOTAwKSxcbiAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCksXG4gICAgICAgICAgd2VlaywgZGF5O1xuICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIElmIGEgVU5JWCB0aW1lc3RhbXAgaXMgc3BlY2lmaWVkLCByZXR1cm4gaXQuXG4gICAgICBpZiAoXCJRXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQuUSk7XG5cbiAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICBpZiAoXCJwXCIgaW4gZCkgZC5IID0gZC5IICUgMTIgKyBkLnAgKiAxMjtcblxuICAgICAgLy8gQ29udmVydCBkYXktb2Ytd2VlayBhbmQgd2Vlay1vZi15ZWFyIHRvIGRheS1vZi15ZWFyLlxuICAgICAgaWYgKFwiVlwiIGluIGQpIHtcbiAgICAgICAgaWYgKGQuViA8IDEgfHwgZC5WID4gNTMpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gMTtcbiAgICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF0ZShuZXdZZWFyKGQueSkpLCBkYXkgPSB3ZWVrLmdldFVUQ0RheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHV0Y01vbmRheS5jZWlsKHdlZWspIDogdXRjTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXRVVENEYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdlZWsgPSBuZXdEYXRlKG5ld1llYXIoZC55KSksIGRheSA9IHdlZWsuZ2V0RGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdGltZU1vbmRheS5jZWlsKHdlZWspIDogdGltZU1vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdGltZURheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0TW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldERhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcInVcIiBpbiBkID8gZC51ICUgNyA6IFwiV1wiIGluIGQgPyAxIDogMDtcbiAgICAgICAgZGF5ID0gXCJaXCIgaW4gZCA/IHV0Y0RhdGUobmV3WWVhcihkLnkpKS5nZXRVVENEYXkoKSA6IG5ld0RhdGUobmV3WWVhcihkLnkpKS5nZXREYXkoKTtcbiAgICAgICAgZC5tID0gMDtcbiAgICAgICAgZC5kID0gXCJXXCIgaW4gZCA/IChkLncgKyA2KSAlIDcgKyBkLlcgKiA3IC0gKGRheSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF5ICsgNikgJSA3O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgLy8gb2Zmc2V0IGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIHRpbWUgem9uZS5cbiAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICBkLk0gKz0gZC5aICUgMTAwO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBhbGwgZmllbGRzIGFyZSBpbiBsb2NhbCB0aW1lLlxuICAgICAgcmV0dXJuIG5ld0RhdGUoZCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nLCBqKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgbSA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIGMsXG4gICAgICAgIHBhcnNlO1xuXG4gICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICBpZiAoaiA+PSBtKSByZXR1cm4gLTE7XG4gICAgICBjID0gc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgIGlmIChjID09PSAzNykge1xuICAgICAgICBjID0gc3BlY2lmaWVyLmNoYXJBdChpKyspO1xuICAgICAgICBwYXJzZSA9IHBhcnNlc1tjIGluIHBhZHMgPyBzcGVjaWZpZXIuY2hhckF0KGkrKykgOiBjXTtcbiAgICAgICAgaWYgKCFwYXJzZSB8fCAoKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApKSByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKGMgIT0gc3RyaW5nLmNoYXJDb2RlQXQoaisrKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGo7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVBlcmlvZChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHBlcmlvZFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLnAgPSBwZXJpb2RMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gd2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0TW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydE1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IHNob3J0TW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlVGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV90aW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0SG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0VVRDSG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBsb2NhbERhdGUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfSxcbiAgICB1dGNGb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIHV0Y0Zvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICB1dGNQYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciwgdXRjRGF0ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gIH07XG59XG5cbnZhciBwYWRzID0ge1wiLVwiOiBcIlwiLCBcIl9cIjogXCIgXCIsIFwiMFwiOiBcIjBcIn0sXG4gICAgbnVtYmVyUmUgPSAvXlxccypcXGQrLywgLy8gbm90ZTogaWdub3JlcyBuZXh0IGRpcmVjdGl2ZVxuICAgIHBlcmNlbnRSZSA9IC9eJS8sXG4gICAgcmVxdW90ZVJlID0gL1tcXFxcXiQqKz98W1xcXSgpLnt9XS9nO1xuXG5mdW5jdGlvbiBwYWQodmFsdWUsIGZpbGwsIHdpZHRoKSB7XG4gIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLFxuICAgICAgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLFxuICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgcmV0dXJuIHNpZ24gKyAobGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpICsgc3RyaW5nIDogc3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gcmVxdW90ZShzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UocmVxdW90ZVJlLCBcIlxcXFwkJlwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UmUobmFtZXMpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyBuYW1lcy5tYXAocmVxdW90ZSkuam9pbihcInxcIikgKyBcIilcIiwgXCJpXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMb29rdXAobmFtZXMpIHtcbiAgdmFyIG1hcCA9IHt9LCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBtYXBbbmFtZXNbaV0udG9Mb3dlckNhc2UoKV0gPSBpO1xuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC53ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJJU08oZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5WID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRnVsbFllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDQpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdICsgKCtuWzBdID4gNjggPyAxOTAwIDogMjAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vab25lKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IC9eKFopfChbKy1dXFxkXFxkKSg/Ojo/KFxcZFxcZCkpPy8uZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5aID0gblsxXSA/IDAgOiAtKG5bMl0gKyAoblszXSB8fCBcIjAwXCIpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSAoK25bMF0pICogMTAwMCwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB0aW1lVGh1cnNkYXkoZCkgOiB0aW1lVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh0aW1lVGh1cnNkYXkuY291bnQodGltZVllYXIoZCksIGQpICsgKHRpbWVZZWFyKGQpLmdldERheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZU1vbmRheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRab25lKGQpIHtcbiAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIHJldHVybiAoeiA+IDAgPyBcIi1cIiA6ICh6ICo9IC0xLCBcIitcIikpXG4gICAgICArIHBhZCh6IC8gNjAgfCAwLCBcIjBcIiwgMilcbiAgICAgICsgcGFkKHogJSA2MCwgXCIwXCIsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0RhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHV0Y0RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDU2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRvdyA9IGQuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiBkb3cgPT09IDAgPyA3IDogZG93O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNTdW5kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0VVRDRGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHV0Y1RodXJzZGF5KGQpIDogdXRjVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh1dGNUaHVyc2RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSArICh1dGNZZWFyKGQpLmdldFVUQ0RheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXRVVENEYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjTW9uZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgcmV0dXJuIFwiKzAwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gIHJldHVybiBcIiVcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcChkKSB7XG4gIHJldHVybiArZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMoZCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigrZCAvIDEwMDApO1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGVcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgdGltZUZvcm1hdDtcbmV4cG9ydCB2YXIgdGltZVBhcnNlO1xuZXhwb3J0IHZhciB1dGNGb3JtYXQ7XG5leHBvcnQgdmFyIHV0Y1BhcnNlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGF0ZVRpbWU6IFwiJXgsICVYXCIsXG4gIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICBwZXJpb2RzOiBbXCJBTVwiLCBcIlBNXCJdLFxuICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICB0aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgdGltZVBhcnNlID0gbG9jYWxlLnBhcnNlO1xuICB1dGNGb3JtYXQgPSBsb2NhbGUudXRjRm9ybWF0O1xuICB1dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7dXRjRm9ybWF0fSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlXCI7XG5cbmV4cG9ydCB2YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcblxuZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbn1cblxudmFyIGZvcm1hdElzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nXG4gICAgPyBmb3JtYXRJc29OYXRpdmVcbiAgICA6IHV0Y0Zvcm1hdChpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRJc287XG4iLCJpbXBvcnQge2lzb1NwZWNpZmllcn0gZnJvbSBcIi4vaXNvRm9ybWF0XCI7XG5pbXBvcnQge3V0Y1BhcnNlfSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlXCI7XG5cbmZ1bmN0aW9uIHBhcnNlSXNvTmF0aXZlKHN0cmluZykge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xufVxuXG52YXIgcGFyc2VJc28gPSArbmV3IERhdGUoXCIyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIilcbiAgICA/IHBhcnNlSXNvTmF0aXZlXG4gICAgOiB1dGNQYXJzZShpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBwYXJzZUlzbztcbiIsImltcG9ydCB7aWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdEludGVycG9sYXRvcn0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhclwiO1xuaW1wb3J0IHtsb2dnaXNofSBmcm9tIFwiLi9sb2dcIjtcbmltcG9ydCB7c3ltbG9naXNofSBmcm9tIFwiLi9zeW1sb2dcIjtcbmltcG9ydCB7cG93aXNofSBmcm9tIFwiLi9wb3dcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICB0MCxcbiAgICAgIHQxLFxuICAgICAgazEwLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgaW50ZXJwb2xhdG9yID0gaWRlbnRpdHksXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogaW50ZXJwb2xhdG9yKGsxMCA9PT0gMCA/IDAuNSA6ICh4ID0gKHRyYW5zZm9ybSh4KSAtIHQwKSAqIGsxMCwgY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB4KSkgOiB4KSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodDAgPSB0cmFuc2Zvcm0oeDAgPSArX1swXSksIHQxID0gdHJhbnNmb3JtKHgxID0gK19bMV0pLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMSAvICh0MSAtIHQwKSwgc2NhbGUpIDogW3gwLCB4MV07XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHQwID0gdCh4MCksIHQxID0gdCh4MSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAuaW50ZXJwb2xhdG9yKHNvdXJjZS5pbnRlcnBvbGF0b3IoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXF1ZW50aWFsKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIoKShpZGVudGl0eSkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxMb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbExvZygpKS5iYXNlKHNjYWxlLmJhc2UoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsU3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzZXF1ZW50aWFsU3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbFBvdygpIHtcbiAgdmFyIHNjYWxlID0gcG93aXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbFBvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxTcXJ0KCkge1xuICByZXR1cm4gc2VxdWVudGlhbFBvdy5hcHBseShudWxsLCBhcmd1bWVudHMpLmV4cG9uZW50KDAuNSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgdmFyIG4gPSBzcGVjaWZpZXIubGVuZ3RoIC8gNiB8IDAsIGNvbG9ycyA9IG5ldyBBcnJheShuKSwgaSA9IDA7XG4gIHdoaWxlIChpIDwgbikgY29sb3JzW2ldID0gXCIjXCIgKyBzcGVjaWZpZXIuc2xpY2UoaSAqIDYsICsraSAqIDYpO1xuICByZXR1cm4gY29sb3JzO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVJnYkJhc2lzfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2NoZW1lKSB7XG4gIHJldHVybiBpbnRlcnBvbGF0ZVJnYkJhc2lzKHNjaGVtZVtzY2hlbWUubGVuZ3RoIC0gMV0pO1xufVxuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjFmNzdiNGZmN2YwZTJjYTAyY2Q2MjcyODk0NjdiZDhjNTY0YmUzNzdjMjdmN2Y3ZmJjYmQyMjE3YmVjZlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI3ZmM5N2ZiZWFlZDRmZGMwODZmZmZmOTkzODZjYjBmMDAyN2ZiZjViMTc2NjY2NjZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiMWI5ZTc3ZDk1ZjAyNzU3MGIzZTcyOThhNjZhNjFlZTZhYjAyYTY3NjFkNjY2NjY2XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImE2Y2VlMzFmNzhiNGIyZGY4YTMzYTAyY2ZiOWE5OWUzMWExY2ZkYmY2ZmZmN2YwMGNhYjJkNjZhM2Q5YWZmZmY5OWIxNTkyOFwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJmYmI0YWViM2NkZTNjY2ViYzVkZWNiZTRmZWQ5YTZmZmZmY2NlNWQ4YmRmZGRhZWNmMmYyZjJcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiYjNlMmNkZmRjZGFjY2JkNWU4ZjRjYWU0ZTZmNWM5ZmZmMmFlZjFlMmNjY2NjY2NjXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImU0MWExYzM3N2ViODRkYWY0YTk4NGVhM2ZmN2YwMGZmZmYzM2E2NTYyOGY3ODFiZjk5OTk5OVwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI2NmMyYTVmYzhkNjI4ZGEwY2JlNzhhYzNhNmQ4NTRmZmQ5MmZlNWM0OTRiM2IzYjNcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiOGRkM2M3ZmZmZmIzYmViYWRhZmI4MDcyODBiMWQzZmRiNDYyYjNkZTY5ZmNjZGU1ZDlkOWQ5YmM4MGJkY2NlYmM1ZmZlZDZmXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZDhiMzY1ZjVmNWY1NWFiNGFjXCIsXG4gIFwiYTY2MTFhZGZjMjdkODBjZGMxMDE4NTcxXCIsXG4gIFwiYTY2MTFhZGZjMjdkZjVmNWY1ODBjZGMxMDE4NTcxXCIsXG4gIFwiOGM1MTBhZDhiMzY1ZjZlOGMzYzdlYWU1NWFiNGFjMDE2NjVlXCIsXG4gIFwiOGM1MTBhZDhiMzY1ZjZlOGMzZjVmNWY1YzdlYWU1NWFiNGFjMDE2NjVlXCIsXG4gIFwiOGM1MTBhYmY4MTJkZGZjMjdkZjZlOGMzYzdlYWU1ODBjZGMxMzU5NzhmMDE2NjVlXCIsXG4gIFwiOGM1MTBhYmY4MTJkZGZjMjdkZjZlOGMzZjVmNWY1YzdlYWU1ODBjZGMxMzU5NzhmMDE2NjVlXCIsXG4gIFwiNTQzMDA1OGM1MTBhYmY4MTJkZGZjMjdkZjZlOGMzYzdlYWU1ODBjZGMxMzU5NzhmMDE2NjVlMDAzYzMwXCIsXG4gIFwiNTQzMDA1OGM1MTBhYmY4MTJkZGZjMjdkZjZlOGMzZjVmNWY1YzdlYWU1ODBjZGMxMzU5NzhmMDE2NjVlMDAzYzMwXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImFmOGRjM2Y3ZjdmNzdmYmY3YlwiLFxuICBcIjdiMzI5NGMyYTVjZmE2ZGJhMDAwODgzN1wiLFxuICBcIjdiMzI5NGMyYTVjZmY3ZjdmN2E2ZGJhMDAwODgzN1wiLFxuICBcIjc2MmE4M2FmOGRjM2U3ZDRlOGQ5ZjBkMzdmYmY3YjFiNzgzN1wiLFxuICBcIjc2MmE4M2FmOGRjM2U3ZDRlOGY3ZjdmN2Q5ZjBkMzdmYmY3YjFiNzgzN1wiLFxuICBcIjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGQ5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzN1wiLFxuICBcIjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGY3ZjdmN2Q5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzN1wiLFxuICBcIjQwMDA0Yjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGQ5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzNzAwNDQxYlwiLFxuICBcIjQwMDA0Yjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGY3ZjdmN2Q5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzNzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlOWEzYzlmN2Y3ZjdhMWQ3NmFcIixcbiAgXCJkMDFjOGJmMWI2ZGFiOGUxODY0ZGFjMjZcIixcbiAgXCJkMDFjOGJmMWI2ZGFmN2Y3ZjdiOGUxODY0ZGFjMjZcIixcbiAgXCJjNTFiN2RlOWEzYzlmZGUwZWZlNmY1ZDBhMWQ3NmE0ZDkyMjFcIixcbiAgXCJjNTFiN2RlOWEzYzlmZGUwZWZmN2Y3ZjdlNmY1ZDBhMWQ3NmE0ZDkyMjFcIixcbiAgXCJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjFcIixcbiAgXCJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZmN2Y3ZjdlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjFcIixcbiAgXCI4ZTAxNTJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjEyNzY0MTlcIixcbiAgXCI4ZTAxNTJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZmN2Y3ZjdlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjEyNzY0MTlcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiOTk4ZWMzZjdmN2Y3ZjFhMzQwXCIsXG4gIFwiNWUzYzk5YjJhYmQyZmRiODYzZTY2MTAxXCIsXG4gIFwiNWUzYzk5YjJhYmQyZjdmN2Y3ZmRiODYzZTY2MTAxXCIsXG4gIFwiNTQyNzg4OTk4ZWMzZDhkYWViZmVlMGI2ZjFhMzQwYjM1ODA2XCIsXG4gIFwiNTQyNzg4OTk4ZWMzZDhkYWViZjdmN2Y3ZmVlMGI2ZjFhMzQwYjM1ODA2XCIsXG4gIFwiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2XCIsXG4gIFwiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZjdmN2Y3ZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2XCIsXG4gIFwiMmQwMDRiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2N2YzYjA4XCIsXG4gIFwiMmQwMDRiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZjdmN2Y3ZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2N2YzYjA4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmY3ZjdmNzY3YTljZlwiLFxuICBcImNhMDAyMGY0YTU4MjkyYzVkZTA1NzFiMFwiLFxuICBcImNhMDAyMGY0YTU4MmY3ZjdmNzkyYzVkZTA1NzFiMFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2QxZTVmMDY3YTljZjIxNjZhY1wiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2Y3ZjdmN2QxZTVmMDY3YTljZjIxNjZhY1wiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhY1wiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2Y3ZjdmN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhY1wiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhYzA1MzA2MVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2Y3ZjdmN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhYzA1MzA2MVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZjhhNjJmZmZmZmY5OTk5OTlcIixcbiAgXCJjYTAwMjBmNGE1ODJiYWJhYmE0MDQwNDBcIixcbiAgXCJjYTAwMjBmNGE1ODJmZmZmZmZiYWJhYmE0MDQwNDBcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdlMGUwZTA5OTk5OTk0ZDRkNGRcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdmZmZmZmZlMGUwZTA5OTk5OTk0ZDRkNGRcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGRcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmZmZmZmZlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGRcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGQxYTFhMWFcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmZmZmZmZlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGQxYTFhMWFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTFiZmRiXCIsXG4gIFwiZDcxOTFjZmRhZTYxYWJkOWU5MmM3YmI2XCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYWJkOWU5MmM3YmI2XCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDkwZTBmM2Y4OTFiZmRiNDU3NWI0XCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDkwZmZmZmJmZTBmM2Y4OTFiZmRiNDU3NWI0XCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0XCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZmZmZmJmZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0MzEzNjk1XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZmZmZmJmZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0MzEzNjk1XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjkxY2Y2MFwiLFxuICBcImQ3MTkxY2ZkYWU2MWE2ZDk2YTFhOTY0MVwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmE2ZDk2YTFhOTY0MVwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA4YmQ5ZWY4YjkxY2Y2MDFhOTg1MFwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA4YmZmZmZiZmQ5ZWY4YjkxY2Y2MDFhOTg1MFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MFwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MDAwNjgzN1wiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MDAwNjgzN1wiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5OWQ1OTRcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmRkYTQyYjgzYmFcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmRkYTQyYjgzYmFcIixcbiAgXCJkNTNlNGZmYzhkNTlmZWUwOGJlNmY1OTg5OWQ1OTQzMjg4YmRcIixcbiAgXCJkNTNlNGZmYzhkNTlmZWUwOGJmZmZmYmZlNmY1OTg5OWQ1OTQzMjg4YmRcIixcbiAgXCJkNTNlNGZmNDZkNDNmZGFlNjFmZWUwOGJlNmY1OThhYmRkYTQ2NmMyYTUzMjg4YmRcIixcbiAgXCJkNTNlNGZmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZlNmY1OThhYmRkYTQ2NmMyYTUzMjg4YmRcIixcbiAgXCI5ZTAxNDJkNTNlNGZmNDZkNDNmZGFlNjFmZWUwOGJlNmY1OThhYmRkYTQ2NmMyYTUzMjg4YmQ1ZTRmYTJcIixcbiAgXCI5ZTAxNDJkNTNlNGZmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZlNmY1OThhYmRkYTQ2NmMyYTUzMjg4YmQ1ZTRmYTJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWY5OTlkOGM5MmNhMjVmXCIsXG4gIFwiZWRmOGZiYjJlMmUyNjZjMmE0MjM4YjQ1XCIsXG4gIFwiZWRmOGZiYjJlMmUyNjZjMmE0MmNhMjVmMDA2ZDJjXCIsXG4gIFwiZWRmOGZiY2NlY2U2OTlkOGM5NjZjMmE0MmNhMjVmMDA2ZDJjXCIsXG4gIFwiZWRmOGZiY2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA1ODI0XCIsXG4gIFwiZjdmY2ZkZTVmNWY5Y2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA1ODI0XCIsXG4gIFwiZjdmY2ZkZTVmNWY5Y2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImUwZWNmNDllYmNkYTg4NTZhN1wiLFxuICBcImVkZjhmYmIzY2RlMzhjOTZjNjg4NDE5ZFwiLFxuICBcImVkZjhmYmIzY2RlMzhjOTZjNjg4NTZhNzgxMGY3Y1wiLFxuICBcImVkZjhmYmJmZDNlNjllYmNkYThjOTZjNjg4NTZhNzgxMGY3Y1wiLFxuICBcImVkZjhmYmJmZDNlNjllYmNkYThjOTZjNjhjNmJiMTg4NDE5ZDZlMDE2YlwiLFxuICBcImY3ZmNmZGUwZWNmNGJmZDNlNjllYmNkYThjOTZjNjhjNmJiMTg4NDE5ZDZlMDE2YlwiLFxuICBcImY3ZmNmZGUwZWNmNGJmZDNlNjllYmNkYThjOTZjNjhjNmJiMTg4NDE5ZDgxMGY3YzRkMDA0YlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlMGYzZGJhOGRkYjU0M2EyY2FcIixcbiAgXCJmMGY5ZThiYWU0YmM3YmNjYzQyYjhjYmVcIixcbiAgXCJmMGY5ZThiYWU0YmM3YmNjYzQ0M2EyY2EwODY4YWNcIixcbiAgXCJmMGY5ZThjY2ViYzVhOGRkYjU3YmNjYzQ0M2EyY2EwODY4YWNcIixcbiAgXCJmMGY5ZThjY2ViYzVhOGRkYjU3YmNjYzQ0ZWIzZDMyYjhjYmUwODU4OWVcIixcbiAgXCJmN2ZjZjBlMGYzZGJjY2ViYzVhOGRkYjU3YmNjYzQ0ZWIzZDMyYjhjYmUwODU4OWVcIixcbiAgXCJmN2ZjZjBlMGYzZGJjY2ViYzVhOGRkYjU3YmNjYzQ0ZWIzZDMyYjhjYmUwODY4YWMwODQwODFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlOGM4ZmRiYjg0ZTM0YTMzXCIsXG4gIFwiZmVmMGQ5ZmRjYzhhZmM4ZDU5ZDczMDFmXCIsXG4gIFwiZmVmMGQ5ZmRjYzhhZmM4ZDU5ZTM0YTMzYjMwMDAwXCIsXG4gIFwiZmVmMGQ5ZmRkNDllZmRiYjg0ZmM4ZDU5ZTM0YTMzYjMwMDAwXCIsXG4gIFwiZmVmMGQ5ZmRkNDllZmRiYjg0ZmM4ZDU5ZWY2NTQ4ZDczMDFmOTkwMDAwXCIsXG4gIFwiZmZmN2VjZmVlOGM4ZmRkNDllZmRiYjg0ZmM4ZDU5ZWY2NTQ4ZDczMDFmOTkwMDAwXCIsXG4gIFwiZmZmN2VjZmVlOGM4ZmRkNDllZmRiYjg0ZmM4ZDU5ZWY2NTQ4ZDczMDFmYjMwMDAwN2YwMDAwXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVjZTJmMGE2YmRkYjFjOTA5OVwiLFxuICBcImY2ZWZmN2JkYzllMTY3YTljZjAyODE4YVwiLFxuICBcImY2ZWZmN2JkYzllMTY3YTljZjFjOTA5OTAxNmM1OVwiLFxuICBcImY2ZWZmN2QwZDFlNmE2YmRkYjY3YTljZjFjOTA5OTAxNmM1OVwiLFxuICBcImY2ZWZmN2QwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNjQ1MFwiLFxuICBcImZmZjdmYmVjZTJmMGQwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNjQ1MFwiLFxuICBcImZmZjdmYmVjZTJmMGQwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNmM1OTAxNDYzNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlY2U3ZjJhNmJkZGIyYjhjYmVcIixcbiAgXCJmMWVlZjZiZGM5ZTE3NGE5Y2YwNTcwYjBcIixcbiAgXCJmMWVlZjZiZGM5ZTE3NGE5Y2YyYjhjYmUwNDVhOGRcIixcbiAgXCJmMWVlZjZkMGQxZTZhNmJkZGI3NGE5Y2YyYjhjYmUwNDVhOGRcIixcbiAgXCJmMWVlZjZkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwMzRlN2JcIixcbiAgXCJmZmY3ZmJlY2U3ZjJkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwMzRlN2JcIixcbiAgXCJmZmY3ZmJlY2U3ZjJkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwNDVhOGQwMjM4NThcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTdlMWVmYzk5NGM3ZGQxYzc3XCIsXG4gIFwiZjFlZWY2ZDdiNWQ4ZGY2NWIwY2UxMjU2XCIsXG4gIFwiZjFlZWY2ZDdiNWQ4ZGY2NWIwZGQxYzc3OTgwMDQzXCIsXG4gIFwiZjFlZWY2ZDRiOWRhYzk5NGM3ZGY2NWIwZGQxYzc3OTgwMDQzXCIsXG4gIFwiZjFlZWY2ZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTEwMDNmXCIsXG4gIFwiZjdmNGY5ZTdlMWVmZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTEwMDNmXCIsXG4gIFwiZjdmNGY5ZTdlMWVmZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTgwMDQzNjcwMDFmXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZkZTBkZGZhOWZiNWM1MWI4YVwiLFxuICBcImZlZWJlMmZiYjRiOWY3NjhhMWFlMDE3ZVwiLFxuICBcImZlZWJlMmZiYjRiOWY3NjhhMWM1MWI4YTdhMDE3N1wiLFxuICBcImZlZWJlMmZjYzVjMGZhOWZiNWY3NjhhMWM1MWI4YTdhMDE3N1wiLFxuICBcImZlZWJlMmZjYzVjMGZhOWZiNWY3NjhhMWRkMzQ5N2FlMDE3ZTdhMDE3N1wiLFxuICBcImZmZjdmM2ZkZTBkZGZjYzVjMGZhOWZiNWY3NjhhMWRkMzQ5N2FlMDE3ZTdhMDE3N1wiLFxuICBcImZmZjdmM2ZkZTBkZGZjYzVjMGZhOWZiNWY3NjhhMWRkMzQ5N2FlMDE3ZTdhMDE3NzQ5MDA2YVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZGY4YjE3ZmNkYmIyYzdmYjhcIixcbiAgXCJmZmZmY2NhMWRhYjQ0MWI2YzQyMjVlYThcIixcbiAgXCJmZmZmY2NhMWRhYjQ0MWI2YzQyYzdmYjgyNTM0OTRcIixcbiAgXCJmZmZmY2NjN2U5YjQ3ZmNkYmI0MWI2YzQyYzdmYjgyNTM0OTRcIixcbiAgXCJmZmZmY2NjN2U5YjQ3ZmNkYmI0MWI2YzQxZDkxYzAyMjVlYTgwYzJjODRcIixcbiAgXCJmZmZmZDllZGY4YjFjN2U5YjQ3ZmNkYmI0MWI2YzQxZDkxYzAyMjVlYTgwYzJjODRcIixcbiAgXCJmZmZmZDllZGY4YjFjN2U5YjQ3ZmNkYmI0MWI2YzQxZDkxYzAyMjVlYTgyNTM0OTQwODFkNThcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZjdmY2I5YWRkZDhlMzFhMzU0XCIsXG4gIFwiZmZmZmNjYzJlNjk5NzhjNjc5MjM4NDQzXCIsXG4gIFwiZmZmZmNjYzJlNjk5NzhjNjc5MzFhMzU0MDA2ODM3XCIsXG4gIFwiZmZmZmNjZDlmMGEzYWRkZDhlNzhjNjc5MzFhMzU0MDA2ODM3XCIsXG4gIFwiZmZmZmNjZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA1YTMyXCIsXG4gIFwiZmZmZmU1ZjdmY2I5ZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA1YTMyXCIsXG4gIFwiZmZmZmU1ZjdmY2I5ZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA2ODM3MDA0NTI5XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZjdiY2ZlYzQ0ZmQ5NWYwZVwiLFxuICBcImZmZmZkNGZlZDk4ZWZlOTkyOWNjNGMwMlwiLFxuICBcImZmZmZkNGZlZDk4ZWZlOTkyOWQ5NWYwZTk5MzQwNFwiLFxuICBcImZmZmZkNGZlZTM5MWZlYzQ0ZmZlOTkyOWQ5NWYwZTk5MzQwNFwiLFxuICBcImZmZmZkNGZlZTM5MWZlYzQ0ZmZlOTkyOWVjNzAxNGNjNGMwMjhjMmQwNFwiLFxuICBcImZmZmZlNWZmZjdiY2ZlZTM5MWZlYzQ0ZmZlOTkyOWVjNzAxNGNjNGMwMjhjMmQwNFwiLFxuICBcImZmZmZlNWZmZjdiY2ZlZTM5MWZlYzQ0ZmZlOTkyOWVjNzAxNGNjNGMwMjk5MzQwNDY2MjUwNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZmVkYTBmZWIyNGNmMDNiMjBcIixcbiAgXCJmZmZmYjJmZWNjNWNmZDhkM2NlMzFhMWNcIixcbiAgXCJmZmZmYjJmZWNjNWNmZDhkM2NmMDNiMjBiZDAwMjZcIixcbiAgXCJmZmZmYjJmZWQ5NzZmZWIyNGNmZDhkM2NmMDNiMjBiZDAwMjZcIixcbiAgXCJmZmZmYjJmZWQ5NzZmZWIyNGNmZDhkM2NmYzRlMmFlMzFhMWNiMTAwMjZcIixcbiAgXCJmZmZmY2NmZmVkYTBmZWQ5NzZmZWIyNGNmZDhkM2NmYzRlMmFlMzFhMWNiMTAwMjZcIixcbiAgXCJmZmZmY2NmZmVkYTBmZWQ5NzZmZWIyNGNmZDhkM2NmYzRlMmFlMzFhMWNiZDAwMjY4MDAwMjZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZGVlYmY3OWVjYWUxMzE4MmJkXCIsXG4gIFwiZWZmM2ZmYmRkN2U3NmJhZWQ2MjE3MWI1XCIsXG4gIFwiZWZmM2ZmYmRkN2U3NmJhZWQ2MzE4MmJkMDg1MTljXCIsXG4gIFwiZWZmM2ZmYzZkYmVmOWVjYWUxNmJhZWQ2MzE4MmJkMDg1MTljXCIsXG4gIFwiZWZmM2ZmYzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg0NTk0XCIsXG4gIFwiZjdmYmZmZGVlYmY3YzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg0NTk0XCIsXG4gIFwiZjdmYmZmZGVlYmY3YzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg1MTljMDgzMDZiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVlMGExZDk5YjMxYTM1NFwiLFxuICBcImVkZjhlOWJhZTRiMzc0YzQ3NjIzOGI0NVwiLFxuICBcImVkZjhlOWJhZTRiMzc0YzQ3NjMxYTM1NDAwNmQyY1wiLFxuICBcImVkZjhlOWM3ZTljMGExZDk5Yjc0YzQ3NjMxYTM1NDAwNmQyY1wiLFxuICBcImVkZjhlOWM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNWEzMlwiLFxuICBcImY3ZmNmNWU1ZjVlMGM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNWEzMlwiLFxuICBcImY3ZmNmNWU1ZjVlMGM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmMGYwZjBiZGJkYmQ2MzYzNjNcIixcbiAgXCJmN2Y3ZjdjY2NjY2M5Njk2OTY1MjUyNTJcIixcbiAgXCJmN2Y3ZjdjY2NjY2M5Njk2OTY2MzYzNjMyNTI1MjVcIixcbiAgXCJmN2Y3ZjdkOWQ5ZDliZGJkYmQ5Njk2OTY2MzYzNjMyNTI1MjVcIixcbiAgXCJmN2Y3ZjdkOWQ5ZDliZGJkYmQ5Njk2OTY3MzczNzM1MjUyNTIyNTI1MjVcIixcbiAgXCJmZmZmZmZmMGYwZjBkOWQ5ZDliZGJkYmQ5Njk2OTY3MzczNzM1MjUyNTIyNTI1MjVcIixcbiAgXCJmZmZmZmZmMGYwZjBkOWQ5ZDliZGJkYmQ5Njk2OTY3MzczNzM1MjUyNTIyNTI1MjUwMDAwMDBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWZlZGY1YmNiZGRjNzU2YmIxXCIsXG4gIFwiZjJmMGY3Y2JjOWUyOWU5YWM4NmE1MWEzXCIsXG4gIFwiZjJmMGY3Y2JjOWUyOWU5YWM4NzU2YmIxNTQyNzhmXCIsXG4gIFwiZjJmMGY3ZGFkYWViYmNiZGRjOWU5YWM4NzU2YmIxNTQyNzhmXCIsXG4gIFwiZjJmMGY3ZGFkYWViYmNiZGRjOWU5YWM4ODA3ZGJhNmE1MWEzNGExNDg2XCIsXG4gIFwiZmNmYmZkZWZlZGY1ZGFkYWViYmNiZGRjOWU5YWM4ODA3ZGJhNmE1MWEzNGExNDg2XCIsXG4gIFwiZmNmYmZkZWZlZGY1ZGFkYWViYmNiZGRjOWU5YWM4ODA3ZGJhNmE1MWEzNTQyNzhmM2YwMDdkXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTBkMmZjOTI3MmRlMmQyNlwiLFxuICBcImZlZTVkOWZjYWU5MWZiNmE0YWNiMTgxZFwiLFxuICBcImZlZTVkOWZjYWU5MWZiNmE0YWRlMmQyNmE1MGYxNVwiLFxuICBcImZlZTVkOWZjYmJhMWZjOTI3MmZiNmE0YWRlMmQyNmE1MGYxNVwiLFxuICBcImZlZTVkOWZjYmJhMWZjOTI3MmZiNmE0YWVmM2IyY2NiMTgxZDk5MDAwZFwiLFxuICBcImZmZjVmMGZlZTBkMmZjYmJhMWZjOTI3MmZiNmE0YWVmM2IyY2NiMTgxZDk5MDAwZFwiLFxuICBcImZmZjVmMGZlZTBkMmZjYmJhMWZjOTI3MmZiNmE0YWVmM2IyY2NiMTgxZGE1MGYxNTY3MDAwZFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWU2Y2VmZGFlNmJlNjU1MGRcIixcbiAgXCJmZWVkZGVmZGJlODVmZDhkM2NkOTQ3MDFcIixcbiAgXCJmZWVkZGVmZGJlODVmZDhkM2NlNjU1MGRhNjM2MDNcIixcbiAgXCJmZWVkZGVmZGQwYTJmZGFlNmJmZDhkM2NlNjU1MGRhNjM2MDNcIixcbiAgXCJmZWVkZGVmZGQwYTJmZGFlNmJmZDhkM2NmMTY5MTNkOTQ4MDE4YzJkMDRcIixcbiAgXCJmZmY1ZWJmZWU2Y2VmZGQwYTJmZGFlNmJmZDhkM2NmMTY5MTNkOTQ4MDE4YzJkMDRcIixcbiAgXCJmZmY1ZWJmZWU2Y2VmZGQwYTJmZGFlNmJmZDhkM2NmMTY5MTNkOTQ4MDFhNjM2MDM3ZjI3MDRcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IHtjdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDMwMCwgMC41LCAwLjApLCBjdWJlaGVsaXgoLTI0MCwgMC41LCAxLjApKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IHZhciB3YXJtID0gaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgtMTAwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcblxuZXhwb3J0IHZhciBjb29sID0gaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgyNjAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG52YXIgYyA9IGN1YmVoZWxpeCgpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0KSB7XG4gIGlmICh0IDwgMCB8fCB0ID4gMSkgdCAtPSBNYXRoLmZsb29yKHQpO1xuICB2YXIgdHMgPSBNYXRoLmFicyh0IC0gMC41KTtcbiAgYy5oID0gMzYwICogdCAtIDEwMDtcbiAgYy5zID0gMS41IC0gMS41ICogdHM7XG4gIGMubCA9IDAuOCAtIDAuOSAqIHRzO1xuICByZXR1cm4gYyArIFwiXCI7XG59XG4iLCJpbXBvcnQge3JnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5cbnZhciBjID0gcmdiKCksXG4gICAgcGlfMV8zID0gTWF0aC5QSSAvIDMsXG4gICAgcGlfMl8zID0gTWF0aC5QSSAqIDIgLyAzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0KSB7XG4gIHZhciB4O1xuICB0ID0gKDAuNSAtIHQpICogTWF0aC5QSTtcbiAgYy5yID0gMjU1ICogKHggPSBNYXRoLnNpbih0KSkgKiB4O1xuICBjLmcgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQgKyBwaV8xXzMpKSAqIHg7XG4gIGMuYiA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCArIHBpXzJfMykpICogeDtcbiAgcmV0dXJuIGMgKyBcIlwiO1xufVxuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmZ1bmN0aW9uIHJhbXAocmFuZ2UpIHtcbiAgdmFyIG4gPSByYW5nZS5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIHJhbmdlW01hdGgubWF4KDAsIE1hdGgubWluKG4gLSAxLCBNYXRoLmZsb29yKHQgKiBuKSkpXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmFtcChjb2xvcnMoXCI0NDAxNTQ0NDAyNTY0NTA0NTc0NTA1NTk0NjA3NWE0NjA4NWM0NjBhNWQ0NjBiNWU0NzBkNjA0NzBlNjE0NzEwNjM0NzExNjQ0NzEzNjU0ODE0Njc0ODE2Njg0ODE3Njk0ODE4NmE0ODFhNmM0ODFiNmQ0ODFjNmU0ODFkNmY0ODFmNzA0ODIwNzE0ODIxNzM0ODIzNzQ0ODI0NzU0ODI1NzY0ODI2Nzc0ODI4Nzg0ODI5Nzk0NzJhN2E0NzJjN2E0NzJkN2I0NzJlN2M0NzJmN2Q0NjMwN2U0NjMyN2U0NjMzN2Y0NjM0ODA0NTM1ODE0NTM3ODE0NTM4ODI0NDM5ODM0NDNhODM0NDNiODQ0MzNkODQ0MzNlODU0MjNmODU0MjQwODY0MjQxODY0MTQyODc0MTQ0ODc0MDQ1ODg0MDQ2ODgzZjQ3ODgzZjQ4ODkzZTQ5ODkzZTRhODkzZTRjOGEzZDRkOGEzZDRlOGEzYzRmOGEzYzUwOGIzYjUxOGIzYjUyOGIzYTUzOGIzYTU0OGMzOTU1OGMzOTU2OGMzODU4OGMzODU5OGMzNzVhOGMzNzViOGQzNjVjOGQzNjVkOGQzNTVlOGQzNTVmOGQzNDYwOGQzNDYxOGQzMzYyOGQzMzYzOGQzMjY0OGUzMjY1OGUzMTY2OGUzMTY3OGUzMTY4OGUzMDY5OGUzMDZhOGUyZjZiOGUyZjZjOGUyZTZkOGUyZTZlOGUyZTZmOGUyZDcwOGUyZDcxOGUyYzcxOGUyYzcyOGUyYzczOGUyYjc0OGUyYjc1OGUyYTc2OGUyYTc3OGUyYTc4OGUyOTc5OGUyOTdhOGUyOTdiOGUyODdjOGUyODdkOGUyNzdlOGUyNzdmOGUyNzgwOGUyNjgxOGUyNjgyOGUyNjgyOGUyNTgzOGUyNTg0OGUyNTg1OGUyNDg2OGUyNDg3OGUyMzg4OGUyMzg5OGUyMzhhOGQyMjhiOGQyMjhjOGQyMjhkOGQyMThlOGQyMThmOGQyMTkwOGQyMTkxOGMyMDkyOGMyMDkyOGMyMDkzOGMxZjk0OGMxZjk1OGIxZjk2OGIxZjk3OGIxZjk4OGIxZjk5OGExZjlhOGExZTliOGExZTljODkxZTlkODkxZjllODkxZjlmODgxZmEwODgxZmExODgxZmExODcxZmEyODcyMGEzODYyMGE0ODYyMWE1ODUyMWE2ODUyMmE3ODUyMmE4ODQyM2E5ODMyNGFhODMyNWFiODIyNWFjODIyNmFkODEyN2FkODEyOGFlODAyOWFmN2YyYWIwN2YyY2IxN2UyZGIyN2QyZWIzN2MyZmI0N2MzMWI1N2IzMmI2N2EzNGI2NzkzNWI3NzkzN2I4NzgzOGI5NzczYWJhNzYzYmJiNzUzZGJjNzQzZmJjNzM0MGJkNzI0MmJlNzE0NGJmNzA0NmMwNmY0OGMxNmU0YWMxNmQ0Y2MyNmM0ZWMzNmI1MGM0NmE1MmM1Njk1NGM1Njg1NmM2Njc1OGM3NjU1YWM4NjQ1Y2M4NjM1ZWM5NjI2MGNhNjA2M2NiNWY2NWNiNWU2N2NjNWM2OWNkNWI2Y2NkNWE2ZWNlNTg3MGNmNTc3M2QwNTY3NWQwNTQ3N2QxNTM3YWQxNTE3Y2QyNTA3ZmQzNGU4MWQzNGQ4NGQ0NGI4NmQ1NDk4OWQ1NDg4YmQ2NDY4ZWQ2NDU5MGQ3NDM5M2Q3NDE5NWQ4NDA5OGQ4M2U5YmQ5M2M5ZGQ5M2JhMGRhMzlhMmRhMzdhNWRiMzZhOGRiMzRhYWRjMzJhZGRjMzBiMGRkMmZiMmRkMmRiNWRlMmJiOGRlMjliYWRlMjhiZGRmMjZjMGRmMjVjMmRmMjNjNWUwMjFjOGUwMjBjYWUxMWZjZGUxMWRkMGUxMWNkMmUyMWJkNWUyMWFkOGUyMTlkYWUzMTlkZGUzMThkZmUzMThlMmU0MThlNWU0MTllN2U0MTllYWU1MWFlY2U1MWJlZmU1MWNmMWU1MWRmNGU2MWVmNmU2MjBmOGU2MjFmYmU3MjNmZGU3MjVcIikpO1xuXG5leHBvcnQgdmFyIG1hZ21hID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMDkwMjAyMGIwMjAyMGQwMzAzMGYwMzAzMTIwNDA0MTQwNTA0MTYwNjA1MTgwNjA1MWEwNzA2MWMwODA3MWUwOTA3MjAwYTA4MjIwYjA5MjQwYzA5MjYwZDBhMjkwZTBiMmIxMDBiMmQxMTBjMmYxMjBkMzExMzBkMzQxNDBlMzYxNTBlMzgxNjBmM2IxODBmM2QxOTEwM2YxYTEwNDIxYzEwNDQxZDExNDcxZTExNDkyMDExNGIyMTExNGUyMjExNTAyNDEyNTMyNTEyNTUyNzEyNTgyOTExNWEyYTExNWMyYzExNWYyZDExNjEyZjExNjMzMTExNjUzMzEwNjczNDEwNjkzNjEwNmIzODEwNmMzOTBmNmUzYjBmNzAzZDBmNzEzZjBmNzI0MDBmNzQ0MjBmNzU0NDBmNzY0NTEwNzc0NzEwNzg0OTEwNzg0YTEwNzk0YzExN2E0ZTExN2I0ZjEyN2I1MTEyN2M1MjEzN2M1NDEzN2Q1NjE0N2Q1NzE1N2U1OTE1N2U1YTE2N2U1YzE2N2Y1ZDE3N2Y1ZjE4N2Y2MDE4ODA2MjE5ODA2NDFhODA2NTFhODA2NzFiODA2ODFjODE2YTFjODE2YjFkODE2ZDFkODE2ZTFlODE3MDFmODE3MjFmODE3MzIwODE3NTIxODE3NjIxODE3ODIyODE3OTIyODI3YjIzODI3YzIzODI3ZTI0ODI4MDI1ODI4MTI1ODE4MzI2ODE4NDI2ODE4NjI3ODE4ODI3ODE4OTI4ODE4YjI5ODE4YzI5ODE4ZTJhODE5MDJhODE5MTJiODE5MzJiODA5NDJjODA5NjJjODA5ODJkODA5OTJkODA5YjJlN2Y5YzJlN2Y5ZTJmN2ZhMDJmN2ZhMTMwN2VhMzMwN2VhNTMxN2VhNjMxN2RhODMyN2RhYTMzN2RhYjMzN2NhZDM0N2NhZTM0N2JiMDM1N2JiMjM1N2JiMzM2N2FiNTM2N2FiNzM3NzliODM3NzliYTM4NzhiYzM5NzhiZDM5NzdiZjNhNzdjMDNhNzZjMjNiNzVjNDNjNzVjNTNjNzRjNzNkNzNjODNlNzNjYTNlNzJjYzNmNzFjZDQwNzFjZjQwNzBkMDQxNmZkMjQyNmZkMzQzNmVkNTQ0NmRkNjQ1NmNkODQ1NmNkOTQ2NmJkYjQ3NmFkYzQ4NjlkZTQ5NjhkZjRhNjhlMDRjNjdlMjRkNjZlMzRlNjVlNDRmNjRlNTUwNjRlNzUyNjNlODUzNjJlOTU0NjJlYTU2NjFlYjU3NjBlYzU4NjBlZDVhNWZlZTViNWVlZjVkNWVmMDVmNWVmMTYwNWRmMjYyNWRmMjY0NWNmMzY1NWNmNDY3NWNmNDY5NWNmNTZiNWNmNjZjNWNmNjZlNWNmNzcwNWNmNzcyNWNmODc0NWNmODc2NWNmOTc4NWRmOTc5NWRmOTdiNWRmYTdkNWVmYTdmNWVmYTgxNWZmYjgzNWZmYjg1NjBmYjg3NjFmYzg5NjFmYzhhNjJmYzhjNjNmYzhlNjRmYzkwNjVmZDkyNjZmZDk0NjdmZDk2NjhmZDk4NjlmZDlhNmFmZDliNmJmZTlkNmNmZTlmNmRmZWExNmVmZWEzNmZmZWE1NzFmZWE3NzJmZWE5NzNmZWFhNzRmZWFjNzZmZWFlNzdmZWIwNzhmZWIyN2FmZWI0N2JmZWI2N2NmZWI3N2VmZWI5N2ZmZWJiODFmZWJkODJmZWJmODRmZWMxODVmZWMyODdmZWM0ODhmZWM2OGFmZWM4OGNmZWNhOGRmZWNjOGZmZWNkOTBmZWNmOTJmZWQxOTRmZWQzOTVmZWQ1OTdmZWQ3OTlmZWQ4OWFmZGRhOWNmZGRjOWVmZGRlYTBmZGUwYTFmZGUyYTNmZGUzYTVmZGU1YTdmZGU3YTlmZGU5YWFmZGViYWNmY2VjYWVmY2VlYjBmY2YwYjJmY2YyYjRmY2Y0YjZmY2Y2YjhmY2Y3YjlmY2Y5YmJmY2ZiYmRmY2ZkYmZcIikpO1xuXG5leHBvcnQgdmFyIGluZmVybm8gPSByYW1wKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwYTAyMDIwYzAyMDIwZTAzMDIxMDA0MDMxMjA0MDMxNDA1MDQxNzA2MDQxOTA3MDUxYjA4MDUxZDA5MDYxZjBhMDcyMjBiMDcyNDBjMDgyNjBkMDgyOTBlMDkyYjEwMDkyZDExMGEzMDEyMGEzMjE0MGIzNDE1MGIzNzE2MGIzOTE4MGMzYzE5MGMzZTFiMGM0MTFjMGM0MzFlMGM0NTFmMGM0ODIxMGM0YTIzMGM0YzI0MGM0ZjI2MGM1MTI4MGI1MzI5MGI1NTJiMGI1NzJkMGI1OTJmMGE1YjMxMGE1YzMyMGE1ZTM0MGE1ZjM2MDk2MTM4MDk2MjM5MDk2MzNiMDk2NDNkMDk2NTNlMDk2NjQwMGE2NzQyMGE2ODQ0MGE2ODQ1MGE2OTQ3MGI2YTQ5MGI2YTRhMGM2YjRjMGM2YjRkMGQ2YzRmMGQ2YzUxMGU2YzUyMGU2ZDU0MGY2ZDU1MGY2ZDU3MTA2ZTU5MTA2ZTVhMTE2ZTVjMTI2ZTVkMTI2ZTVmMTM2ZTYxMTM2ZTYyMTQ2ZTY0MTU2ZTY1MTU2ZTY3MTY2ZTY5MTY2ZTZhMTc2ZTZjMTg2ZTZkMTg2ZTZmMTk2ZTcxMTk2ZTcyMWE2ZTc0MWE2ZTc1MWI2ZTc3MWM2ZDc4MWM2ZDdhMWQ2ZDdjMWQ2ZDdkMWU2ZDdmMWU2YzgwMWY2YzgyMjA2Yzg0MjA2Yjg1MjE2Yjg3MjE2Yjg4MjI2YThhMjI2YThjMjM2OThkMjM2OThmMjQ2OTkwMjU2ODkyMjU2ODkzMjY2Nzk1MjY2Nzk3Mjc2Njk4Mjc2NjlhMjg2NTliMjk2NDlkMjk2NDlmMmE2M2EwMmE2M2EyMmI2MmEzMmM2MWE1MmM2MGE2MmQ2MGE4MmU1ZmE5MmU1ZWFiMmY1ZWFkMzA1ZGFlMzA1Y2IwMzE1YmIxMzI1YWIzMzI1YWI0MzM1OWI2MzQ1OGI3MzU1N2I5MzU1NmJhMzY1NWJjMzc1NGJkMzg1M2JmMzk1MmMwM2E1MWMxM2E1MGMzM2I0ZmM0M2M0ZWM2M2Q0ZGM3M2U0Y2M4M2Y0YmNhNDA0YWNiNDE0OWNjNDI0OGNlNDM0N2NmNDQ0NmQwNDU0NWQyNDY0NGQzNDc0M2Q0NDg0MmQ1NGE0MWQ3NGIzZmQ4NGMzZWQ5NGQzZGRhNGUzY2RiNTAzYmRkNTEzYWRlNTIzOGRmNTMzN2UwNTUzNmUxNTYzNWUyNTczNGUzNTkzM2U0NWEzMWU1NWMzMGU2NWQyZmU3NWUyZWU4NjAyZGU5NjEyYmVhNjMyYWViNjQyOWViNjYyOGVjNjcyNmVkNjkyNWVlNmEyNGVmNmMyM2VmNmUyMWYwNmYyMGYxNzExZmYxNzMxZGYyNzQxY2YzNzYxYmYzNzgxOWY0NzkxOGY1N2IxN2Y1N2QxNWY2N2UxNGY2ODAxM2Y3ODIxMmY3ODQxMGY4ODUwZmY4ODcwZWY4ODkwY2Y5OGIwYmY5OGMwYWY5OGUwOWZhOTAwOGZhOTIwN2ZhOTQwN2ZiOTYwNmZiOTcwNmZiOTkwNmZiOWIwNmZiOWQwN2ZjOWYwN2ZjYTEwOGZjYTMwOWZjYTUwYWZjYTYwY2ZjYTgwZGZjYWEwZmZjYWMxMWZjYWUxMmZjYjAxNGZjYjIxNmZjYjQxOGZiYjYxYWZiYjgxZGZiYmExZmZiYmMyMWZiYmUyM2ZhYzAyNmZhYzIyOGZhYzQyYWZhYzYyZGY5YzcyZmY5YzkzMmY5Y2IzNWY4Y2QzN2Y4Y2YzYWY3ZDEzZGY3ZDM0MGY2ZDU0M2Y2ZDc0NmY1ZDk0OWY1ZGI0Y2Y0ZGQ0ZmY0ZGY1M2Y0ZTE1NmYzZTM1YWYzZTU1ZGYyZTY2MWYyZTg2NWYyZWE2OWYxZWM2ZGYxZWQ3MWYxZWY3NWYxZjE3OWYyZjI3ZGYyZjQ4MmYzZjU4NmYzZjY4YWY0Zjg4ZWY1Zjk5MmY2ZmE5NmY4ZmI5YWY5ZmM5ZGZhZmRhMWZjZmZhNFwiKSk7XG5cbmV4cG9ydCB2YXIgcGxhc21hID0gcmFtcChjb2xvcnMoXCIwZDA4ODcxMDA3ODgxMzA3ODkxNjA3OGExOTA2OGMxYjA2OGQxZDA2OGUyMDA2OGYyMjA2OTAyNDA2OTEyNjA1OTEyODA1OTIyYTA1OTMyYzA1OTQyZTA1OTUyZjA1OTYzMTA1OTczMzA1OTczNTA0OTgzNzA0OTkzODA0OWEzYTA0OWEzYzA0OWIzZTA0OWMzZjA0OWM0MTA0OWQ0MzAzOWU0NDAzOWU0NjAzOWY0ODAzOWY0OTAzYTA0YjAzYTE0YzAyYTE0ZTAyYTI1MDAyYTI1MTAyYTM1MzAyYTM1NTAyYTQ1NjAxYTQ1ODAxYTQ1OTAxYTU1YjAxYTU1YzAxYTY1ZTAxYTY2MDAxYTY2MTAwYTc2MzAwYTc2NDAwYTc2NjAwYTc2NzAwYTg2OTAwYTg2YTAwYTg2YzAwYTg2ZTAwYTg2ZjAwYTg3MTAwYTg3MjAxYTg3NDAxYTg3NTAxYTg3NzAxYTg3ODAxYTg3YTAyYTg3YjAyYTg3ZDAzYTg3ZTAzYTg4MDA0YTg4MTA0YTc4MzA1YTc4NDA1YTc4NjA2YTY4NzA3YTY4ODA4YTY4YTA5YTU4YjBhYTU4ZDBiYTU4ZTBjYTQ4ZjBkYTQ5MTBlYTM5MjBmYTM5NDEwYTI5NTExYTE5NjEzYTE5ODE0YTA5OTE1OWY5YTE2OWY5YzE3OWU5ZDE4OWQ5ZTE5OWRhMDFhOWNhMTFiOWJhMjFkOWFhMzFlOWFhNTFmOTlhNjIwOThhNzIxOTdhODIyOTZhYTIzOTVhYjI0OTRhYzI2OTRhZDI3OTNhZTI4OTJiMDI5OTFiMTJhOTBiMjJiOGZiMzJjOGViNDJlOGRiNTJmOGNiNjMwOGJiNzMxOGFiODMyODliYTMzODhiYjM0ODhiYzM1ODdiZDM3ODZiZTM4ODViZjM5ODRjMDNhODNjMTNiODJjMjNjODFjMzNkODBjNDNlN2ZjNTQwN2VjNjQxN2RjNzQyN2NjODQzN2JjOTQ0N2FjYTQ1N2FjYjQ2NzljYzQ3NzhjYzQ5NzdjZDRhNzZjZTRiNzVjZjRjNzRkMDRkNzNkMTRlNzJkMjRmNzFkMzUxNzFkNDUyNzBkNTUzNmZkNTU0NmVkNjU1NmRkNzU2NmNkODU3NmJkOTU4NmFkYTVhNmFkYTViNjlkYjVjNjhkYzVkNjdkZDVlNjZkZTVmNjVkZTYxNjRkZjYyNjNlMDYzNjNlMTY0NjJlMjY1NjFlMjY2NjBlMzY4NWZlNDY5NWVlNTZhNWRlNTZiNWRlNjZjNWNlNzZlNWJlNzZmNWFlODcwNTllOTcxNThlOTcyNTdlYTc0NTdlYjc1NTZlYjc2NTVlYzc3NTRlZDc5NTNlZDdhNTJlZTdiNTFlZjdjNTFlZjdlNTBmMDdmNGZmMDgwNGVmMTgxNGRmMTgzNGNmMjg0NGJmMzg1NGJmMzg3NGFmNDg4NDlmNDg5NDhmNThiNDdmNThjNDZmNjhkNDVmNjhmNDRmNzkwNDRmNzkxNDNmNzkzNDJmODk0NDFmODk1NDBmOTk3M2ZmOTk4M2VmOTlhM2VmYTliM2RmYTljM2NmYTllM2JmYjlmM2FmYmExMzlmYmEyMzhmY2EzMzhmY2E1MzdmY2E2MzZmY2E4MzVmY2E5MzRmZGFiMzNmZGFjMzNmZGFlMzJmZGFmMzFmZGIxMzBmZGIyMmZmZGI0MmZmZGI1MmVmZWI3MmRmZWI4MmNmZWJhMmNmZWJiMmJmZWJkMmFmZWJlMmFmZWMwMjlmZGMyMjlmZGMzMjhmZGM1MjdmZGM2MjdmZGM4MjdmZGNhMjZmZGNiMjZmY2NkMjVmY2NlMjVmY2QwMjVmY2QyMjVmYmQzMjRmYmQ1MjRmYmQ3MjRmYWQ4MjRmYWRhMjRmOWRjMjRmOWRkMjVmOGRmMjVmOGUxMjVmN2UyMjVmN2U0MjVmNmU2MjZmNmU4MjZmNWU5MjZmNWViMjdmNGVkMjdmM2VlMjdmM2YwMjdmMmYyMjdmMWY0MjZmMWY1MjVmMGY3MjRmMGY5MjFcIikpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuaW1wb3J0IHttYXgsIG1pbn0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NjYWxlU2VxdWVudGlhbH0gZnJvbSBcImQzLXNjYWxlXCI7XG5pbXBvcnQgKiBhcyBkM0Nocm9tYXRpYyBmcm9tIFwiZDMtc2NhbGUtY2hyb21hdGljXCI7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbG9yQ2hhcnQoc2h1ZmZsZT10cnVlKXtcbiAgICAvLyByZWYgaWxsdXN0cmF0b3IgY29sb3IgdGhlbWVzXG4gICAgY29uc3QgY29sb3JzID0gW1xuICAgICAgICBcInJnYigxMDAsMTE4LDEyMClcIixcbiAgICAgICAgXCJyZ2IoMTAxLDE0MSwxNDUpXCIsXG4gICAgICAgIFwicmdiKDEwMywxMjYsODIpXCIsXG4gICAgICAgIFwicmdiKDEwMywxODQsMjIyKVwiLFxuICAgICAgICBcInJnYigxMDgsMTEwLDg4KVwiLFxuXG4gICAgICAgIFwicmdiKDEwOCwxNDcsMTI4KVwiLFxuICAgICAgICBcInJnYigxMTksMTQ0LDE4MilcIixcbiAgICAgICAgXCJyZ2IoMTI2LDEzMCwxMjIpXCIsXG4gICAgICAgIFwicmdiKDEzMywxNzMsMTg2KVwiLFxuICAgICAgICBcInJnYigxMzcsMTE0LDkxKVwiLFxuICAgICAgICBcInJnYigxNDUsMTcwLDE1NylcIixcblxuICAgICAgICBcInJnYigxNDUsMjAxLDIzMilcIixcbiAgICAgICAgXCJyZ2IoMTQ3LDEwNSw2NilcIixcbiAgICAgICAgXCJyZ2IoMTU5LDExNCwxMTYpXCIsXG4gICAgICAgIFwicmdiKDE1OSwxODgsMTkxKVwiLFxuICAgICAgICBcInJnYigxNTksMjI5LDE5NClcIixcbiAgICAgICAgXCJyZ2IoMTYzLDE2MywxNzEpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTY0LDIwNywxOTApXCIsXG4gICAgICAgIFwicmdiKDE3MiwxMDgsMTMwKVwiLFxuICAgICAgICBcInJnYigxNzMsODQsMTE0KVwiLFxuICAgICAgICBcInJnYigxNzQsMTk1LDIyMilcIixcbiAgICAgICAgXCJyZ2IoMTc2LDIwNCwxNTMpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTc5LDE4MCwxNTApXCIsXG4gICAgICAgIFwicmdiKDE4MCwyMjAsMjM3KVwiLFxuICAgICAgICBcInJnYigxODMsMjAyLDEyMSlcIixcbiAgICAgICAgXCJyZ2IoMTkyLDIwMiw4NSlcIixcbiAgICAgICAgXCJyZ2IoMTkzLDE5MSwxOTNcIixcbiAgICAgICAgXCJyZ2IoMTk1LDk3LDEzNilcIixcblxuICAgICAgICBcInJnYigxOTksMTIxLDEwMilcIixcbiAgICAgICAgXCJyZ2IoMjA3LDIwMiw3NilcIixcbiAgICAgICAgXCJyZ2IoMjA5LDIxOSwxODkpXCIsXG4gICAgICAgIFwicmdiKDIxMywyNTEsMjU1KVwiLFxuICAgICAgICBcInJnYigyMTUsOTQsNTYpXCIsXG5cbiAgICAgICAgXCJyZ2IoMjE4LDExNCwxMjYpXCIsXG4gICAgICAgIFwicmdiKDIyMyw5MCw3MylcIixcbiAgICAgICAgXCJyZ2IoMjI0LDI0NywyMTcpXCIsXG4gICAgICAgIFwicmdiKDIyNywyMDUsMTY0KVwiLFxuICAgICAgICBcInJnYigyMjgsMTY4LDE4NSlcIixcblxuICAgICAgICBcInJnYigyMzAsMTc2LDE1MilcIixcbiAgICAgICAgXCJyZ2IoMjMyLDIxMiwxNzUpXCIsXG4gICAgICAgIFwicmdiKDIzOSwyMDEsNzYpXCIsXG4gICAgICAgIFwicmdiKDI0MCwxMjQsMTA4KVwiLFxuICAgICAgICBcInJnYigyNDYsMjMyLDE3NylcIixcblxuICAgICAgICBcInJnYigyNDksMjI4LDE3MylcIixcbiAgICAgICAgXCJyZ2IoMjUyLDI0NSwxOTEpXCIsXG4gICAgICAgIFwicmdiKDI1NSwxODgsMTAzKVwiLFxuICAgICAgICBcInJnYig0NSw5NCwxMTApXCIsXG4gICAgICAgIFwicmdiKDUxLDE1MywyMDQpXCIsXG5cbiAgICAgICAgXCJyZ2IoNjAsMTI0LDE0NSlcIixcbiAgICAgICAgXCJyZ2IoNjIsODcsMTQ1KVwiLFxuICAgICAgICBcInJnYig2NSwxMTUsMTIwKVwiLFxuICAgICAgICBcInJnYig4OSwyMTYsMjI5KVwiLFxuICAgICAgICBcInJnYig5NCwxNzgsMTUzKVwiLFxuICAgICAgICBcInJnYig5NSwxMjQsMTM0KVwiXG4gICAgXTtcblxuICAgIGlmIChzaHVmZmxlKSByZXR1cm4gc2h1ZmZsZUNvbG9ycyhjb2xvcnMpO1xuICAgIHJldHVybiBjb2xvcnM7XG59XG5cbmZ1bmN0aW9uIHNodWZmbGVDb2xvcnMoYXJyYXkpIHtcbiAgICAvLyBGaXNoZXItWWF0ZXMgc2h1ZmZsZVxuICAgIGxldCBjb3VudGVyID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgLy8gV2hpbGUgdGhlcmUgYXJlIGVsZW1lbnRzIGluIHRoZSBhcnJheVxuICAgIHdoaWxlIChjb3VudGVyID4gMCkge1xuICAgICAgICAvLyBQaWNrIGEgcmFuZG9tIGluZGV4XG4gICAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvdW50ZXIpO1xuXG4gICAgICAgIC8vIERlY3JlYXNlIGNvdW50ZXIgYnkgMVxuICAgICAgICBjb3VudGVyLS07XG5cbiAgICAgICAgLy8gQW5kIHN3YXAgdGhlIGxhc3QgZWxlbWVudCB3aXRoIGl0XG4gICAgICAgIGxldCB0ZW1wID0gYXJyYXlbY291bnRlcl07XG4gICAgICAgIGFycmF5W2NvdW50ZXJdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB0ZW1wO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBnZXQgYSBjb2xvciBzY2hlbWUgYnkgbmFtZVxuICogQHBhcmFtIG5hbWUge2VudW19OiBCdUduLCBPclJkLi4uLlxuICogQHJldHVybnMgeyp9OiBhIGNvbnRpbnVvdXMgaW50ZXJwb2xhdG9yICh1c2VkIHdpdGggZDMuc2NhbGVTZXF1ZW50aWFsKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JJbnRlcnBvbGF0b3IobmFtZSl7XG4gICAgLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtc2NhbGUtY2hyb21hdGljL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCNzZXF1ZW50aWFsLW11bHRpLWh1ZVxuXG4gICAgY29uc3QgaW50ZXJwb2xhdG9ycyA9IHtcbiAgICAgICAgQnVHbjogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVCdUduLFxuICAgICAgICBPclJkOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZU9yUmQsXG4gICAgICAgIFB1QnU6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUHVCdSxcbiAgICAgICAgWWxHbkJ1OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVlsR25CdSxcbiAgICAgICAgQmx1ZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlQmx1ZXMsXG4gICAgICAgIE9yYW5nZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlT3JhbmdlcyxcbiAgICAgICAgR3JlZW5zOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUdyZWVucyxcbiAgICAgICAgUHVycGxlczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdXJwbGVzLFxuICAgICAgICBSZWRzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJlZHMsXG4gICAgICAgIEdyZXlzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUdyZXlzLFxuICAgICAgICBHcmF5czogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmV5cyxcblxuICAgICAgICAvLyBkaXZlcmdpbmcgY29sb3Igc2NoZW1lc1xuICAgICAgICBSZEJ1OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJkQnUsXG4gICAgICAgIFJkR3k6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUmRHeSxcbiAgICAgICAgUGlZRzogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQaVlHLFxuICAgICAgICBQdU9yOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVB1T3IsXG4gICAgICAgIFJkWWxCdTogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVSZFlsQnVcbiAgICB9O1xuICAgIGlmICghaW50ZXJwb2xhdG9ycy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb25zdCBlcnIgPSBcIlVucmVjb2duaXplZCBjb2xvcjogXCIgKyBuYW1lO1xuICAgICAgICBhbGVydChlcnIpO1xuICAgICAgICB0aHJvdyhlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gaW50ZXJwb2xhdG9yc1tuYW1lXTtcbn1cblxuLyoqXG4gKiByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1zY2FsZVxuICogcmVmZXJlbmNlOiBodHRwOi8vYmwub2Nrcy5vcmcvY3VycmFuLzMwOTRiMzdlNjNiOTE4YmFiMGEwNjc4N2UxNjE2MDdiXG4gKiBzY2FsZVNlcXVlbnRpYWwgbWFwcyB0aGUgY29udGludW91cyBkb21haW4gdG8gYSBjb250aW51b3VzIGNvbG9yIHNjYWxlXG4gKiBAcGFyYW0gZGF0YSB7TGlzdH0gb2YgbnVtZXJpY2FsIGRhdGFcbiAqIEBwYXJhbSBjb2xvcnMge1N0cmluZ30gYSBjb2xvciBuYW1lIHRoYXQgaXMgYXZhaWxhYmxlIGluIGdldENvbG9ySW50ZXJwb2xhdG9yKClcbiAqIEBwYXJhbSBkbWluIHtOdW1iZXJ9IG1pbmltdW0gZG9tYWluIHZhbHVlXG4gKiBAcGFyYW0gZG1heCB7TnVtYmVyfSBtYXhpbXVtIGRvbWFpbiB2YWx1ZVxuICogQHBhcmFtIHJldmVyc2Uge0Jvb2xlYW59IHJldmVyc2UgdGhlIGNvbG9yIHNjaGVtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29sb3JTY2FsZShkYXRhLCBjb2xvcnM9XCJZbEduQnVcIiwgZG1pbj11bmRlZmluZWQsIGRtYXg9dW5kZWZpbmVkLCByZXZlcnNlPWZhbHNlKSB7XG4gICAgLy8gbGV0IGRtYXggPSBNYXRoLnJvdW5kKG1heChkYXRhKSk7XG4gICAgZG1heCA9IGRtYXggPT09IHVuZGVmaW5lZD9tYXgoZGF0YSk6ZG1heDtcbiAgICBkbWluID0gZG1pbiA9PT0gdW5kZWZpbmVkP21pbihkYXRhKTpkbWluO1xuICAgIGNvbnN0IHNjYWxlID0gc2NhbGVTZXF1ZW50aWFsKGdldENvbG9ySW50ZXJwb2xhdG9yKGNvbG9ycykpO1xuICAgIGlmKHJldmVyc2UpIHNjYWxlLmRvbWFpbihbZG1heCwgZG1pbl0pO1xuICAgIGVsc2Ugc2NhbGUuZG9tYWluKFtkbWluLCBkbWF4XSk7XG4gICAgcmV0dXJuIHNjYWxlO1xufVxuXG4vKipcbiAqIERyYXcgYSBjb2xvciBsZWdlbmQgYmFyLlxuICogRGVwZW5kZW5jaWVzOiBleHByZXNzaW9uTWFwLmNzc1xuICogQHBhcmFtIHRpdGxlIHtTdHJpbmd9XG4gKiBAcGFyYW0gZG9tIHtvYmplY3R9IEQzIGRvbSBvYmplY3RcbiAqIEBwYXJhbSBzY2FsZSB7T2JqZWN0fSBEMyBzY2FsZSBvZiB0aGUgY29sb3JcbiAqIEBwYXJhbSBjb25maWcge09iamVjdH0gd2l0aCBhdHRyOiB4LCB5XG4gKiBAcGFyYW0gdXNlTG9nIHtCb29sZWFufVxuICogQHBhcmFtIHRpY2tzIHtJbnRlZ2VyfSBudW1iZXIgb2YgdGlja3MgKG9uZS1zaWRlZClcbiAqIEBwYXJhbSBiYXNlIHtJbnRlZ2VyfSBsb2cgYmFzZVxuICogQHBhcmFtIGNlbGwge09iamVjdH0gd2l0aCBhdHRyaWJ1dGVzOiBoLCB3XG4gKiBAcGFyYW0gb3JpZW50YXRpb24ge2VudW19IGggb3IgdiwgaS5lLiBob3Jpem9udGFsIG9yIHZlcnRpY2FsXG4gKiBAcGFyYW0gZGl2ZXJnaW5nIHtCb29sZWFufSB3aGV0aGVyIHRoZSBjb2xvciBzY2hlbWUgaXMgZGl2ZXJnaW5nXG4gKiBAcGFyYW0gY2VsbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZHJhd0NvbG9yTGVnZW5kKHRpdGxlLCBkb20sIHNjYWxlLCBjb25maWcsIHVzZUxvZywgdGlja3M9MTAsIGJhc2U9MTAsIGNlbGw9e2g6MTAsIHc6NDB9LCBvcmllbnRhdGlvbj1cImhcIiwgZGl2ZXJnaW5nPWZhbHNlKXtcbiAgICBsZXQgZGF0YSA9IFtdO1xuXG4gICAgaWYoZGl2ZXJnaW5nKXtcbiAgICAgICAgbGV0IHJhbmdlID0gWy4uLkFycmF5KHRpY2tzKzEpLmtleXMoKV07XG4gICAgICAgIGxldCBpbnRlcnZhbCA9IHNjYWxlLmRvbWFpbigpWzFdL3RpY2tzO1xuICAgICAgICBkYXRhID0gcmFuZ2UubWFwKChkKT0+ZCppbnRlcnZhbCk7XG4gICAgICAgIGRhdGEgPSBkYXRhLmNvbmNhdChyYW5nZS5maWx0ZXIoKGQpPT5kIT0wKS5tYXAoKGQpPT4wLWQqaW50ZXJ2YWwpKS5zb3J0KChhLCBiKSA9PiB7cmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO30pO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgICBsZXQgcmFuZ2UgPSBbLi4uQXJyYXkodGlja3MrMSkua2V5cygpXTtcbiAgICAgICAgbGV0IGludGVydmFsID0gc2NhbGUuZG9tYWluKClbMV0vdGlja3M7XG4gICAgICAgIGRhdGEgPSByYW5nZS5tYXAoKGQpPT5kKmludGVydmFsKTtcbiAgICB9XG5cbiAgICAvLyBsZWdlbmQgZ3JvdXBzXG4gICAgY29uc3QgbGVnZW5kcyA9IGRvbS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYClcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcIi5sZWdlbmRcIikuZGF0YShkYXRhKTtcblxuICAgIGNvbnN0IGcgPSBsZWdlbmRzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKFwibGVnZW5kXCIsIHRydWUpO1xuXG4gICAgaWYgKG9yaWVudGF0aW9uID09PSAnaCcpe1xuICAgICAgICAgLy8gbGVnZW5kIHRpdGxlXG4gICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCh0aXRsZSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAtMTApXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgY2VsbC5oKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYCk7XG5cbiAgICAgICAgLy8gdGhlIGNvbG9yIGxlZ2VuZFxuICAgICAgICBnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gY2VsbC53KmkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgNSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgY2VsbC53KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2VsbC5oKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBzY2FsZSk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gdXNlTG9nPyhNYXRoLnBvdyhiYXNlLCBkKSkudG9QcmVjaXNpb24oMik6ZC50b1ByZWNpc2lvbigyKSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gY2VsbC53ICogaSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAgLy8gbGVnZW5kIHRpdGxlXG4gICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCh0aXRsZSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCA1KVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtjb25maWcueH0sICR7Y29uZmlnLnkgKyBjZWxsLmggKiBkYXRhLmxlbmd0aH0pcm90YXRlKDkwKWApO1xuXG4gICAgICAgIGcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQsIGkpID0+IGNlbGwuaCppKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjZWxsLncpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBjZWxsLmgpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHNjYWxlKTtcblxuICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiB1c2VMb2c/KE1hdGgucG93KGJhc2UsIGQpLTEpLnRvUHJlY2lzaW9uKDIpOmQudG9QcmVjaXNpb24oMikpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMTUpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQsIGkpID0+IGNlbGwuaCAqIGkgKyAoY2VsbC5oLzIpKTtcbiAgICB9XG5cblxuXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKipcbiAqIFRPRE86IGNvZGUgcmV2aWV3IG9mIGhvdyB0byBwcmVzZXQgcGFyYW1ldGVyIHZhbHVlc1xuICogcmV2aWV3IGFsbCB0aGUgcG9zaXRpb24gY2FsY3VsYXRpb25zXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbmRyb0hlYXRtYXBDb25maWcge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSByb290VyB7TnVtYmVyfSwgdGhpcyB3aWR0aCBpbmNsdWRlcyBtYXJnaW4gbGVmdCBhbmQgcmlnaHQsIHJvd1RyZWVQYW5lbCB3aWR0aCBhbmQgaGVhdG1hcCB3aWR0aC5cbiAgICAgKiBAcGFyYW0gbGVmdFBhbmVsVyB7SW50ZWdlcn0sIHNldCB0byAwIGlmIHRoZXJlJ3Mgbm8gbGVmdCBwYW5lbFxuICAgICAqIEBwYXJhbSB0b3BQYW5lbEgge0ludGVnZXJ9LCBzZXQgdG8gMCBpZiB0aGVyZSdzIG5vIHRvcCBwYW5lbFxuICAgICAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCBhdHRyOiB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHNtYWxsZXIgdmFsdWVzIHRoYW4gdGhlIGRlZmF1bHQgYXJlIG5vdCByZWNvbW1lbmRlZCBmb3IgdGhlIGhlYXRtYXAsIHRvcCBtYXJnaW4gc2hvdWxkIGJlIGF0IGxlYXN0IDUwXG4gICAgICogQHBhcmFtIGNlbGxIIHtJbnRlZ2VyfVxuICAgICAqIEBwYXJhbSBhZGp1c3Qge0ludGVnZXJ9LCBhZGp1c3RlZCBzcGFjaW5nIGJldHdlZW4gdGhlIGhlYXRtYXAgYW5kIHRoZSBkZW5kcm9ncmFtXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iocm9vdFc9d2luZG93LmlubmVyV2lkdGgsIGxlZnRQYW5lbFc9MTAwLCB0b3BQYW5lbEg9MTAwLCBtYXJnaW49e3RvcDo1MCwgcmlnaHQ6MjUwLCBib3R0b206MTcwLCBsZWZ0OjEwfSwgY2VsbEg9MTIsIGFkanVzdD0xMCkge1xuICAgICAgICB0aGlzLm1hcmdpbiA9IG1hcmdpbjtcbiAgICAgICAgdGhpcy5yb290VyA9IHJvb3RXO1xuXG4gICAgICAgIHRoaXMubGVmdFRyZWVQYW5lbCA9IHsgLy8gdGhlIHJvdyBkZW5kcm9ncmFtIHBhbmVsXG4gICAgICAgICAgICB4OiBtYXJnaW4ubGVmdCxcbiAgICAgICAgICAgIHk6IG1hcmdpbi50b3AgKyB0b3BQYW5lbEgsXG4gICAgICAgICAgICBoOiB1bmRlZmluZWQsIC8vIHVuZGVmaW5lZCBpbml0aWFsbHksIGJlY2F1c2UgaXQncyBkYXRhLWRlcGVuZGVudFxuICAgICAgICAgICAgdzogbGVmdFBhbmVsVyAtIGFkanVzdCxcbiAgICAgICAgICAgIGlkOiBcImxlZnRUcmVlXCJcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNlbGwgPSB7XG4gICAgICAgICAgICB3OiB1bmRlZmluZWQsIC8vIHRvIGJlIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIGRhdGEgYW5kIHJvb3RXXG4gICAgICAgICAgICBoOiBjZWxsSFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudG9wVHJlZVBhbmVsID0geyAvLyB0aGUgY29sdW1uIGRlbmRyb2dyYW0gcGFuZWxcbiAgICAgICAgICAgIHg6IG1hcmdpbi5sZWZ0ICsgbGVmdFBhbmVsVyxcbiAgICAgICAgICAgIHk6IG1hcmdpbi50b3AsXG4gICAgICAgICAgICBoOiB0b3BQYW5lbEggLSBhZGp1c3QsXG4gICAgICAgICAgICB3OiB0aGlzLnJvb3RXIC0gKG1hcmdpbi5sZWZ0ICsgbGVmdFBhbmVsVyArIG1hcmdpbi5yaWdodCksIC8vIGhhcmQtY29kZWQgdmFsdWVzP1xuICAgICAgICAgICAgaWQ6IFwidG9wVHJlZVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5oZWF0bWFwUGFuZWwgPSB7XG4gICAgICAgICAgICB4OiBtYXJnaW4ubGVmdCArIGxlZnRQYW5lbFcsXG4gICAgICAgICAgICB5OiBtYXJnaW4udG9wICsgdG9wUGFuZWxILFxuICAgICAgICAgICAgaDogdGhpcy5sZWZ0VHJlZVBhbmVsLmgsXG4gICAgICAgICAgICB3OiB0aGlzLnRvcFRyZWVQYW5lbC53LFxuICAgICAgICAgICAgaWQ6IFwiaGVhdG1hcFwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5sZWdlbmRQYW5lbCA9IHsgLy8gdGhlIGNvbG9yIGxlZ2VuZCBwYW5lbFxuICAgICAgICAgICAgeDogbWFyZ2luLmxlZnQgKyBsZWZ0UGFuZWxXLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIGg6IG1hcmdpbi50b3AvMixcbiAgICAgICAgICAgIHc6IHRoaXMudG9wVHJlZVBhbmVsLncsXG4gICAgICAgICAgICBjZWxsOiB7dzogNjB9LFxuICAgICAgICAgICAgaWQ6IFwibGVnZW5kXCJcbiAgICAgICAgfTtcblxuXG4gICAgfVxuXG4gICAgZ2V0KCl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXJnaW46IHRoaXMubWFyZ2luLFxuICAgICAgICAgICAgY2VsbDogdGhpcy5jZWxsLFxuICAgICAgICAgICAgdzogdGhpcy5yb290VyxcbiAgICAgICAgICAgIGg6IHRoaXMubWFyZ2luLnRvcCArIHRoaXMudG9wVHJlZVBhbmVsLmggKyB0aGlzLmxlZ2VuZFBhbmVsLmggKyB0aGlzLm1hcmdpbi5ib3R0b20sIC8vIGluaXRpYWwgaGVpZ2h0XG4gICAgICAgICAgICBwYW5lbHM6IHtcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMudG9wVHJlZVBhbmVsLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMubGVmdFRyZWVQYW5lbCxcbiAgICAgICAgICAgICAgICBtYWluOiB0aGlzLmhlYXRtYXBQYW5lbCxcbiAgICAgICAgICAgICAgICBsZWdlbmQ6IHRoaXMubGVnZW5kUGFuZWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qKlxuICogQ3JlYXRlcyBhbiBTVkdcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSBhIERPTSBlbGVtZW50IElEIHRoYXQgc3RhcnRzIHdpdGggYSBcIiNcIlxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfVxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY31cbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCB0d28gYXR0cmlidXRlczogd2lkdGggYW5kIGhlaWdodFxuICogQHJldHVybiB7U2VsZWN0aW9ufSB0aGUgZDMgc2VsZWN0aW9uIG9iamVjdCBvZiB0aGUgU1ZHXG4gKi9cblxuaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cmFuZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tEb21JZChpZCl7XG4gICAgLy8gdGVzdCBpbnB1dCBwYXJhbXNcbiAgICBpZiAoalF1ZXJ5KGAjJHtpZH1gKS5sZW5ndGggPT0gMCkge1xuICAgICAgICBsZXQgZXJyb3IgPSBgSW5wdXQgRXJyb3I6IERPTSBJRCAke2lkfSBpcyBub3QgZm91bmQuYDtcbiAgICAgICAgYWxlcnQoZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgQ2FudmFzIEQzIG9iamVjdFxuICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBwYXJlbnQgZG9tIElEXG4gKiBAcGFyYW0gd2lkdGgge051bWVyaWN9OiB0aGUgb3V0ZXIgd2lkdGhcbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9OiB0aGUgb3V0ZXIgaGVpZ2h0XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggYXR0cjogbGVmdCwgdG9wXG4gKiBAcGFyYW0gY2FudmFzSWQge1N0cmluZ31cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzKGlkLCB3aWR0aCwgaGVpZ2h0LCBtYXJnaW4sIGNhbnZhc0lkPXVuZGVmaW5lZCwgcG9zaXRpb249XCJhYnNvbHV0ZVwiKXtcbiAgICBjaGVja0RvbUlkKGlkKTtcbiAgICBpZihjYW52YXNJZD09PXVuZGVmaW5lZCkgY2FudmFzSWQ9YCR7aWR9LWNhbnZhc2A7XG4gICAgcmV0dXJuIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgLmFwcGVuZChcImNhbnZhc1wiKVxuICAgICAgICAuYXR0cignaWQnLCBjYW52YXNJZClcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBwb3NpdGlvbikgLy8gVE9ETzogc2hvdWxkIHRoZSBwb3NpdGlvbiBiZSB1c2VyLWRlZmluZWQ/IHJlbGF0aXZlIHZzIGFic29sdXRlXG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIFNWRyBEMyBvYmplY3RcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgcGFyZW50IGRvbSBJRFxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfTogdGhlIG91dGVyIHdpZHRoXG4gKiBAcGFyYW0gaGVpZ2h0IHtOdW1lcmljfTogdGhlIG91dGVyIGhlaWdodFxuICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIGF0dHI6IGxlZnQsIHRvcFxuICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN2ZyhpZCwgd2lkdGgsIGhlaWdodCwgbWFyZ2luLCBzdmdJZD11bmRlZmluZWQsIHBvc2l0aW9uPVwicmVsYXRpdmVcIil7XG4gICAgY2hlY2tEb21JZChpZCk7XG4gICAgaWYgKHN2Z0lkPT09dW5kZWZpbmVkKSBzdmdJZD1gJHtpZH0tc3ZnYDtcbiAgICByZXR1cm4gc2VsZWN0KFwiI1wiK2lkKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuYXR0cihcImlkXCIsIHN2Z0lkKVxuICAgICAgICAvLyAuc3R5bGUoXCJwb3NpdGlvblwiLCBwb3NpdGlvbilcbiAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4udG9wfSlgKVxufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gc3ZnT2JqXG4gKiBAcGFyYW0gZG93bmxvYWRGaWxlTmFtZSB7U3RyaW5nfVxuICogQHBhcmFtIHRlbXBEb3dubG9hZERpdklkIHtTdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZFN2ZyhzdmdPYmosIGRvd25sb2FkRmlsZU5hbWUsIHRlbXBEb3dubG9hZERpdklkKXtcbiAgICBjb25zb2xlLmxvZyhzdmdPYmopO1xuICAgIHZhciAkc3ZnQ29weSA9IHN2Z09iai5jbG9uZSgpXG4gICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgLmF0dHIoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuXG4gICAgLy8gcGFyc2UgYW5kIGFkZCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgdmFyIHN0eWxlcyA9IHBhcnNlQ3NzU3R5bGVzKHN2Z09iai5nZXQoKSk7XG4gICAgJHN2Z0NvcHkucHJlcGVuZChzdHlsZXMpO1xuXG4gICAgalF1ZXJ5KFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmh0bWwoJycpLmhpZGUoKTtcbiAgICB2YXIgc3ZnSHRtbCA9IGpRdWVyeShcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5hcHBlbmQoJHN2Z0NvcHkpLmh0bWwoKTtcblxuICAgIHZhciBzdmdCbG9iID0gbmV3IEJsb2IoW3N2Z0h0bWxdLCB7dHlwZTogXCJpbWFnZS9zdmcreG1sXCJ9KTtcbiAgICBzYXZlQXMoc3ZnQmxvYiwgZG93bmxvYWRGaWxlTmFtZSk7XG5cbiAgICAvLyBjbGVhciB0aGUgdGVtcCBkb3dubG9hZCBkaXZcbiAgICBqUXVlcnkoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuaHRtbCgnJykuaGlkZSgpO1xufVxuLyoqXG4gKiBBIGZ1bmN0aW9uIGZvciBwYXJzaW5nIHRoZSBDU1Mgc3R5bGUgc2hlZXQgYW5kIGluY2x1ZGluZyB0aGUgc3R5bGUgcHJvcGVydGllcyBpbiB0aGUgZG93bmxvYWRhYmxlIFNWRy5cbiAqIEBwYXJhbSBkb21cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3NTdHlsZXMgKGRvbSkge1xuICAgIHZhciB1c2VkID0gXCJcIjtcbiAgICB2YXIgc2hlZXRzID0gZG9jdW1lbnQuc3R5bGVTaGVldHM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNoZWV0cy5sZW5ndGg7IGkrKykgeyAvLyBUT0RPOiB3YWxrIHRocm91Z2ggdGhpcyBibG9jayBvZiBjb2RlXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChzaGVldHNbaV0uY3NzUnVsZXMgPT0gbnVsbCkgY29udGludWU7XG4gICAgICAgICAgICB2YXIgcnVsZXMgPSBzaGVldHNbaV0uY3NzUnVsZXM7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YocnVsZS5zdHlsZSkgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92aW5nIGFueSBzZWxlY3RvciB0ZXh0IGluY2x1ZGluZyBzdmcgZWxlbWVudCBJRCAtLSBkb20gYWxyZWFkeSBzZWxlY3RzIGZvciB0aGF0XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHJ1bGUuc2VsZWN0b3JUZXh0ID09PSB1bmRlZmluZWQ/IHJ1bGUuc2VsZWN0b3JUZXh0IDogcnVsZS5zZWxlY3RvclRleHQucmVwbGFjZShgIyR7ZG9tWzBdLmlkfSBgLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vU29tZSBzZWxlY3RvcnMgd29uJ3Qgd29yaywgYW5kIG1vc3Qgb2YgdGhlc2UgZG9uJ3QgbWF0dGVyLlxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSBqUXVlcnkoZG9tKS5maW5kKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VkICs9IHJ1bGUuc2VsZWN0b3JUZXh0ICsgXCIgeyBcIiArIHJ1bGUuc3R5bGUuY3NzVGV4dCArIFwiIH1cXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gSW4gRmlyZWZveCwgaWYgc3R5bGVzaGVldCBvcmlnaW5hdGVzIGZyb20gYSBkaWZmIGRvbWFpbixcbiAgICAgICAgICAgIC8vIHRyeWluZyB0byBhY2Nlc3MgdGhlIGNzc1J1bGVzIHdpbGwgdGhyb3cgYSBTZWN1cml0eUVycm9yLlxuICAgICAgICAgICAgLy8gSGVuY2UsIHdlIG11c3QgdXNlIGEgdHJ5L2NhdGNoIHRvIGhhbmRsZSB0aGlzIGluIEZpcmVmb3hcbiAgICAgICAgICAgIGlmIChlLm5hbWUgIT09ICdTZWN1cml0eUVycm9yJykgdGhyb3cgZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XG4gICAgcy5pbm5lckhUTUwgPSBcIjwhW0NEQVRBW1xcblwiICsgdXNlZCArIFwiXFxuXV0+XCI7XG5cbiAgICByZXR1cm4gcztcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGxpc3Qgb2YgeCp5IGRhdGEgb2JqZWN0cyB3aXRoIHJhbmRvbSB2YWx1ZXNcbiAqIFRoZSBkYXRhIG9iamVjdCBoYXMgdGhpcyBzdHJ1Y3R1cmU6IHt4OiB4bGFiZWwsIHk6IHlsYWJlbCwgdmFsdWU6IHNvbWUgdmFsdWUsIGRpc3BsYXlWYWx1ZTogc29tZSB2YWx1ZX1cbiAqIEBwYXJhbSBwYXJcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tTWF0cml4KHBhcj17eDoyMCwgeToyMCwgc2NhbGVGYWN0b3I6MSwgZGl2ZXJnaW5nOmZhbHNlLCBidWJibGU6ZmFsc2V9KXtcbiAgICBsZXQgWCA9IHJhbmdlKDEsIHBhci54KzEpOyAvLyBnZW5lcmF0ZXMgYSAxLWJhc2VkIGxpc3QuXG4gICAgbGV0IFkgPSByYW5nZSgxLCBwYXIueSsxKTtcbiAgICBsZXQgZGF0YSA9IFtdO1xuICAgIFguZm9yRWFjaCgoeCk9PntcbiAgICAgICAgeCA9ICd4JyArIHgudG9TdHJpbmcoKTtcbiAgICAgICAgWS5mb3JFYWNoKCh5KT0+e1xuICAgICAgICAgICAgeSA9ICd5JyArIHkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGxldCB2ID0gTWF0aC5yYW5kb20oKSpwYXIuc2NhbGVGYWN0b3I7XG4gICAgICAgICAgICB2ID0gcGFyLmRpdmVyZ2luZyYmTWF0aC5yYW5kb20oKSA8IDAuNSA/IC12IDogdjsgLy8gcmFuZG9tbHkgYXNzaWduaW5nIG5lZ2F0aXZlIGFuZCBwb3NpdGl2ZSB2YWx1ZXNcbiAgICAgICAgICAgIGRhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogcGFyc2VGbG9hdCh2LnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oMyksXG4gICAgICAgICAgICAgICAgcjogcGFyLmJ1YmJsZT9NYXRoLnJhbmRvbSgpKjMwOnVuZGVmaW5lZCAvLyBvbmx5IHJlbGV2YW50IHRvIGJ1YmJsZSBtYXBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiByYW5kb20gdmFsdWVzXG4gKiBAcGFyYW0gcGFyXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUxpc3QocGFyPXtuOjEwMCwgc2NhbGVGYWN0b3I6MX0pIHtcbiAgICBsZXQgWCA9IHJhbmdlKDAsIHBhci5uKTsgLy8gZ2VuZXJhdGVzIGEgMS1iYXNlZCBsaXN0LlxuICAgIGxldCBkYXRhID0gW107XG4gICAgcmV0dXJuIFgubWFwKCh4KSA9PiBNYXRoLnJhbmRvbSgpICogcGFyLnNjYWxlRmFjdG9yKTtcblxufVxuIiwiZnVuY3Rpb24gY291bnQobm9kZSkge1xuICB2YXIgc3VtID0gMCxcbiAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gIGlmICghaSkgc3VtID0gMTtcbiAgZWxzZSB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgbm9kZS52YWx1ZSA9IHN1bTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihjb3VudCk7XG59XG4iLCJpbXBvcnQgbm9kZV9jb3VudCBmcm9tIFwiLi9jb3VudFwiO1xuaW1wb3J0IG5vZGVfZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgbm9kZV9lYWNoQmVmb3JlIGZyb20gXCIuL2VhY2hCZWZvcmVcIjtcbmltcG9ydCBub2RlX2VhY2hBZnRlciBmcm9tIFwiLi9lYWNoQWZ0ZXJcIjtcbmltcG9ydCBub2RlX3N1bSBmcm9tIFwiLi9zdW1cIjtcbmltcG9ydCBub2RlX3NvcnQgZnJvbSBcIi4vc29ydFwiO1xuaW1wb3J0IG5vZGVfcGF0aCBmcm9tIFwiLi9wYXRoXCI7XG5pbXBvcnQgbm9kZV9hbmNlc3RvcnMgZnJvbSBcIi4vYW5jZXN0b3JzXCI7XG5pbXBvcnQgbm9kZV9kZXNjZW5kYW50cyBmcm9tIFwiLi9kZXNjZW5kYW50c1wiO1xuaW1wb3J0IG5vZGVfbGVhdmVzIGZyb20gXCIuL2xlYXZlc1wiO1xuaW1wb3J0IG5vZGVfbGlua3MgZnJvbSBcIi4vbGlua3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XG4gIHZhciByb290ID0gbmV3IE5vZGUoZGF0YSksXG4gICAgICB2YWx1ZWQgPSArZGF0YS52YWx1ZSAmJiAocm9vdC52YWx1ZSA9IGRhdGEudmFsdWUpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVzID0gW3Jvb3RdLFxuICAgICAgY2hpbGQsXG4gICAgICBjaGlsZHMsXG4gICAgICBpLFxuICAgICAgbjtcblxuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkgY2hpbGRyZW4gPSBkZWZhdWx0Q2hpbGRyZW47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmICh2YWx1ZWQpIG5vZGUudmFsdWUgPSArbm9kZS5kYXRhLnZhbHVlO1xuICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4obm9kZS5kYXRhKSkgJiYgKG4gPSBjaGlsZHMubGVuZ3RoKSkge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBOb2RlKGNoaWxkc1tpXSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByb290LmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIG5vZGVfY29weSgpIHtcbiAgcmV0dXJuIGhpZXJhcmNoeSh0aGlzKS5lYWNoQmVmb3JlKGNvcHlEYXRhKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKGQpIHtcbiAgcmV0dXJuIGQuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNvcHlEYXRhKG5vZGUpIHtcbiAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLmRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlSGVpZ2h0KG5vZGUpIHtcbiAgdmFyIGhlaWdodCA9IDA7XG4gIGRvIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICB3aGlsZSAoKG5vZGUgPSBub2RlLnBhcmVudCkgJiYgKG5vZGUuaGVpZ2h0IDwgKytoZWlnaHQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5vZGUoZGF0YSkge1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmRlcHRoID1cbiAgdGhpcy5oZWlnaHQgPSAwO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG59XG5cbk5vZGUucHJvdG90eXBlID0gaGllcmFyY2h5LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE5vZGUsXG4gIGNvdW50OiBub2RlX2NvdW50LFxuICBlYWNoOiBub2RlX2VhY2gsXG4gIGVhY2hBZnRlcjogbm9kZV9lYWNoQWZ0ZXIsXG4gIGVhY2hCZWZvcmU6IG5vZGVfZWFjaEJlZm9yZSxcbiAgc3VtOiBub2RlX3N1bSxcbiAgc29ydDogbm9kZV9zb3J0LFxuICBwYXRoOiBub2RlX3BhdGgsXG4gIGFuY2VzdG9yczogbm9kZV9hbmNlc3RvcnMsXG4gIGRlc2NlbmRhbnRzOiBub2RlX2Rlc2NlbmRhbnRzLFxuICBsZWF2ZXM6IG5vZGVfbGVhdmVzLFxuICBsaW5rczogbm9kZV9saW5rcyxcbiAgY29weTogbm9kZV9jb3B5XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgZG8ge1xuICAgIGN1cnJlbnQgPSBuZXh0LnJldmVyc2UoKSwgbmV4dCA9IFtdO1xuICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBuZXh0LnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAobmV4dC5sZW5ndGgpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIG5leHQgPSBbXSwgY2hpbGRyZW4sIGksIG47XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBuZXh0LnB1c2gobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICB3aGlsZSAobm9kZSA9IG5leHQucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIGNoaWxkcmVuLCBpO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBzdW0gPSArdmFsdWUobm9kZS5kYXRhKSB8fCAwLFxuICAgICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gICAgd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gICAgbm9kZS52YWx1ZSA9IHN1bTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZSk7XG4gICAgfVxuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVuZCkge1xuICB2YXIgc3RhcnQgPSB0aGlzLFxuICAgICAgYW5jZXN0b3IgPSBsZWFzdENvbW1vbkFuY2VzdG9yKHN0YXJ0LCBlbmQpLFxuICAgICAgbm9kZXMgPSBbc3RhcnRdO1xuICB3aGlsZSAoc3RhcnQgIT09IGFuY2VzdG9yKSB7XG4gICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgbm9kZXMucHVzaChzdGFydCk7XG4gIH1cbiAgdmFyIGsgPSBub2Rlcy5sZW5ndGg7XG4gIHdoaWxlIChlbmQgIT09IGFuY2VzdG9yKSB7XG4gICAgbm9kZXMuc3BsaWNlKGssIDAsIGVuZCk7XG4gICAgZW5kID0gZW5kLnBhcmVudDtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbmZ1bmN0aW9uIGxlYXN0Q29tbW9uQW5jZXN0b3IoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG4gIHZhciBhTm9kZXMgPSBhLmFuY2VzdG9ycygpLFxuICAgICAgYk5vZGVzID0gYi5hbmNlc3RvcnMoKSxcbiAgICAgIGMgPSBudWxsO1xuICBhID0gYU5vZGVzLnBvcCgpO1xuICBiID0gYk5vZGVzLnBvcCgpO1xuICB3aGlsZSAoYSA9PT0gYikge1xuICAgIGMgPSBhO1xuICAgIGEgPSBhTm9kZXMucG9wKCk7XG4gICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgfVxuICByZXR1cm4gYztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50KSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gW107XG4gIHRoaXMuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbGVhdmVzID0gW107XG4gIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICBsZWF2ZXMucHVzaChub2RlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGVhdmVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciByb290ID0gdGhpcywgbGlua3MgPSBbXTtcbiAgcm9vdC5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZSAhPT0gcm9vdCkgeyAvLyBEb27igJl0IGluY2x1ZGUgdGhlIHJvb3TigJlzIHBhcmVudCwgaWYgYW55LlxuICAgICAgbGlua3MucHVzaCh7c291cmNlOiBub2RlLnBhcmVudCwgdGFyZ2V0OiBub2RlfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxpbmtzO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5cbnZhciB0b3AgPSAxLFxuICAgIHJpZ2h0ID0gMixcbiAgICBib3R0b20gPSAzLFxuICAgIGxlZnQgPSA0LFxuICAgIGVwc2lsb24gPSAxZS02O1xuXG5mdW5jdGlvbiB0cmFuc2xhdGVYKHgpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgKHggKyAwLjUpICsgXCIsMClcIjtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlWSh5KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgKHkgKyAwLjUpICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIG51bWJlcihzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbnRlcihzY2FsZSkge1xuICB2YXIgb2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2NhbGUuYmFuZHdpZHRoKCkgLSAxKSAvIDI7IC8vIEFkanVzdCBmb3IgMC41cHggb2Zmc2V0LlxuICBpZiAoc2NhbGUucm91bmQoKSkgb2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQpO1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCkgKyBvZmZzZXQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICByZXR1cm4gIXRoaXMuX19heGlzO1xufVxuXG5mdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgayA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gbGVmdCA/IC0xIDogMSxcbiAgICAgIHggPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/IFwieFwiIDogXCJ5XCIsXG4gICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkpIDogdGlja0Zvcm1hdCxcbiAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgIHJhbmdlID0gc2NhbGUucmFuZ2UoKSxcbiAgICAgICAgcmFuZ2UwID0gK3JhbmdlWzBdICsgMC41LFxuICAgICAgICByYW5nZTEgPSArcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyAwLjUsXG4gICAgICAgIHBvc2l0aW9uID0gKHNjYWxlLmJhbmR3aWR0aCA/IGNlbnRlciA6IG51bWJlcikoc2NhbGUuY29weSgpKSxcbiAgICAgICAgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dCxcbiAgICAgICAgcGF0aCA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIuZG9tYWluXCIpLmRhdGEoW251bGxdKSxcbiAgICAgICAgdGljayA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIudGlja1wiKS5kYXRhKHZhbHVlcywgc2NhbGUpLm9yZGVyKCksXG4gICAgICAgIHRpY2tFeGl0ID0gdGljay5leGl0KCksXG4gICAgICAgIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIiksXG4gICAgICAgIGxpbmUgPSB0aWNrLnNlbGVjdChcImxpbmVcIiksXG4gICAgICAgIHRleHQgPSB0aWNrLnNlbGVjdChcInRleHRcIik7XG5cbiAgICBwYXRoID0gcGF0aC5tZXJnZShwYXRoLmVudGVyKCkuaW5zZXJ0KFwicGF0aFwiLCBcIi50aWNrXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb21haW5cIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIikpO1xuXG4gICAgdGljayA9IHRpY2subWVyZ2UodGlja0VudGVyKTtcblxuICAgIGxpbmUgPSBsaW5lLm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpKTtcblxuICAgIHRleHQgPSB0ZXh0Lm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKVxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLmF0dHIoXCJkeVwiLCBvcmllbnQgPT09IHRvcCA/IFwiMGVtXCIgOiBvcmllbnQgPT09IGJvdHRvbSA/IFwiMC43MWVtXCIgOiBcIjAuMzJlbVwiKSk7XG5cbiAgICBpZiAoY29udGV4dCAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBwYXRoID0gcGF0aC50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGljayA9IHRpY2sudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIGxpbmUgPSBsaW5lLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0ZXh0ID0gdGV4dC50cmFuc2l0aW9uKGNvbnRleHQpO1xuXG4gICAgICB0aWNrRXhpdCA9IHRpY2tFeGl0LnRyYW5zaXRpb24oY29udGV4dClcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBpc0Zpbml0ZShkID0gcG9zaXRpb24oZCkpID8gdHJhbnNmb3JtKGQpIDogdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7IH0pO1xuXG4gICAgICB0aWNrRW50ZXJcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHZhciBwID0gdGhpcy5wYXJlbnROb2RlLl9fYXhpczsgcmV0dXJuIHRyYW5zZm9ybShwICYmIGlzRmluaXRlKHAgPSBwKGQpKSA/IHAgOiBwb3NpdGlvbihkKSk7IH0pO1xuICAgIH1cblxuICAgIHRpY2tFeGl0LnJlbW92ZSgpO1xuXG4gICAgcGF0aFxuICAgICAgICAuYXR0cihcImRcIiwgb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PSByaWdodFxuICAgICAgICAgICAgPyAodGlja1NpemVPdXRlciA/IFwiTVwiICsgayAqIHRpY2tTaXplT3V0ZXIgKyBcIixcIiArIHJhbmdlMCArIFwiSDAuNVZcIiArIHJhbmdlMSArIFwiSFwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk0wLjUsXCIgKyByYW5nZTAgKyBcIlZcIiArIHJhbmdlMSlcbiAgICAgICAgICAgIDogKHRpY2tTaXplT3V0ZXIgPyBcIk1cIiArIHJhbmdlMCArIFwiLFwiICsgayAqIHRpY2tTaXplT3V0ZXIgKyBcIlYwLjVIXCIgKyByYW5nZTEgKyBcIlZcIiArIGsgKiB0aWNrU2l6ZU91dGVyIDogXCJNXCIgKyByYW5nZTAgKyBcIiwwLjVIXCIgKyByYW5nZTEpKTtcblxuICAgIHRpY2tcbiAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRyYW5zZm9ybShwb3NpdGlvbihkKSk7IH0pO1xuXG4gICAgbGluZVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKTtcblxuICAgIHRleHRcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC50ZXh0KGZvcm1hdCk7XG5cbiAgICBzZWxlY3Rpb24uZmlsdGVyKGVudGVyaW5nKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDEwKVxuICAgICAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwic2Fucy1zZXJpZlwiKVxuICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIG9yaWVudCA9PT0gcmlnaHQgPyBcInN0YXJ0XCIgOiBvcmllbnQgPT09IGxlZnQgPyBcImVuZFwiIDogXCJtaWRkbGVcIik7XG5cbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7IHRoaXMuX19heGlzID0gcG9zaXRpb247IH0pO1xuICB9XG5cbiAgYXhpcy5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZSA9IF8sIGF4aXMpIDogc2NhbGU7XG4gIH07XG5cbiAgYXhpcy50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aWNrQXJndW1lbnRzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLCBheGlzO1xuICB9O1xuXG4gIGF4aXMudGlja0FyZ3VtZW50cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrQXJndW1lbnRzID0gXyA9PSBudWxsID8gW10gOiBzbGljZS5jYWxsKF8pLCBheGlzKSA6IHRpY2tBcmd1bWVudHMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tWYWx1ZXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1ZhbHVlcyA9IF8gPT0gbnVsbCA/IG51bGwgOiBzbGljZS5jYWxsKF8pLCBheGlzKSA6IHRpY2tWYWx1ZXMgJiYgdGlja1ZhbHVlcy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrRm9ybWF0ID0gXywgYXhpcykgOiB0aWNrRm9ybWF0O1xuICB9O1xuXG4gIGF4aXMudGlja1NpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9IHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplT3V0ZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrUGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrUGFkZGluZyA9ICtfLCBheGlzKSA6IHRpY2tQYWRkaW5nO1xuICB9O1xuXG4gIHJldHVybiBheGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1RvcChzY2FsZSkge1xuICByZXR1cm4gYXhpcyh0b3AsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNSaWdodChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhyaWdodCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0JvdHRvbShzY2FsZSkge1xuICByZXR1cm4gYXhpcyhib3R0b20sIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNMZWZ0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGxlZnQsIHNjYWxlKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qXG4gICAgRGVuZHJvZ3JhbSB2aXN1YWxpemVzIGEgdGV4dC1iYXNlZCBOZXdpY2sgdHJlZSB1c2luZyBEMyBWNS5cblxuICAgIGRlcGVuZGVuY2llczpcbiAgICBkMyB2NVxuICAgIHRoZSBuZXdpY2sgcGFyc2VyOiBuZXdpY2suanNcblxuICAgIHJlZmVyZW5jZXM6XG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWhpZXJhcmNoeVxuICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNvbmRhdmllcy9uZXdpY2suanMvXG5cbiAgICBub3RlcyBvbiB0aGUgdW5kZXJseWluZyBkYXRhIHN0cnVjdHVyZXM6XG4gICAgLSBpdCB1c2VzIHBhcnNlTmV3aWNrKCkgdG8gY29udmVydCB0aGUgbmV3aWNrIHRyZWUgaW50byB0aGUgZm9sbG93aW5nIGpzb246XG4gICAgICAgIHtcbiAgICAgICAgICAgIGJyYW5jaHNldDpbY2hpbGQgbm9kZSBqc29uIG9iamVjdHNdLFxuICAgICAgICAgICAgbmFtZTogXCJcIiAvLyBpbnRlcm5hbCBub2RlcyB3b3VsZCBoYXZlIG5vIHJlYWwgbGFiZWxzXG4gICAgICAgIH1cbiAgICAgICBUaGlzIGpzb24gc3RydWN0dXJlIGlzIHRoZSBpbnB1dCBkYXRhIG9mIGQzLmhpZXJhcmNoeSgpXG5cbiAgICAtIEluIHRoZSBkMy5oaWVyYXJjaHkoKSwgdGhlIHJvb3Qgbm9kZSBvYmplY3QgaGFzIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuICAgICAgICB7XG4gICAgICAgICAgICBjaGlsZHJlbjogW2NvLCBjb10sXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgYnJhbmNoc2V0OiBBcnJheSgyKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5vZGUgbmFtZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVwdGg6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IGludGVnZXIsXG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZTogOVxuICAgICAgICB9XG4gKi9cblxuLy8gVE9ETzogZWxpbWluYXRlIGhhcmQtY29kZWQgdmFsdWVzXG5cbmltcG9ydCB7aGllcmFyY2h5fSBmcm9tIFwiZDMtaGllcmFyY2h5XCI7XG5pbXBvcnQge2FzY2VuZGluZ30gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2F4aXNCb3R0b20sIGF4aXNMZWZ0fSBmcm9tIFwiZDMtYXhpc1wiO1xuaW1wb3J0IHtzY2FsZUxpbmVhciwgc2NhbGVCYW5kfSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCB7cGFyc2VOZXdpY2t9IGZyb20gXCIuL25ld2lja1wiO1xuY29uc3QgdmVyYm9zZSA9IGZhbHNlO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVuZHJvZ3JhbSB7XG4gICAgY29uc3RydWN0b3IobmV3aWNrLCBvcmllbnRhdGlvbj0naCcpe1xuICAgICAgICB0aGlzLm5ld2ljayA9IG5ld2ljaztcbiAgICAgICAgdGhpcy5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuICAgICAgICB0aGlzLnBvc3RvcmRlciA9IFtdO1xuICAgICAgICB0aGlzLnJvb3QgPSBoaWVyYXJjaHkocGFyc2VOZXdpY2sobmV3aWNrKSwgKGQpID0+IGQuYnJhbmNoc2V0KVxuICAgICAgICAgICAgLnN1bSgoZCk9PmQuYnJhbmNoc2V0PzA6MSlcbiAgICAgICAgICAgIC5zb3J0KChhLGIpPT5hLnZhbHVlLWIudmFsdWV8fGEuZGF0YS5sZW5ndGgtYi5kYXRhLmxlbmd0aCk7XG4gICAgICAgIHRoaXMubGVhdmVzID0gdGhpcy5yb290LmxlYXZlcygpLnNvcnQoKGEsIGIpID0+IChhLnZhbHVlIC0gYi52YWx1ZSkgfHwgYXNjZW5kaW5nKGEuZGF0YS5sZW5ndGgsIGIuZGF0YS5sZW5ndGgpKTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueFNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnlTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBkcmF3KGRvbSwgd2lkdGgsIGhlaWdodCl7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuX3NldFhTY2FsZSgpO1xuICAgICAgICB0aGlzLl9zZXRZU2NhbGUoKTtcbiAgICAgICAgaWYgKCdoJyA9PSB0aGlzLm9yaWVudGF0aW9uKSB0aGlzLl9kcmF3SFRyZWUoZG9tKTtcbiAgICAgICAgZWxzZSB0aGlzLl9kcmF3VlRyZWUoZG9tKTtcbiAgICB9XG5cbiAgICAvLy8vLy8vIHByaXZhdGUgbWV0aG9kcyAvLy8vLy8vXG5cbiAgICBfZHJhd0hUcmVlKGRvbSl7XG4gICAgICAgIGNvbnN0IHNldFkgPSAobm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGEgbGVhZiBub2RlXG4gICAgICAgICAgICAgICAgbm9kZS55ID0gdGhpcy55U2NhbGUobm9kZS5kYXRhLm5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhbiBpbnRlcm5hbCBub2RlXG4gICAgICAgICAgICAgICAgLy8gdGhlIHkgY29vcmRpbmF0ZSBvZiBhbiBpbnRlcm5hbCBub2RlIGlzIHRoZSBhdmVyYWdlIHkgZnJvbSBpdHMgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBub2RlLnkgPSBub2RlLmNoaWxkcmVuLnJlZHVjZSgoc3VtLCBkKT0+c3VtK2QueSwgMCkvbm9kZS5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNldFggPSAobm9kZSkgPT4ge1xuICAgICAgICAgICAgbm9kZS54ID0gdGhpcy54U2NhbGUodGhpcy5fZ2V0QnJhbmNoTGVuZ3RoVG9Sb290KG5vZGUpKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBmcm9tIHRoZSBsZWFmIGxldmVsIC0+IHJvb3RcbiAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLl9zb3J0Tm9kZXNCeUxldmVsKCk7XG4gICAgICAgIG5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIHNldFgobm9kZSk7XG4gICAgICAgICAgICBzZXRZKG5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKCcuYnJhbmNoJylcbiAgICAgICAgICAgIC5kYXRhKG5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC54KVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC5kYXRhLmxlbmd0aD9kLnggLSB0aGlzLnhTY2FsZShkLmRhdGEubGVuZ3RoKTpkLngpXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsIChkKSA9PiBkLnkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCAoZCkgPT4gZC55ICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiZ3JheVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSk7XG5cbiAgICAgICAgLy8gZm9yIGFsbCBpbnRlcm5hbCBub2Rlc1xuICAgICAgICBjb25zdCBpbm9kZXMgPSB0aGlzLnJvb3QuZGVzY2VuZGFudHMoKS5maWx0ZXIoKGQpPT5kLmhlaWdodCkuc29ydCgoYSxiKT0+Yi5oZWlnaHQtYS5oZWlnaHQpO1xuICAgICAgICBkb20uc2VsZWN0QWxsKCcuYXJtJylcbiAgICAgICAgICAgIC5kYXRhKGlub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQueClcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQueClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpID0+IGQuY2hpbGRyZW5bMF0ueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIChkKSA9PiBkLmNoaWxkcmVuWzFdLnkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKCcubm9kZScpXG4gICAgICAgICAgICAuZGF0YShpbm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IGQueClcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpID0+IGQueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgMilcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJyMzMzMnKVxuICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDAuNSlcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5kcm9ncmFtLW5vZGVcIilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cihcInJcIiwgMyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZC5sZWF2ZXMoKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJyXCIsIDIpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBheGlzXG4gICAgICAgIC8vIEFkZCB0aGUgeCBBeGlzXG4gICAgICAgIGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZGVuZHJvZ3JhbS1heGlzXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgdGhpcy5oZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgIC5jYWxsKFxuICAgICAgICAgICAgICAgIGF4aXNCb3R0b20odGhpcy54U2NhbGUpXG4gICAgICAgICAgICAgICAgICAgIC50aWNrcygzKVxuICAgICAgICAgICAgICAgIC8vIC50aWNrVmFsdWVzKFtNYXRoLmZsb29yKHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpLzIpLCBNYXRoLmZsb29yKHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpKV0pXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIF9zb3J0Tm9kZXNCeUxldmVsKCl7XG4gICAgICAgIC8vIHJldHVybnMgYSBsaXN0IG9mIG5vZGVzIG9yZGVyZWQgYnkgYW5jZXN0cmFsIGxldmVsLCB0aGVuIGJ5IGJyYW5jaCBsZW5ndGhcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5kZXNjZW5kYW50cygpLnNvcnQoKGEsIGIpID0+IChhLmhlaWdodCAtIGIuaGVpZ2h0KSB8fCBhc2NlbmRpbmcoYS5kYXRhLmxlbmd0aCwgYi5kYXRhLmxlbmd0aCkpO1xuICAgIH1cblxuICAgIF9kcmF3VlRyZWUoZG9tKXtcbiAgICAgICAgY29uc3Qgc2V0WCA9IChub2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gYSBsZWFmIG5vZGVcbiAgICAgICAgICAgICAgICBub2RlLnggPSB0aGlzLnhTY2FsZShub2RlLmRhdGEubmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFuIGludGVybmFsIG5vZGVcbiAgICAgICAgICAgICAgICAvLyB0aGUgeSBjb29yZGluYXRlIG9mIGFuIGludGVybmFsIG5vZGUgaXMgdGhlIGF2ZXJhZ2UgeSBmcm9tIGl0cyBjaGlsZHJlblxuICAgICAgICAgICAgICAgIG5vZGUueCA9IG5vZGUuY2hpbGRyZW4ucmVkdWNlKChzdW0sIGQpPT5zdW0rZC54LCAwKS9ub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc2V0WSA9IChub2RlKSA9PiB7XG4gICAgICAgICAgICBub2RlLnkgPSB0aGlzLnlTY2FsZSh0aGlzLl9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSkpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBmcm9tIHRoZSBsZWFmIGxldmVsIC0+IHJvb3RcbiAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLl9zb3J0Tm9kZXNCeUxldmVsKCk7XG4gICAgICAgIG5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIHNldFgobm9kZSk7XG4gICAgICAgICAgICBzZXRZKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgZG9tLnNlbGVjdEFsbCgnLmJyYW5jaCcpXG4gICAgICAgICAgICAuZGF0YShub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpID0+IGQueSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgKGQpID0+IGQuZGF0YS5sZW5ndGg/ZC55IC0gdGhpcy55U2NhbGUoZC5kYXRhLmxlbmd0aCk6ZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC54ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQueCArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImdyYXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpO1xuXG4gICAgICAgIC8vIGZvciBhbGwgaW50ZXJuYWwgbm9kZXNcbiAgICAgICAgY29uc3QgaW5vZGVzID0gdGhpcy5yb290LmRlc2NlbmRhbnRzKCkuZmlsdGVyKChkKT0+ZC5oZWlnaHQpLnNvcnQoKGEsYik9PmIuaGVpZ2h0LWEuaGVpZ2h0KTtcbiAgICAgICAgZG9tLnNlbGVjdEFsbCgnLmFybScpXG4gICAgICAgICAgICAuZGF0YShpbm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsIChkKSA9PiBkLnkpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIChkKSA9PiBkLnkpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLmNoaWxkcmVuWzBdLnggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC5jaGlsZHJlblsxXS54ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiZ3JheVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSk7XG5cbiAgICAgICAgZG9tLnNlbGVjdEFsbCgnLm5vZGUnKVxuICAgICAgICAgICAgLmRhdGEoaW5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIChkKSA9PiBkLnggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDIpXG4gICAgICAgICAgICAuYXR0cignZmlsbCcsICcjMzMzJylcbiAgICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAwLjUpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZGVuZHJvZ3JhbS1ub2RlXCIpXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJyXCIsIDMpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGQubGVhdmVzKCkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYXhpc1xuICAgICAgICAvLyBBZGQgdGhlIHggQXhpc1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLy8gLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3RoaXMud2lkdGh9LCAwKWApXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZGVuZHJvZ3JhbS1heGlzXCIpXG4gICAgICAgICAgICAuY2FsbChcbiAgICAgICAgICAgICAgICBheGlzTGVmdCh0aGlzLnlTY2FsZSlcbiAgICAgICAgICAgICAgICAgICAgLnRpY2tzKDMpXG4gICAgICAgICAgICAgICAgLy8gLnRpY2tWYWx1ZXMoW01hdGguZmxvb3IodGhpcy5fZ2V0TWF4QnJhbmNoTGVuZ3RoKCkvMiksIE1hdGguZmxvb3IodGhpcy5fZ2V0TWF4QnJhbmNoTGVuZ3RoKCkpXSlcbiAgICAgICAgICAgICk7XG5cbiAgICB9XG5cbiAgICBfZ2V0QnJhbmNoTGVuZ3RoVG9Sb290KG5vZGUpIHtcbiAgICAgICAgLy8gbm9kZTogYSBkMy5oaWVyYXJjaHkgbm9kZVxuICAgICAgICByZXR1cm4gbm9kZS5wYXRoKHRoaXMucm9vdClcbiAgICAgICAgICAgIC5yZWR1Y2UoKHN1bSwgZCkgPT4gZC5kYXRhLmxlbmd0aD9zdW0rZC5kYXRhLmxlbmd0aDpzdW0sIDApO1xuICAgIH1cblxuICAgIF9nZXRNYXhCcmFuY2hMZW5ndGgoKSB7XG4gICAgICAgIC8vIHRoZSBhc3N1bXB0aW9uIGhlcmUgaXMgdGhhdCBhbGwgbGVhZiBub2RlcyBoYXZlIHRoZSBzYW1lIGRpc3RhbmNlIHRvIHRoZSByb290LlxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMubGVhdmVzWzBdOyAvLyByYW5kb21seSBwaWNrcyBhIGxlYWYgbm9kZVxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnJhbmNoTGVuZ3RoVG9Sb290KG5vZGUpO1xuICAgIH1cblxuICAgIF9hc3NpZ25Qb3N0b3JkZXIobm9kZSl7XG4gICAgICAgIC8vIGFzc2lnbnMgcG9zdC1vcmRlciBvZiBhbGwgbGVhZiBub2Rlc1xuICAgICAgICBpZihub2RlLmNoaWxkcmVuID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgLy8gYmFzZSBjYXNlXG4gICAgICAgICAgICB0aGlzLnBvc3RvcmRlci5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYXNzaWduUG9zdG9yZGVyKG5vZGUuY2hpbGRyZW5bMF0pO1xuICAgICAgICAgICAgdGhpcy5fYXNzaWduUG9zdG9yZGVyKG5vZGUuY2hpbGRyZW5bMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3NldFhTY2FsZSgpe1xuICAgICAgICBpZiAoJ2gnID09IHRoaXMub3JpZW50YXRpb24pe1xuICAgICAgICAgICAgdGhpcy54U2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLmRvbWFpbihbMCwgdGhpcy5fZ2V0TWF4QnJhbmNoTGVuZ3RoKCldKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy53aWR0aF0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Qb3N0b3JkZXIodGhpcy5yb290KTtcbiAgICAgICAgICAgIGlmICh2ZXJib3NlKSBjb25zb2xlLmxvZyh0aGlzLnBvc3RvcmRlcik7XG4gICAgICAgICAgICB0aGlzLnhTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgLmRvbWFpbih0aGlzLnBvc3RvcmRlci5tYXAoKGQpID0+IGQuZGF0YS5uYW1lKSlcbiAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIHRoaXMud2lkdGhdKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0WVNjYWxlKCl7XG4gICAgICAgIGlmICgnaCcgPT0gdGhpcy5vcmllbnRhdGlvbil7XG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Qb3N0b3JkZXIodGhpcy5yb290KTtcbiAgICAgICAgICAgIGlmICh2ZXJib3NlKSBjb25zb2xlLmxvZyh0aGlzLnBvc3RvcmRlcik7XG4gICAgICAgICAgICB0aGlzLnlTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgLmRvbWFpbih0aGlzLnBvc3RvcmRlci5tYXAoKGQpID0+IGQuZGF0YS5uYW1lKSlcbiAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIHRoaXMuaGVpZ2h0XSlcbiAgICAgICAgICAgICAgICAucGFkZGluZyguMDUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy55U2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLmRvbWFpbihbMCwgdGhpcy5fZ2V0TWF4QnJhbmNoTGVuZ3RoKCldKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy5oZWlnaHRdKVxuICAgICAgICB9XG4gICAgfVxuXG59IiwiLy8gQ29weXJpZ2h0IDIwMTEgSmFzb24gRGF2aWVzIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNvbmRhdmllcy9uZXdpY2suanNcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTmV3aWNrKHMpIHtcbiAgICB2YXIgYW5jZXN0b3JzID0gW107XG4gICAgdmFyIHRyZWUgPSB7fTtcbiAgICB2YXIgdG9rZW5zID0gcy5zcGxpdCgvXFxzKig7fFxcKHxcXCl8LHw6KVxccyovKTtcbiAgICBmb3IgKHZhciBpPTA7IGk8dG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJygnOiAvLyBuZXcgYnJhbmNoc2V0XG4gICAgICAgICAgdmFyIHN1YnRyZWUgPSB7fTtcbiAgICAgICAgICB0cmVlLmJyYW5jaHNldCA9IFtzdWJ0cmVlXTtcbiAgICAgICAgICBhbmNlc3RvcnMucHVzaCh0cmVlKTtcbiAgICAgICAgICB0cmVlID0gc3VidHJlZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnLCc6IC8vIGFub3RoZXIgYnJhbmNoXG4gICAgICAgICAgdmFyIHN1YnRyZWUgPSB7fTtcbiAgICAgICAgICBhbmNlc3RvcnNbYW5jZXN0b3JzLmxlbmd0aC0xXS5icmFuY2hzZXQucHVzaChzdWJ0cmVlKTtcbiAgICAgICAgICB0cmVlID0gc3VidHJlZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnKSc6IC8vIG9wdGlvbmFsIG5hbWUgbmV4dFxuICAgICAgICAgIHRyZWUgPSBhbmNlc3RvcnMucG9wKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzonOiAvLyBvcHRpb25hbCBsZW5ndGggbmV4dFxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHZhciB4ID0gdG9rZW5zW2ktMV07XG4gICAgICAgICAgaWYgKHggPT0gJyknIHx8IHggPT0gJygnIHx8IHggPT0gJywnKSB7XG4gICAgICAgICAgICB0cmVlLm5hbWUgPSB0b2tlbjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHggPT0gJzonKSB7XG4gICAgICAgICAgICB0cmVlLmxlbmd0aCA9IHBhcnNlRmxvYXQodG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyZWU7XG59XG5cbiIsInZhciBub29wID0ge3ZhbHVlOiBmdW5jdGlvbigpIHt9fTtcblxuZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IHt9LCB0OyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgX1t0XSA9IFtdO1xuICB9XG4gIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG59XG5cbmZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgdGhpcy5fID0gXztcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbkRpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICB0LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcbiAgfSxcbiAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldCh0eXBlLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gYy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIiwidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImNhbmNlbFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobm9kZSwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIHNjaGVkdWxlLm9uLmNhbGwoYWN0aXZlID8gXCJpbnRlcnJ1cHRcIiA6IFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSZ2IsIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxudmFyIFNlbGVjdGlvbiA9IHNlbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9ncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge3N0eWxlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBzdHlsZU51bGwobmFtZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICBzdHJpbmcxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgc3RyaW5nMTAgPSBzdHJpbmcxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSxcbiAgICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSBzdHJpbmcxID0gdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlTWF5YmVSZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIG9uMCwgb24xLCBsaXN0ZW5lcjAsIGtleSA9IFwic3R5bGUuXCIgKyBuYW1lLCBldmVudCA9IFwiZW5kLlwiICsga2V5LCByZW1vdmU7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uLFxuICAgICAgICBsaXN0ZW5lciA9IHNjaGVkdWxlLnZhbHVlW2tleV0gPT0gbnVsbCA/IHJlbW92ZSB8fCAocmVtb3ZlID0gc3R5bGVSZW1vdmUobmFtZSkpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wIHx8IGxpc3RlbmVyMCAhPT0gbGlzdGVuZXIpIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24oZXZlbnQsIGxpc3RlbmVyMCA9IGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGkgPSAobmFtZSArPSBcIlwiKSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVOdWxsKG5hbWUsIGkpKVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmUobmFtZSkpXG4gICAgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlRnVuY3Rpb24obmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKSlcbiAgICAgIC5lYWNoKHN0eWxlTWF5YmVSZW1vdmUodGhpcy5faWQsIG5hbWUpKVxuICAgIDogdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVDb25zdGFudChuYW1lLCBpLCB2YWx1ZSksIHByaW9yaXR5KVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgbnVsbCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmRcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2UsXG4gIGVuZDogdHJhbnNpdGlvbl9lbmRcbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpKHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciB0LCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdCA9IChpMCA9IGkpICYmIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpO1xuICAgIHJldHVybiB0O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIga2V5ID0gXCJzdHlsZS5cIiArIChuYW1lICs9IFwiXCIpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpO1xufVxuIiwiaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudHdlZW4oXCJ0ZXh0XCIsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IHRleHRGdW5jdGlvbih0d2VlblZhbHVlKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSkpXG4gICAgICA6IHRleHRDb25zdGFudCh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlRnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLl9fdHJhbnNpdGlvbikgaWYgKCtpICE9PSBpZCkgcmV0dXJuO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9uKFwiZW5kLnJlbW92ZVwiLCByZW1vdmVGdW5jdGlvbih0aGlzLl9pZCkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBvbjAsIG9uMSwgdGhhdCA9IHRoaXMsIGlkID0gdGhhdC5faWQsIHNpemUgPSB0aGF0LnNpemUoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjYW5jZWwgPSB7dmFsdWU6IHJlamVjdH0sXG4gICAgICAgIGVuZCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7IGlmICgtLXNpemUgPT09IDApIHJlc29sdmUoKTsgfX07XG5cbiAgICB0aGF0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkge1xuICAgICAgICBvbjEgPSAob24wID0gb24pLmNvcHkoKTtcbiAgICAgICAgb24xLl8uY2FuY2VsLnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uaW50ZXJydXB0LnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uZW5kLnB1c2goZW5kKTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICBoYWxmUGkgPSBwaSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbih0KSB7XG4gIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5PdXQodCkge1xuICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cbiIsInZhciB0YXUgPSAyICogTWF0aC5QSSxcbiAgICBhbXBsaXR1ZGUgPSAxLFxuICAgIHBlcmlvZCA9IDAuMztcblxuZXhwb3J0IHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICA6IDIgLSBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcbiAgfVxuXG4gIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbk91dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qKlxuICogQ3JlYXRlIGEgdG9vbGJhclxuICogVGhpcyBjbGFzcyB1c2VzIGEgbG90IG9mIGpRdWVyeSBmb3IgZG9tIGVsZW1lbnQgbWFuaXB1bGF0aW9uXG4gKi9cblxuaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cGFyc2VDc3NTdHlsZXN9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgc2F2ZUFzIGZyb20gJ2ZpbGUtc2F2ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sYmFyIHtcbiAgICBjb25zdHJ1Y3Rvcihkb21JZCwgdG9vbHRpcD11bmRlZmluZWQsIHZlcnRpY2FsPWZhbHNlKXtcbiAgICAgICAgalF1ZXJ5KGAjJHtkb21JZH1gKS5zaG93KCk7IC8vIGlmIGhpZGRlblxuXG4gICAgICAgIC8vIGFkZCBhIG5ldyBiYXJncm91cCBkaXYgdG8gZG9tSUQgd2l0aCBib290c3RyYXAgYnV0dG9uIGNsYXNzZXNcbiAgICAgICAgY29uc3QgYnRuQ2xhc3NlcyA9IHZlcnRpY2FsPydidG4tZ3JvdXAtdmVydGljYWwgYnRuLWdyb3VwLXNtJzogJ2J0bi1ncm91cCBidG4tZ3JvdXAtc20nO1xuICAgICAgICB0aGlzLmJhciA9IGpRdWVyeSgnPGRpdi8+JykuYWRkQ2xhc3MoYnRuQ2xhc3NlcykuYXBwZW5kVG8oYCMke2RvbUlkfWApO1xuICAgICAgICB0aGlzLmJ1dHRvbnMgPSB7fTtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkb3dubG9hZCBidXR0b24gZm9yIFNWR1xuICAgICAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgYnV0dG9uIGRvbSBJRFxuICAgICAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfSB0aGUgU1ZHIGRvbSBJRCB0byBncmFiIGFuZCBkb3dubG9hZFxuICAgICAqIEBwYXJhbSBvdXRmaWxlTmFtZSB7U3RyaW5nfSB0aGUgZG93bmxvYWQgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIGNsb25lSWQge1N0cmluZ30gdGhlIGNsb25lZCBTVkcgZG9tIElEXG4gICAgICogQHBhcmFtIGljb24ge1N0cmluZ30gYSBmb250YXdlc29tZSdzIGljb24gY2xhc3MgbmFtZVxuICAgICAqL1xuICAgIGNyZWF0ZURvd25sb2FkU3ZnQnV0dG9uKGlkLCBzdmdJZCwgb3V0ZmlsZU5hbWUsIGNsb25lSWQsIGljb249J2ZhLWRvd25sb2FkJyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSB0aGlzLmNyZWF0ZUJ1dHRvbihpZCwgaWNvbik7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRTdmcoc3ZnSWQsIG91dGZpbGVOYW1lLCBjbG9uZUlkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXCJEb3dubG9hZFwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlUmVzZXRCdXR0b24oaWQsIGNhbGxiYWNrLCBpY29uPSdmYS1leHBhbmQtYXJyb3dzLWFsdCcpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b24oaWQsIGljb24pO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgY2FsbGJhY2spXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXCJSZXNldCB0aGUgc2NhbGVzXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBidXR0b24gdG8gdGhlIHRvb2xiYXJcbiAgICAgKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIGJ1dHRvbidzIGlkXG4gICAgICogQHBhcmFtIGljb24ge1N0cmluZ30gYSBmb250YXdlc29tZSBpY29uIGNsYXNzXG4gICAgICogRGVwZW5kZW5jaWVzOiBCb290c3RyYXAsIGpRdWVyeSwgRm9udGF3ZXNvbWVcbiAgICAgKi9cbiAgICBjcmVhdGVCdXR0b24oaWQsIGljb249J2ZhLWRvd25sb2FkJyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSBqUXVlcnkoJzxhLz4nKS5hdHRyKCdpZCcsIGlkKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdidG4gYnRuLWRlZmF1bHQnKS5hcHBlbmRUbyh0aGlzLmJhcik7XG4gICAgICAgIGpRdWVyeSgnPGkvPicpLmFkZENsYXNzKGBmYSAke2ljb259YCkuYXBwZW5kVG8oJGJ1dHRvbik7XG4gICAgICAgIHRoaXMuYnV0dG9uc1tpZF0gPSAkYnV0dG9uO1xuICAgICAgICByZXR1cm4gJGJ1dHRvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhdHRhY2ggYSB0b29sdGlwIGRvbSB3aXRoIHRoZSB0b29sYmFyXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICovXG4gICAgYXR0YWNoVG9vbHRpcCh0b29sdGlwKXtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZCBTVkcgb2JqXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHRoZSBTVkcgZG9tIElEXG4gICAgICogQHBhcmFtIGZpbGVOYW1lIHtTdHJpbmd9IHRoZSBvdXRwdXQgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIGNsb25lSWQge1N0cmluZ30gdGhlIHRlbXBvcmFyeSBkb20gSUQgdG8gY29weSB0aGUgU1ZHIHRvXG4gICAgICogRGVwZW5kZW5jaWVzOiBGaWxlU2F2ZXJcbiAgICAgKi9cbiAgICBkb3dubG9hZFN2ZyhzdmdJZCwgZmlsZU5hbWUsIGNsb25lSWQpe1xuICAgICAgICAvLyBsZXQgc3ZnT2JqID0galF1ZXJ5KGpRdWVyeShqUXVlcnkoYCR7XCIjXCIgK3N2Z0lkfSBzdmdgKSlbMF0pOyAvLyBjb21wbGljYXRlZCBqUXVlcnkgdG8gZ2V0IHRvIHRoZSBTVkcgb2JqZWN0XG4gICAgICAgIGxldCBzdmdPYmogPSBqUXVlcnkoalF1ZXJ5KGpRdWVyeShgJHtcIiNcIiArc3ZnSWR9YCkpWzBdKTtcbiAgICAgICAgbGV0ICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAgICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgICAgICAvLyBwYXJzZSBhbmQgYWRkIGFsbCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgICAgIGxldCBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICAgICAkc3ZnQ29weS5wcmVwZW5kKHN0eWxlcyk7XG5cbiAgICAgICAgalF1ZXJ5KFwiI1wiICsgY2xvbmVJZCkuaHRtbCgnJykuaGlkZSgpOyAvLyBtYWtlIHN1cmUgdGhlIGNvcHlJRCBpcyBpbnZpc2libGVcbiAgICAgICAgbGV0IHN2Z0h0bWwgPSBqUXVlcnkoYCMke2Nsb25lSWR9YCkuYXBwZW5kKCRzdmdDb3B5KS5odG1sKCk7XG5cbiAgICAgICAgbGV0IHN2Z0Jsb2IgPSBuZXcgQmxvYihbc3ZnSHRtbF0sIHt0eXBlOiBcImltYWdlL3N2Zyt4bWxcIn0pO1xuICAgICAgICBzYXZlQXMoc3ZnQmxvYiwgZmlsZU5hbWUpO1xuXG4gICAgICAgIC8vIGNsZWFyIHRoZSB0ZW1wIGRvd25sb2FkIGRpdlxuICAgICAgICBqUXVlcnkoYCMke2Nsb25lSWR9YCkuaHRtbCgnJykuaGlkZSgpO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7c2VsZWN0LCBldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0cmFuc2l0aW9ufSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2x0aXAge1xuICAgIGNvbnN0cnVjdG9yKGlkLCB2ZXJib3NlPWZhbHNlLCBvZmZzZXRYPTMwLCBvZmZzZXRZPS00MCwgZHVyYXRpb249MTAwKXtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnZlcmJvc2UgPSB2ZXJib3NlO1xuICAgICAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgfVxuXG4gICAgc2hvdyhpbmZvKSB7XG4gICAgICAgIGlmKHRoaXMudmVyYm9zZSkgY29uc29sZS5sb2coaW5mbyk7XG4gICAgICAgIHRoaXMuZWRpdChpbmZvKTtcbiAgICAgICAgdGhpcy5tb3ZlKCk7XG4gICAgICAgIHNlbGVjdChcIiNcIiArIHRoaXMuaWQpXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lXCIpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24odGhpcy5kdXJhdGlvbilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMS4wKVxuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHNlbGVjdChcIiNcIiArIHRoaXMuaWQpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24odGhpcy5kdXJhdGlvbilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMC4wKTtcbiAgICAgICAgdGhpcy5lZGl0KFwiXCIpO1xuICAgIH1cblxuICAgIG1vdmUoeCA9IGV2ZW50LnBhZ2VYLCB5ID0gZXZlbnQucGFnZVkpIHtcbiAgICAgICAgaWYgKHRoaXMudmVyYm9zZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coeCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh5KTtcbiAgICAgICAgfVxuICAgICAgICB4ID0geCArIHRoaXMub2Zmc2V0WDsgLy8gVE9ETzogZ2V0IHJpZCBvZiB0aGUgaGFyZC1jb2RlZCBhZGp1c3RtZW50XG4gICAgICAgIHkgPSAoeSArIHRoaXMub2Zmc2V0WSk8MD8xMDp5K3RoaXMub2Zmc2V0WTtcbiAgICAgICAgY29uc3QgdCA9IHNlbGVjdCgnIycrdGhpcy5pZClcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgYCR7eH1weGApXG4gICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgYCR7eX1weGApXG4gICAgfVxuXG4gICAgZWRpdChpbmZvKSB7XG4gICAgICAgIHNlbGVjdChcIiNcIiArIHRoaXMuaWQpXG4gICAgICAgICAgICAuaHRtbChpbmZvKVxuICAgIH1cbn1cblxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtzY2FsZUJhbmR9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHtuZXN0fSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHt0cmFuc2l0aW9ufSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuXG5pbXBvcnQge3NldENvbG9yU2NhbGUsIGRyYXdDb2xvckxlZ2VuZH0gZnJvbSBcIi4vY29sb3JzXCI7XG5pbXBvcnQgVG9vbGJhciBmcm9tIFwiLi9Ub29sYmFyXCI7XG5pbXBvcnQgVG9vbHRpcCBmcm9tIFwiLi9Ub29sdGlwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYXRtYXAge1xuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIGRhdGEge0xpc3R9LCBhIGxpc3Qgb2Ygb2JqZWN0cyB3aXRoIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczogeDogdGhlIHggbGFiZWwsIHk6IHRoZSB5IGxhYmVsXG4gICAgICAgIHZhbHVlOiB0aGUgcmVuZGVyZWQgbnVtZXJpY2FsIHZhbHVlICh0cmFuc2Zvcm1lZClcbiAgICAgICAgZGlzcGxheVZhbHVlOiBkaXNwbGF5IG51bWVyaWNhbCB2YWx1ZVxuICAgICAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59IHBlcmZvcm1zIGxvZyB0cmFuc2Zvcm1hdGlvblxuICAgICAqIEBwYXJhbSBjb2xvclNjaGVtZSB7U3RyaW5nfTogcmVjb2duaXplZCB0ZXJtcyBpbiBDb2xvcnM6Z2V0Q29sb3JJbnRlcnBvbGF0b3JcbiAgICAgKiBAcGFyYW0gciB7SW50ZWdlcn06IGNlbGwgY29ybmVyIHJhZGl1c1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIHVzZUxvZz10cnVlLCBsb2dCYXNlPTEwLCBjb2xvclNjaGVtZT1cIllsR25CdVwiLCByPTIsIHRvb2x0aXBJZD1cImhlYXRtYXBUb29sdGlwXCIpe1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnVzZUxvZyA9IHVzZUxvZztcbiAgICAgICAgdGhpcy5sb2dCYXNlID0gbG9nQmFzZTtcbiAgICAgICAgdGhpcy5udWxsQ29sb3IgPSBcIiNlNmU2ZTZcIjsgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWUuIG1ha2UgaXQgYSBwYXJhbS5cbiAgICAgICAgdGhpcy5jb2xvclNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnhMaXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnlMaXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnhTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy55U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMuY29sb3JTY2hlbWUgPSBjb2xvclNjaGVtZTtcblxuICAgICAgICAvLyBwZXJpcGhlcmFsIGZlYXR1cmVzXG4gICAgICAgIC8vLyBUb29sdGlwXG4gICAgICAgIC8vLyBjcmVhdGUgdGhlIHRvb2x0aXAgRElWXG4gICAgICAgIGlmIChqUXVlcnkoYCMke3Rvb2x0aXBJZH1gKS5sZW5ndGggPT0gMCkgalF1ZXJ5KCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIHRvb2x0aXBJZCkuYXBwZW5kVG8oalF1ZXJ5KCdib2R5JykpO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcCh0b29sdGlwSWQpO1xuICAgICAgICBzZWxlY3QoYCMke3Rvb2x0aXBJZH1gKS5jbGFzc2VkKCdoZWF0bWFwLXRvb2x0aXAnLCB0cnVlKTtcblxuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sYmFyIHBhbmVsXG4gICAgICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IHRoZSB0b29sYmFyJ3MgZG9tIElEXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICogQHJldHVybnMge1Rvb2xiYXJ9XG4gICAgICovXG5cbiAgICBjcmVhdGVUb29sYmFyKGRvbUlkLCB0b29sdGlwKXtcbiAgICAgICAgdGhpcy50b29sYmFyID0gbmV3IFRvb2xiYXIoZG9tSWQsIHRvb2x0aXApO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogZHJhdyBjb2xvciBsZWdlbmQgZm9yIHRoZSBoZWF0IG1hcFxuICAgICAqIEBwYXJhbSBkb20ge1NlbGVjdGlvbn0gYSBkMyBzZWxlY3Rpb24gb2JqZWN0XG4gICAgICogQHBhcmFtIGxlZ2VuZENvbmZpZyB7T2JqZWN0fSB3aXRoIGF0dHI6IHgsIHlcbiAgICAgKi9cblxuICAgIGRyYXdDb2xvckxlZ2VuZChkb20sIGxlZ2VuZENvbmZpZz17eDowLCB5OjB9LCB0aWNrcz01KXtcbiAgICAgICAgZHJhd0NvbG9yTGVnZW5kKHRoaXMuZGF0YVswXS51bml0fHxcIlZhbHVlXCIsIGRvbSwgdGhpcy5jb2xvclNjYWxlLCBsZWdlbmRDb25maWcsIHRoaXMudXNlTG9nLCB0aWNrcywgdGhpcy5sb2dCYXNlKTtcbiAgICB9XG5cbiAgICAgLyoqXG4gICAgICogcmVkcmF3cyB0aGUgaGVhdG1hcDogd2hlbiB0aGUgeGxpc3QgYW5kIHlsaXN0IGFyZSBjaGFuZ2VkLCByZWRyYXcgdGhlIGhlYXRtYXBcbiAgICAgKiBAcGFyYW0gZG9tIHtTZWxlY3Rpb259IGEgZDMgc2VsZWN0aW9uIG9iamVjdFxuICAgICAqIEBwYXJhbSB4TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHggbGFiZWxzXG4gICAgICogQHBhcmFtIHlMaXN0IHtMaXN0fSBhIGxpc3Qgb2YgeSBsYWJlbHNcbiAgICAgKiBAcGFyYW0gZGltZW5zaW9ucyB7RGljdGlvbmFyeX0ge3c6SW50ZWdlciwgaDppbnRlZ2VyfSB3aXRoIHR3byBhdHRyaWJ1dGVzOiB3IGFuZCBoXG4gICAgICogQHBhcmFtIGFuZ2xlIHtJbnRlZ2VyfSBmb3IgdGhlIHkgdGV4dCBsYWJlbHNcbiAgICAgKi9cbiAgICByZWRyYXcoZG9tLCB4TGlzdCwgeUxpc3QsIGRpbWVuc2lvbnM9e3c6MTAwMCwgaDoxMDAwfSwgYW5nbGU9MzApe1xuICAgICAgICB0aGlzLl9zZXRYU2NhbGUoZGltZW5zaW9ucy53LCB4TGlzdCk7XG4gICAgICAgIHRoaXMuX3NldFlTY2FsZShkaW1lbnNpb25zLmgsIHlMaXN0KTtcbiAgICAgICAgdGhpcy5kcmF3KGRvbSwgZGltZW5zaW9ucywgYW5nbGUpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogZHJhd3MgdGhlIGhlYXRtYXBcbiAgICAgKiBAcGFyYW0gZG9tIHtTZWxlY3Rpb259XG4gICAgICogQHBhcmFtIGRpbWVuc2lvbnMge0RpY3Rpb25hcnl9IHt3OkludGVnZXIsIGg6aW50ZWdlcn0gb2YgdGhlIGhlYXRtYXBcbiAgICAgKiBAcGFyYW0gYW5nbGUge0ludGVnZXJ9IGZvciB0aGUgeSB0ZXh0IGxhYmVsc1xuICAgICAqIEBwYXJhbSB1c2VOdWxsQ29sb3Ige0Jvb2xlYW59IHdoZXRoZXIgdG8gcmVuZGVyIG51bGwgdmFsdWVzIHdpdGggdGhlIHByZS1kZWZpbmVkIG51bGwgY29sb3JcbiAgICAgKi9cblxuICAgIGRyYXcoZG9tLCBkaW1lbnNpb25zPXt3OjEwMDAsIGg6NjAwfSwgYW5nbGU9MzAsIHVzZU51bGxDb2xvcj10cnVlLCBjb2x1bW5MYWJlbFBvc0FkanVzdD1udWxsKXtcblxuICAgICAgICBpZiAodGhpcy54TGlzdCA9PT0gdW5kZWZpbmVkKSB0aGlzLl9zZXRYU2NhbGUoZGltZW5zaW9ucy53KTtcbiAgICAgICAgaWYgKHRoaXMueUxpc3QgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0WVNjYWxlKGRpbWVuc2lvbnMuaCk7XG4gICAgICAgIGlmICh0aGlzLmNvbG9yU2NhbGUgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0Q29sb3JTY2FsZSgpO1xuXG4gICAgICAgIC8vIHRleHQgbGFiZWxzXG4gICAgICAgIC8vIGRhdGEgam9pblxuICAgICAgICBjb25zdCB4TGFiZWxzID0gZG9tLnNlbGVjdEFsbChcIi5leHAtbWFwLXhsYWJlbFwiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy54TGlzdCk7XG5cbiAgICAgICAgLy8gdXBkYXRlIGFuZCB0cmFuc2Zvcm1cbiAgICAgICAgY29uc3QgWSA9IGNvbHVtbkxhYmVsUG9zQWRqdXN0PT1udWxsP3RoaXMueVNjYWxlLnJhbmdlKClbMV0gKyAodGhpcy55U2NhbGUuYmFuZHdpZHRoKCkgKiAyKTp0aGlzLnlTY2FsZS5yYW5nZSgpWzFdK2NvbHVtbkxhYmVsUG9zQWRqdXN0O1xuICAgICAgICBjb25zdCBhZGp1c3QgPSA1O1xuICAgICAgICB4TGFiZWxzLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMueFNjYWxlKGQpICsgYWRqdXN0O1xuICAgICAgICAgICAgICAgIGxldCB5ID0gWTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KSByb3RhdGUoJHthbmdsZX0pYDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGVudGVycyBuZXcgZWxlbWVudHNcbiAgICAgICAgeExhYmVscy5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgKGQsIGkpID0+IGBleHAtbWFwLXhsYWJlbCB4JHtpfWApXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUoZCkgKyBhZGp1c3Q7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSBZO1xuICAgICAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHJvdGF0ZSgke2FuZ2xlfSlgO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5tZXJnZSh4TGFiZWxzKVxuICAgICAgICAgICAgLnRleHQoKGQpID0+IGQpO1xuXG4gICAgICAgIC8vIGV4aXQgLS0gcmVtb3ZlcyBvbGQgZWxlbWVudHMgYXMgbmVlZGVkXG4gICAgICAgIHhMYWJlbHMuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICAgIGNvbnN0IHlMYWJlbHMgPSBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLnlMaXN0KVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLnRleHQoKGQpID0+IGQpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy54U2NhbGUucmFuZ2UoKVsxXSArIDUpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQpID0+IHRoaXMueVNjYWxlKGQpICsgMTApXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkLCBpKSA9PiBgZXhwLW1hcC15bGFiZWwgeSR7aX1gKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBhbGVydChgJHtkfSBpcyBjbGlja2VkLiBUbyBiZSBpbXBsZW1lbnRlZGApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ25vcm1hbCcsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdub3JtYWwnLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXJzIHRoZSBoZWF0bWFwIGNlbGxzXG5cbiAgICAgICAgLy8gZGF0YSBqb2luXG4gICAgICAgIGNvbnN0IGNlbGxzID0gZG9tLnNlbGVjdEFsbChcIi5leHAtbWFwLWNlbGxcIilcbiAgICAgICAgICAgIC5kYXRhKHRoaXMuZGF0YSwgKGQpID0+IGQudmFsdWUpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBvbGQgZWxlbWVudHNcbiAgICAgICAgY2VsbHMuYXR0cihcInhcIiwgKGQpID0+IHRoaXMueFNjYWxlKGQueCkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQpID0+IHRoaXMueVNjYWxlKGQueSkpXG4gICAgICAgICAgICAuYXR0cihcInJvd1wiLCAoZCkgPT4gYHgke3RoaXMueExpc3QuaW5kZXhPZihkLngpfWApIC8vIFRPRE86IHJvdyBzaG91bGQgYmUgeSwgY29sdW1uIHNob3VsZCBiZSB4Li4uXG4gICAgICAgICAgICAuYXR0cihcImNvbFwiLCAoZCkgPT4gYHkke3RoaXMueUxpc3QuaW5kZXhPZihkLnkpfWApO1xuXG4gICAgICAgIC8vIGVudGVyIG5ldyBlbGVtZW50c1xuICAgICAgICBjb25zdCBudWxsQ29sb3IgPSBcIiNERERERERcIjtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNlbGxzLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJyb3dcIiwgKGQpID0+IGB4JHt0aGlzLnhMaXN0LmluZGV4T2YoZC54KX1gKVxuICAgICAgICAgICAgLmF0dHIoXCJjb2xcIiwgKGQpID0+IGB5JHt0aGlzLnlMaXN0LmluZGV4T2YoZC55KX1gKVxuXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQpID0+IHRoaXMueFNjYWxlKGQueCkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQpID0+IHRoaXMueVNjYWxlKGQueSkpXG4gICAgICAgICAgICAuYXR0cihcInJ4XCIsIHRoaXMucilcbiAgICAgICAgICAgIC5hdHRyKCdyeScsIHRoaXMucilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJleHAtbWFwLWNlbGxcIilcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCIjZWVlZWVlXCIpXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBzZWxlY3QodGhpcyk7IC8vIE5vdGU6IFwidGhpc1wiIGhlcmUgcmVmZXJzIHRvIHRoZSBkb20gZWxlbWVudCBub3QgdGhlIG9iamVjdFxuICAgICAgICAgICAgICAgIHNlbGYuY2VsbE1vdXNlb3ZlcihkLCBkb20sIHNlbGVjdGVkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTsgLy8gTm90ZTogXCJ0aGlzXCIgaGVyZSByZWZlcnMgdG8gdGhlIGRvbSBlbGVtZW50IG5vdCB0aGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgc2VsZi5jZWxsTW91c2VvdXQoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5tZXJnZShjZWxscylcbiAgICAgICAgICAgIC8vIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC8vIC5kdXJhdGlvbigyMDAwKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB1c2VOdWxsQ29sb3ImJmQudmFsdWU9PTA/bnVsbENvbG9yOnRoaXMudXNlTG9nP3RoaXMuY29sb3JTY2FsZSh0aGlzLl9sb2coZC52YWx1ZSkpOnRoaXMuY29sb3JTY2FsZShkLnZhbHVlKVxuICAgICAgICAgICAgfSk7IC8vIFRPRE86IHdoYXQgaWYgbnVsbCB2YWx1ZSBpc24ndCAwP1xuXG4gICAgICAgIC8vIGV4aXQgYW5kIHJlbW92ZVxuICAgICAgICBjZWxscy5leGl0KCkucmVtb3ZlKCk7XG4gICAgfVxuXG5cbiAgICBjZWxsTW91c2VvdXQoZCl7XG4gICAgICAgIHNlbGVjdEFsbChcIipcIikuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCBmYWxzZSk7XG4gICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgfVxuXG4gICAgY2VsbE1vdXNlb3ZlciAoZCwgZG9tLCBzZWxlY3RlZCkge1xuICAgICAgICBjb25zdCByb3dDbGFzcyA9IHNlbGVjdGVkLmF0dHIoXCJyb3dcIik7XG4gICAgICAgIGNvbnN0IGNvbENsYXNzID0gc2VsZWN0ZWQuYXR0cihcImNvbFwiKTtcbiAgICAgICAgZG9tLnNlbGVjdEFsbChcIi5leHAtbWFwLXhsYWJlbFwiKS5maWx0ZXIoYC4ke3Jvd0NsYXNzfWApXG4gICAgICAgICAgICAuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgZG9tLnNlbGVjdEFsbChcIi5leHAtbWFwLXlsYWJlbFwiKS5maWx0ZXIoYC4ke2NvbENsYXNzfWApXG4gICAgICAgICAgICAuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgc2VsZWN0ZWQuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgY29uc3QgZGlzcGxheVZhbHVlID0gZC5kaXNwbGF5VmFsdWUgPT09IHVuZGVmaW5lZD9wYXJzZUZsb2F0KGQudmFsdWUudG9FeHBvbmVudGlhbCgpKS50b1ByZWNpc2lvbig0KTpkLmRpc3BsYXlWYWx1ZTtcbiAgICAgICAgdGhpcy50b29sdGlwLnNob3coYENvbHVtbjogJHtkLnh9IDxici8+IFJvdzogJHtkLnl9PGJyLz4gVmFsdWU6ICR7ZGlzcGxheVZhbHVlfWApO1xuICAgIH1cblxuICAgIF9zZXRYU2NhbGUod2lkdGgsIG5ld0xpc3QgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYobmV3TGlzdCAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHRoaXMueExpc3QgPSBuZXdMaXN0XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnhMaXN0ID0gbmVzdCgpXG4gICAgICAgICAgICAgICAgLmtleSgoZCkgPT4gZC54KVxuICAgICAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSlcbiAgICAgICAgICAgICAgICAubWFwKChkKSA9PiBkLmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy54U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgLmRvbWFpbih0aGlzLnhMaXN0KVxuICAgICAgICAgICAgLnJhbmdlKFswLCB3aWR0aF0pXG4gICAgICAgICAgICAucGFkZGluZyguMDUpOyAvLyBUT0RPOiBlbGltaW5hdGUgaGFyZC1jb2RlZCB2YWx1ZVxuICAgIH1cblxuICAgIF9zZXRZU2NhbGUoaGVpZ2h0LCBuZXdMaXN0KSB7XG4gICAgICAgIGlmKG5ld0xpc3QgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnlMaXN0ID0gbmV3TGlzdFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICB0aGlzLnlMaXN0ID0gbmVzdCgpXG4gICAgICAgICAgICAua2V5KChkKSA9PiBkLnkpXG4gICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpXG4gICAgICAgICAgICAubWFwKChkKSA9PiBkLmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy55U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5kb21haW4odGhpcy55TGlzdClcbiAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIGhlaWdodF0pXG4gICAgICAgICAgICAgICAgLnBhZGRpbmcoLjA1KTsgLy8gVE9ETzogZWxpbWluYXRlIGhhcmQtY29kZWQgdmFsdWVcbiAgICB9XG5cbiAgICBfc2V0Q29sb3JTY2FsZSgpe1xuICAgICAgICBsZXQgdXNlTG9nID0gdGhpcy51c2VMb2c7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5kYXRhLm1hcCgoZCk9PnVzZUxvZz90aGlzLl9sb2coZC52YWx1ZSk6ZC52YWx1ZSk7XG4gICAgICAgIHRoaXMuY29sb3JTY2FsZSA9IHNldENvbG9yU2NhbGUoZGF0YSwgdGhpcy5jb2xvclNjaGVtZSwgMCk7XG4gICAgfVxuXG4gICAgX2xvZyh2KXtcbiAgICAgICAgY29uc3QgYWRqdXN0ID0gMTtcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nKE51bWJlcih2K2FkanVzdCkpL01hdGgubG9nKHRoaXMubG9nQmFzZSk7XG4gICAgfVxuXG5cblxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuaW1wb3J0IHtjcmVhdGVTdmd9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5pbXBvcnQgRGVuZHJvSGVhdG1hcENvbmZpZyBmcm9tIFwiLi9EZW5kcm9IZWF0bWFwQ29uZmlnXCI7XG5pbXBvcnQgRGVuZHJvZ3JhbSBmcm9tIFwiLi9EZW5kcm9ncmFtXCI7XG5pbXBvcnQgSGVhdG1hcCBmcm9tIFwiLi9IZWF0bWFwXCI7XG5pbXBvcnQgVG9vbHRpcCBmcm9tIFwiLi9Ub29sdGlwXCI7XG5pbXBvcnQgVG9vbGJhciBmcm9tIFwiLi9Ub29sYmFyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbmRyb0hlYXRtYXAge1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gY29sdW1uVHJlZSB7U3RyaW5nfSBhIG5ld2ljayB0cmVlXG4gICAgICogQHBhcmFtIHJvd1RyZWUge1N0cmluZ30gYSBuZXdpY2sgdHJlZVxuICAgICAqIEBwYXJhbSBoZWF0bWFwRGF0YSB7TGlzdH0gb2Ygb2JqZWN0cyB3aXRoIGF0dHJpYnV0ZXM6IHg6IFN0cmluZywgeTpTdHJpbmcsIHZhbHVlOkZsb2F0LCBkaXNwbGF5VmFsdWU6RmxvYXRcbiAgICAgKiBAcGFyYW0gY29sb3Ige1N0cmluZ30gYSBjb2xvciBuYW1lIHRoYXQncyBhdmFpbGFibGUgaW4gQ29sb3JzLmdldENvbG9ySW50ZXJwb2xhdG9yXG4gICAgICogQHBhcmFtIHIge0ludGVnZXJ9IHRoZSBkZWdyZWVzIG9mIHJvdW5kZWQtY29ybmVycyBvZiB0aGUgaGVhdG1hcCBjZWxsc1xuICAgICAqIEBwYXJhbSBjb25maWcge0RlbmRyb0hlYXRtYXBDb25maWd9XG4gICAgICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2x1bW5UcmVlLCByb3dUcmVlLCBoZWF0bWFwRGF0YSwgY29sb3I9XCJZbEduQnVcIiwgcj0yLCBjb25maWc9bmV3IERlbmRyb0hlYXRtYXBDb25maWcoKSwgdG9vbHRpcElkPVwiZG1hcFRvb2x0aXBcIiwgdXNlTG9nPXRydWUsIGJhc2U9MTAsIHRpdGxlID0gJycpe1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZy5nZXQoKTtcbiAgICAgICAgLy9pbnB1dCBldmFsdWF0aW9uc1xuICAgICAgICBjb2x1bW5UcmVlID0gY29sdW1uVHJlZT09PXVuZGVmaW5lZHx8Y29sdW1uVHJlZS5zdGFydHNXaXRoKFwiTm90IGVub3VnaCBkYXRhXCIpP3VuZGVmaW5lZDpjb2x1bW5UcmVlO1xuICAgICAgICByb3dUcmVlID0gcm93VHJlZT09PXVuZGVmaW5lZHx8cm93VHJlZS5zdGFydHNXaXRoKFwiTm90IGVub3VnaCBkYXRhXCIpP3VuZGVmaW5lZDpyb3dUcmVlO1xuICAgICAgICAvLyBhc3NpZ24gYXR0cmlidXRlIHZhbHVlcyBiYXNlZCBvbiBpbnB1dCBhcmd1bWVudHNcbiAgICAgICAgdGhpcy5kYXRhID0ge1xuICAgICAgICAgICAgY29sdW1uVHJlZTogY29sdW1uVHJlZSxcbiAgICAgICAgICAgIHJvd1RyZWU6IHJvd1RyZWUsXG4gICAgICAgICAgICBoZWF0bWFwOiBoZWF0bWFwRGF0YSxcbiAgICAgICAgICAgIGV4dGVybmFsOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vYmplY3RzID0ge1xuICAgICAgICAgICAgY29sdW1uVHJlZTogdGhpcy5kYXRhLmNvbHVtblRyZWU9PT11bmRlZmluZWQ/IHVuZGVmaW5lZDpuZXcgRGVuZHJvZ3JhbSh0aGlzLmRhdGEuY29sdW1uVHJlZSwgXCJ2XCIpLFxuICAgICAgICAgICAgcm93VHJlZTogdGhpcy5kYXRhLnJvd1RyZWU9PT11bmRlZmluZWQ/dW5kZWZpbmVkOm5ldyBEZW5kcm9ncmFtKHRoaXMuZGF0YS5yb3dUcmVlLCBcImhcIiksXG4gICAgICAgICAgICBoZWF0bWFwOiBuZXcgSGVhdG1hcCh0aGlzLmRhdGEuaGVhdG1hcCwgdXNlTG9nLCBiYXNlLCBjb2xvciwgciwgdG9vbHRpcElkKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnZpc3VhbENvbXBvbmVudHMgPSB7XG4gICAgICAgICAgICBzdmc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbHVtblRyZWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJvd1RyZWU6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy50b29sYmFyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLm9iamVjdHMuaGVhdG1hcC50b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbGJhciBwYW5lbFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgdG9vbGJhcidzIGRvbSBJRFxuICAgICAqIEBwYXJhbSB0b29sdGlwIHtUb29sdGlwfVxuICAgICAqIEByZXR1cm5zIHtUb29sYmFyfVxuICAgICAqL1xuXG4gICAgY3JlYXRlVG9vbGJhcihkb21JZCwgdG9vbHRpcCl7XG4gICAgICAgIHRoaXMudG9vbGJhciA9IG5ldyBUb29sYmFyKGRvbUlkLCB0b29sdGlwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbGJhcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgdGhlIGRlbmRyb2dyYW1zIGFuZCBjb3JyZXNwb25kaW5nIGhlYXRtYXBcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHBhcmVudCBET00gaWQgb2YgdGhlIFNWR1xuICAgICAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfSBvZiB0aGUgU1ZHXG4gICAgICogQHBhcmFtIHNob3dDb2x1bW5UcmVlIHtCb29sZWFufSByZW5kZXIgdGhlIGNvbHVtbiBkZW5kcm9ncmFtXG4gICAgICogQHBhcmFtIHNob3dSb3dUcmVlIHtCb29sZWFufSByZW5kZXIgdGhlIHJvdyBkZW5kcm9ncmFtXG4gICAgICogQHBhcmFtIGxlZ2VuZFBvcyB7RW51bX0gd2hlcmUgdG8gcGxhY2UgdGhlIGNvbG9yIGxlZ2VuZDogYm90dG9tLCB0b3BcbiAgICAgKiBAcGFyYW0gdGlja3Mge0ludGVnZXJ9IG51bWJlciBvZiBiaW5zIG9mIHRoZSBjb2xvciBsZWdlbmRcbiAgICAgKi9cbiAgICByZW5kZXIoZG9tSWQsIHN2Z0lkLCBzaG93Q29sdW1uVHJlZT10cnVlLCBzaG93Um93VHJlZT10cnVlLCBsZWdlbmRQb3M9XCJ0b3BcIiwgdGlja3M9NSl7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNvbmZpZyhsZWdlbmRQb3MpO1xuICAgICAgICB0aGlzLnZpc3VhbENvbXBvbmVudHMuc3ZnID0gY3JlYXRlU3ZnKGRvbUlkLCB0aGlzLmNvbmZpZy53LCB0aGlzLmNvbmZpZy5oLCB0aGlzLmNvbmZpZy5tYXJnaW4sIHN2Z0lkKTtcblxuICAgICAgICBsZXQgeGxpc3QgPSB1bmRlZmluZWQsXG4gICAgICAgICAgICB5bGlzdCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoc2hvd0NvbHVtblRyZWUgJiYgdGhpcy5vYmplY3RzLmNvbHVtblRyZWUhPT11bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy52aXN1YWxDb21wb25lbnRzLmNvbHVtblRyZWUgPSB0aGlzLl9yZW5kZXJUcmVlKFwiY29sdW1uXCIsIHRoaXMub2JqZWN0cy5jb2x1bW5UcmVlLCB0aGlzLmNvbmZpZy5wYW5lbHMudG9wKTtcbiAgICAgICAgICAgIHhsaXN0ID0gdGhpcy5vYmplY3RzLmNvbHVtblRyZWUueFNjYWxlLmRvbWFpbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG93Um93VHJlZSAmJiB0aGlzLm9iamVjdHMucm93VHJlZSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHRoaXMudmlzdWFsQ29tcG9uZW50cy5yb3dUcmVlID0gdGhpcy5fcmVuZGVyVHJlZShcInJvd1wiLCB0aGlzLm9iamVjdHMucm93VHJlZSwgdGhpcy5jb25maWcucGFuZWxzLmxlZnQpO1xuICAgICAgICAgICAgeWxpc3QgPSB0aGlzLm9iamVjdHMucm93VHJlZS55U2NhbGUuZG9tYWluKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50aXRsZSAhPSAnJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy50aXRsZSk7XG4gICAgICAgICAgICBzZWxlY3QoYCMke2RvbUlkfS1zdmdgKS5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgMClcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIDIwKVxuICAgICAgICAgICAgICAgIC50ZXh0KHRoaXMudGl0bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVuZGVySGVhdG1hcCh0aGlzLm9iamVjdHMuaGVhdG1hcCwgeGxpc3QsIHlsaXN0LCB0aWNrcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIGEgbmV3aWNrIHRyZWVcbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIHtlbnVtfSBjb2x1bW4gb3Igcm93XG4gICAgICogQHBhcmFtIHRyZWUge0RlbmRyb2dyYW19IGEgRGVuZHJvZ3JhbSBvYmplY3RcbiAgICAgKiBAcGFyYW0gY29uZmlnIHtPYmplY3R9IGEgcGFuZWwgY29uZmlnIHdpdGggYXR0cmlidXRlczogeCwgeSwgd2lkdGggYW5kIGhlaWdodFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlbmRlclRyZWUoZGlyZWN0aW9uLCB0cmVlLCBjb25maWcpe1xuICAgICAgICBsZXQgc3ZnID0gdGhpcy52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICAgICAgY29uc3QgbGFiZWxDbGFzcyA9IGRpcmVjdGlvbj09XCJyb3dcIj9cIi5leHAtbWFwLXlsYWJlbFwiOlwiLmV4cC1tYXAteGxhYmVsXCI7XG5cbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IHRoaXMudmlzdWFsQ29tcG9uZW50cy50b29sdGlwO1xuICAgICAgICBjb25zdCBnID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgY29uZmlnLmlkKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYCk7XG4gICAgICAgIHRyZWUuZHJhdyhnLCBjb25maWcudywgY29uZmlnLmgpO1xuXG4gICAgICAgIGNvbnN0IG1vdXNlb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiMzMzNcIik7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKGxhYmVsQ2xhc3MpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKFwiLmxlYWYtY29sb3JcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBtb3VzZW92ZXIgPSBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCA2KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcInJlZFwiKTtcbiAgICAgICAgICAgIGxldCBpZHMgPSBkLmxlYXZlcygpLm1hcCgobm9kZSk9Pm5vZGUuZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwobGFiZWxDbGFzcylcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChsYWJlbCk9Pmlkcy5pbmNsdWRlcyhsYWJlbCkpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoXCIubGVhZi1jb2xvclwiKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGxhYmVsKT0+aWRzLmluY2x1ZGVzKGxhYmVsKSlcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGcuc2VsZWN0QWxsKFwiLmRlbmRyb2dyYW0tbm9kZVwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIG1vdXNlb3ZlcilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIG1vdXNlb3V0KTtcbiAgICAgICAgcmV0dXJuIGc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSBoZWF0bWFwIGFuZCBjb2xvciBsZWdlbmRcbiAgICAgKiBAcGFyYW0gaGVhdG1hcCB7SGVhdG1hcH0gYSBIZWF0bWFwIG9iamVjdFxuICAgICAqIEBwYXJhbSB4TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHggbGFiZWxzXG4gICAgICogQHBhcmFtIHlMaXN0IHtMaXN0fSBhIGxpc3Qgb2YgeSBsYWJlbHNcbiAgICAgKiBAcGFyYW0gdGlja3Mge0ludGVnZXJ9IHRoZSBudW1iZXIgb2YgYmlucyBpbiB0aGUgY29sb3IgbGVnZW5kXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVuZGVySGVhdG1hcChoZWF0bWFwLCB4TGlzdCwgeUxpc3QsIHRpY2tzPTUpe1xuICAgICAgICBsZXQgZG9tID0gdGhpcy52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWcucGFuZWxzLm1haW47XG4gICAgICAgIGNvbnN0IGcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBjb25maWcuaWQpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55fSlgKTtcbiAgICAgICAgaGVhdG1hcC5yZWRyYXcoZywgeExpc3QsIHlMaXN0LCB7dzogY29uZmlnLncsIGg6IGNvbmZpZy5ofSk7XG4gICAgICAgIGhlYXRtYXAuZHJhd0NvbG9yTGVnZW5kKGRvbSwgdGhpcy5jb25maWcucGFuZWxzLmxlZ2VuZCwgdGlja3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkanVzdCB0aGUgbGF5b3V0IGRpbWVuc2lvbnMgYmFzZWQgb24gdGhlIGFjdHVhbCBkYXRhXG4gICAgICogQHBhcmFtIGxlZ2VuZFBvcyB7U3RyaW5nfSBib3R0b20gb3IgdG9wXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdXBkYXRlQ29uZmlnKGxlZ2VuZFBvcyl7XG4gICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLm9iamVjdHMucm93VHJlZT09PXVuZGVmaW5lZD8xOnRoaXMub2JqZWN0cy5yb3dUcmVlLmxlYXZlcy5sZW5ndGg7XG5cbiAgICAgICAgLy8gdXBkYXRlcyB0aGUgbGVmdCBwYW5lbCdzIGhlaWdodCBiYXNlZCBvbiB0aGUgZGF0YVxuICAgICAgICB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdC5oID0gdGhpcy5jb25maWcuY2VsbC5oICogcm93czwyMD8yMDp0aGlzLmNvbmZpZy5jZWxsLmggKiByb3dzO1xuICAgICAgICB0aGlzLmNvbmZpZy5oICs9IHRoaXMuY29uZmlnLnBhbmVscy5sZWZ0Lmg7XG4gICAgICAgIHRoaXMuY29uZmlnLnBhbmVscy5tYWluLmggPSB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdC5oO1xuICAgICAgICBpZihsZWdlbmRQb3M9PVwiYm90dG9tXCIpIHRoaXMuY29uZmlnLnBhbmVscy5sZWdlbmQueSArPSB0aGlzLmNvbmZpZy5wYW5lbHMubWFpbi5oICsgdGhpcy5jb25maWcucGFuZWxzLm1haW4ueCArIDUwO1xuXG5cbiAgICB9XG59IiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKTtcblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyO1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgdmFyIGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG5leHBvcnQgdmFyIGVwc2lsb24gPSAxZS0xMjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHRhdSA9IDIgKiBwaTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPj0gMSA/IGhhbGZQaSA6IHggPD0gLTEgPyAtaGFsZlBpIDogTWF0aC5hc2luKHgpO1xufVxuIiwiZnVuY3Rpb24gTGluZWFyKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhci5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhcihjb250ZXh0KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB4KHApIHtcbiAgcmV0dXJuIHBbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXJcIjtcbmltcG9ydCBsaW5lIGZyb20gXCIuL2xpbmVcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHgwID0gcG9pbnRYLFxuICAgICAgeDEgPSBudWxsLFxuICAgICAgeTAgPSBjb25zdGFudCgwKSxcbiAgICAgIHkxID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBhcmVhKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXIsXG4gICAgICAgIHgweiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgeTB6ID0gbmV3IEFycmF5KG4pO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkge1xuICAgICAgICAgIGogPSBpO1xuICAgICAgICAgIG91dHB1dC5hcmVhU3RhcnQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZm9yIChrID0gaSAtIDE7IGsgPj0gajsgLS1rKSB7XG4gICAgICAgICAgICBvdXRwdXQucG9pbnQoeDB6W2tdLCB5MHpba10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5hcmVhRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkge1xuICAgICAgICB4MHpbaV0gPSAreDAoZCwgaSwgZGF0YSksIHkweltpXSA9ICt5MChkLCBpLCBkYXRhKTtcbiAgICAgICAgb3V0cHV0LnBvaW50KHgxID8gK3gxKGQsIGksIGRhdGEpIDogeDB6W2ldLCB5MSA/ICt5MShkLCBpLCBkYXRhKSA6IHkweltpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFsaW5lKCkge1xuICAgIHJldHVybiBsaW5lKCkuZGVmaW5lZChkZWZpbmVkKS5jdXJ2ZShjdXJ2ZSkuY29udGV4dChjb250ZXh0KTtcbiAgfVxuXG4gIGFyZWEueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB4MSA9IG51bGwsIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeDE7XG4gIH07XG5cbiAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHkxID0gbnVsbCwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB5MTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMCA9XG4gIGFyZWEubGluZVkwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5saW5lWTEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkxKTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDEpLnkoeTApO1xuICB9O1xuXG4gIGFyZWEuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBhcmVhKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgYXJlYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBhcmVhKSA6IGN1cnZlO1xuICB9O1xuXG4gIGFyZWEuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBhcmVhO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gcG9pbnRYLFxuICAgICAgeSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICBlbHNlIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreChkLCBpLCBkYXRhKSwgK3koZCwgaSwgZGF0YSkpO1xuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHg7XG4gIH07XG5cbiAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB5O1xuICB9O1xuXG4gIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBsaW5lKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgbGluZS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBsaW5lKSA6IGN1cnZlO1xuICB9O1xuXG4gIGxpbmUuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5lO1xufVxuIiwiZnVuY3Rpb24gc2lnbih4KSB7XG4gIHJldHVybiB4IDwgMCA/IC0xIDogMTtcbn1cblxuLy8gQ2FsY3VsYXRlIHRoZSBzbG9wZXMgb2YgdGhlIHRhbmdlbnRzIChIZXJtaXRlLXR5cGUgaW50ZXJwb2xhdGlvbikgYmFzZWQgb25cbi8vIHRoZSBmb2xsb3dpbmcgcGFwZXI6IFN0ZWZmZW4sIE0uIDE5OTAuIEEgU2ltcGxlIE1ldGhvZCBmb3IgTW9ub3RvbmljXG4vLyBJbnRlcnBvbGF0aW9uIGluIE9uZSBEaW1lbnNpb24uIEFzdHJvbm9teSBhbmQgQXN0cm9waHlzaWNzLCBWb2wuIDIzOSwgTk8uXG4vLyBOT1YoSUkpLCBQLiA0NDMsIDE5OTAuXG5mdW5jdGlvbiBzbG9wZTModGhhdCwgeDIsIHkyKSB7XG4gIHZhciBoMCA9IHRoYXQuX3gxIC0gdGhhdC5feDAsXG4gICAgICBoMSA9IHgyIC0gdGhhdC5feDEsXG4gICAgICBzMCA9ICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIChoMCB8fCBoMSA8IDAgJiYgLTApLFxuICAgICAgczEgPSAoeTIgLSB0aGF0Ll95MSkgLyAoaDEgfHwgaDAgPCAwICYmIC0wKSxcbiAgICAgIHAgPSAoczAgKiBoMSArIHMxICogaDApIC8gKGgwICsgaDEpO1xuICByZXR1cm4gKHNpZ24oczApICsgc2lnbihzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xufVxuXG4vLyBDYWxjdWxhdGUgYSBvbmUtc2lkZWQgc2xvcGUuXG5mdW5jdGlvbiBzbG9wZTIodGhhdCwgdCkge1xuICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XG4gIHJldHVybiBoID8gKDMgKiAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyBoIC0gdCkgLyAyIDogdDtcbn1cblxuLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmljX0hlcm1pdGVfc3BsaW5lI1JlcHJlc2VudGF0aW9uc1xuLy8gXCJ5b3UgY2FuIGV4cHJlc3MgY3ViaWMgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGluIHRlcm1zIG9mIGN1YmljIELDqXppZXIgY3VydmVzXG4vLyB3aXRoIHJlc3BlY3QgdG8gdGhlIGZvdXIgdmFsdWVzIHAwLCBwMCArIG0wIC8gMywgcDEgLSBtMSAvIDMsIHAxXCIuXG5mdW5jdGlvbiBwb2ludCh0aGF0LCB0MCwgdDEpIHtcbiAgdmFyIHgwID0gdGhhdC5feDAsXG4gICAgICB5MCA9IHRoYXQuX3kwLFxuICAgICAgeDEgPSB0aGF0Ll94MSxcbiAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCArIGR4LCB5MCArIGR4ICogdDAsIHgxIC0gZHgsIHkxIC0gZHggKiB0MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk1vbm90b25lWC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9XG4gICAgdGhpcy5fdDAgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl90MCwgc2xvcGUyKHRoaXMsIHRoaXMuX3QwKSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB0MSA9IE5hTjtcblxuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh4ID09PSB0aGlzLl94MSAmJiB5ID09PSB0aGlzLl95MSkgcmV0dXJuOyAvLyBJZ25vcmUgY29pbmNpZGVudCBwb2ludHMuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyBwb2ludCh0aGlzLCBzbG9wZTIodGhpcywgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpLCB0MSk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgdGhpcy5fdDAsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB0aGlzLl90MCA9IHQxO1xuICB9XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBuZXcgUmVmbGVjdENvbnRleHQoY29udGV4dCk7XG59XG5cbihNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIE1vbm90b25lWC5wcm90b3R5cGUucG9pbnQuY2FsbCh0aGlzLCB5LCB4KTtcbn07XG5cbmZ1bmN0aW9uIFJlZmxlY3RDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblJlZmxlY3RDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubW92ZVRvKHksIHgpOyB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkgeyB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpOyB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5saW5lVG8oeSwgeCk7IH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7IHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh5MSwgeDEsIHkyLCB4MiwgeSwgeCk7IH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVgoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWChjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCB0eXBlLCBzZWxlY3Rpb24pIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xufVxuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtjdXN0b21FdmVudCwgZXZlbnQsIG1vdXNlLCBzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgQnJ1c2hFdmVudCBmcm9tIFwiLi9ldmVudFwiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50XCI7XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxudmFyIFggPSB7XG4gIG5hbWU6IFwieFwiLFxuICBoYW5kbGVzOiBbXCJlXCIsIFwid1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih4LCBlKSB7IHJldHVybiB4ICYmIFtbeFswXSwgZVswXVsxXV0sIFt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgJiYgW1tlWzBdWzBdLCB5WzBdXSwgW2VbMV1bMF0sIHlbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwiZVwiLCBcInNcIiwgXCJ3XCIsIFwibndcIiwgXCJuZVwiLCBcInNlXCIsIFwic3dcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgc3ZnID0gdGhpcy5vd25lclNWR0VsZW1lbnQgfHwgdGhpcztcbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChicnVzaCwgXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgICB9KTtcblxuICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgIC5kYXRhKFt0eXBlKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICB2YXIgaGFuZGxlID0gZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICBncm91cFxuICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5icnVzaCB0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpO1xuICB9XG5cbiAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24pIHtcbiAgICBpZiAoZ3JvdXAuc2VsZWN0aW9uKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydCgpOyB9KVxuICAgICAgICAgIC5vbihcImludGVycnVwdC5icnVzaCBlbmQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoc2VsZWN0aW9uMCwgc2VsZWN0aW9uMSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBlbXB0eShzZWxlY3Rpb24xKSA/IG51bGwgOiBpKHQpO1xuICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uMCAmJiBzZWxlY3Rpb24xID8gdHdlZW4gOiB0d2VlbigxKTtcbiAgICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoYXQsIGFyZ3MpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3MpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgICAgICAgIGludGVycnVwdCh0aGF0KTtcbiAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjEgPT0gbnVsbCB8fCBlbXB0eShzZWxlY3Rpb24xKSA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LnN0YXJ0KCkuYnJ1c2goKS5lbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgIHJldHVybiB0aGF0Ll9fYnJ1c2guZW1pdHRlciB8fCBuZXcgRW1pdHRlcih0aGF0LCBhcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLnN0YXRlID0gdGhhdC5fX2JydXNoO1xuICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgfVxuXG4gIEVtaXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGJlZm9yZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgrK3RoaXMuYWN0aXZlID09PSAxKSB0aGlzLnN0YXRlLmVtaXR0ZXIgPSB0aGlzLCB0aGlzLnN0YXJ0aW5nID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc3RhcnRpbmcpIHRoaXMuc3RhcnRpbmcgPSBmYWxzZSwgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGJydXNoOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZW1pdChcImJydXNoXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgY3VzdG9tRXZlbnQobmV3IEJydXNoRXZlbnQoYnJ1c2gsIHR5cGUsIGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgIGlmIChldmVudC50b3VjaGVzKSB7IGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCBldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuIG5vZXZlbnQoKTsgfVxuICAgIGVsc2UgaWYgKHRvdWNoZW5kaW5nKSByZXR1cm47XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICB0eXBlID0gZXZlbnQudGFyZ2V0Ll9fZGF0YV9fLnR5cGUsXG4gICAgICAgIG1vZGUgPSAoZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGV2ZW50LmFsdEtleSA/IE1PREVfQ0VOVEVSIDogTU9ERV9IQU5ETEUpLFxuICAgICAgICBzaWduWCA9IGRpbSA9PT0gWSA/IG51bGwgOiBzaWduc1hbdHlwZV0sXG4gICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgc3RhdGUgPSBsb2NhbCh0aGF0KSxcbiAgICAgICAgZXh0ZW50ID0gc3RhdGUuZXh0ZW50LFxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgIFcgPSBleHRlbnRbMF1bMF0sIHcwLCB3MSxcbiAgICAgICAgTiA9IGV4dGVudFswXVsxXSwgbjAsIG4xLFxuICAgICAgICBFID0gZXh0ZW50WzFdWzBdLCBlMCwgZTEsXG4gICAgICAgIFMgPSBleHRlbnRbMV1bMV0sIHMwLCBzMSxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5LFxuICAgICAgICBtb3ZpbmcsXG4gICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIGxvY2tYLFxuICAgICAgICBsb2NrWSxcbiAgICAgICAgcG9pbnQwID0gbW91c2UodGhhdCksXG4gICAgICAgIHBvaW50ID0gcG9pbnQwLFxuICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtcbiAgICAgICAgW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSxcbiAgICAgICAgW2UwID0gZGltID09PSBZID8gRSA6IHcwLCBzMCA9IGRpbSA9PT0gWCA/IFMgOiBuMF1cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XG4gICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgIH1cblxuICAgIHcxID0gdzA7XG4gICAgbjEgPSBuMDtcbiAgICBlMSA9IGUwO1xuICAgIHMxID0gczA7XG5cbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG5cbiAgICAgIGRyYWdEaXNhYmxlKGV2ZW50LnZpZXcpO1xuICAgIH1cblxuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgZW1pdC5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICB2YXIgcG9pbnQxID0gbW91c2UodGhhdCk7XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQxWzBdIC0gcG9pbnRbMF0pID4gTWF0aC5hYnMocG9pbnQxWzFdIC0gcG9pbnRbMV0pKSBsb2NrWSA9IHRydWU7XG4gICAgICAgIGVsc2UgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgcG9pbnQgPSBwb2ludDE7XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgbW92ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUoKSB7XG4gICAgICB2YXIgdDtcblxuICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9IQU5ETEU6IHtcbiAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblggPiAwKSBkeCA9IE1hdGgubWF4KFcgLSBlMCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwLCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBuMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBNYXRoLm1heChOIC0gczAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIHcxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgZTAgKyBkeCAqIHNpZ25YKSk7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICAgICAgZ3JvdXAub24oXCJ0b3VjaG1vdmUuYnJ1c2ggdG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIG1vdmluZyk7XG4gICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xuICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgaWYgKGVtcHR5KHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXlkb3duZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleXVwcGVkKCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9fYnJ1c2ggfHwge3NlbGVjdGlvbjogbnVsbH07XG4gICAgc3RhdGUuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgc3RhdGUuZGltID0gZGltO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgYnJ1c2gpIDogZXh0ZW50O1xuICB9O1xuXG4gIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IGZpbHRlcjtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsImltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9ldmVudCBmcm9tIFwiLi9ub2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZpZXcpIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fX25vc2VsZWN0ID0gcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0O1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5ZXNkcmFnKHZpZXcsIG5vY2xpY2spIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG51bGwpO1xuICBpZiAobm9jbGljaykge1xuICAgIHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBudWxsKTsgfSwgMCk7XG4gIH1cbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICBkZWxldGUgcm9vdC5fX25vc2VsZWN0O1xuICB9XG59XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Ob3JtYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbU5vcm1hbChtdSwgc2lnbWEpIHtcbiAgICB2YXIgeCwgcjtcbiAgICBtdSA9IG11ID09IG51bGwgPyAwIDogK211O1xuICAgIHNpZ21hID0gc2lnbWEgPT0gbnVsbCA/IDEgOiArc2lnbWE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHk7XG5cbiAgICAgIC8vIElmIGF2YWlsYWJsZSwgdXNlIHRoZSBzZWNvbmQgcHJldmlvdXNseS1nZW5lcmF0ZWQgdW5pZm9ybSByYW5kb20uXG4gICAgICBpZiAoeCAhPSBudWxsKSB5ID0geCwgeCA9IG51bGw7XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgZ2VuZXJhdGUgYSBuZXcgeCBhbmQgeS5cbiAgICAgIGVsc2UgZG8ge1xuICAgICAgICB4ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgeSA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xuICAgICAgfSB3aGlsZSAoIXIgfHwgciA+IDEpO1xuXG4gICAgICByZXR1cm4gbXUgKyBzaWdtYSAqIHkgKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Ob3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Ob3JtYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7bWVhbiwgcXVhbnRpbGUsIGRldmlhdGlvbn0gZnJvbSBcImQzLWFycmF5XCI7XG5cblxuLy8gcmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9LZXJuZWxfKHN0YXRpc3RpY3MpXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0tlcm5lbF9kZW5zaXR5X2VzdGltYXRpb25cbmV4cG9ydCBjb25zdCBrZXJuZWwgPSB7XG4gICAgZXBhbmVjaG5pa292OiBmdW5jdGlvbih1KXtyZXR1cm4gTWF0aC5hYnModSkgPD0gMT8gKDMvNCkqKDEtdSp1KTowfSxcbiAgICBnYXVzc2lhbjogZnVuY3Rpb24odSl7cmV0dXJuIDEvTWF0aC5zcXJ0KDIqTWF0aC5QSSkqTWF0aC5leHAoLS41KnUqdSl9XG59O1xuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNvbmRhdmllcy9zY2llbmNlLmpzL2Jsb2IvbWFzdGVyL3NyYy9zdGF0cy9iYW5kd2lkdGguanNcbmV4cG9ydCBjb25zdCBrZXJuZWxCYW5kd2lkdGggPSB7XG4gICAgLy8gQmFuZHdpZHRoIHNlbGVjdG9ycyBmb3IgR2F1c3NpYW4ga2VybmVscy5cbiAgICBucmQ6IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgbGV0IGlxciA9IHF1YW50aWxlKHgsIDAuNzUpIC0gcXVhbnRpbGUoeCwgMC4yNSk7XG4gICAgICAgIGxldCBoID0gaXFyIC8gMS4zNDtcbiAgICAgICAgcmV0dXJuIDEuMDYgKiBNYXRoLm1pbihkZXZpYXRpb24oeCksIGgpICogTWF0aC5wb3coeC5sZW5ndGgsIC0xLzUpO1xuICAgIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBrZXJuZWw6IHRoZSBrZXJuZWwgZnVuY3Rpb24sIHN1Y2ggYXMgZ2F1c3NpYW5cbiAqIEBwYXJhbSBYOiBsaXN0IG9mIGJpbnNcbiAqIEBwYXJhbSBoOiB0aGUgYmFuZHdpZHRoLCBlaXRoZXIgYSBudW1lcmljYWwgdmFsdWUgZ2l2ZW4gYnkgdGhlIHVzZXIgb3IgY2FsY3VsYXRlZCB1c2luZyB0aGUgZnVuY3Rpb24ga2VybmVsQmFuZHdpZHRoXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259OiB0aGUga2VybmVsIGRlbnNpdHkgZXN0aW1hdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBrZXJuZWxEZW5zaXR5RXN0aW1hdG9yKGtlcm5lbCwgWCwgaCl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKFYpIHtcbiAgICAgICAgLy8gWCBpcyB0aGUgYmluc1xuICAgICAgICByZXR1cm4gWC5tYXAoKHgpID0+IFt4LCBtZWFuKFYsICh2KSA9PiBrZXJuZWwoKHgtdikvaCkpL2hdKTtcbiAgICB9XG59XG5cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qXG5JbnB1dCBkYXRhIHN0cnVjdHVyZTogYSBsaXN0IG9mIGRhdGEgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG5bXG4gICAge1xuICAgICAgICBncm91cDogXCJncm91cDFcIlxuICAgICAgICBsYWJlbDogXCJkYXRhc2V0IDFcIixcbiAgICAgICAgdmFsdWVzOiBbYSBsaXN0IG9mIG51bWVyaWNhbCB2YWx1ZXNdXG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgZ3JvdXA6IFwiZ3JvdXAxXCJcbiAgICAgICAgbGFiZWw6IFwiZGF0YXNldCAyXCIsXG4gICAgICAgIHZhbHVlczogW2EgbGlzdCBvZiBudW1lcmljYWwgdmFsdWVzXVxuICAgICB9LFxuICAgICB7XG4gICAgICAgIGdyb3VwOiBcImdyb3VwMlwiXG4gICAgICAgIGxhYmVsOiBcImRhdGFzZXQgM1wiLFxuICAgICAgICB2YWx1ZXM6IFthIGxpc3Qgb2YgbnVtZXJpY2FsIHZhbHVlc11cbiAgICAgfVxuXVxuKi9cblxuaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHtleHRlbnQsIG1lZGlhbiwgYXNjZW5kaW5nLCBxdWFudGlsZSwgbWF4LCBtaW59IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtuZXN0fSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzY2FsZUJhbmQsIHNjYWxlTGluZWFyfSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCB7YXJlYX0gZnJvbSBcImQzLXNoYXBlXCI7XG5pbXBvcnQge2F4aXNCb3R0b20sIGF4aXNMZWZ0fSBmcm9tIFwiZDMtYXhpc1wiO1xuaW1wb3J0IHtzZWxlY3QsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2JydXNofSBmcm9tIFwiZDMtYnJ1c2hcIjtcbmltcG9ydCB7cmFuZG9tTm9ybWFsfSBmcm9tIFwiZDMtcmFuZG9tXCI7XG5cbmltcG9ydCB7a2VybmVsRGVuc2l0eUVzdGltYXRvciwga2VybmVsLCBrZXJuZWxCYW5kd2lkdGh9IGZyb20gXCIuL2tkZVwiO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSBcIi4vVG9vbHRpcFwiO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSBcIi4vVG9vbGJhclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91cGVkVmlvbGluIHtcbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBmb3IgR3JvdXBlZFZpb2xpblxuICAgICAqIEBwYXJhbSBkYXRhIHtMaXN0fTogYSBsaXN0IG9mIG9iamVjdHMgd2l0aCBhdHRyaWJ1dGVzOiBncm91cDoge1N0cmluZ30sIGxhYmVsOiB7U3RyaW5nfSwgdmFsdWVzOiB7TGlzdH0gb2YgbnVtZXJpY2FsIHZhbHVlcywgc2l6ZTogaW50ZWdlciwgb3B0aW9uYWxcbiAgICAgKiBAcGFyYW0gZ3JvdXBJbmZvIHtEaWN0aW9uYXJ5fTogbWV0YWRhdGEgb2YgdGhlIGdyb3VwLCBpbmRleGVkIGJ5IGdyb3VwIElEXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGF0YSwgZ3JvdXBJbmZvID0ge30pe1xuICAgICAgICB0aGlzLl9zYW5pdHlDaGVjayhkYXRhKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5ncm91cEluZm8gPSBncm91cEluZm87XG4gICAgICAgIHRoaXMudG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvbSB7RE9NfSB0aGUgU1ZHIGRvbSBvYmplY3QgdG8gYXBwZW5kIHRoZSB2aW9saW4gcGxvdCB0b1xuICAgICAqIEBwYXJhbSB3aWR0aCB7RmxvYXR9XG4gICAgICogQHBhcmFtIGhlaWdodCB7RmxvYXR9XG4gICAgICogQHBhcmFtIHhQYWRkaW5nIHtGbG9hdH0gcGFkZGluZyBvZiB0aGUgeCBheGlzXG4gICAgICogQHBhcmFtIHhEb21haW4ge0xpc3R9IHRoZSBvcmRlciBvZiBYIGdyb3Vwc1xuICAgICAqIEBwYXJhbSB5RG9tYWluICB7TGlzdH0gdGhlIG1pbiBhbmQgbWF4IHZhbHVlcyBvZiB0aGUgeSBkb21haW4uIFNldCB0byBlbXB0eSBhcnJheSBvciB1bmRlZmluZWQgdG8gYXV0by1jYWxjdWxhdGUuXG4gICAgICogQHBhcmFtIHlMYWJlbCB7U3RyaW5nfVxuICAgICAqIEBwYXJhbSBzaG93WFxuICAgICAqIEBwYXJhbSBzaG93U3ViWFxuICAgICAqIEBwYXJhbSBzdWJYQW5nbGVcbiAgICAgKiBAcGFyYW0gc2hvd1doaXNrZXJcbiAgICAgKiBAcGFyYW0gc2hvd0RpdmlkZXJcbiAgICAgKiBAcGFyYW0gc2hvd0xlZ2VuZFxuICAgICAqIEBwYXJhbSBzaG93U2l6ZVxuICAgICAqIEBwYXJhbSBzb3J0U3ViWFxuICAgICAqIEBwYXJhbSBzaG93T3V0bGllcnNcbiAgICAgKiBAcGFyYW0gbnVtUG9pbnRzIHtJbnRlZ2VyfSBOdW1iZXIgb2YgcG9pbnRzIHJlcXVpcmVkIHRvIHJlbmRlciB2aW9saW4gcGxvdC4gRGlzcGxheXMgcG9pbnRzIGlmIG4gPCBudW1Qb2ludHMuXG4gICAgICovXG5cbiAgICByZW5kZXIoZG9tLFxuICAgICAgICAgICB3aWR0aD01MDAsXG4gICAgICAgICAgIGhlaWdodD0zNTcsXG4gICAgICAgICAgIHhQYWRkaW5nPTAuMDUsXG4gICAgICAgICAgIHhEb21haW49dW5kZWZpbmVkLFxuICAgICAgICAgICB5RG9tYWluPVstMywzXSxcbiAgICAgICAgICAgeUxhYmVsPVwiWSBheGlzXCIsXG4gICAgICAgICAgIHNob3dYPXRydWUsXG4gICAgICAgICAgIHhBbmdsZT0zMCxcbiAgICAgICAgICAgc2hvd1N1Ylg9dHJ1ZSxcbiAgICAgICAgICAgc3ViWEFuZ2xlPTAsXG4gICAgICAgICAgIHNob3dXaGlza2VyPWZhbHNlLFxuICAgICAgICAgICBzaG93RGl2aWRlcj1mYWxzZSxcbiAgICAgICAgICAgc2hvd0xlZ2VuZD1mYWxzZSxcbiAgICAgICAgICAgc2hvd1NpemU9ZmFsc2UsXG4gICAgICAgICAgIHNvcnRTdWJYPWZhbHNlLFxuICAgICAgICAgICBzaG93T3V0bGllcnM9ZmFsc2UsXG4gICAgICAgICAgIG51bVBvaW50cz0wKXtcblxuICAgICAgICAvLyBkZWZpbmUgdGhlIHJlc2V0IGZvciB0aGlzIHBsb3RcbiAgICAgICAgdGhpcy5yZXNldCA9ICgpID0+IHtcbiAgICAgICAgICAgIGRvbS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoZG9tLCB3aWR0aCwgaGVpZ2h0LCB4UGFkZGluZywgeERvbWFpbiwgeURvbWFpbiwgeUxhYmVsLCBzaG93WCwgeEFuZ2xlLCBzaG93U3ViWCwgc3ViWEFuZ2xlLCBzaG93V2hpc2tlciwgc2hvd0RpdmlkZXIsIHNob3dMZWdlbmQsIHNob3dTaXplLCBzb3J0U3ViWCwgc2hvd091dGxpZXJzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVlTY2FsZSA9IGZ1bmN0aW9uKHlMYWJlbD11bmRlZmluZWQsIHlTY2FsZT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRvbS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYgKHlTY2FsZSA9PT0gdW5kZWZpbmVkKSB5U2NhbGUgPSBbXTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKGRvbSwgd2lkdGgsIGhlaWdodCwgeFBhZGRpbmcsIHhEb21haW4sIFtdLCB5TGFiZWwsIHNob3dYLCB4QW5nbGUsIHNob3dTdWJYLCBzdWJYQW5nbGUsIHNob3dXaGlza2VyLCBzaG93RGl2aWRlciwgc2hvd0xlZ2VuZCwgc2hvd1NpemUsIHNvcnRTdWJYLCBzaG93T3V0bGllcnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudXBkYXRlWFNjYWxlID0gZnVuY3Rpb24oeERvbWFpbj11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh4RG9tYWluID09PSB1bmRlZmluZWQpIGNvbnNvbGUuZXJyb3IoJ3VwZGF0ZVhTY2FsZSBjYWxsZWQgd2l0aG91dCBuZXcgWCBkb21haW4nKTtcbiAgICAgICAgICAgIGRvbS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoZG9tLCB3aWR0aCwgaGVpZ2h0LCB4UGFkZGluZywgeERvbWFpbiwgW10sIHlMYWJlbCwgc2hvd1gsIHhBbmdsZSwgc2hvd1N1YlgsIHN1YlhBbmdsZSwgc2hvd1doaXNrZXIsIHNob3dEaXZpZGVyLCBzaG93TGVnZW5kLCBzaG93U2l6ZSwgc29ydFN1YlgsIHNob3dPdXRsaWVycyk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBkZWZpbmVzIHRoZSBYLCBzdWJYLCBZLCBaIHNjYWxlc1xuICAgICAgICBpZiAoeURvbWFpbj09PXVuZGVmaW5lZCB8fCAwID09IHlEb21haW4ubGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCBhbGxWID0gW107XG4gICAgICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZCkgPT4gYWxsViA9IGFsbFYuY29uY2F0KGQudmFsdWVzKSk7XG4gICAgICAgICAgICB5RG9tYWluID0gZXh0ZW50KGFsbFYpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmUtb3JnYW5pemVkIHRoaXMuZGF0YSBpbmRleGVkIGJ5IGdyb3Vwc1xuICAgICAgICB0aGlzLmdyb3VwcyA9IG5lc3QoKVxuICAgICAgICAgICAgLmtleSgoZCkgPT4gZC5ncm91cClcbiAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSk7XG5cbiAgICAgICAgdGhpcy5zY2FsZSA9IHtcbiAgICAgICAgICAgIHg6IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgICAgICAgICAgICAuZG9tYWluKHhEb21haW58fHRoaXMuZ3JvdXBzLm1hcCgoZCkgPT4gZC5rZXkpKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nSW5uZXIoeFBhZGRpbmcpLFxuICAgICAgICAgICAgc3VieDogc2NhbGVCYW5kKCksXG4gICAgICAgICAgICB5OiBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW2hlaWdodCwgMF0pXG4gICAgICAgICAgICAgICAgLmRvbWFpbih5RG9tYWluKSxcbiAgICAgICAgICAgIHo6IHNjYWxlTGluZWFyKCkgLy8gdGhpcyBpcyB0aGUgdmlvbGluIHdpZHRoLCB0aGUgZG9tYWluIGFuZCByYW5nZSBhcmUgZGV0ZXJtaW5lZCBsYXRlciBpbmRpdmlkdWFsbHkgZm9yIGVhY2ggdmlvbGluXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZm9yIGVhY2ggZ3JvdXBcbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZykgPT4ge1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gZy5rZXk7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IGcudmFsdWVzO1xuICAgICAgICAgICAgbGV0IGluZm8gPSB0aGlzLmdyb3VwSW5mb1tncm91cF07IC8vIG9wdGlvbmFsXG4gICAgICAgICAgICBnLmluZGV4ID0gdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG4gICAgICAgICAgICBpZiAoaW5mbyAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgLy8gcmVuZGVycyBncm91cCBpbmZvIHN1Y2ggYXMgcC12YWx1ZSwgZ3JvdXAgbmFtZVxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwSW5mb0RvbSA9IGRvbS5hcHBlbmQoXCJnXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwTGFiZWxzID0gZ3JvdXBJbmZvRG9tLnNlbGVjdEFsbChcIi52aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoWydwdmFsdWUnXSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpIC8vIENvZGUgcmV2aWV3OiBjb25zaWRlciBtb3ZpbmcgdGhpcyBwYXJ0IHRvIHRoZSBlUVRMIGRhc2hib2FyZFxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcImNlbnRlclwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGluZm9bJ3B2YWx1ZVRocmVzaG9sZCddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkPT0ncHZhbHVlJyYmcGFyc2VGbG9hdChpbmZvW2RdKTw9cGFyc2VGbG9hdChpbmZvWydwdmFsdWVUaHJlc2hvbGQnXSk/XCJvcmFuZ2VyZWRcIjpcIlNsYXRlR3JheVwiXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMuc2NhbGUueChncm91cCkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkvMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB5ID0gdGhpcy5zY2FsZS55KHlEb21haW5bMF0pICsgNTA7IC8vIHRvZG86IGF2b2lkIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KWBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoKGQpID0+IGAke2R9OiAke3BhcnNlRmxvYXQocGFyc2VGbG9hdChpbmZvW2RdKS50b1ByZWNpc2lvbigzKSkudG9FeHBvbmVudGlhbCgpfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkZWZpbmVzIHRoZSB0aGlzLnNjYWxlLnN1YnggYmFzZWQgb24gdGhpcy5zY2FsZS54XG4gICAgICAgICAgICBpZiAoc29ydFN1YlgpIHtcbiAgICAgICAgICAgICAgICBlbnRyaWVzLnNvcnQoKGEsYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYS5sYWJlbCA8IGIubGFiZWwpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYS5sYWJlbCA+IGIubGFiZWwpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zY2FsZS5zdWJ4XG4gICAgICAgICAgICAgICAgLmRvbWFpbihlbnRyaWVzLm1hcCgoZCkgPT4gZC5sYWJlbCkpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW3RoaXMuc2NhbGUueChncm91cCksIHRoaXMuc2NhbGUueChncm91cCkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgZW50cnkudmFsdWVzID0gZW50cnkudmFsdWVzLnNvcnQoYXNjZW5kaW5nKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmF3VmlvbGluKGRvbSwgZW50cnksIHNob3dXaGlza2VyLCBnLmluZGV4LCBzaG93T3V0bGllcnMsIG51bVBvaW50cyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gYWRkcyB0aGUgc3ViLXggYXhpcyBpZiB0aGVyZSBhcmUgbW9yZSB0aGFuIG9uZSBlbnRyaWVzXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gMTg7XG4gICAgICAgICAgICBpZiAoc2hvd1NpemUpe1xuICAgICAgICAgICAgICAgICBjb25zdCBzaXplU2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgICAgICAuZG9tYWluKGVudHJpZXMubWFwKChkKSA9PiB7cmV0dXJuIGQuc2l6ZT09dW5kZWZpbmVkPycoMCknOmAoJHtkLnNpemV8fDB9KWB9KSlcbiAgICAgICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW3RoaXMuc2NhbGUueChncm91cCksIHRoaXMuc2NhbGUueChncm91cCkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCldKTtcbiAgICAgICAgICAgICAgICAgY29uc3Qgc2l6ZXhHID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tc2l6ZS1heGlzXCIpXG4gICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDAsICR7aGVpZ2h0ICsgYnVmZmVyfSlgKVxuICAgICAgICAgICAgICAgICAgICAgLmNhbGwoYXhpc0JvdHRvbShzaXplU2NhbGUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNob3dTdWJYKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IDU7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VieEcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXN1Yi1heGlzXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgJHtoZWlnaHQgKyBidWZmZXJ9KWApXG4gICAgICAgICAgICAgICAgICAgIC5jYWxsKGF4aXNCb3R0b20odGhpcy5zY2FsZS5zdWJ4KSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3ViWEFuZ2xlID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJ4Ry5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGByb3RhdGUoJHtzdWJYQW5nbGV9LCAyLCAxMClgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXJzIHRoZSB4IGF4aXNcbiAgICAgICAgbGV0IGJ1ZmZlciA9IHNob3dTdWJYPzU1OjA7IC8vIENvZGUgcmV2aWV3OiBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICB0aGlzLnhBeGlzID0gc2hvd1g/YXhpc0JvdHRvbSh0aGlzLnNjYWxlLngpOmF4aXNCb3R0b20odGhpcy5zY2FsZS54KS50aWNrRm9ybWF0KFwiXCIpO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi14LWF4aXMgYXhpcy0teFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCArIGJ1ZmZlcn0pYClcbiAgICAgICAgICAgIC5jYWxsKHRoaXMueEF4aXMpIC8vIHNldCB0aWNrRm9ybWF0KFwiXCIpIHRvIHNob3cgdGljayBtYXJrcyB3aXRob3V0IHRleHQgbGFiZWxzXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgcm90YXRlKCR7eEFuZ2xlfSwgLTEwLCAxMClgKTtcblxuICAgICAgICAvLyBhZGRzIHRoZSB5IEF4aXNcbiAgICAgICAgYnVmZmVyID0gNTtcbiAgICAgICAgdGhpcy55QXhpcyA9IGF4aXNMZWZ0KHRoaXMuc2NhbGUueSlcbiAgICAgICAgICAgICAgICAgICAgLnRpY2tWYWx1ZXModGhpcy5zY2FsZS55LnRpY2tzKDUpKTtcbiAgICAgICAgZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4teS1heGlzIGF4aXMtLXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoLSR7YnVmZmVyfSwgMClgKVxuICAgICAgICAgICAgLmNhbGwodGhpcy55QXhpcyk7XG5cbiAgICAgICAgLy8gYWRkcyB0aGUgdGV4dCBsYWJlbCBmb3IgdGhlIHkgYXhpc1xuICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1heGlzLWxhYmVsXCIpXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKC0ke2J1ZmZlciAqIDIgKyBzZWxlY3QoJy52aW9saW4teS1heGlzJykubm9kZSgpLmdldEJCb3goKS53aWR0aH0sICR7dGhpcy5zY2FsZS55LnJhbmdlKClbMF0gKyAodGhpcy5zY2FsZS55LnJhbmdlKClbMV0gLSB0aGlzLnNjYWxlLnkucmFuZ2UoKVswXSkvMn0pIHJvdGF0ZSgtOTApYClcbiAgICAgICAgICAgIC50ZXh0KHlMYWJlbCk7XG5cbiAgICAgICAgLy8gcGxvdCBtb3VzZSBldmVudHNcbiAgICAgICAgZG9tLm9uKFwibW91c2VvdXRcIiwgKCk9PntcbiAgICAgICAgICAgIGlmKHRoaXMudG9vbHRpcCAhPT0gdW5kZWZpbmVkKSB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhZGQgZ3JvdXAgZGl2aWRlcnNcbiAgICAgICAgaWYoc2hvd0RpdmlkZXIpe1xuICAgICAgICAgICAgdGhpcy5fYWRkR3JvdXBEaXZpZGVyKGRvbSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgY29sb3IgbGVnZW5kXG4gICAgICAgIGlmIChzaG93TGVnZW5kKSB7XG4gICAgICAgICAgICBjb25zdCBsZWdlbmRHID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIFwidmlvbGluTGVnZW5kXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAwKWApO1xuXG4gICAgICAgICAgICBsZWdlbmRHLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS54LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0zNSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIDYwKih0aGlzLmdyb3Vwc1swXS52YWx1ZXMubGVuZ3RoKSArIDEwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDI0KVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwic2lsdmVyXCIpO1xuXG4gICAgICAgICAgICBjb25zdCBsZWdlbmRzID0gbGVnZW5kRy5zZWxlY3RBbGwoXCIudmlvbGluLWxlZ2VuZFwiKS5kYXRhKHRoaXMuZ3JvdXBzWzBdLnZhbHVlcyk7XG5cblxuICAgICAgICAgICAgY29uc3QgZyA9IGxlZ2VuZHMuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmNsYXNzZWQoXCJ2aW9saW4tbGVnZW5kXCIsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgdyA9IDEwO1xuICAgICAgICAgICAgZy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiA1ICsgNjAqKGkpICArIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMjgpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHcpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCkgPT4gZC5jb2xvcik7XG5cbiAgICAgICAgICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tbGVnZW5kLXRleHRcIilcbiAgICAgICAgICAgICAgICAudGV4dCgoZCkgPT4gZC5sYWJlbClcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgKGQsIGkpID0+IDE3ICsgNjAqKGkpICsgdGhpcy5zY2FsZS54LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0yMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRQbG90VGl0bGUoZG9tLCB0aXRsZSl7XG4gICAgICAgIGxldCB4ID0gKHRoaXMuc2NhbGUueC5yYW5nZSgpWzFdLXRoaXMuc2NhbGUueC5yYW5nZSgpWzBdICsgMSkgLzI7XG4gICAgICAgIGxldCB5ID0gKHRoaXMuc2NhbGUueS5yYW5nZSgpWzFdIC0gMTApO1xuICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi10aXRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3h9LCAke3l9KWApXG4gICAgICAgICAgICAudGV4dCh0aXRsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sdGlwIG9iamVjdFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgdG9vbHRpcCdzIGRvbSBJRFxuICAgICAqIEByZXR1cm5zIHtUb29sdGlwfVxuICAgICAqL1xuICAgIGNyZWF0ZVRvb2x0aXAoZG9tSWQpe1xuICAgICAgICBpZiAoalF1ZXJ5KGAjJHtkb21JZH1gKS5sZW5ndGggPT0gMCkgalF1ZXJ5KCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIGRvbUlkKS5hcHBlbmRUbyhqUXVlcnkoJ2JvZHknKSk7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IG5ldyBUb29sdGlwKGRvbUlkKTtcbiAgICAgICAgc2VsZWN0KGAjJHtkb21JZH1gKS5jbGFzc2VkKCd2aW9saW4tdG9vbHRpcCcsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbGJhciBwYW5lbFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgdG9vbGJhcidzIGRvbSBJRFxuICAgICAqIEBwYXJhbSB0b29sdGlwIHtUb29sdGlwfVxuICAgICAqIEByZXR1cm5zIHtUb29sYmFyfVxuICAgICAqL1xuXG4gICAgY3JlYXRlVG9vbGJhcihkb21JZCwgdG9vbHRpcCl7XG4gICAgICAgIC8vIGlmICh0b29sdGlwID09PSB1bmRlZmluZWQpIHRvb2x0aXAgPSB0aGlzLmNyZWF0ZVRvb2x0aXAoZG9tSWQpO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSBuZXcgVG9vbGJhcihkb21JZCwgdG9vbHRpcCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xiYXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgYnJ1c2ggdG8gdGhlIHBsb3RcbiAgICAgKiBAcGFyYW0gZG9tIHtEM30gRG9tIGVsZW1lbnRcbiAgICAgKi9cbiAgICBhZGRCcnVzaChkb20pe1xuICAgICAgICBjb25zdCB0aGVCcnVzaCA9IGJydXNoKCk7XG4gICAgICAgIHRoZUJydXNoLm9uKFwiZW5kXCIsICgpPT57dGhpcy56b29tKGRvbSwgdGhlQnJ1c2gpfSk7XG4gICAgICAgIGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYnJ1c2hcIilcbiAgICAgICAgICAgIC5jYWxsKHRoZUJydXNoKTtcbiAgICB9XG5cbiAgICB6b29tKGRvbSwgdGhlQnJ1c2gpe1xuICAgICAgICBsZXQgcyA9IGV2ZW50LnNlbGVjdGlvbixcbiAgICAgICAgICAgIGlkZWxUaW1lb3V0LFxuICAgICAgICAgICAgaWRlbERlbGF5ID0gMzUwO1xuICAgICAgICBpZiAodGhlQnJ1c2ggPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXMpIHtcbiAgICAgICAgICAgIGlmICghaWRlbFRpbWVvdXQpIHJldHVybiBpZGVsVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlkZWxUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIH0sIGlkZWxEZWxheSk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBjdXJyZW50IHNjYWxlcycgZG9tYWlucyBiYXNlZCBvbiB0aGUgYnJ1c2hlZCB3aW5kb3dcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueC5kb21haW4odGhpcy5zY2FsZS54LmRvbWFpbigpLmZpbHRlcigoZCwgaSk9PntcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGxvd0JvdW5kID0gTWF0aC5mbG9vcihzWzBdWzBdL3RoaXMuc2NhbGUueC5iYW5kd2lkdGgoKSk7XG4gICAgICAgICAgICAgICAgICBjb25zdCB1cHBlckJvdW5kID0gTWF0aC5mbG9vcihzWzFdWzBdL3RoaXMuc2NhbGUueC5iYW5kd2lkdGgoKSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaSA+PSBsb3dCb3VuZCAmJiBpIDw9dXBwZXJCb3VuZDtcbiAgICAgICAgICAgIH0pKTsgLy8gVE9ETzogYWRkIGNvbW1lbnRzXG5cbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IE1hdGguZmxvb3IodGhpcy5zY2FsZS55LmludmVydChzWzFdWzFdKSk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLmZsb29yKHRoaXMuc2NhbGUueS5pbnZlcnQoc1swXVsxXSkpO1xuICAgICAgICAgICAgdGhpcy5zY2FsZS55LmRvbWFpbihbbWluLCBtYXhdKTsgLy8gdG9kbzogZGVidWdcblxuICAgICAgICAgICAgZG9tLnNlbGVjdChcIi5icnVzaFwiKS5jYWxsKHRoZUJydXNoLm1vdmUsIG51bGwpO1xuICAgICAgICB9XG5cblxuICAgICAgICAgLy8gem9vbVxuICAgICAgICBsZXQgdCA9IGRvbS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNzUwKTtcbiAgICAgICAgZG9tLnNlbGVjdChcIi5heGlzLS14XCIpLnRyYW5zaXRpb24odCkuY2FsbCh0aGlzLnhBeGlzKTtcbiAgICAgICAgZG9tLnNlbGVjdChcIi5heGlzLS15XCIpLnRyYW5zaXRpb24odCkuY2FsbCh0aGlzLnlBeGlzKTtcblxuICAgICAgICB0aGlzLmdyb3Vwcy5mb3JFYWNoKChnZywgaSk9PiB7XG4gICAgICAgICAgICBsZXQgZ3JvdXAgPSBnZy5rZXk7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IGdnLnZhbHVlcztcblxuICAgICAgICAgICAgLy8gcmUtZGVmaW5lIHRoZSBzdWJ4J3MgcmFuZ2VcbiAgICAgICAgICAgIHRoaXMuc2NhbGUuc3VieFxuICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFt0aGlzLnNjYWxlLngoZ3JvdXApLCB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpXSk7XG5cbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PSBlbnRyeS52YWx1ZXMubGVuZ3RoKSByZXR1cm47IC8vIG5vIGZ1cnRoZXIgcmVuZGVyaW5nIGlmIHRoaXMgZ3JvdXAgaGFzIG5vIGVudHJpZXNcbiAgICAgICAgICAgICAgICBjb25zdCBnSW5kZXggPSB0aGlzLnNjYWxlLnguZG9tYWluKCkuaW5kZXhPZihncm91cCk7XG5cblxuICAgICAgICAgICAgICAgIC8vIHJlLWRlZmluZSB0aGUgc2NhbGUueidzIHJhbmdlXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZS56XG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZShbdGhpcy5zY2FsZS5zdWJ4KGVudHJ5LmxhYmVsKSwgdGhpcy5zY2FsZS5zdWJ4KGVudHJ5LmxhYmVsKSArIHRoaXMuc2NhbGUuc3VieC5iYW5kd2lkdGgoKV0pO1xuXG4gICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyIHRoZSB2aW9saW5cbiAgICAgICAgICAgICAgICBjb25zdCBnID0gZG9tLnNlbGVjdChgI3Zpb2xpbiR7Z2cuaW5kZXh9LSR7ZW50cnkubGFiZWx9YCk7XG4gICAgICAgICAgICAgICAgZy5zZWxlY3QoXCIudmlvbGluXCIpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBhcmVhKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC54MCgoZCkgPT4gdGhpcy5zY2FsZS56KGRbMV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgLngxKChkKSA9PiB0aGlzLnNjYWxlLnooLWRbMV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnkoKGQpID0+IHRoaXMuc2NhbGUueShkWzBdKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuXG4gICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyIHRoZSBib3ggcGxvdFxuICAgICAgICAgICAgICAgIC8vIGludGVycXVhcnRpbGUgcmFuZ2VcbiAgICAgICAgICAgICAgICBjb25zdCBxMSA9IHF1YW50aWxlKGVudHJ5LnZhbHVlcywgMC4yNSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcTMgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuNzUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHogPSAwLjE7XG4gICAgICAgICAgICAgICAgZy5zZWxlY3QoXCIudmlvbGluLWlyXCIpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCB0aGlzLnNjYWxlLnooLXopKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgdGhpcy5zY2FsZS55KHEzKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBNYXRoLmFicyh0aGlzLnNjYWxlLnooLXopIC0gdGhpcy5zY2FsZS56KHopKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgTWF0aC5hYnModGhpcy5zY2FsZS55KHEzKSAtIHRoaXMuc2NhbGUueShxMSkpKTtcblxuICAgICAgICAgICAgICAgIC8vIHRoZSBtZWRpYW4gbGluZVxuICAgICAgICAgICAgICAgIGNvbnN0IG1lZCA9IG1lZGlhbihlbnRyeS52YWx1ZXMpO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpbi1tZWRpYW5cIilcbiAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24odClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCB0aGlzLnNjYWxlLnooLXopKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIHRoaXMuc2NhbGUueih6KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlbmRlciB0aGUgdmlvbGluIGFuZCBib3ggcGxvdHNcbiAgICAgKiBAcGFyYW0gZG9tIHtEMyBET019XG4gICAgICogQHBhcmFtIGVudHJ5IHtPYmplY3R9IHdpdGggYXR0cnM6IHZhbHVlcywgbGFiZWxcbiAgICAgKiBAcGFyYW0gc2hvd1doaXNrZXIge0Jvb2xlYW59XG4gICAgICogQHBhcmFtIGdJbmRleFxuICAgICAqIEBwYXJhbSBzaG93T3V0bGllcnMge0Jvb2xlYW59XG4gICAgICogQHBhcmFtIHNob3dQb2ludHMge0Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZHJhd1Zpb2xpbihkb20sIGVudHJ5LCBzaG93V2hpc2tlciwgZ0luZGV4LCBzaG93T3V0bGllcnMsIG51bVBvaW50cyl7XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgdGhlIHZlcnRpY2VzIGZvciB0aGUgdmlvbGluIHBhdGggdXNlIGEga2RlXG4gICAgICAgIGxldCBrZGUgPSBrZXJuZWxEZW5zaXR5RXN0aW1hdG9yKFxuICAgICAgICAgICAga2VybmVsLmdhdXNzaWFuLFxuICAgICAgICAgICAgdGhpcy5zY2FsZS55LnRpY2tzKDEwMCksIC8vIHVzZSB1cCB0byAxMDAgdmVydGljZXMgYWxvbmcgdGhlIFkgYXhpcyAodG8gY3JlYXRlIHRoZSB2aW9saW4gcGF0aClcbiAgICAgICAgICAgIGtlcm5lbEJhbmR3aWR0aC5ucmQoZW50cnkudmFsdWVzKSAvLyBlc3RpbWF0ZSB0aGUgYmFuZHdpZHRoIGJhc2VkIG9uIHRoZSBkYXRhXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGVEb21haW4gPSBleHRlbnQoZW50cnkudmFsdWVzKTsgLy8gZ2V0IHRoZSBtYXggYW5kIG1pbiBpbiBlbnRyeS52YWx1ZXNcbiAgICAgICAgY29uc3QgdmVydGljZXMgPSBrZGUoZW50cnkudmFsdWVzKS5maWx0ZXIoKGQpPT5kWzBdPj1lRG9tYWluWzBdJiZkWzBdPD1lRG9tYWluWzFdKTsgLy8gZmlsdGVyIHRoZSB2ZXJ0aWNlcyB0aGF0IGFyZW4ndCBpbiB0aGUgZW50cnkudmFsdWVzXG5cbiAgICAgICAgY29uc3QgdmlvbGluRyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2lkJywgYHZpb2xpbiR7Z0luZGV4fS0ke2VudHJ5LmxhYmVsfWApXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3Zpb2xpbi1nJylcbiAgICAgICAgICAgICAgICAuZGF0dW0oZW50cnkpO1xuXG4gICAgICAgIC8vIHZpb2xpbiBwbG90IGFuZCBib3ggY2FuIG9ubHkgYmUgZHJhd24gd2hlbiB2ZXJ0aWNlcyBleGlzdCBhbmQgdGhlcmUgYXJlIG5vIE5hTiBwb2ludHNcbiAgICAgICAgaWYgKGVudHJ5LnZhbHVlcy5sZW5ndGggPj0gbnVtUG9pbnRzICYmIHZlcnRpY2VzLmxlbmd0aCAmJiB0aGlzLl92YWxpZFZlcnRpY2VzKHZlcnRpY2VzKSkge1xuICAgICAgICAgICAgLy8gZGVmaW5lIHRoZSB6IHNjYWxlIC0tIHRoZSB2aW9saW4gd2lkdGhcbiAgICAgICAgICAgIGxldCB6TWF4ID0gbWF4KHZlcnRpY2VzLCAoZCk9Pk1hdGguYWJzKGRbMV0pKTsgLy8gZmluZCB0aGUgYWJzKHZhbHVlKSBpbiBlbnRyeS52YWx1ZXNcbiAgICAgICAgICAgIHRoaXMuc2NhbGUuelxuICAgICAgICAgICAgICAgIC5kb21haW4oWy16TWF4LCB6TWF4XSlcbiAgICAgICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCksIHRoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCkgKyB0aGlzLnNjYWxlLnN1YnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgLy8gdmlzdWFsIHJlbmRlcmluZ1xuICAgICAgICAgICAgbGV0IHZpb2xpbiA9IGFyZWEoKVxuICAgICAgICAgICAgICAgIC54MCgoZCkgPT4gdGhpcy5zY2FsZS56KGRbMV0pKVxuICAgICAgICAgICAgICAgIC54MSgoZCkgPT4gdGhpcy5zY2FsZS56KC1kWzFdKSlcbiAgICAgICAgICAgICAgICAueSgoZCkgPT4gdGhpcy5zY2FsZS55KGRbMF0pKTtcbiAgICAgICAgICAgIGNvbnN0IHZQYXRoID0gdmlvbGluRy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgLmRhdHVtKHZlcnRpY2VzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCB2aW9saW4pXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ2aW9saW5cIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsICgpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5jb2xvciAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZW50cnkuY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFsdGVybmF0ZSB0aGUgb2RkIGFuZCBldmVuIGNvbG9ycywgbWF5YmUgd2UgZG9uJ3Qgd2FudCB0aGlzIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgaWYoZ0luZGV4JTIgPT0gMCkgcmV0dXJuIFwiIzkwYzFjMVwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIjOTRhOGI4XCI7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGJveHBsb3RcbiAgICAgICAgICAgIGNvbnN0IHExID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjI1KTtcbiAgICAgICAgICAgIGNvbnN0IHEzID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjc1KTtcbiAgICAgICAgICAgIGNvbnN0IHogPSB0aGlzLnNjYWxlLnouZG9tYWluKClbMV0vMztcblxuICAgICAgICAgICAgaWYoc2hvd1doaXNrZXIpe1xuICAgICAgICAgICAgICAgIC8vIHRoZSB1cHBlciBhbmQgbG93ZXIgbGltaXRzIG9mIGVudHJ5LnZhbHVlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGlxciA9IE1hdGguYWJzKHEzLXExKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cHBlciA9IG1heChlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZDw9cTMrKGlxcioxLjUpKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG93ZXIgPSBtaW4oZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ+PXExLShpcXIqMS41KSkpO1xuICAgICAgICAgICAgICAgIGRvbS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwid2hpc2tlclwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIHRoaXMuc2NhbGUueigwKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooMCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KHVwcGVyKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkobG93ZXIpKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCIjZmZmXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpbnRlcnF1YXJ0aWxlIHJhbmdlXG4gICAgICAgICAgICB2aW9saW5HLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgdGhpcy5zY2FsZS55KHEzKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIE1hdGguYWJzKHRoaXMuc2NhbGUueigteiktdGhpcy5zY2FsZS56KHopKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBNYXRoLmFicyh0aGlzLnNjYWxlLnkocTMpIC0gdGhpcy5zY2FsZS55KHExKSkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1pclwiKTtcblxuICAgICAgICAgICAgLy8gbWVkaWFuXG4gICAgICAgICAgICBjb25zdCBtZWQgPSBtZWRpYW4oZW50cnkudmFsdWVzKTtcbiAgICAgICAgICAgIHZpb2xpbkcuYXBwZW5kKFwibGluZVwiKSAvLyB0aGUgbWVkaWFuIGxpbmVcbiAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIHRoaXMuc2NhbGUueigteikpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooeikpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIHRoaXMuc2NhbGUueShtZWQpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tbWVkaWFuXCIpO1xuXG4gICAgICAgICAgICAvLyBvdXRsaWVyc1xuICAgICAgICAgICAgIGlmIChzaG93T3V0bGllcnMpIHtcbiAgICAgICAgICAgICAgICBsZXQgaml0dGVyID0gcmFuZG9tTm9ybWFsKDAsIHovMik7XG4gICAgICAgICAgICAgICAgY29uc3QgaXFyID0gTWF0aC5hYnMocTMtcTEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwcGVyID0gbWF4KGVudHJ5LnZhbHVlcy5maWx0ZXIoKGQpPT5kPD1xMysoaXFyKjEuNSkpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsb3dlciA9IG1pbihlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZD49cTEtKGlxcioxLjUpKSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0bGllcnMgPSBlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZDxsb3dlcnx8ZD51cHBlcik7XG4gICAgICAgICAgICAgICAgdmlvbGluRy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tb3V0bGllcnNcIilcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YShvdXRsaWVycylcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAuYXR0cihcImN4XCIsICgpPT50aGlzLnNjYWxlLnooMCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKCk9PnRoaXMuc2NhbGUueihqaXR0ZXIoKSkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpPT50aGlzLnNjYWxlLnkoZCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbW91c2UgZXZlbnRzXG4gICAgICAgICAgICB2aW9saW5HLm9uKFwibW91c2VvdmVyXCIsICgpPT57XG4gICAgICAgICAgICAgICAgdlBhdGguY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnRvb2x0aXAgPT09IHVuZGVmaW5lZCkgY29uc29sZS53YXJuKFwiR3JvdXBWaW9saW4gV2FybmluZzogdG9vbHRpcCBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5ncm91cCArIFwiPGJyLz5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5sYWJlbCArIFwiPGJyLz5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIk1lZGlhbjogXCIgKyBtZWQudG9QcmVjaXNpb24oNCkgKyBcIjxici8+XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmlvbGluRy5vbihcIm1vdXNlb3V0XCIsICgpPT57XG4gICAgICAgICAgICAgICAgdlBhdGguY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG51bVBvaW50cykge1xuICAgICAgICAgICAgLy8gZGVmaW5lIHRoZSB6IHNjYWxlIC0tIHRoZSB2aW9saW4gd2lkdGhcbiAgICAgICAgICAgIGxldCB6TWF4ID0gbWF4KGVudHJ5LnZhbHVlcywgKGQpPT5NYXRoLmFicyhkKSk7IC8vIGZpbmQgdGhlIGFicyh2YWx1ZSkgaW4gZW50cnkudmFsdWVzXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnpcbiAgICAgICAgICAgICAgICAuZG9tYWluKFstek1heCwgek1heF0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFt0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpLCB0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpICsgdGhpcy5zY2FsZS5zdWJ4LmJhbmR3aWR0aCgpXSk7XG4gICAgICAgICAgICBjb25zdCB6ID0gdGhpcy5zY2FsZS56LmRvbWFpbigpWzFdLzM7XG4gICAgICAgICAgICBsZXQgaml0dGVyID0gcmFuZG9tTm9ybWFsKDAsIHovMik7XG5cbiAgICAgICAgICAgIHZpb2xpbkcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tcG9pbnRzXCIpXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuICAgICAgICAgICAgICAgIC5kYXRhKGVudHJ5LnZhbHVlcylcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImN4XCIsICgpPT50aGlzLnNjYWxlLnooaml0dGVyKCkpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpPT50aGlzLnNjYWxlLnkoZCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDIpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBfc2FuaXR5Q2hlY2soZGF0YSl7XG4gICAgICAgIGNvbnN0IGF0dHIgPSBbXCJncm91cFwiLCBcImxhYmVsXCIsIFwidmFsdWVzXCJdO1xuXG4gICAgICAgIGRhdGEuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICAgICAgYXR0ci5mb3JFYWNoKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRbYV0gPT09IHVuZGVmaW5lZCkgdGhyb3cgXCJHcm91cGVkVmlvbGluOiBpbnB1dCBkYXRhIGVycm9yLlwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGlmICgwID09IGQudmFsdWVzLmxlbmd0aCkgdGhyb3cgXCJWaW9saW46IElucHV0IGRhdGEgZXJyb3JcIjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2FkZEdyb3VwRGl2aWRlcihkb20pe1xuICAgICAgICBjb25zdCBncm91cHMgPSB0aGlzLnNjYWxlLnguZG9tYWluKCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBNYXRoLmFicyh0aGlzLnNjYWxlLngodGhpcy5zY2FsZS54LmRvbWFpbigpWzFdKSAtIHRoaXMuc2NhbGUueCh0aGlzLnNjYWxlLnguZG9tYWluKClbMF0pIC0gdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpKTtcblxuICAgICAgICBjb25zdCBnZXRYID0gKGcsIGkpPT4ge1xuICAgICAgICAgICAgaWYgKGkgIT09IGdyb3Vwcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGUueChnKSArICt0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkgKyAocGFkZGluZy8yKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZG9tLnNlbGVjdEFsbChcIi52bGluZVwiKS5kYXRhKGdyb3VwcylcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJ2bGluZVwiLCB0cnVlKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCBnZXRYKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCBnZXRYKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkucmFuZ2UoKVswXSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55LnJhbmdlKClbMV0pXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgKGcsIGkpPT5pIT1ncm91cHMubGVuZ3RoLTE/MTowKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwicmdiKDg2LDk4LDEwNylcIilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMC41KVxuXG4gICAgfVxuXG4gICAgX3ZhbGlkVmVydGljZXModmVydGljZXMpIHtcbiAgICAgICAgbGV0IHZhbHMgPSB2ZXJ0aWNlcy5yZWR1Y2UoKGEsIGIpPT5hLmNvbmNhdChiKSwgW10pO1xuICAgICAgICBsZXQgaW52YWxpZFZlcnRpY2VzID0gdmFscy5maWx0ZXIoZD0+aXNOYU4oZCkpO1xuXG4gICAgICAgIHJldHVybiAhKGludmFsaWRWZXJ0aWNlcy5sZW5ndGgpO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cblwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHtqc29uLCB0c3Z9IGZyb20gXCJkMy1mZXRjaFwiO1xuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbCwgZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7a2V5cywgdmFsdWVzfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuXG5pbXBvcnQge1xuICAgIGdldEd0ZXhVcmxzLFxuICAgIHBhcnNlR2VuZXMsXG4gICAgcGFyc2VUaXNzdWVzLFxuICAgIHBhcnNlTWVkaWFuRXhwcmVzc2lvbixcbiAgICBwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluLCBwYXJzZVRpc3N1ZVNpdGVzLFxufSBmcm9tIFwiLi9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyXCI7XG5cbmltcG9ydCB7XG4gICAgY3JlYXRlVGlzc3VlR3JvdXBNZW51LFxuICAgIHBhcnNlVGlzc3VlR3JvdXBNZW51XG59IGZyb20gXCIuL21vZHVsZXMvZ3RleE1lbnVCdWlsZGVyXCI7XG5cbmltcG9ydCB7Y3JlYXRlVGlzc3VlTWVudX0gZnJvbSBcIi4vbW9kdWxlcy9ndGV4TWVudUJ1aWxkZXJcIjtcbmltcG9ydCB7Y29sb3JDaGFydH0gZnJvbSBcIi4vbW9kdWxlcy9jb2xvcnNcIjtcbmltcG9ydCBEZW5kcm9IZWF0bWFwQ29uZmlnIGZyb20gXCIuL21vZHVsZXMvRGVuZHJvSGVhdG1hcENvbmZpZ1wiO1xuaW1wb3J0IERlbmRyb0hlYXRtYXAgZnJvbSBcIi4vbW9kdWxlcy9EZW5kcm9IZWF0bWFwXCI7XG5pbXBvcnQgR3JvdXBlZFZpb2xpbiBmcm9tIFwiLi9tb2R1bGVzL0dyb3VwZWRWaW9saW5cIjtcblxuLyoqXG4gKiBDcmVhdGUgdGhlIHRpc3N1ZSAoZGF0YXNldCkgZHJvcGRvd24gbWVudSB1c2luZyBzZWxlY3QyXG4gKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIGRvbSBJRCBvZiB0aGUgbWVudVxuICogQHBhcmFtIHVybCB7U3RyaW5nfSB0aGUgdGlzc3VlIHdlYiBzZXJ2aWNlIHVybFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGF0YXNldE1lbnUoZG9tSWQsIHVybD1nZXRHdGV4VXJscygpLnRpc3N1ZSl7XG4gICAgY3JlYXRlVGlzc3VlTWVudShkb21JZCwgdXJsKTsgLy8gY3VycmVudGx5IGRhdGFzZXRzIG9ubHkgaW5jbHVkZSBHVEV4IHRpc3N1ZXNcbn1cblxuLyoqXG4gKiBSZW5kZXIgdG9wIGV4cHJlc3NlZCBnZW5lcyBpbiBhIGdpdmVuIHRpc3N1ZVxuICogQHBhcmFtIHRpc3N1ZUlkXG4gKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIGRlbmRyb2hlYXRtYXAncyBESVYgSURcbiAqIEBwYXJhbSB0b29sYmFySWQge1N0cmluZ30gdGhlIHRvb2wgYmFyIERPTSBJRFxuICogQHBhcmFtIGluZm9JZCB7U3RyaW5nfSB0aGUgbWVzc2FnZSBib3ggRE9NIElEXG4gKiBAcGFyYW0gdXJscyB7RGljdGlvbmFyeX0gb2YgR1RFeCB3ZWIgc2VydmljZXMgdXJsc1xuICogQHBhcmFtIGZpbHRlckdlbmVzIHtCb29sZWFufSB0dXJuIG9uIHRoZSBmaWx0ZXIgb2Ygc3BlY2lhbCBjYXRlZ29yaWVzIG9mIGdlbmVzIChlLmcuIG1pdG9jaG9uZHJpYWwgZ2VuZXMpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXVuY2hUb3BFeHByZXNzZWQodGlzc3VlSWQsIGhlYXRtYXBSb290SWQsIHZpb2xpblJvb3RJZCwgdXJscz1nZXRHdGV4VXJscygpLCBmaWx0ZXJHZW5lcz10cnVlKXtcbiAgICAvLyBnZXR0aW5nIHRoZSB0b3AgZXhwcmVzc2VkIGdlbmVzIGluIHRpc3N1ZUlkXG4gICAgY29uc3QgdXJsID0gZmlsdGVyR2VuZXM/dXJscy50b3BJblRpc3N1ZUZpbHRlcmVkOnVybHMudG9wSW5UaXNzdWU7XG4gICAgY29uc3QgJGZpbHRlckluZm9EaXYgPSAkKGAjZmlsdGVySW5mb2ApLmxlbmd0aD09MD8kKCc8ZGl2Lz4nKS5hdHRyKCdpZCcsICdmaWx0ZXJJbmZvJykuYXBwZW5kVG8oJyNtZXNzYWdlQm94Jyk6JChgI2ZpbHRlckluZm9gKTtcbiAgICBpZihmaWx0ZXJHZW5lcykgJGZpbHRlckluZm9EaXYuaHRtbChcIk1pdG9jaG9uZHJpYWwgZ2VuZXMgYXJlIGV4Y2x1ZGVkLjxici8+XCIpO1xuICAgIGVsc2UgJGZpbHRlckluZm9EaXYuaHRtbChcIk1pdG9jaG9uZHJpYWwgZ2VuZXMgYXJlIGluY2x1ZGVkLjxici8+XCIpO1xuXG4gICAganNvbih1cmwrIHRpc3N1ZUlkKVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHRzKXsgLy8gdG9wIDUwIGV4cHJlc3NlZCBnZW5lcyBpbiB0aXNzdWVJZFxuICAgICAgICAgICAgY29uc3QgYXR0ciA9ICd0b3BFeHByZXNzZWRHZW5lJztcbiAgICAgICAgICAgIGlmKCFyZXN1bHRzLmhhc093blByb3BlcnR5KGF0dHIpKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgIHRocm93ICdQYXJzZSBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0b3BHZW5lTGlzdCA9IHJlc3VsdHNbYXR0cl0ubWFwKChkKT0+e1xuICAgICAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KCdnZW5jb2RlSWQnKSl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdQYXJzZSBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogZ2VuY29kZUlkJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQuZ2VuY29kZUlkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfc3R5bGVTZWxlY3RlZFRpc3N1ZSh0aXNzdWVJZCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2VhcmNoQnlJZChoZWF0bWFwUm9vdElkLCB2aW9saW5Sb290SWQsIHRvcEdlbmVMaXN0LCB1bmRlZmluZWQsIHVybHMsIGZpbHRlckdlbmVzLCBjYWxsYmFjaywgdGlzc3VlSWQpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfSk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGxhdW5jaChmb3JtSWQsIG1lbnVJZCwgc3VibWl0SWQsIGhlYXRtYXBSb290SWQsIHZpb2xpblJvb3RJZCwgdXJscz1nZXRHdGV4VXJscygpLCBjYWxsYmFjaz11bmRlZmluZWQpe1xuICAgIGxldCB0aXNzdWVHcm91cHMgPSB7fTsgLy8gYSBkaWN0aW9uYXJ5IG9mIGxpc3RzIG9mIHRpc3N1ZSBzaXRlcyBpbmRleGVkIGJ5IHRpc3N1ZSBncm91cHNcblxuICAgIGpzb24odXJscy50aXNzdWVTaXRlcylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSl7IC8vIHJldHJpZXZlIGFsbCB0aXNzdWUgKHN1YilzaXRlc1xuICAgICAgICAgICAgY29uc3QgZm9yRXF0bCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHRpc3N1ZUdyb3VwcyA9IHBhcnNlVGlzc3VlU2l0ZXMoZGF0YSwgZm9yRXF0bCk7XG4gICAgICAgICAgICBjcmVhdGVUaXNzdWVHcm91cE1lbnUodGlzc3VlR3JvdXBzLCBtZW51SWQpO1xuICAgICAgICAgICAgJChgIyR7c3VibWl0SWR9YCkuY2xpY2soZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIC8vIGlmIGNhbGxiYWNrIGlzIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIGNhbGxiYWNrKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBoaWRlIHRoZSBzZWFyY2ggZm9ybSBhZnRlciB0aGUgZVFUTCB2aW9saW4gcGxvdHMgYXJlIHJlcG9ydGVkXG4gICAgICAgICAgICAgICAgICAgICQoYCMke2Zvcm1JZH1gKS5yZW1vdmVDbGFzcyhcInNob3dcIik7IC8vIGZvciBib290c3RyYXAgNFxuICAgICAgICAgICAgICAgICAgICAkKGAjJHtmb3JtSWR9YCkucmVtb3ZlQ2xhc3MoXCJpblwiKTsgLy8gZm9yIGJvb3N0cmFwIDNcblxuICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgaW5wdXQgbGlzdCBvZiBnZW5lc1xuICAgICAgICAgICAgICAgIGxldCBnbGlzdCA9ICQoJyNnZW5lcycpLnZhbCgpLnJlcGxhY2UoLyAvZywgJycpLnRvVXBwZXJDYXNlKCkuc3BsaXQoJywnKS5maWx0ZXIoKGQpPT5kIT0nJyk7XG4gICAgICAgICAgICAgICAgaWYgKGdsaXN0Lmxlbmd0aCA9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ0lucHV0IEVycm9yOiBBdCBsZWFzdCBvbmUgZ2VuZSBtdXN0IGJlIHByb3ZpZGVkLicpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdygnR2VuZSBpbnB1dCBlcnJvcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIGlucHV0IHRpc3N1ZSBsaXN0XG4gICAgICAgICAgICAgICAgbGV0IHF1ZXJ5VGlzc3VlSWRzID0gcGFyc2VUaXNzdWVHcm91cE1lbnUodGlzc3VlR3JvdXBzLCBtZW51SWQpO1xuICAgICAgICAgICAgICAgIC8vIHRpc3N1ZSBpbnB1dCBlcnJvci1jaGVja2luZ1xuICAgICAgICAgICAgICAgIGlmIChxdWVyeVRpc3N1ZUlkcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhbGVydChcIklucHV0IEVycm9yOiBBdCBsZWFzdCBvbmUgdGlzc3VlIG11c3QgYmUgc2VsZWN0ZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIlRpc3N1ZSBpbnB1dCBlcnJvclwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNlYXJjaFxuICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8gTkVYVCAvLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgc2VhcmNoQnlJZChoZWF0bWFwUm9vdElkLCB2aW9saW5Sb290SWQsIGdsaXN0LCBxdWVyeVRpc3N1ZUlkcywgdXJscyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfSk7XG59XG4vKipcbiAqIFNlYXJjaCBHZW5lIEV4cHJlc3Npb24gYnkgSURcbiAqIEBwYXJhbSBoZWF0bWFwUm9vdElkIHtTdHJpbmd9XG4gKiBAcGFyYW0gdmlvbGluUm9vdElkIHtTdHJpbmd9XG4gKiBAcGFyYW0gZ2xpc3Qge0xpc3R9IG9mIGdlbmVzXG4gKiBAcGFyYW0gdGxpc3Qge0xpc3R9IG9mIHRpc3N1ZXNcbiAqIEBwYXJhbSB1cmxzXG4gKiBAcGFyYW0gZmlsdGVyR2VuZXMge0Jvb2xlYW59IG9yIHVuZGVmaW5lZCB3aGVuIGl0IGlzbid0IGFwcGxpY2FibGVcbiAqIEBwYXJhbSBjYWxsYmFja1xuICogQHBhcmFtIHFUaXNzdWUge1N0cmluZ306IG9ubHkgYXBwbGljYWJsZSBmb3IgdGhlIHNlYXJjaCBvZiB0b3AgZXhwcmVzc2VkIGdlbmVzIGluIHRoZSBxVGlzc3VlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hCeUlkKGhlYXRtYXBSb290SWQsIHZpb2xpblJvb3RJZCwgZ2xpc3QsIHRsaXN0PXVuZGVmaW5lZCwgdXJscz1nZXRHdGV4VXJscygpLCBmaWx0ZXJHZW5lcz11bmRlZmluZWQsIGNhbGxiYWNrPXVuZGVmaW5lZCwgcVRpc3N1ZT11bmRlZmluZWQpe1xuICAgICQoJyNzcGlubmVyJykuc2hvdygpO1xuICAgICQoYCMke2hlYXRtYXBSb290SWR9YCkuZW1wdHkoKTsgLy8gY2xlYXIgdGhlIHJvb3QgRE9NIGNvbnRlbnRcbiAgICAkKGAjJHt2aW9saW5Sb290SWR9YCkuZW1wdHkoKTsgLy8gY2xlYXIgdGhlIHJvb3QgRE9NIGNvbnRlbnRcblxuICAgIGNvbnN0IE1BWCA9IDUwO1xuICAgIGNvbnN0ICRtZXNzYWdlID0gJCgnPGRpdi8+PGJyLz4nKS5hdHRyKCdjbGFzcycsICdjb2wteHMtMTIgY29sLW1kLTEyJykuY3NzKCdjb2xvcicsICdmaXJlYnJpY2snKS5hcHBlbmRUbyhgIyR7aGVhdG1hcFJvb3RJZH1gKTtcbiAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XG4gICAgaWYgKGdsaXN0Lmxlbmd0aCA+IE1BWCkge1xuICAgICAgICBtZXNzYWdlID0gYFdhcm5pbmc6IFRvbyBtYW55IGdlbmVzLiBJbnB1dCBsaXN0IHRydW5jYXRlZCB0byB0aGUgZmlyc3QgJHtNQVh9LiA8YnIvPmA7XG4gICAgICAgIGdsaXN0ID0gZ2xpc3Quc2xpY2UoMCwgTUFYKTtcbiAgICB9XG4gICAgUHJvbWlzZS5hbGwoW2pzb24odXJscy50aXNzdWUpLCBqc29uKHVybHMuZ2VuZUlkK2dsaXN0LmpvaW4oXCIsXCIpKV0pXG4gICAgICAgLnRoZW4oZnVuY3Rpb24oYXJncyl7XG4gICAgICAgICAgIGNvbnN0IHRpc3N1ZXMgPSBwYXJzZVRpc3N1ZXMoYXJnc1swXSk7XG5cbiAgICAgICAgICAgLy8gZ2VuZXNcbiAgICAgICAgICAgY29uc3QgZ2VuZXMgPSBwYXJzZUdlbmVzKGFyZ3NbMV0pO1xuICAgICAgICAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgICAgICAgICBtZXNzYWdlICs9IF92YWxpZGF0ZUdlbmVzKGhlYXRtYXBSb290SWQsIGdlbmVzLCBnbGlzdCk7XG5cblxuICAgICAgICAgICAvLyBnZXQgbWVkaWFuIGV4cHJlc3Npb24gZGF0YSBhbmQgY2x1c3RlcnMgb2YgdGhlIGlucHV0IGdlbmVzIGluIGFsbCB0aXNzdWVzXG4gICAgICAgICAgIGNvbnN0IGdRdWVyeSA9IGdlbmVzLm1hcCgoZyk9PmcuZ2VuY29kZUlkKS5qb2luKFwiLFwiKTtcbiAgICAgICAgICAgY29uc3QgdFF1ZXJ5ID0gdGxpc3Q9PT11bmRlZmluZWQ/dW5kZWZpbmVkOnRsaXN0LmpvaW4oXCIsXCIpO1xuICAgICAgICAgICBjb25zdCBmZXRjaFVybCA9IHRRdWVyeSA9PT0gdW5kZWZpbmVkPyB1cmxzLm1lZEdlbmVFeHAgKyBcIiZnZW5jb2RlSWQ9XCIgKyBnUXVlcnk6IHVybHMubWVkR2VuZUV4cCArIFwiJmdlbmNvZGVJZD1cIiArIGdRdWVyeSArIFwiJnRpc3N1ZVNpdGVEZXRhaWxJZD1cIiArIHRRdWVyeTtcbiAgICAgICAgICAganNvbihmZXRjaFVybClcbiAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGVEYXRhKXtcbiAgICAgICAgICAgICAgICAgICAkKCcjc3Bpbm5lcicpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhTWVzc2FnZSA9IF92YWxpZGF0ZUV4cHJlc3Npb25EYXRhKGVEYXRhKTtcbiAgICAgICAgICAgICAgICAgICBpZiAoZGF0YU1lc3NhZ2UgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICRtZXNzYWdlLmh0bWwobWVzc2FnZSArIGRhdGFNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICRtZXNzYWdlLmh0bWwobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgIC8qKioqKiByZW5kZXIgdGhlIERlbmRyb0hlYXRtYXAgKioqKiovXG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSBwYXJzZU1lZGlhbkV4cHJlc3Npb24oZURhdGEpOyAvLyB0aGUgcGFyc2VyIGRldGVybWluZXMgdGhlIG9yaWVudGF0aW9ucyBvZiB0aGUgaGVhdG1hcFxuICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpZHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICByb290OiBoZWF0bWFwUm9vdElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlvbGluOiB2aW9saW5Sb290SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzdmc6IGAke2hlYXRtYXBSb290SWR9LXN2Z2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiBcImhlYXRtYXBUb29sdGlwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFyOiBcImhlYXRtYXBUb29sYmFyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZTogXCJoZWF0bWFwQ2xvbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlOiBcImhlYXRtYXBTYXZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBcImhlYXRtYXBGaWx0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0OiBcImhlYXRtYXBTb3J0VGlzc3VlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2x1c3RlcjogXCJoZWF0bWFwQ2x1c3RlclRpc3N1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAvKioqKiogYnVpbGQgZG9tIGNvbXBvbmVudHMgKioqKiovXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJ0b29sYmFyXCIsIFwiY2xvbmVcIl0uZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJzxkaXYvPicpLmF0dHIoXCJpZFwiLCBpZHNba2V5XSkuYXBwZW5kVG8oJChgIyR7aWRzLnJvb3R9YCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKioqKiBoZWF0bWFwIHJlbmRlcmluZyAqKioqKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heENlbGxXID0gMjU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW5DZWxsVyA9IDI1O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbFcgPSB0bGlzdD09PXVuZGVmaW5lZD9NYXRoLmNlaWwod2luZG93LmlubmVyV2lkdGgvdGlzc3Vlcy5sZW5ndGgpOk1hdGguY2VpbCh3aW5kb3cuaW5uZXJXaWR0aC90bGlzdC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFcgPSBjZWxsVz5tYXhDZWxsVz9tYXhDZWxsVzooY2VsbFc8bWluQ2VsbFc/bWluQ2VsbFc6Y2VsbFcpOyAvLyB0aGlzIGVuc3VyZXMgYSByZWFzb25hYmxlIGNlbGxXXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZG1hcE1hcmdpbj17dG9wOjUwLCByaWdodDoyNTAsIGJvdHRvbToxNzAsIGxlZnQ6MTB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxlZnRQYW5lbFcgPSAxMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcm9vdFcgPSB0bGlzdD09PXVuZGVmaW5lZD9jZWxsVyAqIHRpc3N1ZXMubGVuZ3RoICsgbGVmdFBhbmVsVyArIGRtYXBNYXJnaW4ucmlnaHQgKyBkbWFwTWFyZ2luLmxlZnQ6Y2VsbFcgKiB0bGlzdC5sZW5ndGggKyBsZWZ0UGFuZWxXICsgZG1hcE1hcmdpbi5yaWdodCArIGRtYXBNYXJnaW4ubGVmdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gbmV3IERlbmRyb0hlYXRtYXBDb25maWcocm9vdFcsIGxlZnRQYW5lbFcsIDEwMCwgZG1hcE1hcmdpbiwgMTIsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRtYXAgPSBuZXcgRGVuZHJvSGVhdG1hcChlRGF0YS5jbHVzdGVycy50aXNzdWUsIGVEYXRhLmNsdXN0ZXJzLmdlbmUsIGV4cHJlc3Npb24sIFwiWWxHbkJ1XCIsIDIsIGNvbmZpZywgaWRzLnRvb2x0aXApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VuZXMubGVuZ3RoIDwgMyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG9vIGZldyBnZW5lcyB0byBjbHVzdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG1hcC5yZW5kZXIoaWRzLnJvb3QsIGlkcy5zdmcsIHRydWUsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7ZG1hcC5yZW5kZXIoaWRzLnJvb3QsIGlkcy5zdmcpfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdHJ1Y3QgaGFuZHkgZGF0YSBsb29rdXAgdGFibGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXNzdWVEaWN0ID0gdGlzc3Vlcy5yZWR1Y2UoKGEsIGQpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KFwidGlzc3VlU2l0ZURldGFpbElkXCIpKSB0aHJvdyBcInRpc3N1ZSBoYXMgbm90IGF0dHIgdGlzc3VlU2l0ZURldGFpbElkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnZW5lRGljdCA9IGRtYXAuZGF0YS5oZWF0bWFwLnJlZHVjZSgoYSwgZCwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWQuaGFzT3duUHJvcGVydHkoXCJnZW5jb2RlSWRcIikpIHRocm93IFwiZ2VuZSBoYXMgbm8gYXR0ciBnZW5jb2RlSWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW2QuZ2VuY29kZUlkXT1kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvKioqKiogY3VzdG9taXphdGlvbiBmb3IgR1RFeCBleHByZXNzaW9uIGhlYXRtYXAgKioqKiovXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoYW5nZSByb3cgYW5kIGNvbHVtbiBsYWJlbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoYW5nZSByb3cgbGFiZWxzIHRvIHRpc3N1ZSBuYW1lcyAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0KFwiI1wiICsgZG1hcC5jb25maWcucGFuZWxzLm1haW4uaWQpLnNlbGVjdEFsbChcIi5leHAtbWFwLXhsYWJlbFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KChkKSA9PiB0aXNzdWVEaWN0W2RdPT09dW5kZWZpbmVkP2Q6dGlzc3VlRGljdFtkXS50aXNzdWVTaXRlRGV0YWlsKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3QoXCIjXCIgKyBkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi5pZCkuc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoKGQpID0+IGdlbmVEaWN0W2RdPT09dW5kZWZpbmVkP2Q6Z2VuZURpY3RbZF0uZ2VuZVN5bWJvbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aXNzdWUgY29sb3IgYm94ZXMgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRUaXNzdWVDb2xvcnMoZG1hcCwgdGlzc3VlRGljdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBhIHRvb2xiYXJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRUb29sQmFyKGRtYXAsIGlkcywgdGlzc3VlRGljdCwgdXJscywgZmlsdGVyR2VuZXMsIHFUaXNzdWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtb3VzZSBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b21pemVNb3VzZUV2ZW50cyhkbWFwLCB0aXNzdWVEaWN0LCBnZW5lRGljdCwgdXJscyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayE9IHVuZGVmaW5lZCkgY2FsbGJhY2soKTtcblxuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtjb25zb2xlLmVycm9yKGVycil9KTtcbiAgICAgICB9KVxuICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpe2NvbnNvbGUuZXJyb3IoZXJyKX0pO1xufVxuXG5mdW5jdGlvbiBfdmFsaWRhdGVFeHByZXNzaW9uRGF0YShkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gXCJtZWRpYW5HZW5lRXhwcmVzc2lvblwiO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyBcImV4cHJlc3Npb24gZGF0YSBqc29uIGZvcm1hdCBlcnJvci5cIjtcbiAgICBpZiAoZGF0YVthdHRyXS5sZW5ndGggPT0gMCkgcmV0dXJuIFwiTm8gZXhwcmVzc2lvbiBkYXRhIGZvdW5kLlwiO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF92YWxpZGF0ZUdlbmVzKGRvbUlkLCBnZW5lcywgaW5wdXQpe1xuICAgIGxldCBtZXNzYWdlID0gXCJcIjtcblxuICAgIGlmIChnZW5lcy5sZW5ndGggPT0gMCkgbWVzc2FnZSA9IFwiRmF0YWwgRXJyb3I6IHRoZSBnZW5lIGxpc3QgaXMgZW1wdHkuPGJyLz5cIjtcbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGdlbmVzLmxlbmd0aCA8IGlucHV0Lmxlbmd0aCl7XG4gICAgICAgICAgICBsZXQgYWxsSWRzID0gW107XG4gICAgICAgICAgICBnZW5lcy5mb3JFYWNoKChnKT0+e1xuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGUgYSBsaXN0IG9mIGFsbCBrbm93biBJRHNcbiAgICAgICAgICAgICAgICBhbGxJZHMucHVzaChnLmdlbmNvZGVJZCk7XG4gICAgICAgICAgICAgICAgYWxsSWRzLnB1c2goZy5nZW5lU3ltYm9sVXBwZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgbWlzc2luZ0dlbmVzID0gaW5wdXQuZmlsdGVyKChnKT0+IWFsbElkcy5pbmNsdWRlcyhnLnRvTG93ZXJDYXNlKCkpJiYhYWxsSWRzLmluY2x1ZGVzKGcudG9VcHBlckNhc2UoKSkpO1xuICAgICAgICAgICAgaWYgKG1pc3NpbmdHZW5lcy5sZW5ndGggPiAwKSBtZXNzYWdlID0gYFdhcm5pbmc6IE5vdCBhbGwgZ2VuZXMgYXJlIGZvdW5kOiAke21pc3NpbmdHZW5lcy5qb2luKFwiLFwiKX08YnIvPmA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG59XG5cbi8qKlxuICogRm9yIHRvcCBleHByZXNzZWQgcXVlcnksIGhpZ2hsaWdodCB0aGUgcXVlcnkgdGlzc3VlIGxhYmVsXG4gKiBAcGFyYW0gdGlzc3VlSWQge1N0cmluZ30gdGhlIHRpc3N1ZSBJRFxuICogRGVwZW5kZW5jaWVzOiBleHByZXNzTWFwLmNzc1xuICovXG5mdW5jdGlvbiBfc3R5bGVTZWxlY3RlZFRpc3N1ZSh0aXNzdWVJZCl7XG4gICAgc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpLmZpbHRlcigoZCk9PmQ9PXRpc3N1ZUlkKVxuICAgICAgICAuY2xhc3NlZChcInF1ZXJ5XCIsIHRydWUpO1xufVxuXG4vKipcbiAqIEFkZHMgR1RFeCB0aXNzdWUgY29sb3JzIHRvIHRoZSB0aXNzdWUgbGFiZWxzIChjb2x1bW4gbmFtZXMgb2YgdGhlIGhlYXRtYXApXG4gKiBAcGFyYW0gZG1hcCB7RGVuZHJvSGVhdG1hcH1cbiAqIEBwYXJhbSB0aXNzdWVEaWN0IHtEaWN0aW9uYXJ5fSBvZiBHVEV4IHRpc3N1ZSBvYmplY3RzIGluZGV4ZWQgYnkgdGlzc3VlX2lkXG4gKi9cbmZ1bmN0aW9uIF9hZGRUaXNzdWVDb2xvcnMoZG1hcCwgdGlzc3VlRGljdCl7XG5cbiAgICBjb25zdCBpZCA9IGRtYXAuY29uZmlnLnBhbmVscy5tYWluLmlkO1xuICAgIGNvbnN0IGhlYXRtYXAgPSBkbWFwLm9iamVjdHMuaGVhdG1hcDtcblxuICAgIGxldCBjZWxscyA9IHNlbGVjdChgIyR7aWR9YCkuc2VsZWN0QWxsKFwiLmV4cC1tYXAteGNvbG9yXCIpLmRhdGEoaGVhdG1hcC54TGlzdCk7XG4gICAgbGV0IGxlYXZlcyA9IHNlbGVjdChgIyR7aWR9YCkuc2VsZWN0QWxsKFwiLmxlYWYtY29sb3JcIikuZGF0YShoZWF0bWFwLnhMaXN0KTtcblxuICAgIC8vIHVwZGF0ZVxuICAgIGNlbGxzLmF0dHIoXCJ4XCIsIChkKT0+aGVhdG1hcC54U2NhbGUoZCkpXG4gICAgICAgIC5hdHRyKFwieVwiLCAoZCk9PmhlYXRtYXAueVNjYWxlLnJhbmdlKClbMV0gKyA1KTtcbiAgICBsZWF2ZXMuYXR0cihcInhcIiwgKGQpPT5oZWF0bWFwLnhTY2FsZShkKSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsIChkKT0+aGVhdG1hcC55U2NhbGUucmFuZ2UoKVswXSAtIDEwKTtcblxuICAgIC8vIGNyZWF0ZSBuZXcgZWxlbWVudHNcbiAgICBjZWxscy5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJ4XCIsIChkKT0+aGVhdG1hcC54U2NhbGUoZCkpXG4gICAgICAgIC5hdHRyKFwieVwiLCAoZCk9PmhlYXRtYXAueVNjYWxlLnJhbmdlKClbMV0gKyA1KVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIGhlYXRtYXAueFNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWF0bWFwLnlTY2FsZS5iYW5kd2lkdGgoKSowLjUpXG4gICAgICAgIC5jbGFzc2VkKFwiZXhwLW1hcC14Y29sb3JcIiwgdHJ1ZSlcbiAgICAgICAgLm1lcmdlKGNlbGxzKVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiB0aXNzdWVEaWN0W2RdID09PSB1bmRlZmluZWQ/IFwiIzAwMDAwMFwiOiBgIyR7dGlzc3VlRGljdFtkXS5jb2xvckhleH1gKTtcblxuICAgIC8vIGV4aXQgYW5kIHJlbW92ZVxuICAgIGNlbGxzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgIGlmIChkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUuZG9tYWluKCkubGVuZ3RoID4gMTUpe1xuICAgICAgICBsZWF2ZXMuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQpPT5oZWF0bWFwLnhTY2FsZShkKSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCk9PmhlYXRtYXAueVNjYWxlLnJhbmdlKClbMF0gLSAxMClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgaGVhdG1hcC54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWF0bWFwLnlTY2FsZS5iYW5kd2lkdGgoKSowLjUpXG4gICAgICAgICAgICAuY2xhc3NlZChcImxlYWYtY29sb3JcIiwgdHJ1ZSlcbiAgICAgICAgICAgIC5tZXJnZShsZWF2ZXMpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiB0aXNzdWVEaWN0W2RdID09PSB1bmRlZmluZWQ/IFwiIzAwMDAwMFwiOiBgIyR7dGlzc3VlRGljdFtkXS5jb2xvckhleH1gKTtcbiAgICAgICAgbGVhdmVzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICB9XG5cbn1cblxuLyoqXG4gKiBDdXN0b21pemUgdGhlIGRlbmRyb3BIZWF0bWFwIG1vdXNlIGV2ZW50c1xuICogZGVwZW5kZW5jaWVzOiBDU1MgY2xhc3NlcyBmcm9tIGV4cHJlc3NNYXAuY3NzXG4gKiBAcGFyYW0gZG1hcCB7RGVuZHJvSGVhdG1hcH1cbiAqIEBwYXJhbSB0aXNzdWVEaWN0IHtEaWN0aW9uYXJ5fTogdGlzc3VlIG9iamVjdHMgaW5kZXhlZCBieSB0aXNzdWVfaWQsIHdpdGggYXR0cjogdGlzc3VlX25hbWVcbiAqIEBwYXJhbSBnZW5lRGljdCB7RGljdGlvbmFyeX06IGdlbmUgb2JqZWN0cyBpbmRleGVkIGJ5IGdlbmNvZGUgSUQsIHdpdGggYXR0cjogZ2VuZVN5bWJvbFxuICovXG5mdW5jdGlvbiBfY3VzdG9taXplTW91c2VFdmVudHMoZG1hcCwgdGlzc3VlRGljdCwgZ2VuZURpY3QsIHVybHM9Z2V0R3RleFVybHMoKSkge1xuICAgIGNvbnN0IHN2ZyA9IGRtYXAudmlzdWFsQ29tcG9uZW50cy5zdmc7XG4gICAgY29uc3QgdG9vbHRpcCA9IGRtYXAudG9vbHRpcDtcbiAgICBkbWFwLmRhdGEuZXh0ZXJuYWwgPSBbXTtcbiAgICBjb25zdCBjZWxsTW91c2VvdmVyID0gZnVuY3Rpb24oZCkge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTtcbiAgICAgICAgZG1hcC5vYmplY3RzLmhlYXRtYXAuY2VsbE1vdXNlb3ZlcihkLCBzdmcsIHNlbGVjdGVkKTsgLy8gY2FsbCB0aGUgZGVmYXVsdCBoZWF0bWFwIG1vdXNlIG92ZXIgZXZlbnQgZmlyc3RcbiAgICAgICAgbGV0IHRpc3N1ZSA9IHRpc3N1ZURpY3RbZC54XT09PXVuZGVmaW5lZD9kLng6dGlzc3VlRGljdFtkLnhdLnRpc3N1ZVNpdGVEZXRhaWw7XG4gICAgICAgIGxldCBnZW5lID0gZ2VuZURpY3RbZC55XT09PXVuZGVmaW5lZD9kLnk6Z2VuZURpY3RbZC55XS5nZW5lU3ltYm9sO1xuXG4gICAgICAgIHRvb2x0aXAuc2hvdyhgVGlzc3VlOiAke3Rpc3N1ZX08YnIvPiBHZW5lOiAke2dlbmV9PGJyLz4gTWVkaWFuIFRQTTogJHtwYXJzZUZsb2F0KGQuZGlzcGxheVZhbHVlLnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oNCl9YClcblxuICAgIH07XG5cbiAgICBjb25zdCBjZWxsTW91c2VvdXQgPSBmdW5jdGlvbihkKXtcbiAgICAgICAgc3ZnLnNlbGVjdEFsbChcIipcIikuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCBmYWxzZSk7XG4gICAgICAgIHRvb2x0aXAuaGlkZSgpO1xuICAgIH07XG5cbiAgICAvLyBnZW5lIGJveHBsb3QgcHJlcDogYXNzaWduIGEgY29sb3JJbmRleCB0byBlYWNoIGdlbmVcbiAgICBjb25zdCBjb2xvcnMgPSBjb2xvckNoYXJ0KCk7XG4gICAga2V5cyhnZW5lRGljdCkuZm9yRWFjaCgoZCwgaSk9PntnZW5lRGljdFtkXS5jb2xvciA9IGNvbG9yc1tpXX0pO1xuICAgIGNvbnN0IHlsYWJlbENsaWNrID0gZnVuY3Rpb24oZCl7XG4gICAgICAgIGxldCBzID0gc2VsZWN0KHRoaXMpO1xuICAgICAgICBsZXQgYWN0aW9uID0gXCJcIjtcblxuICAgICAgICAvLyB0b2dnbGVzIGNsaWNrL3VuY2xpY2sgZXZlbnRzXG4gICAgICAgIC8vIGlmIHRoZSBET00gaGFzIHRoZSBjbGFzcyBcImNsaWNrZWRcIiwgdGhlbiB1bmNsaWNrIGl0XG4gICAgICAgIGlmIChzLmNsYXNzZWQoXCJjbGlja2VkXCIpKSB7XG4gICAgICAgICAgICBzLmNsYXNzZWQoXCJjbGlja2VkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIGFjdGlvbiA9IFwiZGVsZXRlXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlbHNlIGNsaWNrIGl0XG4gICAgICAgICAgICAvLyBzZWxlY3RBbGwoXCIuY2xpY2tlZFwiKS5jbGFzc2VkKFwiY2xpY2tlZFwiLCBmYWxzZSk7IC8vIGZpcnN0IGNsZWFycyBhbGwgY2xpY2tlZCBsYWJlbHMgaWYgYW55XG4gICAgICAgICAgICBzLmNsYXNzZWQoXCJjbGlja2VkXCIsIHRydWUpOyAvLyBjbGljayB0aGlzIERPTSBlbGVtZW50XG4gICAgICAgICAgICBhY3Rpb24gPSBcImFkZFwiO1xuICAgICAgICB9XG4gICAgICAgIF9yZW5kZXJWaW9saW5QbG90KGFjdGlvbiwgZCwgZ2VuZURpY3QsIHRpc3N1ZURpY3QsIGRtYXAsIHVybHMpO1xuICAgIH07XG5cbiAgICBzdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgY2VsbE1vdXNlb3ZlcilcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgY2VsbE1vdXNlb3V0KTtcblxuICAgIHN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIilcbiAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgICAub24oXCJjbGlja1wiLCB5bGFiZWxDbGljayk7XG59XG5cbi8qKlxuICogcmVuZGVycyB0aGUgZ2VuZSBleHByZXNzaW9uIHZpb2xpbiBwbG90XG4gKiBAcGFyYW0gYWN0aW9uIHtFTlVNfSBhZGQsIG5ldywgb3IgZGVsZXRlXG4gKiBAcGFyYW0gZ2VuZSB7U3RyaW5nfSBnZW5jb2RlIElEXG4gKiBAcGFyYW0gZ2VuZURpY3Qge0RpY3Rpb25hcnl9IGdlbmNvZGUgSUQgPT4gZ2VuZSBvYmplY3Qgd2l0aCBhdHRyaWJ1dGU6IGluZGV4XG4gKiBAcGFyYW0gdGlzc3VlRGljdCB7RGljdGlvbmFyeX0gdGlzc3VlIG9iamVjdHMgaW5kZXhlZCBieSB0aXNzdWUgSURcbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuICovXG5mdW5jdGlvbiBfcmVuZGVyVmlvbGluUGxvdChhY3Rpb24sIGdlbmUsIGdlbmVEaWN0LCB0aXNzdWVEaWN0LCBkbWFwLCB1cmxzPWdldEd0ZXhVcmxzKCkpIHtcbiAgICAvLyBhY3Rpb25cbiAgICBzd2l0Y2goYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgXCJkZWxldGVcIjoge1xuICAgICAgICAgICAgZG1hcC5kYXRhLmV4dGVybmFsID0gZG1hcC5kYXRhLmV4dGVybmFsLmZpbHRlcigoZCk9PmQuZ2VuY29kZUlkIT1nZW5lKTtcbiAgICAgICAgICAgIF9yZW5kZXJWaW9saW5IZWxwZXIoZG1hcC5kYXRhLmV4dGVybmFsLCBkbWFwLCB0aXNzdWVEaWN0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJhZGRcIjoge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gdXJscy5nZW5lRXhwICsgZ2VuZTtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9ycyA9IHt9O1xuICAgICAgICAgICAgY29sb3JzW2dlbmVdID0gZ2VuZURpY3RbZ2VuZV0uY29sb3I7XG4gICAgICAgICAgICBjb25zdCB0bGlzdCA9IGRtYXAub2JqZWN0cy5oZWF0bWFwLnhTY2FsZS5kb21haW4oKTtcbiAgICAgICAgICAgIGpzb24odXJsKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkbWFwLmRhdGEuZXh0ZXJuYWwgPT09IHVuZGVmaW5lZCkgZG1hcC5kYXRhLmV4dGVybmFsID0gW107XG4gICAgICAgICAgICAgICAgICAgIGRtYXAuZGF0YS5leHRlcm5hbCA9IGRtYXAuZGF0YS5leHRlcm5hbFxuICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluKGQsIHRydWUsIGNvbG9ycykpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChkKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbHRlcmluZyB0aGUgdGlzc3VlcyB0aGF0IGFyZW4ndCBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0bGlzdC5pbmRleE9mKGQuZ3JvdXApID4gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgX3JlbmRlclZpb2xpbkhlbHBlcihkbWFwLmRhdGEuZXh0ZXJuYWwsIGRtYXAsIHRpc3N1ZURpY3QpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycil7Y29uc29sZS5lcnJvcihlcnIpfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJhY3Rpb24gbm90IHVuZGVyc3Rvb2QuXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJWaW9saW5IZWxwZXIoZGF0YSwgZG1hcCwgdGlzc3VlRGljdCl7XG4gICAgLy8gcGxvdCBjb25maWd1cmF0aW9uc1xuICAgIGNvbnN0IGlkID0ge1xuICAgICAgICByb290OiBcInZpb2xpblJvb3RcIiwgLy8gdGhlIHJvb3QgPGRpdj4gSURcbiAgICAgICAgdG9vbHRpcDogXCJ2aW9saW5Ub29sdGlwXCIsXG4gICAgICAgIHRvb2xiYXI6IFwidmlvbGluVG9vbGJhclwiLFxuICAgICAgICBjbG9uZTogXCJ2aW9saW5DbG9uZVwiLFxuICAgICAgICBjaGFydDogXCJ2aW9saW5QbG90XCIsXG4gICAgICAgIHN2ZzogXCJ2aW9saW5TdmdcIixcbiAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgc2F2ZTogXCJ2aW9saW5TYXZlXCJcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBlcnJvci1jaGVja2luZyB0aGUgcmVxdWlyZWQgRE9NIGVsZW1lbnRzXG4gICAgY29uc3Qgcm9vdElkID0gYCMke2lkLnJvb3R9YDtcbiAgICBjb25zdCB0b29sdGlwSWQgPSBgIyR7aWQudG9vbHRpcH1gO1xuICAgIGlmICgkKHJvb3RJZCkubGVuZ3RoID09IDApIHRocm93ICdWaW9saW4gUGxvdCBFcnJvcjogcm9vdElkIGRvZXMgbm90IGV4aXN0Lic7XG4gICAgaWYgKCQodG9vbHRpcElkKS5sZW5ndGggPT0gMCkgJCgnPGRpdi8+JykuYXR0cignaWQnLCBpZC50b29sdGlwKS5hcHBlbmRUbygkKCdib2R5JykpOyAvLyBjcmVhdGUgaXQgaWYgbm90IGFscmVhZHkgcHJlc2VudCBvbiB0aGUgZGVtbyBkb2N1bWVudFxuXG4gICAgLy8gY2xlYXIgcHJldmlvdXNseSByZW5kZXJlZCBwbG90XG4gICAgc2VsZWN0KHJvb3RJZCkuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcblxuICAgIC8vIHJlYnVpbGQgdGhlIGRvbSBjb21wb25lbnRzIHdpdGhpbiB0aGUgcm9vdCBkaXZcbiAgICBbXCJ0b29sYmFyXCIsIFwiY2hhcnRcIiwgXCJjbG9uZVwiXS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgICQoJzxkaXYvPicpLmF0dHIoXCJpZFwiLCBpZFtrZXldKS5hcHBlbmRUbygkKHJvb3RJZCkpO1xuICAgIH0pO1xuXG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPT0gMCl7IC8vIG5vIGV4cHJlc3Npb24gZGF0YSwgbm8gbmVlZCB0byBwcm9jZWVkXG4gICAgICAgIHNlbGVjdChyb290SWQpLnN0eWxlKFwib3BhY2l0eVwiLCAwLjApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHRpc3N1ZU9yZGVyIGlzIGEgbGlzdCBvZiB0aXNzdWUgb2JqZWN0cyB7aWQ6ZGlzcGxheSBuYW1lfSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgeCBheGlzIG9mIHRoZSBoZWF0IG1hcC5cbiAgICBsZXQgdGlzc3VlT3JkZXIgPSBkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUuZG9tYWluKCkubWFwKChkLCBpKSA9PiB7cmV0dXJuIHtpZDpkLCBuYW1lOnRpc3N1ZURpY3RbZF0udGlzc3VlU2l0ZURldGFpbH19KTtcbiAgICBjb25zdCBnZW5lcyA9IGRhdGEucmVkdWNlKChhcnIsIGQpPT57YXJyW2QubGFiZWxdPTE7IHJldHVybiBhcnJ9LCB7fSk7XG4gICAgY29uc3QgZ0NvdW50cyA9IE9iamVjdC5rZXlzKGdlbmVzKS5sZW5ndGg7XG5cblxuICAgIGlmIChnQ291bnRzID09IDApe1xuICAgICAgICBzZWxlY3Qocm9vdElkKS5zdHlsZShcIm9wYWNpdHlcIiwgMC4wKTtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2VsZWN0KHJvb3RJZCkuc3R5bGUoXCJvcGFjaXR5XCIsIDEuMCk7IC8vIG1ha2VzIHRoZSBib3hwbG90IHNlY3Rpb24gdmlzaWJsZVxuICAgIGNvbnN0IG1hcmdpbiA9IF9zZXRWaW9saW5QbG90TWFyZ2lucyg1MCwgNTAsIDE1MCwgZG1hcC5jb25maWcucGFuZWxzLm1haW4ueCk7XG4gICAgbGV0IHdpZHRoID0gMjAgKiBPYmplY3Qua2V5cyhnZW5lcykubGVuZ3RoICogdGlzc3VlT3JkZXIubGVuZ3RoO1xuICAgIHdpZHRoID0gd2lkdGggPCBkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi53PyBkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi53OiB3aWR0aDtcbiAgICAvLyB3aWR0aCA9IHdpZHRoIDwgMzAwPzMwMDogd2lkdGg7XG4gICAgY29uc3QgZGltID0gX3NldFZpb2xpblBsb3REaW1lbnNpb25zKHdpZHRoLCAxNTAsIG1hcmdpbik7XG5cblxuICAgIC8vIHJlbmRlciB0aGUgdmlvbGluXG4gICAgY29uc3QgZG9tID0gc2VsZWN0KGAjJHtpZC5jaGFydH1gKVxuICAgICAgICAgICAgICAgIC8vIC5zdHlsZShcIm9wYWNpdHlcIiwgMS4wKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGRpbS5vdXRlcldpZHRoKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGRpbS5vdXRlckhlaWdodClcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIGlkLnN2ZylcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7bWFyZ2luLnRvcH0pYCk7XG5cbiAgICBjb25zdCB2aW9saW4gPSBuZXcgR3JvdXBlZFZpb2xpbihkYXRhKTtcbiAgICBjb25zdCB0b29sdGlwID0gdmlvbGluLmNyZWF0ZVRvb2x0aXAoaWQudG9vbHRpcCk7XG4gICAgY29uc3QgdG9vbGJhciA9IHZpb2xpbi5jcmVhdGVUb29sYmFyKGlkLnRvb2xiYXIsIHRvb2x0aXApO1xuICAgIHRvb2xiYXIuY3JlYXRlRG93bmxvYWRTdmdCdXR0b24oaWQuYnV0dG9ucy5zYXZlLCBpZC5zdmcsIGAke2lkLnJvb3R9LXNhdmUuc3ZnYCwgaWQuY2xvbmUpO1xuXG4gICAgY29uc3Qgc2hvd0RpdmlkZXIgPSBnQ291bnRzID09IDE/IGZhbHNlOiB0cnVlO1xuICAgIHZpb2xpbi5yZW5kZXIoXG4gICAgICAgIGRvbSxcbiAgICAgICAgZGltLndpZHRoLFxuICAgICAgICBkaW0uaGVpZ2h0LFxuICAgICAgICAwLjMwLFxuICAgICAgICB0aXNzdWVPcmRlci5tYXAoKGQpPT5kLmlkKSxcbiAgICAgICAgW10sXG4gICAgICAgIFwibG9nMTAoVFBNKVwiLFxuICAgICAgICB0cnVlLFxuICAgICAgICAzMCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIDAsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBzaG93RGl2aWRlcixcbiAgICAgICAgdHJ1ZSk7XG5cbiAgICAvLyBjaGVjayBhbmQgYWRqdXN0IHRoZSBzdmcgd2lkdGhcbiAgICBjb25zdCB2aW9saW5MZWdlbmRXID0gTnVtYmVyKGRvbS5zZWxlY3QoJyN2aW9saW5MZWdlbmQnKS5zZWxlY3QoJ3JlY3QnKS5hdHRyKCd3aWR0aCcpKTtcbiAgICBsZXQgc3ZnVyA9IE51bWJlcihzZWxlY3QoYCMke2lkLmNoYXJ0fWApLnNlbGVjdCgnc3ZnJykuYXR0cignd2lkdGgnKSk7XG4gICAgc3ZnVyA9IHN2Z1cgPCB2aW9saW5MZWdlbmRXICsgMTUwP3Zpb2xpbkxlZ2VuZFcgKyAxNTA6c3ZnVztcbiAgICBzZWxlY3QoYCMke2lkLmNoYXJ0fWApLnNlbGVjdCgnc3ZnJykuYXR0cignd2lkdGgnLCBzdmdXKTtcblxuICAgIF9hZGRWaW9saW5UaXNzdWVDb2xvckJhbmQodmlvbGluLCBkb20sIHRpc3N1ZURpY3QsIFwiYm90dG9tXCIpO1xuICAgIF9jaGFuZ2VWaW9saW5YTGFiZWwoZG9tLCB0aXNzdWVEaWN0KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIG1hcmdpbnMgb2YgdGhlIHZpb2xpbiBwbG90XG4gKiBAcGFyYW0gdG9wIHtJbnRlZ2VyfVxuICogQHBhcmFtIHJpZ2h0IHtJbnRlZ2VyfVxuICogQHBhcmFtIGJvdHRvbSB7aW50ZWdlcn1cbiAqIEBwYXJhbSBsZWZ0IHtJbnRlZ2VyfVxuICogQHJldHVybnMge3t0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIGxlZnQ6IG51bWJlcn19XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfc2V0VmlvbGluUGxvdE1hcmdpbnModG9wPTUwLCByaWdodD01MCwgYm90dG9tPTUwLCBsZWZ0PTUwKXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgcmlnaHQ6IHJpZ2h0LFxuICAgICAgICBib3R0b206IGJvdHRvbSxcbiAgICAgICAgbGVmdDogbGVmdFxuICAgIH07XG59XG5cbi8qKlxuICogU2V0IHRoZSBkaW1lbnNpb25zIG9mIHRoZSB2aW9saW4gcGxvdFxuICogQHBhcmFtIHdpZHRoIHtJbnRlZ2VyfVxuICogQHBhcmFtIGhlaWdodCB7SW50ZWdlcn1cbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCBhdHRyOiB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRcbiAqIEByZXR1cm5zIHt7d2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG91dGVyV2lkdGg6IG51bWJlciwgb3V0ZXJIZWlnaHQ6IG51bWJlcn19XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfc2V0VmlvbGluUGxvdERpbWVuc2lvbnMod2lkdGg9MTIwMCwgaGVpZ2h0PTI1MCwgbWFyZ2luPV9zZXRNYXJnaW5zKCkpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIG91dGVyV2lkdGg6IHdpZHRoICsgKG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KSxcbiAgICAgICAgb3V0ZXJIZWlnaHQ6IGhlaWdodCArIChtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSlcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9hZGRWaW9saW5UaXNzdWVDb2xvckJhbmQocGxvdCwgZG9tLCB0aXNzdWVEaWN0LCBsb2M9XCJ0b3BcIil7XG4gICAgIC8vLy8vIGFkZCB0aXNzdWUgY29sb3JzXG4gICAgY29uc3QgdGlzc3VlRyA9IGRvbS5hcHBlbmQoXCJnXCIpO1xuXG4gICAgdGlzc3VlRy5zZWxlY3RBbGwoXCIudGNvbG9yXCIpLmRhdGEocGxvdC5zY2FsZS54LmRvbWFpbigpKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuY2xhc3NlZChcInRjb2xvclwiLCB0cnVlKVxuICAgICAgICAuYXR0cihcInhcIiwgKGcpPT5wbG90LnNjYWxlLngoZykgKVxuICAgICAgICAuYXR0cihcInlcIiwgKGcpPT5sb2M9PVwidG9wXCI/cGxvdC5zY2FsZS55LnJhbmdlKClbMV0tNTpwbG90LnNjYWxlLnkucmFuZ2UoKVswXS01KVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIChnKT0+cGxvdC5zY2FsZS54LmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCA1KVxuICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgMClcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZyk9PmAjJHt0aXNzdWVEaWN0W2ddLmNvbG9ySGV4fWApXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMC43KTtcbn1cblxuZnVuY3Rpb24gX2NoYW5nZVZpb2xpblhMYWJlbChkb20sIHRpc3N1ZURpY3Qpe1xuICAgIC8qKioqKiBDaGFuZ2Ugcm93IGxhYmVscyB0byB0aXNzdWUgbmFtZXMgKioqKiovXG4gICAgZG9tLnNlbGVjdChcIi52aW9saW4teC1heGlzXCIpLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgLnRleHQoKGQpID0+IHRpc3N1ZURpY3RbZF09PT11bmRlZmluZWQ/ZDp0aXNzdWVEaWN0W2RdLnRpc3N1ZVNpdGVEZXRhaWwpO1xufVxuXG4vKipcbiAqIEFkZCB0aGUgdG9vbGJhclxuICogQHBhcmFtIGRtYXAge0RlbmRyb0hlYXRtYXB9XG4gKiBAcGFyYW0gaWRzIHtEaWN0aW9uYXJ5fSBvZiBkb20gSURzIHdpdGggYnV0dG9uc1xuICogQHBhcmFtIHRpc3N1ZURpY3Qge0RpY3Rpb25hcnl9IG9mIHRpc3N1ZSBvYmplY3RzIGluZGV4ZWQgYnkgdGlzc3VlIElEXG4gKiBAcGFyYW0gdXJscyB7RGljdGlvbmFyeX0gb2YgR1RFeCB3ZWIgc2VydmljZSBVUkxzXG4gKiBAcGFyYW0gZmlsdGVyR2VuZXMge0Jvb2xlYW59XG4gKiBAcGFyYW0gcVRpc3N1ZSB7U3RyaW5nfSBvZiB1c2VyLWRlZmluZWQgcXVlcnkgdGlzc3Vlc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2FkZFRvb2xCYXIoZG1hcCwgaWRzLCB0aXNzdWVEaWN0LCB1cmxzPWdldEd0ZXhVcmxzKCksIGZpbHRlckdlbmVzPXVuZGVmaW5lZCwgcVRpc3N1ZT11bmRlZmluZWQpe1xuICAgIGxldCB0b29sYmFyID0gZG1hcC5jcmVhdGVUb29sYmFyKGlkcy50b29sYmFyLCBkbWFwLnRvb2x0aXApO1xuICAgIHRvb2xiYXIuY3JlYXRlRG93bmxvYWRTdmdCdXR0b24oaWRzLmJ1dHRvbnMuc2F2ZSwgaWRzLnN2ZywgYCR7aWRzLnJvb3R9LXNhdmUuc3ZnYCwgaWRzLmNsb25lKTtcblxuICAgIGNvbnN0IF9fYWRkRmlsdGVyID0gKCk9PntcbiAgICAgICAgLy8gc28gZmFyIHRoaXMgaXMgb25seSBhcHBsaWNhYmxlIGZvciB0b3BFeHByZXNzZWQgZ2VuZSBoZWF0bWFwXG4gICAgICAgIGNvbnN0IGlkID0gaWRzLmJ1dHRvbnMuZmlsdGVyO1xuICAgICAgICB0b29sYmFyLmNyZWF0ZUJ1dHRvbihpZCwgJ2ZhLWZpbHRlcicpO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIHRvZ2dsZSB0aGUgYXBwbGllZCBmaWx0ZXJcbiAgICAgICAgICAgICAgICBsYXVuY2hUb3BFeHByZXNzZWQocVRpc3N1ZSwgaWRzLnJvb3QsIGlkcy52aW9saW4sIHVybHMsICFmaWx0ZXJHZW5lcyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaWYoZmlsdGVyR2VuZXMpIHRvb2xiYXIudG9vbHRpcC5zaG93KFwiSW5jbHVkZSBNaXRvY2hvbmRyaWFsIEdlbmVzXCIpO1xuICAgICAgICAgICAgICAgIGVsc2UgdG9vbGJhci50b29sdGlwLnNob3coXCJFeGNsdWRlIE1pdG9jaG9uZHJpYWwgR2VuZXNcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0b29sYmFyLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IF9fYWRkU29ydFRpc3N1ZXMgPSAoKT0+e1xuICAgICAgICBjb25zdCBpZCA9IGlkcy5idXR0b25zLnNvcnQ7XG4gICAgICAgIHRvb2xiYXIuY3JlYXRlQnV0dG9uKGlkLCAnZmEtc29ydC1hbHBoYS1kb3duJyk7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gaGlkZXMgdGhlIHRpc3N1ZSBkZW5kcm9ncmFtXG4gICAgICAgICAgICAgICAgc2VsZWN0KFwiI1wiICsgZG1hcC5jb25maWcucGFuZWxzLnRvcC5pZCkuc3R5bGUoXCJkaXNwbGF5XCIsIFwiTm9uZVwiKTtcbiAgICAgICAgICAgICAgICAvLyBzb3J0IHRpc3N1ZXNcbiAgICAgICAgICAgICAgICBsZXQgeGxpc3QgPSBkbWFwLm9iamVjdHMuaGVhdG1hcC54TGlzdC5zb3J0KCk7XG4gICAgICAgICAgICAgICAgX3NvcnRUaXNzdWVzKHhsaXN0LCBkbWFwLCB0aXNzdWVEaWN0KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0b29sYmFyLnRvb2x0aXAuc2hvdyhcIlNvcnQgVGlzc3VlcyBBbHBoYWJldGljYWxseVwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRvb2xiYXIudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBjb25zdCBfX2FkZENsdXN0ZXJUaXNzdWVzID0gKCk9PntcbiAgICAgICAgY29uc3QgaWQgPSBpZHMuYnV0dG9ucy5jbHVzdGVyO1xuICAgICAgICB0b29sYmFyLmNyZWF0ZUJ1dHRvbihpZCwgYGZhLWNvZGUtYnJhbmNoYCk7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdChcIiNcIiArIGRtYXAuY29uZmlnLnBhbmVscy50b3AuaWQpLnN0eWxlKFwiZGlzcGxheVwiLCBcIkJsb2NrXCIpOyAgLy8gc2hvd3MgdGhlIHRpc3N1ZSBkZW5kcm9ncmFtXG4gICAgICAgICAgICBsZXQgeGxpc3QgPSBkbWFwLm9iamVjdHMuY29sdW1uVHJlZS54U2NhbGUuZG9tYWluKCk7XG4gICAgICAgICAgICBfc29ydFRpc3N1ZXMoeGxpc3QsIGRtYXAsIHRpc3N1ZURpY3QpO1xuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHRvb2xiYXIudG9vbHRpcC5zaG93KFwiQ2x1c3RlciBUaXNzdWVzXCIpO1xuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgdG9vbGJhci50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoZmlsdGVyR2VuZXMgIT09IHVuZGVmaW5lZCkgX19hZGRGaWx0ZXIoKTtcbiAgICBfX2FkZFNvcnRUaXNzdWVzKCk7XG4gICAgX19hZGRDbHVzdGVyVGlzc3VlcygpO1xufVxuXG4vKipcbiAqIHVwZGF0ZSB0aGUgaGVhdG1hcCBiYXNlZCBvbiB0aGUgb3JkZXIgb2YgdGhlIHhsaXN0XG4gKiBkZXBlbmRlbmNpZXM6IENTUyBjbGFzc2VzIGZyb20gZXhwcmVzc01hcC5jc3NcbiAqIEBwYXJhbSB4bGlzdCB7SGVhdG1hcCBYTGlzdH1cbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuICogQHBhcmFtIHRpc3N1ZURpY3Qge0RpY3Rpb25hcnl9IG9mIHRpc3N1ZSBvYmplY3RzIGluZGV4ZWQgYnkgdGlzc3VlIElEIHdpdGggYXR0ciwgdGlzc3VlX25hbWVcbiAqL1xuZnVuY3Rpb24gX3NvcnRUaXNzdWVzICh4bGlzdCwgZG1hcCwgdGlzc3VlRGljdCl7XG4gICAgLy8gY2hlY2sgaWYgdGhlcmUncyBhIHF1ZXJ5IHRpc3N1ZSwgZS5nLiB0b3AtZXhwcmVzc2VkIGhlYXRtYXBcbiAgICBsZXQgcUlkID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHFUaXNzdWUgPSBzZWxlY3QoXCIuZXhwLW1hcC14bGFiZWwucXVlcnlcIik7XG4gICAgaWYgKCFxVGlzc3VlLmVtcHR5KCkpIHFJZCA9IHFUaXNzdWUuZGF0dW0oKTtcblxuICAgIC8vIHVwZGF0ZSB0aGUgaGVhdG1hcFxuICAgIGNvbnN0IGRvbSA9IHNlbGVjdChcIiNcIitkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi5pZCk7XG4gICAgY29uc3QgZGltZW5zaW9ucyA9IGRtYXAuY29uZmlnLnBhbmVscy5tYWluO1xuICAgIGRtYXAub2JqZWN0cy5oZWF0bWFwLnJlZHJhdyhkb20sIHhsaXN0LCBkbWFwLm9iamVjdHMuaGVhdG1hcC55TGlzdCwgZGltZW5zaW9ucyk7XG5cbiAgICAvLyBjaGFuZ2UgdGhlIHRpc3N1ZSBkaXNwbGF5IHRleHQgdG8gdGlzc3VlIG5hbWVzXG4gICAgc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpXG4gICAgICAgIC50ZXh0KChkKSA9PiB0aXNzdWVEaWN0W2RdPT09dW5kZWZpbmVkP2Q6dGlzc3VlRGljdFtkXS50aXNzdWVTaXRlRGV0YWlsKVxuICAgICAgICAuY2xhc3NlZChcInF1ZXJ5XCIsIGZhbHNlKTtcbiAgICBfYWRkVGlzc3VlQ29sb3JzKGRtYXAsIHRpc3N1ZURpY3QpO1xuXG4gICAgLy8gc3R5bGUgdGhlIHF1ZXJ5IHRpc3N1ZSBpZiBmb3VuZFxuICAgIGlmIChxSWQhPT11bmRlZmluZWQpIF9zdHlsZVNlbGVjdGVkVGlzc3VlKHFJZCk7XG5cbiAgICAvLyBoaWRlIHRoZSB2aW9saW4gcGxvdFxuICAgIHNlbGVjdCgnI3Zpb2xpblJvb3QnKS5zdHlsZShcIm9wYWNpdHlcIiwgMC4wKTtcblxuICAgIC8vIGRlc2VsZWN0IGdlbmVzXG4gICAgc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpLmNsYXNzZWQoXCJjbGlja2VkXCIsIGZhbHNlKTtcbiAgICBkbWFwLmRhdGEuZXh0ZXJuYWwgPSB1bmRlZmluZWQ7XG5cbn1cblxuZXhwb3J0IHZhciBCYXRjaEdlbmVFeHByZXNzaW9uID0ge1xuICAgIGNyZWF0ZURhdGFzZXRNZW51OiBjcmVhdGVEYXRhc2V0TWVudSxcbiAgICBsYXVuY2hUb3BFeHByZXNzZWQ6IGxhdW5jaFRvcEV4cHJlc3NlZCxcbiAgICBsYXVuY2g6IGxhdW5jaCxcbiAgICBzZWFyY2hCeUlkOiBzZWFyY2hCeUlkXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQge2pzb259IGZyb20gXCJkMy1mZXRjaFwiO1xuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cmFuZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtnZXRHdGV4VXJscywgcGFyc2VUaXNzdWVzfSBmcm9tIFwiLi9ndGV4RGF0YVBhcnNlclwiO1xuXG4vKipcbiAqIENyZWF0ZSB0aGUgdGlzc3VlIChkYXRhc2V0KSBkcm9wZG93biBtZW51IHVzaW5nIHNlbGVjdDJcbiAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgZG9tIElEIG9mIHRoZSBtZW51XG4gKiBAcGFyYW0gdXJsIHtTdHJpbmd9IHRoZSB0aXNzdWUgd2ViIHNlcnZpY2UgdXJsXG4gKiBkZXBlbmRlbmN5OiBzZWxlY3QyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUaXNzdWVNZW51KGRvbUlkLCB1cmwgPSBnZXRHdGV4VXJscygpLnRpc3N1ZSl7XG4gICAganNvbih1cmwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpe1xuICAgICAgICAgICAgbGV0IHRpc3N1ZXMgPSBwYXJzZVRpc3N1ZXMocmVzdWx0cyk7XG4gICAgICAgICAgICB0aXNzdWVzLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgICAgICAgICBkLmlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgICAgICAgICAgZC50ZXh0ID0gZC50aXNzdWVTaXRlRGV0YWlsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aXNzdWVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICBpZihhLnRpc3N1ZVNpdGVEZXRhaWwgPCBiLnRpc3N1ZVNpdGVEZXRhaWwpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICBpZihhLnRpc3N1ZVNpdGVEZXRhaWwgPiBiLnRpc3N1ZVNpdGVEZXRhaWwpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGV4dGVybmFsIGxpYnJhcnkgZGVwZW5kZW5jeTogc2VsZWN0MlxuICAgICAgICAgICAgalF1ZXJ5KGAjJHtkb21JZH1gKS5zZWxlY3QyKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBhIGRhdGEgc2V0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0aXNzdWVzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtjb25zb2xlLmVycm9yKGVycil9KTtcbn1cblxuLyoqXG4gKiBCdWlsZCB0aGUgdHdvLWxldmVsIGNoZWNrYm94LXN0eWxlIHRpc3N1ZSBtZW51XG4gKiBkZXBlbmRlbmNpZXM6IHRpc3N1ZUdyb3VwLmNzcyBjbGFzc2VzXG4gKiBAcGFyYW0gZ3JvdXBzIHtEaWN0aW9uYXJ5fSBvZiBsaXN0cyBvZiB0aXNzdWVzIGluZGV4ZWQgYnkgdGhlIGdyb3VwIG5hbWUsIHRoaXMgaXMgY3JlYXRlZCBieSBndGV4RGF0YVBhcnNlcjpwYXJzZVRpc3N1ZVNpdGVzKClcbiAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSA8ZGl2PiBJRFxuICogQHBhcmFtIGZvckVxdGwge0Jvb2xlYW59XG4gKiBAcGFyYW0gY2hlY2tBbGwge0Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRvIHN0YXJ0IGFsbCBvcHRpb25zIGNoZWNrZWRcbiAqIEBwYXJhbSBzZWN0aW9ucyB7SW50ZWdlcn0gTnVtYmVyIG9mIHNlY3Rpb25zIHRvIHNwbGl0IG1lbnUgaW50b1xuICogRGVwZW5kZW5jaWVzOiBqUXVlcnksIEJvb3RzdHJhcCwgdGlzc3VlR3JvdXAuY3NzXG4gKiB0b2RvOiBhZGQgcmVzZXQgYW5kIHNlbGVjdCBhbGwgb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGlzc3VlR3JvdXBNZW51KGdyb3VwcywgZG9tSWQsIGZvckVxdGw9ZmFsc2UsIGNoZWNrQWxsPWZhbHNlLCBzZWN0aW9ucz00KXtcbiAgICBjb25zdCBtYWluQ2xhc3M9XCJ0aXNzdWUtZ3JvdXAtbWFpbi1sZXZlbFwiO1xuICAgIGNvbnN0IHN1YkNsYXNzID0gXCJ0aXNzdWUtZ3JvdXAtc3ViLWxldmVsXCI7XG4gICAgY29uc3QgbGFzdFNpdGVDbGFzcyA9IFwibGFzdC1zaXRlXCI7XG5cbiAgICAvLyBlcmFzZSBldmVyeXRoaW5nIGluIGRvbUlkIGluIGNhc2UgaXQgaXNuJ3QgZW1wdHlcbiAgICBzZWxlY3QoYCMke2RvbUlkfWApLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG5cbiAgICAvLyBhZGQgY2hlY2sgYWxsIGFuZCByZXNldCBvcHRpb25zXG4gICAgY29uc3QgJGFsbFRpc3N1ZURpdiA9IGpRdWVyeSgnPGRpdi8+JykuYXR0cignY2xhc3MnLCAnY29sLXhzLTEyIGNvbC1tZC0xMicpLmFwcGVuZFRvKGpRdWVyeShgIyR7ZG9tSWR9YCkpO1xuICAgIGlmIChmb3JFcXRsKXtcbiAgICAgICAgalF1ZXJ5KGA8bGFiZWwgY2xhc3M9JHttYWluQ2xhc3N9PmAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJhbGxUaXNzdWVzXCIgdmFsdWU9XCJyZXNldFwiPiBSZXNldCAnICtcbiAgICAgICAgJzwvbGFiZWw+PGJyLz4nKS5hcHBlbmRUbygkYWxsVGlzc3VlRGl2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBqUXVlcnkoYDxsYWJlbCBjbGFzcz0ke21haW5DbGFzc30+YCArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImFsbFRpc3N1ZXNcIiB2YWx1ZT1cImFsbFwiPiBBbGwgPC9sYWJlbD4gJyArXG4gICAgICAgIGA8bGFiZWwgY2xhc3M9JHttYWluQ2xhc3N9PmAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJhbGxUaXNzdWVzXCIgdmFsdWU9XCJyZXNldFwiPiBSZXNldCAnICtcbiAgICAgICAgJzwvbGFiZWw+PGJyLz4nKS5hcHBlbmRUbygkYWxsVGlzc3VlRGl2KTtcbiAgICB9XG5cblxuICAgIC8vIGNoZWNrIGFsbCBvciByZXNldCBldmVudHNcbiAgICBqUXVlcnkoJ2lucHV0W25hbWU9XCJhbGxUaXNzdWVzXCJdJykuY2hhbmdlKGZ1bmN0aW9uKCl7XG4gICAgICAgIGxldCB2YWwgPSBqUXVlcnkodGhpcykudmFsKCk7XG4gICAgICAgIHN3aXRjaCh2YWwpe1xuICAgICAgICAgICAgY2FzZSAnYWxsJzoge1xuICAgICAgICAgICAgICAgIGpRdWVyeSgnLnRpc3N1ZUdyb3VwJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIGpRdWVyeSgnLnRpc3N1ZVN1Ykdyb3VwJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmVzZXQnOiB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5KCcudGlzc3VlR3JvdXAnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGpRdWVyeSgnLnRpc3N1ZVN1Ykdyb3VwJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHNvcnQgdGhlIHRpc3N1ZSBncm91cHMgYWxwaGFiZXRpY2FsbHlcbiAgICBsZXQgZ3JvdXBOYW1lcyA9IE9iamVjdC5rZXlzKGdyb3Vwcykuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAvLyByZWd1bGFyIHNvcnRpbmcsIGV4Y2VwdCB0aGF0ICdCcmFpbicgZ3JvdXAgd2lsbCBhbHdheXMgYmUgZmlyc3RcbiAgICAgICAgaWYgKGEgPT0gJ0JyYWluJykgcmV0dXJuIC0xO1xuICAgICAgICBlbHNlIGlmIChiID09ICdCcmFpbicpIHJldHVybiAxO1xuICAgICAgICBlbHNlIGlmIChhIDwgYikgcmV0dXJuIC0xO1xuICAgICAgICBlbHNlIGlmIChhID4gYikgcmV0dXJuIDE7XG4gICAgfSk7XG5cbiAgICAvLyB0b3RhbCBudW1iZXIgb2Ygcm93cyB0aGF0IHdpbGwgYmUgZ2VuZXJhdGVkXG4gICAgbGV0IHJvd3MgPSBPYmplY3Qua2V5cyhncm91cHMpLnJlZHVjZSgoYSxiKT0+e1xuICAgICAgICBpZiAoZ3JvdXBzW2JdLmxlbmd0aD4xKSByZXR1cm4gYSsxK2dyb3Vwc1tiXS5sZW5ndGg7XG4gICAgICAgIGVsc2UgcmV0dXJuIGErZ3JvdXBzW2JdLmxlbmd0aDtcbiAgICB9LCAwKTtcbiAgICBsZXQgcm93c1BlclNlY3Rpb24gPSBNYXRoLmZsb29yKHJvd3Mvc2VjdGlvbnMpO1xuICAgIGxldCByb3dzUmVtYWluID0gcm93cyAlIHNlY3Rpb25zO1xuICAgIGxldCBjb2xTaXplID0gTWF0aC5mbG9vcigxMi9zZWN0aW9ucyk7IC8vIGZvciBib290c3RyYXAgZ3JpZFxuICAgIGNvbnN0ICRzZWN0aW9ucyA9IHJhbmdlKDAsIHNlY3Rpb25zKS5tYXAoZD0+e1xuICAgICAgICByZXR1cm4galF1ZXJ5KGA8ZGl2IGlkPVwic2VjdGlvbiR7ZH1cIiBjbGFzcz1cImNvbC14cy0xMiBjb2wtbWQtJHtjb2xTaXplfVwiPmApLmFwcGVuZFRvKGpRdWVyeShgIyR7ZG9tSWR9YCkpO1xuICAgIH0pO1xuXG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCBjdXJyU2VjdGlvbiA9IDA7XG4gICAgZ3JvdXBOYW1lcy5mb3JFYWNoKChnbmFtZSk9PntcbiAgICAgICAgbGV0IHNpdGVzID0gZ3JvdXBzW2duYW1lXTsgLy8gYSBsaXN0IG9mIHNpdGUgb2JqZWN0cyB3aXRoIGF0dHI6IG5hbWUgYW5kIGlkXG4gICAgICAgIGNvbnN0IGdJZCA9IGduYW1lLnJlcGxhY2UoLyAvZywgXCJfXCIpOyAvLyByZXBsYWNlIHRoZSBzcGFjZXMgd2l0aCBkYXNoZXMgdG8gY3JlYXRlIGEgZ3JvdXAgPERPTT4gaWRcbiAgICAgICAgLy8gZmlndXJlIG91dCB3aGljaCBkb20gc2VjdGlvbiB0byBhcHBlbmQgdGhpcyB0aXNzdWUgc2l0ZVxuICAgICAgICBsZXQgZ3JvdXBMZW4gPSBncm91cHNbZ25hbWVdLmxlbmd0aDtcbiAgICAgICAgZ3JvdXBMZW4gPSBncm91cExlbiA9PSAxID8gZ3JvdXBMZW4gOiBncm91cExlbisxOyAvLyArMSB0byBhY2NvdW50IGZvciBzaXRlIG5hbWVcbiAgICAgICAgLy8gbW92ZSB0byBuZXcgc2VjdGlvbiBpZiBlbm91Z2ggcm93cyBhcmUgaW4gdGhlIGN1cnJlbnQgc2VjdGlvblxuICAgICAgICBpZiAoY291bnRlciAhPSAwICYmIGdyb3VwTGVuICsgY291bnRlciA+IHJvd3NQZXJTZWN0aW9uICsgcm93c1JlbWFpbikge1xuICAgICAgICAgICAgY291bnRlciA9IDA7XG4gICAgICAgICAgICBjdXJyU2VjdGlvbiArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGNvdW50ZXIgKz0gZ3JvdXBMZW47XG4gICAgICAgIGxldCAkY3VycmVudERvbSA9ICRzZWN0aW9uc1tjdXJyU2VjdGlvbl07XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSA8bGFiZWw+IGZvciB0aGUgdGlzc3VlIGdyb3VwXG4gICAgICAgIGpRdWVyeShgPGxhYmVsIGNsYXNzPSR7bWFpbkNsYXNzfT5gK1xuICAgICAgICAgICAgYDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIiR7Z0lkfVwiIGNsYXNzPVwidGlzc3VlR3JvdXBcIj4gYCArXG4gICAgICAgICAgICBgPHNwYW4+JHtnbmFtZX08L3NwYW4+YCArXG4gICAgICAgICAgICAnPC9sYWJlbD48YnIvPicpLmFwcGVuZFRvKCRjdXJyZW50RG9tKTtcblxuICAgICAgICAvLyB0aXNzdWUgc2l0ZXMgaW4gdGhlIGdyb3VwXG4gICAgICAgIGlmIChzaXRlcy5sZW5ndGggPiAxKXtcbiAgICAgICAgICAgICAvLyBzb3J0IHNpdGVzIGFscGhhYmV0aWNhbGx5XG4gICAgICAgICAgICBzaXRlcy5zb3J0KChhLCBiKT0+e1xuICAgICAgICAgICAgICAgIGlmIChhLmlkID4gYi5pZCkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgaWYgKGEuaWQgPCBiLmlkKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oc2l0ZSwgaSl7XG4gICAgICAgICAgICAgICAgbGV0ICRzaXRlRG9tID0galF1ZXJ5KGA8bGFiZWwgY2xhc3M9JHtzdWJDbGFzc30+YCtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIiR7c2l0ZS5pZH1cIiBjbGFzcz1cInRpc3N1ZVN1Ykdyb3VwXCI+IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgPHNwYW4+JHtzaXRlLm5hbWV9PC9zcGFuPmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9sYWJlbD48YnIvPicpLmFwcGVuZFRvKCRjdXJyZW50RG9tKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSBzaXRlcy5sZW5ndGggLTEpICRzaXRlRG9tLmFkZENsYXNzKGxhc3RTaXRlQ2xhc3MpO1xuICAgICAgICAgICAgICAgICRzaXRlRG9tLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeSgnaW5wdXRbbmFtZT1cImFsbFRpc3N1ZXNcIl0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGN1c3RvbSBjbGljayBldmVudCBmb3IgdGhlIHRvcC1sZXZlbCB0aXNzdWVzOiB0b2dnbGUgdGhlIGNoZWNrIGJveGVzXG4gICAgICAgIGpRdWVyeShcIiNcIiArIGdJZCkuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGpRdWVyeSgnaW5wdXRbbmFtZT1cImFsbFRpc3N1ZXNcIl0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKGpRdWVyeSgnIycgKyBnSWQpLmlzKFwiOmNoZWNrZWRcIikpIHtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBncm91cCBpcyBjaGVja2VkLCBjaGVjayBhbGwgaXRzIHRpc3N1ZXNcbiAgICAgICAgICAgICAgICBzaXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcImlkXCIgPT0gc2l0ZS5pZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBqUXVlcnkoJyMnICsgc2l0ZS5pZCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgZ3JvdXAgaXMgdW5jaGVja2VkLCB1bi1jaGVjayBhbGwgaXRzIHRpc3N1ZXNcbiAgICAgICAgICAgICAgICBzaXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcImlkXCIgPT0gc2l0ZS5pZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBqUXVlcnkoJyMnICsgc2l0ZS5pZCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKGNoZWNrQWxsKSB7XG4gICAgICAgIGpRdWVyeSgnaW5wdXRbbmFtZT1cImFsbFRpc3N1ZXNcIl1bdmFsdWU9XCJhbGxcIl0nKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICAgIGpRdWVyeSgnLnRpc3N1ZUdyb3VwJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICBqUXVlcnkoJy50aXNzdWVTdWJHcm91cCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICB9XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHR3by1sZXZlbCBjaGVja2JveC1zdHlsZSB0aXNzdWUgbWVudVxuICogQHBhcmFtIGdyb3VwcyB7RGljdGlvbmFyeX0gb2YgbGlzdHMgb2YgdGlzc3VlcyBpbmRleGVkIGJ5IHRoZSBncm91cCBuYW1lLCB0aGlzIGlzIGNyZWF0ZWQgYnkgZ3RleERhdGFQYXJzZXI6cGFyc2VUaXNzdWVTaXRlcygpXG4gKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gPGRpdj4gSURcbiAqIEBwYXJhbSB1c2VOYW1lcyB7Qm9vbGVhbn0gV2hldGhlciB0byByZXR1cm4gdGlzc3VlIGlkcyBvciB0aXNzdWUgbmFtZXNcbiAqIERlcGVuZGVuY2llczogalF1ZXJ5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZUdyb3VwTWVudShncm91cHMsIGRvbUlkLCB1c2VOYW1lcz1mYWxzZSl7XG4gICAgbGV0IHF1ZXJ5VGlzc3VlcyA9IFtdO1xuICAgIGpRdWVyeShgIyR7ZG9tSWR9YCkuZmluZChcIjppbnB1dFwiKS5lYWNoKGZ1bmN0aW9uKCl7IC8vIHVzaW5nIGpRdWVyeSB0byBwYXJzZSBlYWNoIGlucHV0IGl0ZW1cbiAgICAgICAgaWYgKCBqUXVlcnkodGhpcykuaXMoXCI6Y2hlY2tlZFwiKSkgeyAvLyB0aGUgalF1ZXJ5IHdheSB0byBmZXRjaCBhIGNoZWNrZWQgdGlzc3VlXG4gICAgICAgICAgICBjb25zdCBpZCA9IGpRdWVyeSh0aGlzKS5hdHRyKCdpZCcpO1xuICAgICAgICAgICAgaWYgKGpRdWVyeSh0aGlzKS5oYXNDbGFzcyhcInRpc3N1ZUdyb3VwXCIpKXtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlucHV0IGl0ZW0gaXMgYSB0aXNzdWUgZ3JvdXBcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIHRpc3N1ZSBncm91cCBpcyBhIHNpbmdsZS1zaXRlIGdyb3VwIHVzaW5nIHRoZSB0aXNzdWVHcm91cHMgZGljdGlvbmFyeVxuICAgICAgICAgICAgICAgIC8vIGlmIHNvLCBhZGQgdGhlIHNpbmdsZSBzaXRlIHRvIHRoZSBxdWVyeSBsaXN0XG4gICAgICAgICAgICAgICAgbGV0IGdyb3VwTmFtZSA9IGlkLnJlcGxhY2UoL18vZywgXCIgXCIpOyAvLyBmaXJzdCBjb252ZXJ0IHRoZSBJRCBiYWNrIHRvIGdyb3VwIG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBzW2dyb3VwTmFtZV0ubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlTmFtZXM/cXVlcnlUaXNzdWVzLnB1c2goZ3JvdXBzW2dyb3VwTmFtZV1bMF0ubmFtZSkgOiBxdWVyeVRpc3N1ZXMucHVzaChncm91cHNbZ3JvdXBOYW1lXVswXS5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXsgLy8gdGhpcyBpbnB1dCBpdGVtIGlzIGEgdGlzc3VlIHNpdGVcbiAgICAgICAgICAgICAgICB1c2VOYW1lcz9xdWVyeVRpc3N1ZXMucHVzaChqUXVlcnkoalF1ZXJ5KHRoaXMpLnNpYmxpbmdzKClbMF0pLnRleHQoKSk6cXVlcnlUaXNzdWVzLnB1c2goaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHF1ZXJ5VGlzc3Vlcy5maWx0ZXIoKGQpPT5kIT09dW5kZWZpbmVkKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG4iXSwibmFtZXMiOlsiRU9MIiwiRU9GIiwiUVVPVEUiLCJORVdMSU5FIiwiUkVUVVJOIiwib2JqZWN0Q29udmVydGVyIiwiY29sdW1ucyIsIkZ1bmN0aW9uIiwibWFwIiwibmFtZSIsImkiLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiIsImluZmVyQ29sdW1ucyIsInJvd3MiLCJjb2x1bW5TZXQiLCJPYmplY3QiLCJjcmVhdGUiLCJmb3JFYWNoIiwicm93IiwiY29sdW1uIiwicHVzaCIsInBhZCIsInZhbHVlIiwid2lkdGgiLCJzIiwibGVuZ3RoIiwiQXJyYXkiLCJmb3JtYXREYXRlIiwiZGF0ZSIsInllYXIiLCJob3VycyIsImdldFVUQ0hvdXJzIiwibWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJzZWNvbmRzIiwiZ2V0VVRDU2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImlzTmFOIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJkZWxpbWl0ZXIiLCJyZUZvcm1hdCIsIlJlZ0V4cCIsIkRFTElNSVRFUiIsImNoYXJDb2RlQXQiLCJwYXJzZVJvd3MiLCJ0ZXh0IiwiZiIsInQiLCJOIiwiSSIsIm4iLCJlb2YiLCJlb2wiLCJ0b2tlbiIsImMiLCJqIiwic2xpY2UiLCJyZXBsYWNlIiwicHJlZm9ybWF0Qm9keSIsImZvcm1hdFZhbHVlIiwiZm9ybWF0Um93IiwiRGF0ZSIsInRlc3QiLCJwYXJzZSIsImNvbnZlcnQiLCJvYmplY3QiLCJjdXN0b21Db252ZXJ0ZXIiLCJmb3JtYXQiLCJjb25jYXQiLCJmb3JtYXRCb2R5IiwiZm9ybWF0Um93cyIsImRzdiIsInJlc3BvbnNlSnNvbiIsInJlc3BvbnNlIiwib2siLCJFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJqc29uIiwiaW5wdXQiLCJpbml0IiwiZmV0Y2giLCJ0aGVuIiwieGh0bWwiLCJzdmciLCJ4bGluayIsInhtbCIsInhtbG5zIiwicHJlZml4IiwiaW5kZXhPZiIsIm5hbWVzcGFjZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInNwYWNlIiwibG9jYWwiLCJmdWxsbmFtZSIsIm5hbWVzcGFjZSIsInRoaXMiLCJvd25lckRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiZG9jdW1lbnQiLCJ1cmkiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwibm9uZSIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImVtcHR5IiwicXVlcnlTZWxlY3RvckFsbCIsIm1hdGNoZXMiLCJ1cGRhdGUiLCJFbnRlck5vZGUiLCJwYXJlbnQiLCJkYXR1bSIsIl9uZXh0IiwiX3BhcmVudCIsIl9fZGF0YV9fIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsImtleVByZWZpeCIsImJpbmRJbmRleCIsImdyb3VwIiwiZW50ZXIiLCJleGl0IiwiZGF0YSIsIm5vZGUiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsImtleVZhbHVlcyIsImNhbGwiLCJhc2NlbmRpbmciLCJhIiwiYiIsIk5hTiIsImRlZmF1bHRWaWV3Iiwic3R5bGVWYWx1ZSIsInN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJjbGFzc0FycmF5Iiwic3RyaW5nIiwidHJpbSIsInNwbGl0IiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc2VkQWRkIiwibmFtZXMiLCJsaXN0IiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsInJlbW92ZSIsInRleHRSZW1vdmUiLCJ0ZXh0Q29udGVudCIsImh0bWxSZW1vdmUiLCJpbm5lckhUTUwiLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImNvbnN0YW50TnVsbCIsInJlbW92ZUNoaWxkIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJzZXRBdHRyaWJ1dGUiLCJzcGxpY2UiLCJjb250YWlucyIsImZpbHRlckV2ZW50cyIsImV2ZW50IiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiY29udGV4dExpc3RlbmVyIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwidHlwZW5hbWUiLCJvbiIsIl9fb24iLCJvIiwibSIsInR5cGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FwdHVyZSIsIm9uQWRkIiwid3JhcCIsImQiLCJhZGRFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsInBhcmFtcyIsIndpbmRvdyIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsInJvb3QiLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0aW9uIiwic291cmNlIiwiY3VycmVudCIsInNvdXJjZUV2ZW50IiwiY2hhbmdlZFRvdWNoZXMiLCJvd25lclNWR0VsZW1lbnQiLCJjcmVhdGVTVkdQb2ludCIsInBvaW50IiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsIm1hdHJpeFRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsImNsaWVudExlZnQiLCJ0b3AiLCJjbGllbnRUb3AiLCJzZWxlY3QiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJzZWxlY3RBbGwiLCJzZWxlY3RvckFsbCIsImZpbHRlciIsIm1hdGNoIiwibWF0Y2hlciIsInNpemUiLCJlYWNoIiwiYmluZCIsImVudGVyR3JvdXAiLCJ1cGRhdGVHcm91cCIsInByZXZpb3VzIiwiaTAiLCJpMSIsIl9lbnRlciIsIl9leGl0Iiwic3BhcnNlIiwib25lbnRlciIsIm9udXBkYXRlIiwib25leGl0IiwiYXBwZW5kIiwibWVyZ2UiLCJvcmRlciIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtMSIsIk1hdGgiLCJtaW4iLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJzb3J0IiwiY29tcGFyZSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsImNhbGxiYWNrIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJub2RlcyIsImF0dHIiLCJnZXRBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwidiIsInNldEF0dHJpYnV0ZU5TIiwicHJpb3JpdHkiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwicHJvcGVydHkiLCJjbGFzc2VkIiwiaHRtbCIsImNyZWF0b3IiLCJpbnNlcnQiLCJiZWZvcmUiLCJjbG9uZSIsImRlZXAiLCJ0eXBlbmFtZXMiLCJwYXJzZVR5cGVuYW1lcyIsImRpc3BhdGNoIiwiTWFwIiwic2V0IiwiaXNBcnJheSIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJuZXN0Iiwia2V5cyIsInNvcnRLZXlzIiwiYXJyYXkiLCJkZXB0aCIsImNyZWF0ZVJlc3VsdCIsInNldFJlc3VsdCIsInZhbHVlcyIsInZhbHVlc0J5S2V5IiwicmVzdWx0IiwiZ2V0IiwiY3JlYXRlT2JqZWN0Iiwic2V0T2JqZWN0IiwiY3JlYXRlTWFwIiwic2V0TWFwIiwiZW50cmllcyIsInNvcnRLZXkiLCJrIiwiU2V0IiwiaGFzIiwiY2xlYXIiLCJwcm90byIsImdldEd0ZXhVcmxzIiwiaG9zdCIsInNpbmdsZVRpc3N1ZUVxdGwiLCJsZCIsInRpc3N1ZVN1bW1hcnkiLCJkeW5lcXRsIiwic25wIiwidmFyaWFudElkIiwiZXhvbkV4cCIsInRyYW5zY3JpcHRFeHAiLCJqdW5jdGlvbkV4cCIsInRyYW5zY3JpcHQiLCJleG9uIiwiZ2VuZU1vZGVsIiwiZ2VuZU1vZGVsVW5maWx0ZXJlZCIsImdlbmVFeHAiLCJtZWRHZW5lRXhwIiwiZ2VuZUV4cEJveHBsb3QiLCJ0b3BJblRpc3N1ZUZpbHRlcmVkIiwidG9wSW5UaXNzdWUiLCJnZW5lSWQiLCJ0aXNzdWUiLCJ0aXNzdWVTaXRlcyIsInNhbXBsZSIsInJuYXNlcUNyYW0iLCJ3Z3NDcmFtIiwiZmNCaWxsaW5nIiwiZmNXb3JrU3BhY2UiLCJmY1BvcnRhbFdvcmtTcGFjZSIsInBhcnNlVGlzc3VlcyIsInRpc3N1ZXMiLCJwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluIiwidXNlTG9nIiwiY29sb3JzIiwiY29uc29sZSIsImVycm9yIiwiZGQiLCJsb2cxMCIsInRpc3N1ZVNpdGVEZXRhaWxJZCIsImxhYmVsIiwiZ2VuZVN5bWJvbCIsImNvbG9yIiwidW5kZWZpbmVkIiwiZ2VuY29kZUlkIiwiYmlzZWN0UmlnaHQiLCJsbyIsImhpIiwibWlkIiwicmlnaHQiLCJ2YWx1ZW9mIiwiZGVsdGEiLCJtZWFuIiwic3VtIiwibnVtYmVyIiwidmFyaWFuY2UiLCJzcXJ0IiwibWF4Iiwic3RhcnQiLCJzdG9wIiwic3RlcCIsImNlaWwiLCJyYW5nZSIsImUxMCIsImU1IiwiZTIiLCJ0aWNrSW5jcmVtZW50IiwiY291bnQiLCJwb3dlciIsImZsb29yIiwibG9nIiwiTE4xMCIsInBvdyIsInAiLCJ2YWx1ZTAiLCJudW1iZXJzIiwicXVhbnRpbGUiLCJpbml0UmFuZ2UiLCJkb21haW4iLCJpbXBsaWNpdCIsImJhbmQiLCJiYW5kd2lkdGgiLCJzY2FsZSIsIm9yZGluYWwiLCJ1bmtub3duIiwiXyIsImNvcHkiLCJvcmRpbmFsUmFuZ2UiLCJyb3VuZCIsInBhZGRpbmdJbm5lciIsInBhZGRpbmdPdXRlciIsImFsaWduIiwicmVzY2FsZSIsInJldmVyc2UiLCJzZXF1ZW5jZSIsInJhbmdlUm91bmQiLCJwYWRkaW5nIiwiZmFjdG9yeSIsImV4dGVuZCIsImRlZmluaXRpb24iLCJDb2xvciIsInJlSSIsInJlTiIsInJlUCIsInJlSGV4MyIsInJlSGV4NiIsInJlUmdiSW50ZWdlciIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJSZ2IiLCJwYXJzZUludCIsInJnYm4iLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwicmdiQ29udmVydCIsInJnYiIsIm9wYWNpdHkiLCJoZXgiLCJ0b1N0cmluZyIsImgiLCJsIiwiSHNsIiwiaHNsMnJnYiIsIm0yIiwiZGVmaW5lIiwiZGlzcGxheWFibGUiLCJicmlnaHRlciIsImRhcmtlciIsImhzbENvbnZlcnQiLCJkZWcycmFkIiwiUEkiLCJyYWQyZGVnIiwiWG4iLCJZbiIsIlpuIiwidDAiLCJ0MSIsInQyIiwidDMiLCJsYWJDb252ZXJ0IiwiTGFiIiwiSGNsIiwiY29zIiwic2luIiwieiIsInJnYjJscmdiIiwieHl6MmxhYiIsImxhYjJ4eXoiLCJscmdiMnJnYiIsImF0YW4yIiwiaGNsQ29udmVydCIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRUQiLCJFQiIsIkJDX0RBIiwiY3ViZWhlbGl4IiwiQ3ViZWhlbGl4IiwiYmwiLCJjdWJlaGVsaXhDb252ZXJ0IiwibGluZWFyIiwiZ2FtbWEiLCJub2dhbW1hIiwiZXhwb25lbnRpYWwiLCJjb25zdGFudCIsImNvc2giLCJzaW5oIiwicmdiR2FtbWEiLCJlbmQiLCJjb2xvclJnYiIsInNwbGluZSIsInJnYkJhc2lzIiwidjEiLCJ2MiIsInYwIiwidjMiLCJiYXNpcyIsInJlQSIsInJlQiIsImFtIiwiYm0iLCJicyIsImJpIiwibGFzdEluZGV4IiwicSIsIm9uZSIsInplcm8iLCJzZXRUaW1lIiwibmIiLCJuYSIsInZhbHVlT2YiLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwiZGVncmVlcyIsImlkZW50aXR5IiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJyb3RhdGUiLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsImUiLCJhdGFuIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJweENvbW1hIiwicHhQYXJlbiIsImRlZ1BhcmVuIiwicG9wIiwieGEiLCJ5YSIsInhiIiwieWIiLCJ0cmFuc2xhdGUiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyIsInRyYW5zZm9ybSIsImRlY29tcG9zZSIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwibWF0cml4IiwiU1FSVDIiLCJodWUiLCJjdWJlaGVsaXhHYW1tYSIsImNvbG9yQ3ViZWhlbGl4IiwiY3ViZWhlbGl4TG9uZyIsInVuaXQiLCJub3JtYWxpemUiLCJjbGFtcGVyIiwiYmltYXAiLCJpbnRlcnBvbGF0ZSIsImQwIiwiZDEiLCJyMCIsInIxIiwicG9seW1hcCIsImJpc2VjdCIsImNvbnRpbnVvdXMiLCJ1bnRyYW5zZm9ybSIsInBpZWNld2lzZSIsIm91dHB1dCIsImludGVycG9sYXRlVmFsdWUiLCJjbGFtcCIsImludmVydCIsImludGVycG9sYXRlTnVtYmVyIiwiaW50ZXJwb2xhdGVSb3VuZCIsInUiLCJ0cmFuc2Zvcm1lciIsInRvRXhwb25lbnRpYWwiLCJjb2VmZmljaWVudCIsImZvcm1hdERlY2ltYWwiLCJhYnMiLCJwcmVmaXhFeHBvbmVudCIsInJlIiwiZm9ybWF0U3BlY2lmaWVyIiwic3BlY2lmaWVyIiwiRm9ybWF0U3BlY2lmaWVyIiwiZmlsbCIsInNpZ24iLCJzeW1ib2wiLCJjb21tYSIsInByZWNpc2lvbiIsImV4cG9uZW50IiwiJSIsInRvRml4ZWQiLCJ0b1ByZWNpc2lvbiIsImZvcm1hdFJvdW5kZWQiLCJYIiwidG9VcHBlckNhc2UiLCJsb2NhbGUiLCJmb3JtYXRQcmVmaXgiLCJwcmVmaXhlcyIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwic3Vic3RyaW5nIiwiY3VycmVuY3kiLCJkZWNpbWFsIiwibnVtZXJhbHMiLCJmb3JtYXROdW1lcmFscyIsInBlcmNlbnQiLCJuZXdGb3JtYXQiLCJmb3JtYXRUeXBlcyIsInN1ZmZpeCIsImZvcm1hdFR5cGUiLCJtYXliZVN1ZmZpeCIsInZhbHVlUHJlZml4IiwidmFsdWVTdWZmaXgiLCJ2YWx1ZU5lZ2F0aXZlIiwib3V0IiwiZm9ybWF0VHJpbSIsIkluZmluaXR5Iiwic3RlcDAiLCJzdGVwMSIsInRpY2tTdGVwIiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJwcmVjaXNpb25GaXhlZCIsImxpbmVhcmlzaCIsInRpY2tzIiwiaXNGaW5pdGUiLCJ0aWNrRm9ybWF0IiwibmljZSIsImZvcm1hdExvY2FsZSIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwiaW50ZXJ2YWwiLCJvZmZzZXQiLCJldmVyeSIsIm1pbGxpc2Vjb25kIiwiZHVyYXRpb25NaW51dGUiLCJkdXJhdGlvbldlZWsiLCJkYXkiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRTZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldEhvdXJzIiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0Iiwid2Vla2RheSIsImdldERheSIsInN1bmRheSIsIm1vbmRheSIsInRodXJzZGF5Iiwic2V0TW9udGgiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJzZXRVVENTZWNvbmRzIiwic2V0VVRDTWludXRlcyIsInV0Y0RheSIsInNldFVUQ0hvdXJzIiwic2V0VVRDRGF0ZSIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUaHVyc2RheSIsInV0Y1llYXIiLCJzZXRVVENNb250aCIsInNldFVUQ0Z1bGxZZWFyIiwibG9jYWxEYXRlIiwiSCIsIk0iLCJTIiwiTCIsInV0Y0RhdGUiLCJVVEMiLCJuZXdZZWFyIiwidXRjRm9ybWF0IiwidXRjUGFyc2UiLCJwYWRzIiwiLSIsIjAiLCJudW1iZXJSZSIsInBlcmNlbnRSZSIsInJlcXVvdGVSZSIsInJlcXVvdGUiLCJmb3JtYXRSZSIsImZvcm1hdExvb2t1cCIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInciLCJwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkiLCJwYXJzZVdlZWtOdW1iZXJTdW5kYXkiLCJVIiwicGFyc2VXZWVrTnVtYmVySVNPIiwiViIsInBhcnNlV2Vla051bWJlck1vbmRheSIsIlciLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2VZZWFyIiwicGFyc2Vab25lIiwiWiIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZURheU9mWWVhciIsInBhcnNlSG91cjI0IiwicGFyc2VNaW51dGVzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJRIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJ0aW1lRGF5IiwidGltZVllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJ0aW1lU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsInRpbWVUaHVyc2RheSIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwidGltZU1vbmRheSIsImZvcm1hdFllYXIiLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdFpvbmUiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTWljcm9zZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkiLCJkb3ciLCJmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDWm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwidGltZSIsImxvY2FsZV9wZXJpb2RzIiwicGVyaW9kcyIsImxvY2FsZV93ZWVrZGF5cyIsImRheXMiLCJsb2NhbGVfc2hvcnRXZWVrZGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsInBlcmlvZFJlIiwicGVyaW9kTG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdHMiLCJZIiwidXRjRm9ybWF0cyIsInBhcnNlcyIsInBhcnNlU3BlY2lmaWVyIiwiY2hhckF0IiwibmV3UGFyc2UiLCJuZXdEYXRlIiwid2VlayIsInRvSVNPU3RyaW5nIiwic2VxdWVudGlhbCIsImsxMCIsIngwIiwieDEiLCJpbnRlcnBvbGF0b3IiLCJzY2hlbWUiLCJpbnRlcnBvbGF0ZVJnYkJhc2lzIiwicmFtcCIsImludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyIsImNvbG9yQ2hhcnQiLCJzaHVmZmxlIiwiY291bnRlciIsInJhbmRvbSIsInRlbXAiLCJzaHVmZmxlQ29sb3JzIiwic2V0Q29sb3JTY2FsZSIsImRtaW4iLCJkbWF4Iiwic2NhbGVTZXF1ZW50aWFsIiwiaW50ZXJwb2xhdG9ycyIsIkJ1R24iLCJkM0Nocm9tYXRpYyIsIk9yUmQiLCJQdUJ1IiwiWWxHbkJ1IiwiQmx1ZXMiLCJPcmFuZ2VzIiwiR3JlZW5zIiwiUHVycGxlcyIsIlJlZHMiLCJHcmV5cyIsIkdyYXlzIiwiUmRCdSIsIlJkR3kiLCJQaVlHIiwiUHVPciIsIlJkWWxCdSIsImVyciIsImFsZXJ0IiwiZ2V0Q29sb3JJbnRlcnBvbGF0b3IiLCJEZW5kcm9IZWF0bWFwQ29uZmlnIiwicm9vdFciLCJpbm5lcldpZHRoIiwibGVmdFBhbmVsVyIsInRvcFBhbmVsSCIsIm1hcmdpbiIsImJvdHRvbSIsImNlbGxIIiwiYWRqdXN0IiwibGVmdFRyZWVQYW5lbCIsImlkIiwiY2VsbCIsInRvcFRyZWVQYW5lbCIsImhlYXRtYXBQYW5lbCIsImxlZ2VuZFBhbmVsIiwicGFuZWxzIiwibWFpbiIsImxlZ2VuZCIsImNyZWF0ZVN2ZyIsImhlaWdodCIsInN2Z0lkIiwicG9zaXRpb24iLCJqUXVlcnkiLCJjaGVja0RvbUlkIiwiY2hpbGRyZW4iLCJoaWVyYXJjaHkiLCJjaGlsZHMiLCJOb2RlIiwidmFsdWVkIiwiZGVmYXVsdENoaWxkcmVuIiwiZWFjaEJlZm9yZSIsImNvbXB1dGVIZWlnaHQiLCJjb3B5RGF0YSIsImVhY2hBZnRlciIsInBhdGgiLCJhbmNlc3RvciIsImFOb2RlcyIsImFuY2VzdG9ycyIsImJOb2RlcyIsImxlYXN0Q29tbW9uQW5jZXN0b3IiLCJkZXNjZW5kYW50cyIsImxlYXZlcyIsImxpbmtzIiwidGFyZ2V0IiwiZXBzaWxvbiIsImVudGVyaW5nIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsImNvbnRleHQiLCJzcGFjaW5nIiwicmFuZ2UwIiwicmFuZ2UxIiwidGljayIsInRpY2tFeGl0IiwidGlja0VudGVyIiwibGluZSIsInRyYW5zaXRpb24iLCJ0aWNrU2l6ZSIsImF4aXNCb3R0b20iLCJheGlzTGVmdCIsIkRlbmRyb2dyYW0iLCJuZXdpY2siLCJvcmllbnRhdGlvbiIsInBvc3RvcmRlciIsInRyZWUiLCJ0b2tlbnMiLCJzdWJ0cmVlIiwiYnJhbmNoc2V0IiwicGFyc2VGbG9hdCIsInBhcnNlTmV3aWNrIiwieFNjYWxlIiwieVNjYWxlIiwiZHJhdyIsImRvbSIsIl9zZXRYU2NhbGUiLCJfc2V0WVNjYWxlIiwiX2RyYXdIVHJlZSIsIl9kcmF3VlRyZWUiLCJzZXRZIiwicmVkdWNlIiwic2V0WCIsIl9nZXRCcmFuY2hMZW5ndGhUb1Jvb3QiLCJfc29ydE5vZGVzQnlMZXZlbCIsImlub2RlcyIsImQzIiwiX2dldE1heEJyYW5jaExlbmd0aCIsIl9hc3NpZ25Qb3N0b3JkZXIiLCJzY2FsZUxpbmVhciIsInNjYWxlQmFuZCIsIm5vb3AiLCJEaXNwYXRjaCIsInR5cGVzIiwiVCIsInRoYXQiLCJhcmdzIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsImZyYW1lIiwidGltZW91dCIsInBva2VEZWxheSIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJwZXJmb3JtYW5jZSIsIm5vdyIsInNldEZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsImNsZWFyTm93IiwiVGltZXIiLCJfY2FsbCIsIl90aW1lIiwidGltZXIiLCJkZWxheSIsInJlc3RhcnQiLCJ3YWtlIiwidGltZXJGbHVzaCIsInNsZWVwIiwibmFwIiwicG9rZSIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImVsYXBzZWQiLCJUeXBlRXJyb3IiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTQ0hFRFVMRUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJSVU5OSU5HIiwiRU5ESU5HIiwiRU5ERUQiLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJzZWxmIiwidHdlZW4iLCJzdGF0ZSIsImR1cmF0aW9uIiwiZWFzZSIsInNjaGVkdWxlIiwiYWN0aXZlIiwidHdlZW5WYWx1ZSIsIl9pZCIsImludGVycG9sYXRlUmdiIiwiaW50ZXJwb2xhdGVTdHJpbmciLCJzdHlsZVJlbW92ZSIsIlRyYW5zaXRpb24iLCJfbmFtZSIsIm5ld0lkIiwic2VsZWN0aW9uX3Byb3RvdHlwZSIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJvbjAiLCJvbjEiLCJzaXQiLCJvbkZ1bmN0aW9uIiwiYXR0clR3ZWVuIiwic3RyaW5nMDAiLCJzdHJpbmcxMCIsImludGVycG9sYXRlMCIsInN0cmluZzAiLCJzdHJpbmcxIiwidmFsdWUxIiwiX3ZhbHVlIiwiYXR0ckludGVycG9sYXRlTlMiLCJhdHRySW50ZXJwb2xhdGUiLCJzdHlsZVR3ZWVuIiwic3R5bGVOdWxsIiwic3R5bGVGdW5jdGlvbiIsImxpc3RlbmVyMCIsInN0eWxlTWF5YmVSZW1vdmUiLCJzdHlsZUNvbnN0YW50Iiwic3R5bGVJbnRlcnBvbGF0ZSIsInRleHRGdW5jdGlvbiIsInRleHRDb25zdGFudCIsInR3ZWVuMCIsInR3ZWVuMSIsImVhc2VDb25zdGFudCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FuY2VsIiwiaW50ZXJydXB0IiwiZGVmYXVsdFRpbWluZyIsIlRvb2xiYXIiLCJkb21JZCIsInRvb2x0aXAiLCJ2ZXJ0aWNhbCIsInNob3ciLCJidG5DbGFzc2VzIiwiYmFyIiwiYWRkQ2xhc3MiLCJhcHBlbmRUbyIsImJ1dHRvbnMiLCJjcmVhdGVEb3dubG9hZFN2Z0J1dHRvbiIsIm91dGZpbGVOYW1lIiwiY2xvbmVJZCIsImljb24iLCJjcmVhdGVCdXR0b24iLCJkb3dubG9hZFN2ZyIsImhpZGUiLCJjcmVhdGVSZXNldEJ1dHRvbiIsIiRidXR0b24iLCJhdHRhY2hUb29sdGlwIiwiZmlsZU5hbWUiLCJzdmdPYmoiLCIkc3ZnQ29weSIsInN0eWxlcyIsInVzZWQiLCJzaGVldHMiLCJzdHlsZVNoZWV0cyIsImNzc1J1bGVzIiwicnVsZXMiLCJydWxlIiwiZWxlbXMiLCJzZWxlY3RvclRleHQiLCJmaW5kIiwiY3NzVGV4dCIsInBhcnNlQ3NzU3R5bGVzIiwicHJlcGVuZCIsInN2Z0h0bWwiLCJzdmdCbG9iIiwiQmxvYiIsInNhdmVBcyIsIlRvb2x0aXAiLCJ2ZXJib3NlIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJpbmZvIiwiZWRpdCIsIm1vdmUiLCJwYWdlWCIsInBhZ2VZIiwiSGVhdG1hcCIsImxvZ0Jhc2UiLCJjb2xvclNjaGVtZSIsInRvb2x0aXBJZCIsIm51bGxDb2xvciIsImNvbG9yU2NhbGUiLCJ4TGlzdCIsInlMaXN0IiwidG9vbGJhciIsImNyZWF0ZVRvb2xiYXIiLCJkcmF3Q29sb3JMZWdlbmQiLCJsZWdlbmRDb25maWciLCJ0aXRsZSIsImNvbmZpZyIsImJhc2UiLCJkaXZlcmdpbmciLCJyZWRyYXciLCJkaW1lbnNpb25zIiwiYW5nbGUiLCJ1c2VOdWxsQ29sb3IiLCJjb2x1bW5MYWJlbFBvc0FkanVzdCIsIl9zZXRDb2xvclNjYWxlIiwieExhYmVscyIsImNlbGxzIiwic2VsZWN0ZWQiLCJjZWxsTW91c2VvdmVyIiwiY2VsbE1vdXNlb3V0IiwiX2xvZyIsInJvd0NsYXNzIiwiY29sQ2xhc3MiLCJkaXNwbGF5VmFsdWUiLCJuZXdMaXN0IiwiTnVtYmVyIiwiRGVuZHJvSGVhdG1hcCIsImNvbHVtblRyZWUiLCJyb3dUcmVlIiwiaGVhdG1hcERhdGEiLCJzdGFydHNXaXRoIiwiaGVhdG1hcCIsImV4dGVybmFsIiwib2JqZWN0cyIsInZpc3VhbENvbXBvbmVudHMiLCJyZW5kZXIiLCJzaG93Q29sdW1uVHJlZSIsInNob3dSb3dUcmVlIiwibGVnZW5kUG9zIiwiX3VwZGF0ZUNvbmZpZyIsInhsaXN0IiwieWxpc3QiLCJfcmVuZGVyVHJlZSIsIl9yZW5kZXJIZWF0bWFwIiwiZGlyZWN0aW9uIiwibGFiZWxDbGFzcyIsImlkcyIsImluY2x1ZGVzIiwicGkiLCJ0YXUiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsIm1vdmVUbyIsImNsb3NlUGF0aCIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiZHgiLCJkeSIsImN3IiwiZGEiLCJMaW5lYXIiLCJfY29udGV4dCIsInBvaW50WCIsInBvaW50WSIsImRlZmluZWQiLCJjdXJ2ZSIsImN1cnZlTGluZWFyIiwiYXJlYSIsImJ1ZmZlciIsImRlZmluZWQwIiwieDB6IiwieTB6IiwiYXJlYVN0YXJ0IiwibGluZVN0YXJ0IiwibGluZUVuZCIsImFyZWFFbmQiLCJhcmVhbGluZSIsImxpbmVYMCIsImxpbmVZMCIsImxpbmVZMSIsImxpbmVYMSIsInNsb3BlMyIsImgwIiwiaDEiLCJzMCIsInMxIiwic2xvcGUyIiwiTW9ub3RvbmVYIiwiUmVmbGVjdENvbnRleHQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm5vcHJvcGFnYXRpb24iLCJfbGluZSIsIl9wb2ludCIsIl90MCIsIk1PREVfRFJBRyIsIk1PREVfU1BBQ0UiLCJNT0RFX0hBTkRMRSIsIk1PREVfQ0VOVEVSIiwiaGFuZGxlcyIsInh5IiwiWFkiLCJjdXJzb3JzIiwib3ZlcmxheSIsIm53IiwibmUiLCJzZSIsInN3IiwiZmxpcFgiLCJmbGlwWSIsInNpZ25zWCIsInNpZ25zWSIsImRlZmF1bHRGaWx0ZXIiLCJidXR0b24iLCJkZWZhdWx0RXh0ZW50IiwiX19icnVzaCIsImV4dGVudCIsImRpbSIsInRvdWNoZW5kaW5nIiwibGlzdGVuZXJzIiwiYnJ1c2giLCJoYW5kbGVTaXplIiwiaW5pdGlhbGl6ZSIsImhhbmRsZSIsInN0YXJ0ZWQiLCJlbWl0dGVyIiwiRW1pdHRlciIsInRvdWNoZXMiLCJub2V2ZW50IiwidzAiLCJ3MSIsIm4wIiwibjEiLCJlMCIsImUxIiwibW92aW5nIiwibG9ja1giLCJsb2NrWSIsIm1vZGUiLCJtZXRhS2V5IiwiYWx0S2V5Iiwic2lnblgiLCJzaWduWSIsInNoaWZ0aW5nIiwic2hpZnRLZXkiLCJwb2ludDAiLCJtb3VzZSIsImVtaXQiLCJiZWZvcmVzdGFydCIsIm1vdmVkIiwiZW5kZWQiLCJ2aWV3Iiwia2V5Q29kZSIsIl9fbm9zZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwiZHJhZ0Rpc2FibGUiLCJwb2ludDEiLCJub2NsaWNrIiwiZHJhZ0VuYWJsZSIsInNlbGVjdGlvbjAiLCJzZWxlY3Rpb24xIiwic3RhcnRpbmciLCJjdXN0b21FdmVudCIsIkJydXNoRXZlbnQiLCJzb3VyY2VSYW5kb21Ob3JtYWwiLCJyYW5kb21Ob3JtYWwiLCJtdSIsInNpZ21hIiwia2VybmVsIiwiZXBhbmVjaG5pa292IiwiZ2F1c3NpYW4iLCJleHAiLCJrZXJuZWxCYW5kd2lkdGgiLCJucmQiLCJkZXZpYXRpb24iLCJHcm91cGVkVmlvbGluIiwiZ3JvdXBJbmZvIiwiX3Nhbml0eUNoZWNrIiwieFBhZGRpbmciLCJ4RG9tYWluIiwieURvbWFpbiIsInlMYWJlbCIsInNob3dYIiwieEFuZ2xlIiwic2hvd1N1YlgiLCJzdWJYQW5nbGUiLCJzaG93V2hpc2tlciIsInNob3dEaXZpZGVyIiwic2hvd0xlZ2VuZCIsInNob3dTaXplIiwic29ydFN1YlgiLCJzaG93T3V0bGllcnMiLCJudW1Qb2ludHMiLCJyZXNldCIsInVwZGF0ZVlTY2FsZSIsInVwZGF0ZVhTY2FsZSIsImFsbFYiLCJzdWJ4IiwiZW50cnkiLCJfZHJhd1Zpb2xpbiIsInNpemVTY2FsZSIsInN1YnhHIiwieEF4aXMiLCJ5QXhpcyIsImdldEJCb3giLCJfYWRkR3JvdXBEaXZpZGVyIiwibGVnZW5kRyIsImFkZFBsb3RUaXRsZSIsImNyZWF0ZVRvb2x0aXAiLCJhZGRCcnVzaCIsInRoZUJydXNoIiwiem9vbSIsImlkZWxUaW1lb3V0IiwibG93Qm91bmQiLCJ1cHBlckJvdW5kIiwiZ2ciLCJxMSIsInEzIiwibWVkIiwibWVkaWFuIiwiZ0luZGV4Iiwia2RlIiwia2VybmVsRGVuc2l0eUVzdGltYXRvciIsImVEb21haW4iLCJ2ZXJ0aWNlcyIsInZpb2xpbkciLCJfdmFsaWRWZXJ0aWNlcyIsInpNYXgiLCJ2aW9saW4iLCJ2UGF0aCIsImlxciIsInVwcGVyIiwiaml0dGVyIiwib3V0bGllcnMiLCJ3YXJuIiwiZ2V0WCIsImNyZWF0ZURhdGFzZXRNZW51IiwidXJsIiwicmVzdWx0cyIsInRpc3N1ZVNpdGVEZXRhaWwiLCJzZWxlY3QyIiwicGxhY2Vob2xkZXIiLCJjYXRjaCIsImNyZWF0ZVRpc3N1ZU1lbnUiLCJsYXVuY2hUb3BFeHByZXNzZWQiLCJ0aXNzdWVJZCIsImhlYXRtYXBSb290SWQiLCJ2aW9saW5Sb290SWQiLCJ1cmxzIiwiZmlsdGVyR2VuZXMiLCIkZmlsdGVySW5mb0RpdiIsIiQiLCJ0b3BHZW5lTGlzdCIsInNlYXJjaEJ5SWQiLCJfc3R5bGVTZWxlY3RlZFRpc3N1ZSIsImxhdW5jaCIsImZvcm1JZCIsIm1lbnVJZCIsInN1Ym1pdElkIiwidGlzc3VlR3JvdXBzIiwiZm9yRXF0bCIsImludmFsaWRUaXNzdWVzIiwiYXJyIiwiZ3JvdXBOYW1lIiwidGlzc3VlU2l0ZSIsInNpdGUiLCJwYXJzZVRpc3N1ZVNpdGVzIiwiY2hlY2tBbGwiLCJzZWN0aW9ucyIsIm1haW5DbGFzcyIsIiRhbGxUaXNzdWVEaXYiLCJjaGFuZ2UiLCJ2YWwiLCJwcm9wIiwiZ3JvdXBOYW1lcyIsInJvd3NQZXJTZWN0aW9uIiwicm93c1JlbWFpbiIsImNvbFNpemUiLCIkc2VjdGlvbnMiLCJjdXJyU2VjdGlvbiIsImduYW1lIiwic2l0ZXMiLCJnSWQiLCJncm91cExlbiIsIiRjdXJyZW50RG9tIiwiJHNpdGVEb20iLCJjbGljayIsImlzIiwiY3JlYXRlVGlzc3VlR3JvdXBNZW51IiwicmVtb3ZlQ2xhc3MiLCJnbGlzdCIsInF1ZXJ5VGlzc3VlSWRzIiwidXNlTmFtZXMiLCJxdWVyeVRpc3N1ZXMiLCJoYXNDbGFzcyIsInNpYmxpbmdzIiwicGFyc2VUaXNzdWVHcm91cE1lbnUiLCJ0bGlzdCIsInFUaXNzdWUiLCIkbWVzc2FnZSIsImNzcyIsIm1lc3NhZ2UiLCJhbGwiLCJnZW5lcyIsInNpbmdsZSIsImdlbmUiLCJmaWx0ZXJlZCIsImdlbmVTeW1ib2xVcHBlciIsInBhcnNlR2VuZXMiLCJhbGxJZHMiLCJtaXNzaW5nR2VuZXMiLCJfdmFsaWRhdGVHZW5lcyIsImdRdWVyeSIsInRRdWVyeSIsImVEYXRhIiwiZGF0YU1lc3NhZ2UiLCJfdmFsaWRhdGVFeHByZXNzaW9uRGF0YSIsImV4cHJlc3Npb24iLCJwYXJzZU1lZGlhbkV4cHJlc3Npb24iLCJzYXZlIiwiY2x1c3RlciIsIm1heENlbGxXIiwibWluQ2VsbFciLCJjZWxsVyIsImRtYXBNYXJnaW4iLCJkbWFwIiwiY2x1c3RlcnMiLCJ0aXNzdWVEaWN0IiwiZ2VuZURpY3QiLCJfYWRkVGlzc3VlQ29sb3JzIiwiX19hZGRGaWx0ZXIiLCJfc29ydFRpc3N1ZXMiLCJfX2FkZFNvcnRUaXNzdWVzIiwiX19hZGRDbHVzdGVyVGlzc3VlcyIsIl9hZGRUb29sQmFyIiwiYWN0aW9uIiwiX3JlbmRlclZpb2xpblBsb3QiLCJfY3VzdG9taXplTW91c2VFdmVudHMiLCJjb2xvckhleCIsIl9yZW5kZXJWaW9saW5IZWxwZXIiLCJjaGFydCIsInJvb3RJZCIsInRpc3N1ZU9yZGVyIiwiZ0NvdW50cyIsIl9zZXRWaW9saW5QbG90TWFyZ2lucyIsIl9zZXRNYXJnaW5zIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiX3NldFZpb2xpblBsb3REaW1lbnNpb25zIiwidmlvbGluTGVnZW5kVyIsInN2Z1ciLCJwbG90IiwibG9jIiwiX2FkZFZpb2xpblRpc3N1ZUNvbG9yQmFuZCIsIl9jaGFuZ2VWaW9saW5YTGFiZWwiLCJxSWQiLCJCYXRjaEdlbmVFeHByZXNzaW9uIl0sIm1hcHBpbmdzIjoieVhBQUEsSUFBSUEsRUFBTSxHQUNOQyxFQUFNLEdBQ05DLEVBQVEsR0FDUkMsRUFBVSxHQUNWQyxFQUFTLEdBRWIsU0FBU0MsRUFBZ0JDLEdBQ3ZCLE9BQU8sSUFBSUMsU0FBUyxJQUFLLFdBQWFELEVBQVFFLElBQUksU0FBU0MsRUFBTUMsR0FDL0QsT0FBT0MsS0FBS0MsVUFBVUgsR0FBUSxPQUFTQyxFQUFJLE1BQzFDRyxLQUFLLEtBQU8sS0FXakIsU0FBU0MsRUFBYUMsR0FDcEIsSUFBSUMsRUFBWUMsT0FBT0MsT0FBTyxNQUMxQlosRUFBVSxHQVVkLE9BUkFTLEVBQUtJLFFBQVEsU0FBU0MsR0FDcEIsSUFBSyxJQUFJQyxLQUFVRCxFQUNYQyxLQUFVTCxHQUNkVixFQUFRZ0IsS0FBS04sRUFBVUssR0FBVUEsS0FLaENmLEVBR1QsU0FBU2lCLEVBQUlDLEVBQU9DLEdBQ2xCLElBQUlD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
