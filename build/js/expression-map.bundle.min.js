!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery"),require("file-saver")):"function"==typeof define&&define.amd?define(["exports","jquery","file-saver"],e):e((t=t||self).BatchGeneExpression={},t.$,t.saveAs)}(this,(function(t,e,n){"use strict";e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e,n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n;var r={},a={};function i(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function o(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function c(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function s(t){var e=t.getUTCHours(),n=t.getUTCMinutes(),r=t.getUTCSeconds(),a=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+c(-t,6):t>9999?"+"+c(t,6):c(t,4)}(t.getUTCFullYear())+"-"+c(t.getUTCMonth()+1,2)+"-"+c(t.getUTCDate(),2)+(a?"T"+c(e,2)+":"+c(n,2)+":"+c(r,2)+"."+c(a,3)+"Z":r?"T"+c(e,2)+":"+c(n,2)+":"+c(r,2)+"Z":n||e?"T"+c(e,2)+":"+c(n,2)+"Z":"")}function f(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function c(t,e){var i,o=[],c=t.length,s=0,f=0,l=c<=0,u=!1;function d(){if(l)return a;if(u)return u=!1,r;var e,i,o=s;if(34===t.charCodeAt(o)){for(;s++<c&&34!==t.charCodeAt(s)||34===t.charCodeAt(++s););return(e=s)>=c?l=!0:10===(i=t.charCodeAt(s++))?u=!0:13===i&&(u=!0,10===t.charCodeAt(s)&&++s),t.slice(o+1,e-1).replace(/""/g,'"')}for(;s<c;){if(10===(i=t.charCodeAt(e=s++)))u=!0;else if(13===i)u=!0,10===t.charCodeAt(s)&&++s;else if(i!==n)continue;return t.slice(o,e)}return l=!0,t.slice(o,c)}for(10===t.charCodeAt(c-1)&&--c,13===t.charCodeAt(c-1)&&--c;(i=d())!==a;){for(var h=[];i!==r&&i!==a;)h.push(i),i=d();e&&null==(h=e(h,f++))||o.push(h)}return o}function f(e,n){return e.map((function(e){return n.map((function(t){return u(e[t])})).join(t)}))}function l(e){return e.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?s(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,a=c(t,(function(t,a){if(n)return n(t,a-1);r=t,n=e?function(t,e){var n=i(t);return function(r,a){return e(n(r),a,t)}}(t,e):i(t)}));return a.columns=r||[],a},parseRows:c,format:function(e,n){return null==n&&(n=o(e)),[n.map(u).join(t)].concat(f(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=o(t)),f(t,e).join("\n")},formatRows:function(t){return t.map(l).join("\n")},formatRow:l,formatValue:u}}f(","),f("\t"),new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function l(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function u(t,e){return fetch(t,e).then(l)}var d="http://www.w3.org/1999/xhtml",h={svg:"http://www.w3.org/2000/svg",xhtml:d,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function b(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),h.hasOwnProperty(e)?{space:h[e],local:t}:t}function p(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===d&&e.documentElement.namespaceURI===d?e.createElement(t):e.createElementNS(n,t)}}function g(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function v(t){var e=b(t);return(e.local?g:p)(e)}function y(){}function m(t){return null==t?y:function(){return this.querySelector(t)}}function w(){return[]}function x(t){return null==t?w:function(){return this.querySelectorAll(t)}}function _(t){return function(){return this.matches(t)}}function M(t){return new Array(t.length)}function T(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}T.prototype={constructor:T,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function S(t,e,n,r,a,i){for(var o,c=0,s=e.length,f=i.length;c<f;++c)(o=e[c])?(o.__data__=i[c],r[c]=o):n[c]=new T(t,i[c]);for(;c<s;++c)(o=e[c])&&(a[c]=o)}function k(t,e,n,r,a,i,o){var c,s,f,l={},u=e.length,d=i.length,h=new Array(u);for(c=0;c<u;++c)(s=e[c])&&(h[c]=f="$"+o.call(s,s.__data__,c,e),f in l?a[c]=s:l[f]=s);for(c=0;c<d;++c)(s=l[f="$"+o.call(t,i[c],c,i)])?(r[c]=s,s.__data__=i[c],l[f]=null):n[c]=new T(t,i[c]);for(c=0;c<u;++c)(s=e[c])&&l[h[c]]===s&&(a[c]=s)}function A(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function C(t){return function(){this.removeAttribute(t)}}function E(t){return function(){this.removeAttributeNS(t.space,t.local)}}function N(t,e){return function(){this.setAttribute(t,e)}}function D(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function I(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function P(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function U(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function j(t){return function(){this.style.removeProperty(t)}}function L(t,e,n){return function(){this.style.setProperty(t,e,n)}}function z(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function B(t,e){return t.style.getPropertyValue(e)||U(t).getComputedStyle(t,null).getPropertyValue(e)}function F(t){return function(){delete this[t]}}function O(t,e){return function(){this[t]=e}}function Y(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function q(t){return t.trim().split(/^|\s+/)}function H(t){return t.classList||new G(t)}function G(t){this._node=t,this._names=q(t.getAttribute("class")||"")}function V(t,e){for(var n=H(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function R(t,e){for(var n=H(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function X(t){return function(){V(this,t)}}function W(t){return function(){R(this,t)}}function Z(t,e){return function(){(e.apply(this,arguments)?V:R)(this,t)}}function J(){this.textContent=""}function K(t){return function(){this.textContent=t}}function Q(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function tt(){this.innerHTML=""}function et(t){return function(){this.innerHTML=t}}function nt(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function rt(){this.nextSibling&&this.parentNode.appendChild(this)}function at(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function it(){return null}function ot(){var t=this.parentNode;t&&t.removeChild(this)}function ct(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function st(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}G.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var ft={},lt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ft={mouseenter:"mouseover",mouseleave:"mouseout"}));function ut(t,e,n){return t=dt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function dt(t,e,n){return function(r){var a=lt;lt=r;try{t.call(this,this.__data__,e,n)}finally{lt=a}}}function ht(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function bt(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?e.length=a:delete this.__on}}}function pt(t,e,n){var r=ft.hasOwnProperty(t.type)?ut:dt;return function(a,i,o){var c,s=this.__on,f=r(e,i,o);if(s)for(var l=0,u=s.length;l<u;++l)if((c=s[l]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=f,c.capture=n),void(c.value=e);this.addEventListener(t.type,f,n),c={type:t.type,name:t.name,value:e,listener:f,capture:n},s?s.push(c):this.__on=[c]}}function gt(t,e,n){var r=U(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}function vt(t,e){return function(){return gt(this,t,e)}}function yt(t,e){return function(){return gt(this,t,e.apply(this,arguments))}}var mt=[null];function wt(t,e){this._groups=t,this._parents=e}function xt(){return new wt([[document.documentElement]],mt)}function _t(t){return"string"==typeof t?new wt([[document.querySelector(t)]],[document.documentElement]):new wt([[t]],mt)}function Mt(){for(var t,e=lt;t=e.sourceEvent;)e=t;return e}function Tt(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var a=t.getBoundingClientRect();return[e.clientX-a.left-t.clientLeft,e.clientY-a.top-t.clientTop]}function St(t){var e=Mt();return e.changedTouches&&(e=e.changedTouches[0]),Tt(t,e)}function kt(t){return"string"==typeof t?new wt([document.querySelectorAll(t)],[document.documentElement]):new wt([null==t?[]:t],mt)}wt.prototype=xt.prototype={constructor:wt,select:function(t){"function"!=typeof t&&(t=m(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o,c=e[a],s=c.length,f=r[a]=new Array(s),l=0;l<s;++l)(i=c[l])&&(o=t.call(i,i.__data__,l,c))&&("__data__"in i&&(o.__data__=i.__data__),f[l]=o);return new wt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,c=e[i],s=c.length,f=0;f<s;++f)(o=c[f])&&(r.push(t.call(o,o.__data__,f,c)),a.push(o));return new wt(r,a)},filter:function(t){"function"!=typeof t&&(t=_(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new wt(r,this._parents)},data:function(t,e){if(!t)return h=new Array(this.size()),f=-1,this.each((function(t){h[++f]=t})),h;var n=e?k:S,r=this._parents,a=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var i=a.length,o=new Array(i),c=new Array(i),s=new Array(i),f=0;f<i;++f){var l=r[f],u=a[f],d=u.length,h=t.call(l,l&&l.__data__,f,r),b=h.length,p=c[f]=new Array(b),g=o[f]=new Array(b);n(l,u,p,g,s[f]=new Array(d),h,e);for(var v,y,m=0,w=0;m<b;++m)if(v=p[m]){for(m>=w&&(w=m+1);!(y=g[w])&&++w<b;);v._next=y||null}}return(o=new wt(o,r))._enter=c,o._exit=s,o},enter:function(){return new wt(this._enter||this._groups.map(M),this._parents)},exit:function(){return new wt(this._exit||this._groups.map(M),this._parents)},join:function(t,e,n){var r=this.enter(),a=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(a=e(a)),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],l=n[c],u=f.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=f[h]||l[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new wt(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=A);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,c=n[i],s=c.length,f=a[i]=new Array(s),l=0;l<s;++l)(o=c[l])&&(f[l]=o);f.sort(e)}return new wt(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,c=i.length;o<c;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=b(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?E:C:"function"==typeof e?n.local?P:I:n.local?D:N)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?j:"function"==typeof e?z:L)(t,e,null==n?"":n)):B(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?F:"function"==typeof e?Y:O)(t,e)):this.node()[t]},classed:function(t,e){var n=q(t+"");if(arguments.length<2){for(var r=H(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?Z:e?X:W)(n,e))},text:function(t){return arguments.length?this.each(null==t?J:("function"==typeof t?Q:K)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?tt:("function"==typeof t?nt:et)(t)):this.node().innerHTML},raise:function(){return this.each(rt)},lower:function(){return this.each(at)},append:function(t){var e="function"==typeof t?t:v(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:v(t),r=null==e?it:"function"==typeof e?e:m(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ot)},clone:function(t){return this.select(t?st:ct)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=ht(t+""),o=i.length;if(!(arguments.length<2)){for(c=e?pt:bt,null==n&&(n=!1),r=0;r<o;++r)this.each(c(i[r],e,n));return this}var c=this.node().__on;if(c)for(var s,f=0,l=c.length;f<l;++f)for(r=0,s=c[f];r<o;++r)if((a=i[r]).type===s.type&&a.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?yt:vt)(t,e))}};function At(){}function Ct(t,e){var n=new At;if(t instanceof At)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,a=-1,i=t.length;if(null==e)for(;++a<i;)n.set(a,t[a]);else for(;++a<i;)n.set(e(r=t[a],a,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}function Et(){var t,e,n,r=[],a=[];function i(n,a,o,c){if(a>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,f,l,u=-1,d=n.length,h=r[a++],b=Ct(),p=o();++u<d;)(l=b.get(s=h(f=n[u])+""))?l.push(f):b.set(s,[f]);return b.each((function(t,e){c(p,e,i(t,a,o,c))})),p}return n={object:function(t){return i(t,0,Nt,Dt)},map:function(t){return i(t,0,It,Pt)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var o,c=a[i-1];return null!=e&&i>=r.length?o=n.entries():(o=[],n.each((function(e,n){o.push({key:n,values:t(e,i)})}))),null!=c?o.sort((function(t,e){return c(t.key,e.key)})):o}(i(t,0,It,Pt),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return a[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function Nt(){return{}}function Dt(t,e,n){t[e]=n}function It(){return Ct()}function Pt(t,e,n){t.set(e,n)}function $t(){}At.prototype=Ct.prototype={constructor:At,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Ut=Ct.prototype;function jt(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v8&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v8&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v8&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v8&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v8&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v8&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v8",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}function Lt(t){const e="tissueInfo";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),n}function zt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}$t.prototype=function(t,e){var n=new $t;if(t instanceof $t)t.each((function(t){n.add(t)}));else if(t){var r=-1,a=t.length;if(null==e)for(;++r<a;)n.add(t[r]);else for(;++r<a;)n.add(e(t[r],r,t))}return n}.prototype={constructor:$t,has:Ut.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Ut.remove,clear:Ut.clear,values:Ut.keys,size:Ut.size,empty:Ut.empty,each:Ut.each};var Bt,Ft,Ot=(1===(Bt=zt).length&&(Ft=Bt,Bt=function(t,e){return zt(Ft(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;Bt(t[a],e)<0?n=a+1:r=a}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;Bt(t[a],e)>0?r=a:n=a+1}return n}}).right;function Yt(t){return null===t?NaN:+t}function qt(t,e){var n=function(t,e){var n,r,a=t.length,i=0,o=-1,c=0,s=0;if(null==e)for(;++o<a;)isNaN(n=Yt(t[o]))||(s+=(r=n-c)*(n-(c+=r/++i)));else for(;++o<a;)isNaN(n=Yt(e(t[o],o,t)))||(s+=(r=n-c)*(n-(c+=r/++i)));if(i>1)return s/(i-1)}(t,e);return n?Math.sqrt(n):n}function Ht(t,e){var n,r,a,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=a=n;++o<i;)null!=(n=t[o])&&(r>n&&(r=n),a<n&&(a=n))}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=a=n;++o<i;)null!=(n=e(t[o],o,t))&&(r>n&&(r=n),a<n&&(a=n));return[r,a]}function Gt(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i}var Vt=Math.sqrt(50),Rt=Math.sqrt(10),Xt=Math.sqrt(2);function Wt(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=Vt?10:i>=Rt?5:i>=Xt?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=Vt?10:i>=Rt?5:i>=Xt?2:1)}function Zt(t,e,n){if(null==n&&(n=Yt),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,a=(r-1)*e,i=Math.floor(a),o=+n(t[i],i,t);return o+(+n(t[i+1],i+1,t)-o)*(a-i)}}function Jt(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r}function Kt(t,e){var n,r=t.length,a=r,i=-1,o=0;if(null==e)for(;++i<r;)isNaN(n=Yt(t[i]))?--a:o+=n;else for(;++i<r;)isNaN(n=Yt(e(t[i],i,t)))?--a:o+=n;if(a)return o/a}function Qt(t,e){var n,r=t.length,a=-1,i=[];if(null==e)for(;++a<r;)isNaN(n=Yt(t[a]))||i.push(n);else for(;++a<r;)isNaN(n=Yt(e(t[a],a,t)))||i.push(n);return Zt(i.sort(zt),.5)}function te(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r}function ee(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function ne(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}var re=Array.prototype,ae=re.map,ie=re.slice,oe={name:"implicit"};function ce(){var t=Ct(),e=[],n=[],r=oe;function a(a){var i=a+"",o=t.get(i);if(!o){if(r!==oe)return r;t.set(i,o=e.push(a))}return n[(o-1)%n.length]}return a.domain=function(n){if(!arguments.length)return e.slice();e=[],t=Ct();for(var r,i,o=-1,c=n.length;++o<c;)t.has(i=(r=n[o])+"")||t.set(i,e.push(r));return a},a.range=function(t){return arguments.length?(n=ie.call(t),a):n.slice()},a.unknown=function(t){return arguments.length?(r=t,a):r},a.copy=function(){return ce(e,n).unknown(r)},ee.apply(a,arguments),a}function se(){var t,e,n=ce().unknown(void 0),r=n.domain,a=n.range,i=[0,1],o=!1,c=0,s=0,f=.5;function l(){var n=r().length,l=i[1]<i[0],u=i[l-0],d=i[1-l];t=(d-u)/Math.max(1,n-c+2*s),o&&(t=Math.floor(t)),u+=(d-u-t*(n-c))*f,e=t*(1-c),o&&(u=Math.round(u),e=Math.round(e));var h=Gt(n).map((function(e){return u+t*e}));return a(l?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),l()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],l()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,l()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,l()):o},n.padding=function(t){return arguments.length?(c=Math.min(1,s=+t),l()):c},n.paddingInner=function(t){return arguments.length?(c=Math.min(1,t),l()):c},n.paddingOuter=function(t){return arguments.length?(s=+t,l()):s},n.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),l()):f},n.copy=function(){return se(r(),i).round(o).paddingInner(c).paddingOuter(s).align(f)},ee.apply(l(),arguments)}function fe(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function le(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function ue(){}var de="\\s*([+-]?\\d+)\\s*",he="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",be="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pe=/^#([0-9a-f]{3,8})$/,ge=new RegExp("^rgb\\("+[de,de,de]+"\\)$"),ve=new RegExp("^rgb\\("+[be,be,be]+"\\)$"),ye=new RegExp("^rgba\\("+[de,de,de,he]+"\\)$"),me=new RegExp("^rgba\\("+[be,be,be,he]+"\\)$"),we=new RegExp("^hsl\\("+[he,be,be]+"\\)$"),xe=new RegExp("^hsla\\("+[he,be,be,he]+"\\)$"),_e={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Me(){return this.rgb().formatHex()}function Te(){return this.rgb().formatRgb()}function Se(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=pe.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?ke(e):3===n?new Ne(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Ae(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Ae(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ge.exec(t))?new Ne(e[1],e[2],e[3],1):(e=ve.exec(t))?new Ne(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ye.exec(t))?Ae(e[1],e[2],e[3],e[4]):(e=me.exec(t))?Ae(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=we.exec(t))?$e(e[1],e[2]/100,e[3]/100,1):(e=xe.exec(t))?$e(e[1],e[2]/100,e[3]/100,e[4]):_e.hasOwnProperty(t)?ke(_e[t]):"transparent"===t?new Ne(NaN,NaN,NaN,0):null}function ke(t){return new Ne(t>>16&255,t>>8&255,255&t,1)}function Ae(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ne(t,e,n,r)}function Ce(t){return t instanceof ue||(t=Se(t)),t?new Ne((t=t.rgb()).r,t.g,t.b,t.opacity):new Ne}function Ee(t,e,n,r){return 1===arguments.length?Ce(t):new Ne(t,e,n,null==r?1:r)}function Ne(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function De(){return"#"+Pe(this.r)+Pe(this.g)+Pe(this.b)}function Ie(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Pe(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function $e(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new je(t,e,n,r)}function Ue(t){if(t instanceof je)return new je(t.h,t.s,t.l,t.opacity);if(t instanceof ue||(t=Se(t)),!t)return new je;if(t instanceof je)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,c=i-a,s=(i+a)/2;return c?(o=e===i?(n-r)/c+6*(n<r):n===i?(r-e)/c+2:(e-n)/c+4,c/=s<.5?i+a:2-i-a,o*=60):c=s>0&&s<1?0:o,new je(o,c,s,t.opacity)}function je(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Le(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}fe(ue,Se,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Me,formatHex:Me,formatHsl:function(){return Ue(this).formatHsl()},formatRgb:Te,toString:Te}),fe(Ne,Ee,le(ue,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ne(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ne(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:De,formatHex:De,formatRgb:Ie,toString:Ie})),fe(je,(function(t,e,n,r){return 1===arguments.length?Ue(t):new je(t,e,n,null==r?1:r)}),le(ue,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new je(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new je(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new Ne(Le(t>=240?t-240:t+120,a,r),Le(t,a,r),Le(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var ze=Math.PI/180,Be=180/Math.PI,Fe=6/29,Oe=3*Fe*Fe;function Ye(t){if(t instanceof qe)return new qe(t.l,t.a,t.b,t.opacity);if(t instanceof We)return Ze(t);t instanceof Ne||(t=Ce(t));var e,n,r=Re(t.r),a=Re(t.g),i=Re(t.b),o=He((.2225045*r+.7168786*a+.0606169*i)/1);return r===a&&a===i?e=n=o:(e=He((.4360747*r+.3850649*a+.1430804*i)/.96422),n=He((.0139322*r+.0971045*a+.7141733*i)/.82521)),new qe(116*o-16,500*(e-o),200*(o-n),t.opacity)}function qe(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function He(t){return t>.008856451679035631?Math.pow(t,1/3):t/Oe+4/29}function Ge(t){return t>Fe?t*t*t:Oe*(t-4/29)}function Ve(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Re(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Xe(t){if(t instanceof We)return new We(t.h,t.c,t.l,t.opacity);if(t instanceof qe||(t=Ye(t)),0===t.a&&0===t.b)return new We(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Be;return new We(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function We(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Ze(t){if(isNaN(t.h))return new qe(t.l,0,0,t.opacity);var e=t.h*ze;return new qe(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}fe(qe,(function(t,e,n,r){return 1===arguments.length?Ye(t):new qe(t,e,n,null==r?1:r)}),le(ue,{brighter:function(t){return new qe(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new qe(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Ne(Ve(3.1338561*(e=.96422*Ge(e))-1.6168667*(t=1*Ge(t))-.4906146*(n=.82521*Ge(n))),Ve(-.9787684*e+1.9161415*t+.033454*n),Ve(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),fe(We,(function(t,e,n,r){return 1===arguments.length?Xe(t):new We(t,e,n,null==r?1:r)}),le(ue,{brighter:function(t){return new We(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new We(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Ze(this).rgb()}}));var Je=-.14861,Ke=1.78277,Qe=-.29227,tn=-.90649,en=1.97294,nn=en*tn,rn=en*Ke,an=Ke*Qe-tn*Je;function on(t){if(t instanceof sn)return new sn(t.h,t.s,t.l,t.opacity);t instanceof Ne||(t=Ce(t));var e=t.r/255,n=t.g/255,r=t.b/255,a=(an*r+nn*e-rn*n)/(an+nn-rn),i=r-a,o=(en*(n-a)-Qe*i)/tn,c=Math.sqrt(o*o+i*i)/(en*a*(1-a)),s=c?Math.atan2(o,i)*Be-120:NaN;return new sn(s<0?s+360:s,c,a,t.opacity)}function cn(t,e,n,r){return 1===arguments.length?on(t):new sn(t,e,n,null==r?1:r)}function sn(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function fn(t){return function(){return t}}function ln(t,e){return function(n){return t+n*e}}function un(t){return 1==(t=+t)?dn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):fn(isNaN(e)?n:e)}}function dn(t,e){var n=e-t;return n?ln(t,n):fn(isNaN(t)?e:t)}fe(sn,cn,le(ue,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new sn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new sn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ze,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),a=Math.sin(t);return new Ne(255*(e+n*(Je*r+Ke*a)),255*(e+n*(Qe*r+tn*a)),255*(e+n*(en*r)),this.opacity)}}));var hn=function t(e){var n=un(e);function r(t,e){var r=n((t=Ee(t)).r,(e=Ee(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=dn(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);var bn,pn=(bn=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],o=r>0?t[r-1]:2*a-i,c=r<e-1?t[r+2]:2*i-a;return function(t,e,n,r,a){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*r+o*a)/6}((n-r/e)*e,o,a,i,c)}},function(t){var e,n,r=t.length,a=new Array(r),i=new Array(r),o=new Array(r);for(e=0;e<r;++e)n=Ee(t[e]),a[e]=n.r||0,i[e]=n.g||0,o[e]=n.b||0;return a=bn(a),i=bn(i),o=bn(o),n.opacity=1,function(t){return n.r=a(t),n.g=i(t),n.b=o(t),n+""}});function gn(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,a=e.slice();return function(i){for(n=0;n<r;++n)a[n]=t[n]*(1-i)+e[n]*i;return a}}function vn(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=Tn(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}function yn(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function mn(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function wn(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Tn(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}var xn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,_n=new RegExp(xn.source,"g");function Mn(t,e){var n,r,a,i=xn.lastIndex=_n.lastIndex=0,o=-1,c=[],s=[];for(t+="",e+="";(n=xn.exec(t))&&(r=_n.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),c[o]?c[o]+=a:c[++o]=a),(n=n[0])===(r=r[0])?c[o]?c[o]+=r:c[++o]=r:(c[++o]=null,s.push({i:o,x:mn(n,r)})),i=_n.lastIndex;return i<e.length&&(a=e.slice(i),c[o]?c[o]+=a:c[++o]=a),c.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)c[(n=s[r]).i]=n.x(t);return c.join("")})}function Tn(t,e){var n,r=typeof e;return null==e||"boolean"===r?fn(e):("number"===r?mn:"string"===r?(n=Se(e))?(e=n,hn):Mn:e instanceof Se?hn:e instanceof Date?yn:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?gn:Array.isArray(e)?vn:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?wn:mn)(t,e)}function Sn(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var kn,An,Cn,En,Nn=180/Math.PI,Dn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function In(t,e,n,r,a,i){var o,c,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,s/=c),t*r<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*Nn,skewX:Math.atan(s)*Nn,scaleX:o,scaleY:c}}function Pn(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var c=[],s=[];return i=t(i),o=t(o),function(t,r,a,i,o,c){if(t!==a||r!==i){var s=o.push("translate(",null,e,null,n);c.push({i:s-4,x:mn(t,a)},{i:s-2,x:mn(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,c,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:mn(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,c,s),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:mn(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,c,s),function(t,e,n,r,i,o){if(t!==n||e!==r){var c=i.push(a(i)+"scale(",null,",",null,")");o.push({i:c-4,x:mn(t,n)},{i:c-2,x:mn(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,c,s),i=o=null,function(t){for(var e,n=-1,r=s.length;++n<r;)c[(e=s[n]).i]=e.x(t);return c.join("")}}}var $n=Pn((function(t){return"none"===t?Dn:(kn||(kn=document.createElement("DIV"),An=document.documentElement,Cn=document.defaultView),kn.style.transform=t,t=Cn.getComputedStyle(An.appendChild(kn),null).getPropertyValue("transform"),An.removeChild(kn),In(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Un=Pn((function(t){return null==t?Dn:(En||(En=document.createElementNS("http://www.w3.org/2000/svg","g")),En.setAttribute("transform",t),(t=En.transform.baseVal.consolidate())?In((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Dn)}),", ",")",")");function jn(t){return function e(n){function r(e,r){var a=t((e=cn(e)).h,(r=cn(r)).h),i=dn(e.s,r.s),o=dn(e.l,r.l),c=dn(e.opacity,r.opacity);return function(t){return e.h=a(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=c(t),e+""}}return n=+n,r.gamma=e,r}(1)}jn((function(t,e){var n=e-t;return n?ln(t,n>180||n<-180?n-360*Math.round(n/360):n):fn(isNaN(t)?e:t)}));var Ln=jn(dn);function zn(t){return+t}var Bn=[0,1];function Fn(t){return t}function On(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function Yn(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function qn(t,e,n){var r=t[0],a=t[1],i=e[0],o=e[1];return a<r?(r=On(a,r),i=n(o,i)):(r=On(r,a),i=n(i,o)),function(t){return i(r(t))}}function Hn(t,e,n){var r=Math.min(t.length,e.length)-1,a=new Array(r),i=new Array(r),o=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<r;)a[o]=On(t[o],t[o+1]),i[o]=n(e[o],e[o+1]);return function(e){var n=Ot(t,e,1,r)-1;return i[n](a[n](e))}}function Gn(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Vn(t,e){return function(){var t,e,n,r,a,i,o=Bn,c=Bn,s=Tn,f=Fn;function l(){return r=Math.min(o.length,c.length)>2?Hn:qn,a=i=null,u}function u(e){return isNaN(e=+e)?n:(a||(a=r(o.map(t),c,s)))(t(f(e)))}return u.invert=function(n){return f(e((i||(i=r(c,o.map(t),mn)))(n)))},u.domain=function(t){return arguments.length?(o=ae.call(t,zn),f===Fn||(f=Yn(o)),l()):o.slice()},u.range=function(t){return arguments.length?(c=ie.call(t),l()):c.slice()},u.rangeRound=function(t){return c=ie.call(t),s=Sn,l()},u.clamp=function(t){return arguments.length?(f=t?Yn(o):Fn,u):f!==Fn},u.interpolate=function(t){return arguments.length?(s=t,l()):s},u.unknown=function(t){return arguments.length?(n=t,u):n},function(n,r){return t=n,e=r,l()}}()(t,e)}function Rn(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function Xn(t){return(t=Rn(Math.abs(t)))?t[1]:NaN}var Wn,Zn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Jn(t){if(!(e=Zn.exec(t)))throw new Error("invalid format: "+t);var e;return new Kn({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Kn(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Qn(t,e){var n=Rn(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}Jn.prototype=Kn.prototype,Kn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var tr={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Qn(100*t,e)},r:Qn,s:function(t,e){var n=Rn(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(Wn=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+Rn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function er(t){return t}var nr,rr,ar,ir=Array.prototype.map,or=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function cr(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?er:(e=ir.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var a=t.length,i=[],o=0,c=e[0],s=0;a>0&&c>0&&(s+c+1>r&&(c=Math.max(1,r-s)),i.push(t.substring(a-=c,a+c)),!((s+=c+1)>r));)c=e[o=(o+1)%e.length];return i.reverse().join(n)}),a=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",c=void 0===t.numerals?er:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(ir.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",f=void 0===t.minus?"-":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function u(t){var e=(t=Jn(t)).fill,n=t.align,u=t.sign,d=t.symbol,h=t.zero,b=t.width,p=t.comma,g=t.precision,v=t.trim,y=t.type;"n"===y?(p=!0,y="g"):tr[y]||(void 0===g&&(g=12),v=!0,y="g"),(h||"0"===e&&"="===n)&&(h=!0,e="0",n="=");var m="$"===d?a:"#"===d&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",w="$"===d?i:/[%p]/.test(y)?s:"",x=tr[y],_=/[defgprs%]/.test(y);function M(t){var a,i,s,d=m,M=w;if("c"===y)M=x(t)+M,t="";else{var T=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:x(Math.abs(t),g),v&&(t=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(!+t[r])break t;a>0&&(a=0)}return a>0?t.slice(0,a)+t.slice(e+1):t}(t)),T&&0==+t&&"+"!==u&&(T=!1),d=(T?"("===u?u:f:"-"===u||"("===u?"":u)+d,M=("s"===y?or[8+Wn/3]:"")+M+(T&&"("===u?")":""),_)for(a=-1,i=t.length;++a<i;)if(48>(s=t.charCodeAt(a))||s>57){M=(46===s?o+t.slice(a+1):t.slice(a))+M,t=t.slice(0,a);break}}p&&!h&&(t=r(t,1/0));var S=d.length+t.length+M.length,k=S<b?new Array(b-S+1).join(e):"";switch(p&&h&&(t=r(k+t,k.length?b-M.length:1/0),k=""),n){case"<":t=d+t+M+k;break;case"=":t=d+k+t+M;break;case"^":t=k.slice(0,S=k.length>>1)+d+t+M+k.slice(S);break;default:t=k+d+t+M}return c(t)}return g=void 0===g?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),M.toString=function(){return t+""},M}return{format:u,formatPrefix:function(t,e){var n=u(((t=Jn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Xn(e)/3))),a=Math.pow(10,-r),i=or[8+r/3];return function(t){return n(a*t)+i}}}}function sr(t,e,n,r){var a,i=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=Vt?a*=10:i>=Rt?a*=5:i>=Xt&&(a*=2),e<t?-a:a}(t,e,n);switch((r=Jn(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Xn(e)/3)))-Xn(Math.abs(t)))}(i,o))||(r.precision=a),ar(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Xn(e)-Xn(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=function(t){return Math.max(0,-Xn(Math.abs(t)))}(i))||(r.precision=a-2*("%"===r.type))}return rr(r)}function fr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,a,i,o,c=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=Wt(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(a=Math.ceil(e-t+1));++c<a;)i[c]=(t+c)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(a=Math.ceil(t-e+1));++c<a;)i[c]=(t-c)/o;return r&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return sr(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,a=e(),i=0,o=a.length-1,c=a[i],s=a[o];return s<c&&(r=c,c=s,s=r,r=i,i=o,o=r),(r=Wt(c,s,n))>0?r=Wt(c=Math.floor(c/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=Wt(c=Math.ceil(c*r)/r,s=Math.floor(s*r)/r,n)),r>0?(a[i]=Math.floor(c/r)*r,a[o]=Math.ceil(s/r)*r,e(a)):r<0&&(a[i]=Math.ceil(c*r)/r,a[o]=Math.floor(s*r)/r,e(a)),t},t}function lr(){var t=Vn(Fn,Fn);return t.copy=function(){return Gn(t,lr())},ee.apply(t,arguments),fr(t)}nr=cr({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),rr=nr.format,ar=nr.formatPrefix;var ur=new Date,dr=new Date;function hr(t,e,n,r){function a(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return a.floor=function(e){return t(e=new Date(+e)),e},a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,c=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return c;do{c.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return c},a.filter=function(n){return hr((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(a.count=function(e,r){return ur.setTime(+e),dr.setTime(+r),t(ur),t(dr),Math.floor(n(ur,dr))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var br=hr((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));br.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?hr((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):br:null};hr((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),hr((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()})),hr((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}));var pr=hr((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}));function gr(t){return hr((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var vr=gr(0),yr=gr(1),mr=(gr(2),gr(3),gr(4)),wr=(gr(5),gr(6),hr((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),hr((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()})));wr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?hr((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};hr((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})),hr((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}));var xr=hr((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}));function _r(t){return hr((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var Mr=_r(0),Tr=_r(1),Sr=(_r(2),_r(3),_r(4)),kr=(_r(5),_r(6),hr((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),hr((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));function Ar(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Cr(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Er(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}kr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?hr((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var Nr,Dr,Ir,Pr={"-":"",_:" ",0:"0"},$r=/^\s*\d+/,Ur=/^%/,jr=/[\\^$*+?|[\]().{}]/g;function Lr(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function zr(t){return t.replace(jr,"\\$&")}function Br(t){return new RegExp("^(?:"+t.map(zr).join("|")+")","i")}function Fr(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Or(t,e,n){var r=$r.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Yr(t,e,n){var r=$r.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function qr(t,e,n){var r=$r.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Hr(t,e,n){var r=$r.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Gr(t,e,n){var r=$r.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Vr(t,e,n){var r=$r.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Rr(t,e,n){var r=$r.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Xr(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Wr(t,e,n){var r=$r.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function Zr(t,e,n){var r=$r.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Jr(t,e,n){var r=$r.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Kr(t,e,n){var r=$r.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Qr(t,e,n){var r=$r.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ta(t,e,n){var r=$r.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function ea(t,e,n){var r=$r.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function na(t,e,n){var r=$r.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function ra(t,e,n){var r=$r.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function aa(t,e,n){var r=Ur.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function ia(t,e,n){var r=$r.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function oa(t,e,n){var r=$r.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function ca(t,e){return Lr(t.getDate(),e,2)}function sa(t,e){return Lr(t.getHours(),e,2)}function fa(t,e){return Lr(t.getHours()%12||12,e,2)}function la(t,e){return Lr(1+pr.count(wr(t),t),e,3)}function ua(t,e){return Lr(t.getMilliseconds(),e,3)}function da(t,e){return ua(t,e)+"000"}function ha(t,e){return Lr(t.getMonth()+1,e,2)}function ba(t,e){return Lr(t.getMinutes(),e,2)}function pa(t,e){return Lr(t.getSeconds(),e,2)}function ga(t){var e=t.getDay();return 0===e?7:e}function va(t,e){return Lr(vr.count(wr(t)-1,t),e,2)}function ya(t,e){var n=t.getDay();return t=n>=4||0===n?mr(t):mr.ceil(t),Lr(mr.count(wr(t),t)+(4===wr(t).getDay()),e,2)}function ma(t){return t.getDay()}function wa(t,e){return Lr(yr.count(wr(t)-1,t),e,2)}function xa(t,e){return Lr(t.getFullYear()%100,e,2)}function _a(t,e){return Lr(t.getFullYear()%1e4,e,4)}function Ma(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Lr(e/60|0,"0",2)+Lr(e%60,"0",2)}function Ta(t,e){return Lr(t.getUTCDate(),e,2)}function Sa(t,e){return Lr(t.getUTCHours(),e,2)}function ka(t,e){return Lr(t.getUTCHours()%12||12,e,2)}function Aa(t,e){return Lr(1+xr.count(kr(t),t),e,3)}function Ca(t,e){return Lr(t.getUTCMilliseconds(),e,3)}function Ea(t,e){return Ca(t,e)+"000"}function Na(t,e){return Lr(t.getUTCMonth()+1,e,2)}function Da(t,e){return Lr(t.getUTCMinutes(),e,2)}function Ia(t,e){return Lr(t.getUTCSeconds(),e,2)}function Pa(t){var e=t.getUTCDay();return 0===e?7:e}function $a(t,e){return Lr(Mr.count(kr(t)-1,t),e,2)}function Ua(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Sr(t):Sr.ceil(t),Lr(Sr.count(kr(t),t)+(4===kr(t).getUTCDay()),e,2)}function ja(t){return t.getUTCDay()}function La(t,e){return Lr(Tr.count(kr(t)-1,t),e,2)}function za(t,e){return Lr(t.getUTCFullYear()%100,e,2)}function Ba(t,e){return Lr(t.getUTCFullYear()%1e4,e,4)}function Fa(){return"+0000"}function Oa(){return"%"}function Ya(t){return+t}function qa(t){return Math.floor(+t/1e3)}!function(t){Nr=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,c=t.months,s=t.shortMonths,f=Br(a),l=Fr(a),u=Br(i),d=Fr(i),h=Br(o),b=Fr(o),p=Br(c),g=Fr(c),v=Br(s),y=Fr(s),m={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:ca,e:ca,f:da,H:sa,I:fa,j:la,L:ua,m:ha,M:ba,p:function(t){return a[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ya,s:qa,S:pa,u:ga,U:va,V:ya,w:ma,W:wa,x:null,X:null,y:xa,Y:_a,Z:Ma,"%":Oa},w={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:Ta,e:Ta,f:Ea,H:Sa,I:ka,j:Aa,L:Ca,m:Na,M:Da,p:function(t){return a[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ya,s:qa,S:Ia,u:Pa,U:$a,V:Ua,w:ja,W:La,x:null,X:null,y:za,Y:Ba,Z:Fa,"%":Oa},x={a:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=b[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return T(t,e,n,r)},d:Jr,e:Jr,f:ra,H:Qr,I:Qr,j:Kr,L:na,m:Zr,M:ta,p:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.p=l[r[0].toLowerCase()],n+r[0].length):-1},q:Wr,Q:ia,s:oa,S:ea,u:Yr,U:qr,V:Hr,w:Or,W:Gr,x:function(t,e,r){return T(t,n,e,r)},X:function(t,e,n){return T(t,r,e,n)},y:Rr,Y:Vr,Z:Xr,"%":aa};function _(t,e){return function(n){var r,a,i,o=[],c=-1,s=0,f=t.length;for(n instanceof Date||(n=new Date(+n));++c<f;)37===t.charCodeAt(c)&&(o.push(t.slice(s,c)),null!=(a=Pr[r=t.charAt(++c)])?r=t.charAt(++c):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),s=c+1);return o.push(t.slice(s,c)),o.join("")}}function M(t,e){return function(n){var r,a,i=Er(1900,void 0,1);if(T(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(e&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Cr(Er(i.y,0,1))).getUTCDay(),r=a>4||0===a?Tr.ceil(r):Tr(r),r=xr.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=Ar(Er(i.y,0,1))).getDay(),r=a>4||0===a?yr.ceil(r):yr(r),r=pr.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Cr(Er(i.y,0,1)).getUTCDay():Ar(Er(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Cr(i)):Ar(i)}}function T(t,e,n,r){for(var a,i,o=0,c=e.length,s=n.length;o<c;){if(r>=s)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=x[a in Pr?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return m.x=_(n,m),m.X=_(r,m),m.c=_(e,m),w.x=_(n,w),w.X=_(r,w),w.c=_(e,w),{format:function(t){var e=_(t+="",m);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t+="",!0);return e.toString=function(){return t},e}}}(t),Nr.format,Nr.parse,Dr=Nr.utcFormat,Ir=Nr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Dr("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Ir("%Y-%m-%dT%H:%M:%S.%LZ");function Ha(){var t,e,n,r,a,i=0,o=1,c=Fn,s=!1;function f(e){return isNaN(e=+e)?a:c(0===n?.5:(e=(r(e)-t)*n,s?Math.max(0,Math.min(1,e)):e))}return f.domain=function(a){return arguments.length?(t=r(i=+a[0]),e=r(o=+a[1]),n=t===e?0:1/(e-t),f):[i,o]},f.clamp=function(t){return arguments.length?(s=!!t,f):s},f.interpolator=function(t){return arguments.length?(c=t,f):c},f.unknown=function(t){return arguments.length?(a=t,f):a},function(a){return r=a,t=a(i),e=a(o),n=t===e?0:1/(e-t),f}}function Ga(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function Va(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}function Ra(t){return pn(t[t.length-1])}Va("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Va("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Va("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Va("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Va("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Va("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Va("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Va("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Va("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Va("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Ra(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Va)),Ra(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Va));var Xa=Ra(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Va)),Wa=Ra(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Va)),Za=Ra(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Va)),Ja=Ra(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Va)),Ka=Ra(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Va));Ra(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Va)),Ra(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Va));var Qa=Ra(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Va));Ra(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Va)),Ra(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Va));var ti=Ra(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Va));Ra(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Va));var ei=Ra(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Va));Ra(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Va)),Ra(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Va));var ni=Ra(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Va));Ra(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Va)),Ra(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Va)),Ra(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Va));var ri=Ra(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Va)),ai=Ra(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Va)),ii=Ra(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Va)),oi=Ra(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Va)),ci=Ra(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Va)),si=Ra(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Va));Ln(cn(300,.5,0),cn(-240,.5,1));Ln(cn(-100,.75,.35),cn(80,1.5,.8)),Ln(cn(260,.75,.35),cn(80,1.5,.8)),cn(),Ee();function fi(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}fi(Va("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));fi(Va("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),fi(Va("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),fi(Va("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function li(t=!0){const e=["rgb(100,118,120)","rgb(101,141,145)","rgb(103,126,82)","rgb(103,184,222)","rgb(108,110,88)","rgb(108,147,128)","rgb(119,144,182)","rgb(126,130,122)","rgb(133,173,186)","rgb(137,114,91)","rgb(145,170,157)","rgb(145,201,232)","rgb(147,105,66)","rgb(159,114,116)","rgb(159,188,191)","rgb(159,229,194)","rgb(163,163,171)","rgb(164,207,190)","rgb(172,108,130)","rgb(173,84,114)","rgb(174,195,222)","rgb(176,204,153)","rgb(179,180,150)","rgb(180,220,237)","rgb(183,202,121)","rgb(192,202,85)","rgb(193,191,193","rgb(195,97,136)","rgb(199,121,102)","rgb(207,202,76)","rgb(209,219,189)","rgb(213,251,255)","rgb(215,94,56)","rgb(218,114,126)","rgb(223,90,73)","rgb(224,247,217)","rgb(227,205,164)","rgb(228,168,185)","rgb(230,176,152)","rgb(232,212,175)","rgb(239,201,76)","rgb(240,124,108)","rgb(246,232,177)","rgb(249,228,173)","rgb(252,245,191)","rgb(255,188,103)","rgb(45,94,110)","rgb(51,153,204)","rgb(60,124,145)","rgb(62,87,145)","rgb(65,115,120)","rgb(89,216,229)","rgb(94,178,153)","rgb(95,124,134)"];return t?function(t){let e=t.length;for(;e>0;){let n=Math.floor(Math.random()*e);e--;let r=t[e];t[e]=t[n],t[n]=r}return t}(e):e}function ui(t,e="YlGnBu",n,r,a=!1){r=void 0===r?Jt(t):r,n=void 0===n?te(t):n;const i=function t(){var e=fr(Ha()(Fn));return e.copy=function(){return Ga(e,t())},ne.apply(e,arguments)}(function(t){const e={BuGn:Qa,OrRd:ti,PuBu:ei,YlGnBu:ni,Blues:ri,Oranges:si,Greens:ai,Purples:oi,Reds:ci,Greys:ii,Grays:ii,RdBu:Za,RdGy:Ja,PiYG:Xa,PuOr:Wa,RdYlBu:Ka};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return a?i.domain([r,n]):i.domain([n,r]),i}class di{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},a=12,i=10){this.margin=r,this.rootW=t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-i,id:"leftTree"},this.cell={w:void 0,h:a},this.topTreePanel={x:r.left+e,y:r.top,h:n-i,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function hi(t,n,r,a,i,o="relative"){return function(t){if(0==e("#"+t).length){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}(t),void 0===i&&(i=t+"-svg"),_t("#"+t).append("svg").attr("width",n).attr("height",r).attr("id",i).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}function bi(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function pi(t,e){var n,r,a,i,o,c=new mi(t),s=+t.value&&(c.value=t.value),f=[c];for(null==e&&(e=gi);n=f.pop();)if(s&&(n.value=+n.data.value),(a=e(n.data))&&(o=a.length))for(n.children=new Array(o),i=o-1;i>=0;--i)f.push(r=n.children[i]=new mi(a[i])),r.parent=n,r.depth=n.depth+1;return c.eachBefore(yi)}function gi(t){return t.children}function vi(t){t.data=t.data.data}function yi(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function mi(t){this.data=t,this.depth=this.height=0,this.parent=null}mi.prototype=pi.prototype={constructor:mi,count:function(){return this.eachAfter(bi)},each:function(t){var e,n,r,a,i=this,o=[i];do{for(e=o.reverse(),o=[];i=e.pop();)if(t(i),n=i.children)for(r=0,a=n.length;r<a;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(t){for(var e,n,r,a=this,i=[a],o=[];a=i.pop();)if(o.push(a),e=a.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;a=o.pop();)t(a);return this},eachBefore:function(t){for(var e,n,r=this,a=[r];r=a.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)a.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,a=r&&r.length;--a>=0;)n+=r[a].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),a=null;t=n.pop(),e=r.pop();for(;t===e;)a=t,t=n.pop(),e=r.pop();return a}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var a=r.length;t!==n;)r.splice(a,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return pi(this).eachBefore(vi)}};var wi=Array.prototype.slice;function xi(t){return t}function _i(t){return"translate("+(t+.5)+",0)"}function Mi(t){return"translate(0,"+(t+.5)+")"}function Ti(t){return function(e){return+t(e)}}function Si(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function ki(){return!this.__axis}function Ai(t,e){var n=[],r=null,a=null,i=6,o=6,c=3,s=1===t||4===t?-1:1,f=4===t||2===t?"x":"y",l=1===t||3===t?_i:Mi;function u(u){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,h=null==a?e.tickFormat?e.tickFormat.apply(e,n):xi:a,b=Math.max(i,0)+c,p=e.range(),g=+p[0]+.5,v=+p[p.length-1]+.5,y=(e.bandwidth?Si:Ti)(e.copy()),m=u.selection?u.selection():u,w=m.selectAll(".domain").data([null]),x=m.selectAll(".tick").data(d,e).order(),_=x.exit(),M=x.enter().append("g").attr("class","tick"),T=x.select("line"),S=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),T=T.merge(M.append("line").attr("stroke","currentColor").attr(f+"2",s*i)),S=S.merge(M.append("text").attr("fill","currentColor").attr(f,s*b).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),u!==m&&(w=w.transition(u),x=x.transition(u),T=T.transition(u),S=S.transition(u),_=_.transition(u).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=y(t))?l(t):this.getAttribute("transform")})),M.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return l(e&&isFinite(e=e(t))?e:y(t))}))),_.remove(),w.attr("d",4===t||2==t?o?"M"+s*o+","+g+"H0.5V"+v+"H"+s*o:"M0.5,"+g+"V"+v:o?"M"+g+","+s*o+"V0.5H"+v+"V"+s*o:"M"+g+",0.5H"+v),x.attr("opacity",1).attr("transform",(function(t){return l(y(t))})),T.attr(f+"2",s*i),S.attr(f,s*b).text(h),m.filter(ki).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),m.each((function(){this.__axis=y}))}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=wi.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:wi.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(r=null==t?null:wi.call(t),u):r&&r.slice()},u.tickFormat=function(t){return arguments.length?(a=t,u):a},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(c=+t,u):c},u}function Ci(t){return Ai(3,t)}function Ei(t){return Ai(4,t)}class Ni{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=pi(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),a=0;a<r.length;a++){var i=r[a];switch(i){case"(":var o={};n.branchset=[o],e.push(n),n=o;break;case",":o={};e[e.length-1].branchset.push(o),n=o;break;case")":n=e.pop();break;case":":break;default:var c=r[a-1];")"==c||"("==c||","==c?n.name=i:":"==c&&(n.length=parseFloat(i))}}return n}(t),t=>t.branchset).sum(t=>t.branchset?0:1).sort((t,e)=>t.value-e.value||t.data.length-e.data.length),this.leaves=this.root.leaves().sort((t,e)=>t.value-e.value||zt(t.data.length,e.data.length)),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce((t,e)=>t+e.y,0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{n(t),e(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.data.length?t.x-this.xScale(t.data.length):t.x).attr("y1",t=>t.y+this.yScale.bandwidth()/2).attr("y2",t=>t.y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);t.selectAll(".arm").data(a).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.x).attr("y1",t=>t.children[0].y+this.yScale.bandwidth()/2).attr("y2",t=>t.children[1].y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x).attr("cy",t=>t.y+this.yScale.bandwidth()/2).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){d3.select(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(t){d3.select(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call(Ci(this.xScale).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort((t,e)=>t.height-e.height||zt(t.data.length,e.data.length))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce((t,e)=>t+e.x,0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{e(t),n(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.data.length?t.y-this.yScale(t.data.length):t.y).attr("x1",t=>t.x+this.xScale.bandwidth()/2).attr("x2",t=>t.x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);t.selectAll(".arm").data(a).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.y).attr("x1",t=>t.children[0].x+this.xScale.bandwidth()/2).attr("x2",t=>t.children[1].x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x+this.xScale.bandwidth()/2).attr("cy",t=>t.y).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){d3.select(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(t){d3.select(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").call(Ei(this.yScale).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce((t,e)=>e.data.length?t+e.data.length:t,0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=lr().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),this.xScale=se().domain(this.postorder.map(t=>t.data.name)).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),this.yScale=se().domain(this.postorder.map(t=>t.data.name)).range([0,this.height]).padding(.05)):this.yScale=lr().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}var Di={value:function(){}};function Ii(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Pi(r)}function Pi(t){this._=t}function $i(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function Ui(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function ji(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=Di,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Pi.prototype=Ii.prototype={constructor:Pi,on:function(t,e){var n,r=this._,a=$i(t+"",r),i=-1,o=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<o;)if(n=(t=a[i]).type)r[n]=ji(r[n],t.name,e);else if(null==e)for(n in r)r[n]=ji(r[n],t.name,null);return this}for(;++i<o;)if((n=(t=a[i]).type)&&(n=Ui(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Pi(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var Li,zi,Bi=0,Fi=0,Oi=0,Yi=0,qi=0,Hi=0,Gi="object"==typeof performance&&performance.now?performance:Date,Vi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ri(){return qi||(Vi(Xi),qi=Gi.now()+Hi)}function Xi(){qi=0}function Wi(){this._call=this._time=this._next=null}function Zi(t,e,n){var r=new Wi;return r.restart(t,e,n),r}function Ji(){qi=(Yi=Gi.now())+Hi,Bi=Fi=0;try{!function(){Ri(),++Bi;for(var t,e=Li;e;)(t=qi-e._time)>=0&&e._call.call(null,t),e=e._next;--Bi}()}finally{Bi=0,function(){var t,e,n=Li,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Li=e);zi=t,Qi(r)}(),qi=0}}function Ki(){var t=Gi.now(),e=t-Yi;e>1e3&&(Hi-=e,Yi=t)}function Qi(t){Bi||(Fi&&(Fi=clearTimeout(Fi)),t-qi>24?(t<1/0&&(Fi=setTimeout(Ji,t-Gi.now()-Hi)),Oi&&(Oi=clearInterval(Oi))):(Oi||(Yi=Gi.now(),Oi=setInterval(Ki,1e3)),Bi=1,Vi(Ji)))}function to(t,e,n){var r=new Wi;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r}Wi.prototype=Zi.prototype={constructor:Wi,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Ri():+n)+(null==e?0:+e),this._next||zi===this||(zi?zi._next=this:Li=this,zi=this),this._call=t,this._time=n,Qi()},stop:function(){this._call&&(this._call=null,this._time=1/0,Qi())}};var eo=Ii("start","end","cancel","interrupt"),no=[];function ro(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(s){var f,l,u,d;if(1!==n.state)return c();for(f in a)if((d=a[f]).name===n.name){if(3===d.state)return to(i);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete a[f]):+f<e&&(d.state=6,d.timer.stop(),d.on.call("cancel",t,t.__data__,d.index,d.group),delete a[f])}if(to((function(){3===n.state&&(n.state=4,n.timer.restart(o,n.delay,n.time),o(s))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(u=n.tween.length),f=0,l=-1;f<u;++f)(d=n.tween[f].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=d);r.length=l+1}}function o(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(c),n.state=5,1),i=-1,o=r.length;++i<o;)r[i].call(t,a);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),c())}function c(){for(var r in n.state=6,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=Zi((function(t){n.state=1,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:a,on:eo,tween:no,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function ao(t,e){var n=oo(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function io(t,e){var n=oo(t,e);if(n.state>3)throw new Error("too late; already running");return n}function oo(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function co(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}function so(t,e){var n,r;return function(){var a=io(this,t),i=a.tween;if(i!==n)for(var o=0,c=(r=n=i).length;o<c;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}function fo(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=io(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var c={name:e,value:n},s=0,f=a.length;s<f;++s)if(a[s].name===e){a[s]=c;break}s===f&&a.push(c)}i.tween=a}}function lo(t,e,n){var r=t._id;return t.each((function(){var t=io(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return oo(t,r).value[e]}}function uo(t,e){var n;return("number"==typeof e?mn:e instanceof Se?hn:(n=Se(e))?(e=n,hn):Mn)(t,e)}function ho(t){return function(){this.removeAttribute(t)}}function bo(t){return function(){this.removeAttributeNS(t.space,t.local)}}function po(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttribute(t);return o===i?null:o===r?a:a=e(r=o,n)}}function go(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===i?null:o===r?a:a=e(r=o,n)}}function vo(t,e,n){var r,a,i;return function(){var o,c,s=n(this);if(null!=s)return(o=this.getAttribute(t))===(c=s+"")?null:o===r&&c===a?i:(a=c,i=e(r=o,s));this.removeAttribute(t)}}function yo(t,e,n){var r,a,i;return function(){var o,c,s=n(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===(c=s+"")?null:o===r&&c===a?i:(a=c,i=e(r=o,s));this.removeAttributeNS(t.space,t.local)}}function mo(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function wo(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function xo(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&wo(t,a)),n}return a._value=e,a}function _o(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&mo(t,a)),n}return a._value=e,a}function Mo(t,e){return function(){ao(this,t).delay=+e.apply(this,arguments)}}function To(t,e){return e=+e,function(){ao(this,t).delay=e}}function So(t,e){return function(){io(this,t).duration=+e.apply(this,arguments)}}function ko(t,e){return e=+e,function(){io(this,t).duration=e}}function Ao(t,e){if("function"!=typeof e)throw new Error;return function(){io(this,t).ease=e}}function Co(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?ao:io;return function(){var o=i(this,t),c=o.on;c!==r&&(a=(r=c).copy()).on(e,n),o.on=a}}var Eo=xt.prototype.constructor;function No(t){return function(){this.style.removeProperty(t)}}function Do(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function Io(t,e,n){var r,a;function i(){var i=e.apply(this,arguments);return i!==a&&(r=(a=i)&&Do(t,i,n)),r}return i._value=e,i}function Po(t){return function(e){this.textContent=t.call(this,e)}}function $o(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Po(r)),e}return r._value=t,r}var Uo=0;function jo(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Lo(){return++Uo}var zo=xt.prototype;jo.prototype=function(t){return xt().transition(t)}.prototype={constructor:jo,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=m(t));for(var r=this._groups,a=r.length,i=new Array(a),o=0;o<a;++o)for(var c,s,f=r[o],l=f.length,u=i[o]=new Array(l),d=0;d<l;++d)(c=f[d])&&(s=t.call(c,c.__data__,d,f))&&("__data__"in c&&(s.__data__=c.__data__),u[d]=s,ro(u[d],e,n,d,u,oo(c,n)));return new jo(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=x(t));for(var r=this._groups,a=r.length,i=[],o=[],c=0;c<a;++c)for(var s,f=r[c],l=f.length,u=0;u<l;++u)if(s=f[u]){for(var d,h=t.call(s,s.__data__,u,f),b=oo(s,n),p=0,g=h.length;p<g;++p)(d=h[p])&&ro(d,e,n,p,h,b);i.push(h),o.push(s)}return new jo(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=_(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new jo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],l=n[c],u=f.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=f[h]||l[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new jo(o,this._parents,this._name,this._id)},selection:function(){return new Eo(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Lo(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)if(o=c[f]){var l=oo(o,e);ro(o,t,n,f,c,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new jo(r,this._parents,t,n)},call:zo.call,nodes:zo.nodes,node:zo.node,size:zo.size,empty:zo.empty,each:zo.each,on:function(t,e){var n=this._id;return arguments.length<2?oo(this.node(),n).on.on(t):this.each(Co(n,t,e))},attr:function(t,e){var n=b(t),r="transform"===n?Un:uo;return this.attrTween(t,"function"==typeof e?(n.local?yo:vo)(n,r,lo(this,"attr."+t,e)):null==e?(n.local?bo:ho)(n):(n.local?go:po)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=b(t);return this.tween(n,(r.local?xo:_o)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?$n:uo;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=B(this,t),o=(this.style.removeProperty(t),B(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,No(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,a,i;return function(){var o=B(this,t),c=n(this),s=c+"";return null==c&&(this.style.removeProperty(t),s=c=B(this,t)),o===s?null:o===r&&s===a?i:(a=s,i=e(r=o,c))}}(t,r,lo(this,"style."+t,e))).each(function(t,e){var n,r,a,i,o="style."+e,c="end."+o;return function(){var s=io(this,t),f=s.on,l=null==s.value[o]?i||(i=No(e)):void 0;f===n&&a===l||(r=(n=f).copy()).on(c,a=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,a,i=n+"";return function(){var o=B(this,t);return o===i?null:o===r?a:a=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Io(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(lo(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,$o(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=oo(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?so:fo)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Mo:To)(e,t)):oo(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?So:ko)(e,t)):oo(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Ao(e,t)):oo(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,a=n.size();return new Promise((function(i,o){var c={value:o},s={value:function(){0==--a&&i()}};n.each((function(){var n=io(this,r),a=n.on;a!==t&&((e=(t=a).copy())._.cancel.push(c),e._.interrupt.push(c),e._.end.push(s)),n.on=e}))}))}};var Bo={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Fo(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Bo.time=Ri(),Bo;return n}xt.prototype.interrupt=function(t){return this.each((function(){co(this,t)}))},xt.prototype.transition=function(t){var e,n;t instanceof jo?(e=t._id,t=t._name):(e=Lo(),(n=Bo).time=Ri(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)(o=c[f])&&ro(o,t,e,f,c,n||Fo(o,e));return new jo(r,this._parents,t,e)};class Oo{constructor(t,n,r=!1){e("#"+t).show();const a=r?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=e("<div/>").addClass(a).appendTo("#"+t),this.buttons={},this.tooltip=n}createDownloadSvgButton(t,e,n,r,a="fa-download"){this.createButton(t,a);_t("#"+t).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);_t("#"+t).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,n="fa-download"){const r=e("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return e("<i/>").addClass("fa "+n).appendTo(r),this.buttons[t]=r,r}attachTooltip(t){this.tooltip=t}downloadSvg(t,r,a){let i=e(e(e(""+("#"+t)))[0]),o=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),c=function(t){for(var n="",r=document.styleSheets,a=0;a<r.length;a++)try{if(null==r[a].cssRules)continue;for(var i=r[a].cssRules,o=0;o<i.length;o++){var c=i[o];if(void 0!==c.style){var s,f=void 0===c.selectorText?c.selectorText:c.selectorText.replace(`#${t[0].id} `,"");try{s=e(t).find(f)}catch(t){s=[]}s.length>0&&(n+=c.selectorText+" { "+c.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var l=document.createElement("style");return l.setAttribute("type","text/css"),l.innerHTML="<![CDATA[\n"+n+"\n]]>",l}(i.get());o.prepend(c),e("#"+a).html("").hide();let s=e("#"+a).append(o).html(),f=new Blob([s],{type:"image/svg+xml"});n(f,r),e("#"+a).html("").hide()}}class Yo{constructor(t,e=!1,n=30,r=-40,a=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=a}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),_t("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){_t("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=lt.pageX,e=lt.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;_t("#"+this.id).style("left",t+"px").style("top",e+"px")}edit(t){_t("#"+this.id).html(t)}}class qo{constructor(t,n=!0,r=10,a="YlGnBu",i=2,o="heatmapTooltip"){this.data=t,this.useLog=n,this.logBase=r,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=i,this.colorScheme=a,0==e("#"+o).length&&e("<div/>").attr("id",o).appendTo(e("body")),this.tooltip=new Yo(o),_t("#"+o).classed("heatmap-tooltip",!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new Oo(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){!function(t,e,n,r,a,i=10,o=10,c={h:10,w:40},s="h",f=!1){let l=[];if(f){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;l=t.map(t=>t*e),l=l.concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;l=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(l).enter().append("g").classed("legend",!0);"h"===s?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",c.h).attr("transform",`translate(${r.x}, ${r.y})`),u.append("rect").attr("x",(t,e)=>c.w*e).attr("y",5).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>c.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+c.h*l.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>c.h*e).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>c.h*e+c.h/2))}(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,r={w:1e3,h:1e3},a=30){this._setXScale(r.w,e),this._setYScale(r.h,n),this.draw(t,r,a)}draw(t,e={w:1e3,h:600},n=30,r=!1,a=null){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale();const i=t.selectAll(".exp-map-xlabel").data(this.xList),o=null==a?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+a;i.attr("transform",t=>`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`),i.enter().append("text").attr("class",(t,e)=>"exp-map-xlabel x"+e).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","default").attr("transform",t=>`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`).merge(i).text(t=>t),i.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>"exp-map-ylabel y"+e).attr("text-anchor","start").style("cursor","default").on("click",t=>{alert(t+" is clicked. To be implemented")}).on("mouseover",(function(t){_t(this).classed("normal",!1).classed("highlighted",!0)})).on("mouseout",(function(t){_t(this).classed("normal",!0).classed("highlighted",!1)}));const c=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);c.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>"x"+this.xList.indexOf(t.x)).attr("col",t=>"y"+this.yList.indexOf(t.y));const s=this;c.enter().append("rect").attr("row",t=>"x"+this.xList.indexOf(t.x)).attr("col",t=>"y"+this.yList.indexOf(t.y)).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",(function(e){const n=_t(this);s.cellMouseover(e,t,n)})).on("mouseout",(function(t){_t(this);s.cellMouseout()})).merge(c).style("fill",t=>r&&0==t.value?"#DDDDDD":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value)),c.exit().remove()}cellMouseout(t){kt("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const r=n.attr("row"),a=n.attr("col");e.selectAll(".exp-map-xlabel").filter("."+r).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter("."+a).classed("highlighted",!0),n.classed("highlighted",!0);const i=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${i}`)}_setXScale(t,e){this.xList=void 0!==e?e:Et().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=se().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:Et().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=se().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(){let t=this.useLog,e=this.data.map(e=>t?this._log(e.value):e.value);this.colorScale=ui(e,this.colorScheme,0)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class Ho{constructor(t,e,n,r="YlGnBu",a=2,i=new di,o="dmapTooltip",c=!0,s=10,f=""){this.config=i.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new Ni(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new Ni(this.data.rowTree,"h"),heatmap:new qo(this.data.heatmap,c,s,r,a,o)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=f,this.toolbar=void 0,this.tooltip=this.objects.heatmap.tooltip}createToolbar(t,e){return this.toolbar=new Oo(t,e),this.toolbar}render(t,e,n=!0,r=!0,a="top",i=5){this._updateConfig(a),this.visualComponents.svg=hi(t,this.config.w,this.config.h,this.config.margin,e);let o=void 0,c=void 0;n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),o=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),c=this.objects.rowTree.yScale.domain()),""!=this.title&&_t(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title),this._renderHeatmap(this.objects.heatmap,o,c,i)}_renderTree(t,e,n){let r=this.visualComponents.svg;const a="row"==t?".exp-map-ylabel":".exp-map-xlabel",i=(this.visualComponents.tooltip,r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`));e.draw(i,n.w,n.h);return i.selectAll(".dendrogram-node").on("mouseover",(function(t){_t(this).attr("r",6).attr("fill","red");let e=t.leaves().map(t=>t.data.name);r.selectAll(a).filter(t=>e.includes(t)).classed("highlighted",!0),r.selectAll(".leaf-color").filter(t=>e.includes(t)).classed("highlighted",!0)})).on("mouseout",(function(){_t(this).attr("r",2).attr("fill","#333"),r.selectAll(a).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)})),i}_renderHeatmap(t,e,n,r=5){let a=this.visualComponents.svg;const i=this.config.panels.main,o=a.append("g").attr("id",i.id).attr("transform",`translate(${i.x}, ${i.y})`);t.redraw(o,e,n,{w:i.w,h:i.h}),t.drawColorLegend(a,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}var Go=Math.PI,Vo=2*Go,Ro=Vo-1e-6;function Xo(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Wo(){return new Xo}function Zo(t){return function(){return t}}function Jo(t){this._context=t}function Ko(t){return new Jo(t)}function Qo(t){return t[0]}function tc(t){return t[1]}function ec(){var t=Qo,e=null,n=Zo(0),r=tc,a=Zo(!0),i=null,o=Ko,c=null;function s(s){var f,l,u,d,h,b=s.length,p=!1,g=new Array(b),v=new Array(b);for(null==i&&(c=o(h=Wo())),f=0;f<=b;++f){if(!(f<b&&a(d=s[f],f,s))===p)if(p=!p)l=f,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),u=f-1;u>=l;--u)c.point(g[u],v[u]);c.lineEnd(),c.areaEnd()}p&&(g[f]=+t(d,f,s),v[f]=+n(d,f,s),c.point(e?+e(d,f,s):g[f],r?+r(d,f,s):v[f]))}if(h)return c=null,h+""||null}function f(){return function(){var t=Qo,e=tc,n=Zo(!0),r=null,a=Ko,i=null;function o(o){var c,s,f,l=o.length,u=!1;for(null==r&&(i=a(f=Wo())),c=0;c<=l;++c)!(c<l&&n(s=o[c],c,o))===u&&((u=!u)?i.lineStart():i.lineEnd()),u&&i.point(+t(s,c,o),+e(s,c,o));if(f)return i=null,f+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:Zo(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Zo(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Zo(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o}().defined(a).curve(o).context(i)}return s.x=function(n){return arguments.length?(t="function"==typeof n?n:Zo(+n),e=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:Zo(+e),s):t},s.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:Zo(+t),s):e},s.y=function(t){return arguments.length?(n="function"==typeof t?t:Zo(+t),r=null,s):n},s.y0=function(t){return arguments.length?(n="function"==typeof t?t:Zo(+t),s):n},s.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Zo(+t),s):r},s.lineX0=s.lineY0=function(){return f().x(t).y(n)},s.lineY1=function(){return f().x(t).y(r)},s.lineX1=function(){return f().x(e).y(n)},s.defined=function(t){return arguments.length?(a="function"==typeof t?t:Zo(!!t),s):a},s.curve=function(t){return arguments.length?(o=t,null!=i&&(c=o(i)),s):o},s.context=function(t){return arguments.length?(null==t?i=c=null:c=o(i=t),s):i},s}function nc(t){return t<0?-1:1}function rc(t,e,n){var r=t._x1-t._x0,a=e-t._x1,i=(t._y1-t._y0)/(r||a<0&&-0),o=(n-t._y1)/(a||r<0&&-0),c=(i*a+o*r)/(r+a);return(nc(i)+nc(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(c))||0}function ac(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function ic(t,e,n){var r=t._x0,a=t._y0,i=t._x1,o=t._y1,c=(i-r)/3;t._context.bezierCurveTo(r+c,a+c*e,i-c,o-c*n,i,o)}function oc(t){this._context=t}function cc(t){this._context=t}function sc(){lt.preventDefault(),lt.stopImmediatePropagation()}function fc(t){var e=t.document.documentElement,n=_t(t).on("dragstart.drag",sc,!0);"onselectstart"in e?n.on("selectstart.drag",sc,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}function lc(t,e){var n=t.document.documentElement,r=_t(t).on("dragstart.drag",null);e&&(r.on("click.drag",sc,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function uc(t){return function(){return t}}function dc(t,e,n){this.target=t,this.type=e,this.selection=n}function hc(){lt.stopImmediatePropagation()}function bc(){lt.preventDefault(),lt.stopImmediatePropagation()}Xo.prototype=Wo.prototype={constructor:Xo,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,c=n-t,s=r-e,f=i-t,l=o-e,u=f*f+l*l;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(l*c-s*f)>1e-6&&a){var d=n-i,h=r-o,b=c*c+s*s,p=d*d+h*h,g=Math.sqrt(b),v=Math.sqrt(u),y=a*Math.tan((Go-Math.acos((b+u-p)/(2*g*v)))/2),m=y/v,w=y/g;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*f)+","+(e+m*l)),this._+="A"+a+","+a+",0,0,"+ +(l*d>f*h)+","+(this._x1=t+w*c)+","+(this._y1=e+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e,i=!!i;var o=(n=+n)*Math.cos(r),c=n*Math.sin(r),s=t+o,f=e+c,l=1^i,u=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+f:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+s+","+f),n&&(u<0&&(u=u%Vo+Vo),u>Ro?this._+="A"+n+","+n+",0,1,"+l+","+(t-o)+","+(e-c)+"A"+n+","+n+",0,1,"+l+","+(this._x1=s)+","+(this._y1=f):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=Go)+","+l+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},Jo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},oc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:ic(this,this._t0,ac(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,ic(this,ac(this,n=rc(this,t,e)),n);break;default:ic(this,this._t0,n=rc(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new cc(t)}.prototype=Object.create(oc.prototype)).point=function(t,e){oc.prototype.point.call(this,e,t)},cc.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,a,i){this._context.bezierCurveTo(e,t,r,n,i,a)}};var pc={name:"drag"},gc={name:"space"},vc={name:"handle"},yc={name:"center"};function mc(t){return[+t[0],+t[1]]}function wc(t){return[mc(t[0]),mc(t[1])]}function xc(t){return function(e){return function(t,e,n){arguments.length<3&&(n=e,e=Mt().changedTouches);for(var r,a=0,i=e?e.length:0;a<i;++a)if((r=e[a]).identifier===n)return Tt(t,r);return null}(e,lt.touches,t)}}var _c={name:"x",handles:["w","e"].map(Nc),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Mc={name:"y",handles:["n","s"].map(Nc),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Tc={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Nc),input:function(t){return null==t?null:wc(t)},output:function(t){return t}},Sc={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},kc={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Ac={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Cc={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Ec={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Nc(t){return{type:t}}function Dc(){return!lt.ctrlKey&&!lt.button}function Ic(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Pc(){return navigator.maxTouchPoints||"ontouchstart"in this}function $c(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Uc(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function jc(){return function(t){var e,n=Ic,r=Dc,a=Pc,i=!0,o=Ii("start","brush","end"),c=6;function s(e){var n=e.property("__brush",p).selectAll(".overlay").data([Nc("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Sc.overlay).merge(n).each((function(){var t=$c(this).extent;_t(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([Nc("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Sc.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Sc[t.type]})),e.each(f).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",d).filter(a).on("touchstart.brush",d).on("touchmove.brush",h).on("touchend.brush touchcancel.brush",b).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function f(){var t=_t(this),e=$c(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-c/2:e[0][0]-c/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-c/2:e[0][1]-c/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+c:c})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+c:c}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function l(t,e,n){return!n&&t.__brush.emitter||new u(t,e)}function u(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function d(){if((!e||lt.touches)&&r.apply(this,arguments)){var n,a,o,c,s,u,d,h,b,p,g,v=this,y=lt.target.__data__.type,m="selection"===(i&&lt.metaKey?y="overlay":y)?pc:i&&lt.altKey?yc:vc,w=t===Mc?null:Cc[y],x=t===_c?null:Ec[y],_=$c(v),M=_.extent,T=_.selection,S=M[0][0],k=M[0][1],A=M[1][0],C=M[1][1],E=0,N=0,D=w&&x&&i&&lt.shiftKey,I=lt.touches?xc(lt.changedTouches[0].identifier):St,P=I(v),$=P,U=l(v,arguments,!0).beforestart();"overlay"===y?(T&&(b=!0),_.selection=T=[[n=t===Mc?S:P[0],o=t===_c?k:P[1]],[s=t===Mc?A:n,d=t===_c?C:o]]):(n=T[0][0],o=T[0][1],s=T[1][0],d=T[1][1]),a=n,c=o,u=s,h=d;var j=_t(v).attr("pointer-events","none"),L=j.selectAll(".overlay").attr("cursor",Sc[y]);if(lt.touches)U.moved=B,U.ended=O;else{var z=_t(lt.view).on("mousemove.brush",B,!0).on("mouseup.brush",O,!0);i&&z.on("keydown.brush",Y,!0).on("keyup.brush",q,!0),fc(lt.view)}hc(),co(v),f.call(v),U.start()}function B(){var t=I(v);!D||p||g||(Math.abs(t[0]-$[0])>Math.abs(t[1]-$[1])?g=!0:p=!0),$=t,b=!0,bc(),F()}function F(){var t;switch(E=$[0]-P[0],N=$[1]-P[1],m){case gc:case pc:w&&(E=Math.max(S-n,Math.min(A-s,E)),a=n+E,u=s+E),x&&(N=Math.max(k-o,Math.min(C-d,N)),c=o+N,h=d+N);break;case vc:w<0?(E=Math.max(S-n,Math.min(A-n,E)),a=n+E,u=s):w>0&&(E=Math.max(S-s,Math.min(A-s,E)),a=n,u=s+E),x<0?(N=Math.max(k-o,Math.min(C-o,N)),c=o+N,h=d):x>0&&(N=Math.max(k-d,Math.min(C-d,N)),c=o,h=d+N);break;case yc:w&&(a=Math.max(S,Math.min(A,n-E*w)),u=Math.max(S,Math.min(A,s+E*w))),x&&(c=Math.max(k,Math.min(C,o-N*x)),h=Math.max(k,Math.min(C,d+N*x)))}u<a&&(w*=-1,t=n,n=s,s=t,t=a,a=u,u=t,y in kc&&L.attr("cursor",Sc[y=kc[y]])),h<c&&(x*=-1,t=o,o=d,d=t,t=c,c=h,h=t,y in Ac&&L.attr("cursor",Sc[y=Ac[y]])),_.selection&&(T=_.selection),p&&(a=T[0][0],u=T[1][0]),g&&(c=T[0][1],h=T[1][1]),T[0][0]===a&&T[0][1]===c&&T[1][0]===u&&T[1][1]===h||(_.selection=[[a,c],[u,h]],f.call(v),U.brush())}function O(){if(hc(),lt.touches){if(lt.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else lc(lt.view,b),z.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);j.attr("pointer-events","all"),L.attr("cursor",Sc.overlay),_.selection&&(T=_.selection),Uc(T)&&(_.selection=null,f.call(v)),U.end()}function Y(){switch(lt.keyCode){case 16:D=w&&x;break;case 18:m===vc&&(w&&(s=u-E*w,n=a+E*w),x&&(d=h-N*x,o=c+N*x),m=yc,F());break;case 32:m!==vc&&m!==yc||(w<0?s=u-E:w>0&&(n=a-E),x<0?d=h-N:x>0&&(o=c-N),m=gc,L.attr("cursor",Sc.selection),F());break;default:return}bc()}function q(){switch(lt.keyCode){case 16:D&&(p=g=D=!1,F());break;case 18:m===yc&&(w<0?s=u:w>0&&(n=a),x<0?d=h:x>0&&(o=c),m=vc,F());break;case 32:m===gc&&(lt.altKey?(w&&(s=u-E*w,n=a+E*w),x&&(d=h-N*x,o=c+N*x),m=yc):(w<0?s=u:w>0&&(n=a),x<0?d=h:x>0&&(o=c),m=vc),L.attr("cursor",Sc[y]),F());break;default:return}bc()}}function h(){l(this,arguments).moved()}function b(){l(this,arguments).ended()}function p(){var e=this.__brush||{selection:null};return e.extent=wc(n.apply(this,arguments)),e.dim=t,e}return s.move=function(e,n){e.selection?e.on("start.brush",(function(){l(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){l(this,arguments).end()})).tween("brush",(function(){var e=this,r=e.__brush,a=l(e,arguments),i=r.selection,o=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),c=Tn(i,o);function s(t){r.selection=1===t&&null===o?null:c(t),f.call(e),a.brush()}return null!==i&&null!==o?s:s(1)})):e.each((function(){var e=this,r=arguments,a=e.__brush,i=t.input("function"==typeof n?n.apply(e,r):n,a.extent),o=l(e,r).beforestart();co(e),a.selection=null===i?null:i,f.call(e),o.start().brush().end()}))},s.clear=function(t){s.move(t,null)},u.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,r){var a=lt;t.sourceEvent=lt,lt=t;try{e.apply(n,r)}finally{lt=a}}(new dc(s,e,t.output(this.state.selection)),o.apply,o,[e,this.that,this.args])}},s.extent=function(t){return arguments.length?(n="function"==typeof t?t:uc(wc(t)),s):n},s.filter=function(t){return arguments.length?(r="function"==typeof t?t:uc(!!t),s):r},s.touchable=function(t){return arguments.length?(a="function"==typeof t?t:uc(!!t),s):a},s.handleSize=function(t){return arguments.length?(c=+t,s):c},s.keyModifiers=function(t){return arguments.length?(i=!!t,s):i},s.on=function(){var t=o.on.apply(o,arguments);return t===o?s:t},s}(Tc)}var Lc=function t(e){function n(t,n){var r,a;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*e()-1,i=2*e()-1,a=r*r+i*i}while(!a||a>1);return t+n*i*Math.sqrt(-2*Math.log(a)/a)}}return n.source=t,n}((function(){return Math.random()}));const zc=function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)},Bc=function(t){let e=(Zt(t,.75)-Zt(t,.25))/1.34;return 1.06*Math.min(qt(t),e)*Math.pow(t.length,-.2)};class Fc{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0}render(t,e=500,n=357,r=.05,a,i=[-3,3],o="Y axis",c=!0,s=30,f=!0,l=0,u=!1,d=!1,h=!1,b=!1,p=!1,g=!1,v=0){if(this.reset=()=>{t.selectAll("*").remove(),this.render(t,e,n,r,a,i,o,c,s,f,l,u,d,h,b,p,g)},this.updateYScale=function(i,o){t.selectAll("*").remove(),void 0===o&&(o=[]),this.render(t,e,n,r,a,[],i,c,s,f,l,u,d,h,b,p,g)},this.updateXScale=function(a){void 0===a&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,e,n,r,a,[],o,c,s,f,l,u,d,h,b,p,g)},void 0===i||0==i.length){let t=[];this.data.forEach(e=>t=t.concat(e.values)),i=Ht(t)}this.groups=Et().key(t=>t.group).entries(this.data),this.scale={x:se().rangeRound([0,e]).domain(a||this.groups.map(t=>t.key)).paddingInner(r),subx:se(),y:lr().rangeRound([n,0]).domain(i),z:lr()},this.groups.forEach(e=>{let r=e.key,a=e.values,o=this.groupInfo[r];if(e.index=this.scale.x.domain().indexOf(r),void 0!==o){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(o[t])<=parseFloat(o.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,e)=>`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`).text(t=>`${t}: ${parseFloat(parseFloat(o[t]).toPrecision(3)).toExponential()}`)}p&&a.sort((t,e)=>t.label<e.label?-1:t.label>e.label?1:0),this.scale.subx.domain(a.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),a.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(zt),this._drawViolin(t,n,u,e.index,g,v))});var c=18;if(b){const e=se().domain(a.map(t=>null==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+c})`).call(Ci(e))}if(f){c=5;const e=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+c})`).call(Ci(this.scale.subx));l>0&&e.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${l}, 2, 10)`)}});let y=f?55:0;if(this.xAxis=c?Ci(this.scale.x):Ci(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+y})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${s}, -10, 10)`),y=5,this.yAxis=Ei(this.scale.y).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${y}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*y+_t(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(o),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),d&&this._addGroupDivider(t),h){const e=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");e.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=e.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;n.append("rect").attr("x",(t,e)=>5+60*e+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),n.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,e)=>17+60*e+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${r})`).text(e)}createTooltip(t){return 0==e("#"+t).length&&e("<div/>").attr("id",t).appendTo(e("body")),this.tooltip=new Yo(t),_t("#"+t).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return this.toolbar=new Oo(t,e),this.toolbar}addBrush(t){const e=jc();e.on("end",()=>{this.zoom(t,e)}),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,r=lt.selection;if(void 0===e)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,e)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),a=Math.floor(r[1][0]/this.scale.x.bandwidth());return e>=n&&e<=a}));const n=Math.floor(this.scale.y.invert(r[1][1])),a=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,a]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout((function(){n=null}),350);this.reset()}let a=t.transition().duration(750);t.select(".axis--x").transition(a).call(this.xAxis),t.select(".axis--y").transition(a).call(this.yAxis),this.groups.forEach((e,n)=>{let r=e.key,i=e.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=t.select(`#violin${e.index}-${n.label}`);i.select(".violin").transition(a).attr("d",ec().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const o=Zt(n.values,.25),c=Zt(n.values,.75),s=.1;i.select(".violin-ir").transition(a).attr("x",this.scale.z(-s)).attr("y",this.scale.y(c)).attr("width",Math.abs(this.scale.z(-s)-this.scale.z(s))).attr("height",Math.abs(this.scale.y(c)-this.scale.y(o)));const f=Qt(n.values);i.select(".violin-median").transition(a).attr("x1",this.scale.z(-s)).attr("x2",this.scale.z(s)).attr("y1",this.scale.y(f)).attr("y2",this.scale.y(f))})})}_drawViolin(t,e,n,r,a,i){let o=function(t,e,n){return function(r){return e.map(e=>[e,Kt(r,r=>t((e-r)/n))/n])}}(zc,this.scale.y.ticks(100),Bc(e.values));const c=Ht(e.values),s=o(e.values).filter(t=>t[0]>=c[0]&&t[0]<=c[1]),f=t.append("g").attr("id",`violin${r}-${e.label}`).attr("class","violin-g").datum(e);if(e.values.length>=i&&s.length&&this._validVertices(s)){let i=Jt(s,t=>Math.abs(t[1]));this.scale.z.domain([-i,i]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);let o=ec().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const c=f.append("path").datum(s).attr("d",o).classed("violin",!0).style("fill",()=>void 0!==e.color?e.color:r%2==0?"#90c1c1":"#94a8b8"),l=Zt(e.values,.25),u=Zt(e.values,.75),d=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(u-l),r=Jt(e.values.filter(t=>t<=u+1.5*n)),a=te(e.values.filter(t=>t>=l-1.5*n));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(a)).style("stroke","#fff")}f.append("rect").attr("x",this.scale.z(-d)).attr("y",this.scale.y(u)).attr("width",Math.abs(this.scale.z(-d)-this.scale.z(d))).attr("height",Math.abs(this.scale.y(u)-this.scale.y(l))).attr("class","violin-ir");const h=Qt(e.values);if(f.append("line").attr("x1",this.scale.z(-d)).attr("x2",this.scale.z(d)).attr("y1",this.scale.y(h)).attr("y2",this.scale.y(h)).attr("class","violin-median"),a){let t=Lc(0,d/2);const n=Math.abs(u-l),r=Jt(e.values.filter(t=>t<=u+1.5*n)),a=te(e.values.filter(t=>t>=l-1.5*n)),i=e.values.filter(t=>t<a||t>r);f.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(t())).attr("cy",t=>this.scale.y(t)).attr("r",2)}f.on("mouseover",()=>{c.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+h.toPrecision(4)+"<br/>")}),f.on("mouseout",()=>{c.classed("highlighted",!1)})}else if(i){let t=Jt(e.values,t=>Math.abs(t));this.scale.z.domain([-t,t]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const n=this.scale.z.domain()[1]/3;let r=Lc(0,n/2);f.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",()=>this.scale.z(r())).attr("cy",t=>this.scale.y(t)).attr("r",2)}}_sanityCheck(t){const e=["group","label","values"];t.forEach(t=>{e.forEach(e=>{if(void 0===t[e])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const e=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==e.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+n/2:0;t.selectAll(".vline").data(e).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,n)=>n!=e.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,e)=>t.concat(e),[]).filter(t=>isNaN(t)).length}}function Oc(t,n=jt().tissue){!function(t,n=jt().tissue){u(n,{credentials:"include"}).then((function(n){let r=Lt(n);r.forEach(t=>{t.id=t.tissueSiteDetailId,t.text=t.tissueSiteDetail}),r.sort((t,e)=>t.tissueSiteDetail<e.tissueSiteDetail?-1:t.tissueSiteDetail>e.tissueSiteDetail?1:0),e("#"+t).select2({placeholder:"Select a data set",data:r})})).catch((function(t){console.error(t)}))}(t,n)}function Yc(t,e,n,r=jt(),a=!0){const i=a?r.topInTissueFiltered:r.topInTissue,o=0==$("#filterInfo").length?$("<div/>").attr("id","filterInfo").appendTo("#messageBox"):$("#filterInfo");a?o.html("Mitochondrial genes are excluded.<br/>"):o.html("Mitochondrial genes are included.<br/>"),u(i+t,{credentials:"include"}).then((function(i){const o="topExpressedGene";if(!i.hasOwnProperty(o))throw console.error(i),"Parse Error: required json attribute is missing: "+o;const c=i[o].map(t=>{if(!t.hasOwnProperty("gencodeId"))throw console.error(t),"Parse Error: required json attribute is missing: gencodeId";return t.gencodeId});Hc(e,n,c,void 0,r,a,(function(){Gc(t)}),t)})).catch((function(t){console.error(t)}))}function qc(t,n,r,a,i,o=jt(),c){u(o.tissue,{credentials:"include"}).then((function(s){let f=function(t,e=!1){const n=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"],r="tissueInfo";if(!t.hasOwnProperty(r))throw"Parsing Error: required json attribute is missing: "+r;let a=t[r];["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach(t=>{if(!a[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`}),a=!1===e?a:a.filter(t=>!n.includes(t.tissueSiteDetailId));let i=a.reduce((t,e)=>{let n=e.tissueSite,r={id:e.tissueSiteDetailId,name:e.tissueSiteDetail};return t.hasOwnProperty(n)||(t[n]=[]),t[n].push(r),t},{});return Object.keys(i).forEach(t=>{if(1===i[t].length){let e=i[t][0];delete i[t],i[e.name]=[e]}}),i}(s,!1);!function(t,n,r=!1,a=!1,i=4){const o="tissue-group-main-level";_t("#"+n).selectAll("*").remove();const c=e("<div/>").attr("class","col-xs-12 col-md-12").appendTo(e("#"+n));r?e(`<label class=${o}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(c):e(`<label class=${o}><input type="radio" name="allTissues" value="all"> All </label> <label class=${o}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(c),e('input[name="allTissues"]').change((function(){switch(e(this).val()){case"all":e(".tissueGroup").prop("checked",!0),e(".tissueSubGroup").prop("checked",!0);break;case"reset":e(".tissueGroup").prop("checked",!1),e(".tissueSubGroup").prop("checked",!1)}}));let s=Object.keys(t).sort((t,e)=>"Brain"==t?-1:"Brain"==e?1:t<e?-1:t>e?1:void 0),f=Object.keys(t).reduce((e,n)=>t[n].length>1?e+1+t[n].length:e+t[n].length,0),l=Math.ceil(f/i),u=f%i,d=Math.floor(12/i);const h=Gt(0,i).map(t=>e(`<div id="section${t}" class="col-xs-12 col-md-${d}">`).appendTo(e("#"+n)));let b=0,p=0;s.forEach(n=>{let r=t[n];const a=n.replace(/ /g,"_");let i=r.length;i=1==i?i:i+1,0!=b&&i+b>l+u&&(b=0,p+=1),b+=i;let c=h[p];e(`<label class=${o}><input type="checkbox" id="${a}" class="tissueGroup"> <span>${n}</span></label><br/>`).appendTo(c),r.length>1&&r.sort((t,e)=>t.id>e.id?1:t.id<e.id?-1:0).forEach((function(t,n){let a=e(`<label class=tissue-group-sub-level><input type="checkbox" id="${t.id}" class="tissueSubGroup"> <span>${t.name}</span></label><br/>`).appendTo(c);n==r.length-1&&a.addClass("last-site"),a.click((function(){e('input[name="allTissues"]').prop("checked",!1)}))})),e("#"+a).click((function(){e('input[name="allTissues"]').prop("checked",!1),e("#"+a).is(":checked")?r.forEach((function(t){"id"!=t.id&&e("#"+t.id).prop("checked",!0)})):r.forEach((function(t){"id"!=t.id&&e("#"+t.id).prop("checked",!1)}))}))}),a&&(e('input[name="allTissues"][value="all"]').prop("checked",!0),e(".tissueGroup").prop("checked",!0),e(".tissueSubGroup").prop("checked",!0))}(f,n),$("#"+r).click((function(){void 0!==c&&c(),$("#"+t).removeClass("show"),$("#"+t).removeClass("in");let r=$("#genes").val().replace(/ /g,"").replace(/\n/g,"").toUpperCase().split(",").filter(t=>""!=t);if(0==r.length)throw alert("Input Error: At least one gene must be provided."),"Gene input error";let s=function(t,n,r=!1){let a=[];return e("#"+n).find(":input").each((function(){if(e(this).is(":checked")){const n=e(this).attr("id");if(e(this).hasClass("tissueGroup")){let e=n.replace(/_/g," ");1==t[e].length&&(r?a.push(t[e][0].name):a.push(t[e][0].id))}else r?a.push(e(e(this).siblings()[0]).text()):a.push(n)}})),a.filter(t=>void 0!==t)}(f,n);if(0==s.length)throw alert("Input Error: At least one tissue must be selected."),"Tissue input error";Hc(a,i,r,s,o)}))})).catch((function(t){console.error(t)}))}function Hc(t,e,n,r,a=jt(),i,o,c){$("#spinner").show(),$("#"+t).empty(),$("#"+e).empty();const s=$("<div/><br/>").attr("class","col-xs-12 col-md-12").css("color","firebrick").appendTo("#"+t);let f="";n.length>100&&(f="Warning: Too many genes. Input list truncated to the first 100. <br/>",n=n.slice(0,100)),Promise.all([u(a.tissue,{credentials:"include"}),u(a.geneId+n.join(","),{credentials:"include"})]).then((function(l){const d=Lt(l[0]),h=function(t,e=!1,n=null){if(!t.hasOwnProperty("gene"))throw"Parsing Error: attribute gene doesn't exist.";if(0===t.gene.length)throw alert("No gene is found"),"Fatal Error: gene(s) not found";if(e){if(null===n)throw"Please provide a gene ID for search results validation";if(t.gene.length>1){let e=t.gene.filter(t=>t.geneSymbolUpper===n.toUpperCase()||t.gencodeId===n.toUpperCase());if(e.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";if(0===e.length)throw alert("No gene is found with "+n),"Fatal Error: gene not found";t.gene=e}return t.gene[0]}return t.gene}(l[1]);f+=function(t,e,n){let r="";if(0==e.length)r="Fatal Error: the gene list is empty.<br/>";else if(e.length<n.length){let t=[];e.forEach(e=>{t.push(e.gencodeId),t.push(e.geneSymbolUpper)});let a=n.filter(e=>!t.includes(e.toLowerCase())&&!t.includes(e.toUpperCase()));a.length>0&&(r=`Warning: Not all genes are found: ${a.join(",")}<br/>`)}return r}(0,h,n);const b=h.map(t=>t.gencodeId).join(","),p=void 0===r?void 0:r.join(",");u(void 0===p?a.medGeneExp+"&gencodeId="+b:a.medGeneExp+"&gencodeId="+b+"&tissueSiteDetailId="+p,{credentials:"include"}).then((function(n){$("#spinner").hide();const l=function(t){const e="medianGeneExpression";if(!t.hasOwnProperty(e))throw"expression data json format error.";return 0==t[e].length?"No expression data found.":void 0}(n);if(void 0!==l)s.html(f+l);else{s.html(f);const l=function(t){const e="medianGeneExpression";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attribute is missing: "+e;if(0===t[e].length)throw"parseMedianExpression finds no data.";["median","tissueSiteDetailId","gencodeId"].forEach(n=>{if(!t[e][0].hasOwnProperty(n))throw console.error(t[e][0]),"Parsing Error: required json attribute is missingp: "+n});let n=t[e];return n.forEach((function(t){t.value=Number(t.median),t.x=t.tissueSiteDetailId,t.y=t.gencodeId,t.displayValue=Number(t.median),t.id=t.gencodeId})),n}(n),b={root:t,violin:e,svg:t+"-svg",tooltip:"heatmapTooltip",toolbar:"heatmapToolbar",clone:"heatmapClone",buttons:{save:"heatmapSave",filter:"heatmapFilter",sort:"heatmapSortTissue",cluster:"heatmapClusterTissue"}};["toolbar","clone"].forEach(t=>{$("<div/>").attr("id",b[t]).appendTo($("#"+b.root))});const p=25,g=25;let v=void 0===r?Math.ceil(window.innerWidth/d.length):Math.ceil(window.innerWidth/r.length);v=v>p?p:v<g?g:v;let y={top:50,right:250,bottom:170,left:10},m=100,w=void 0===r?v*d.length+m+y.right+y.left:v*r.length+m+y.right+y.left;const x=new di(w,m,100,y,12,10),_=new Ho(n.clusters.tissue,n.clusters.gene,l,"YlGnBu",2,x,b.tooltip);h.length<3?_.render(b.root,b.svg,!0,!1):_.render(b.root,b.svg);const M=d.reduce((t,e)=>{if(!e.hasOwnProperty("tissueSiteDetailId"))throw"tissue has not attr tissueSiteDetailId";return t[e.tissueSiteDetailId]=e,t},{}),T=_.data.heatmap.reduce((t,e,n)=>{if(!e.hasOwnProperty("gencodeId"))throw"gene has no attr gencodeId";return t[e.gencodeId]=e,t},{});_t("#"+_.config.panels.main.id).selectAll(".exp-map-xlabel").text(t=>void 0===M[t]?t:M[t].tissueSiteDetail),_t("#"+_.config.panels.main.id).selectAll(".exp-map-ylabel").text(t=>void 0===T[t]?t:T[t].geneSymbol),Vc(_,M),function(t,e,n,r=jt(),a,i){let o=t.createToolbar(e.toolbar,t.tooltip);o.createDownloadSvgButton(e.buttons.save,e.svg,e.root+"-save.svg",e.clone);void 0!==a&&(()=>{const t=e.buttons.filter;o.createButton(t,"fa-filter"),_t("#"+t).on("click",(function(){Yc(i,e.root,e.violin,r,!a)})).on("mouseover",(function(){a?o.tooltip.show("Include Mitochondrial Genes"):o.tooltip.show("Exclude Mitochondrial Genes")})).on("mouseout",(function(){o.tooltip.hide()}))})();(()=>{const r=e.buttons.sort;o.createButton(r,"fa-sort-alpha-down"),_t("#"+r).on("click",(function(){_t("#"+t.config.panels.top.id).style("display","None"),Xc(t.objects.heatmap.xList.sort(),t,n)})).on("mouseover",(function(){o.tooltip.show("Sort Tissues Alphabetically")})).on("mouseout",(function(){o.tooltip.hide()}))})(),(()=>{const r=e.buttons.cluster;o.createButton(r,"fa-code-branch"),_t("#"+r).on("click",(function(){_t("#"+t.config.panels.top.id).style("display","Block"),Xc(t.objects.columnTree.xScale.domain(),t,n)})).on("mouseover",(function(){o.tooltip.show("Cluster Tissues")})).on("mouseout",(function(){o.tooltip.hide()}))})()}(_,b,M,a,i,c),function(t,e,n,r=jt()){const a=t.visualComponents.svg,i=t.tooltip;t.data.external=[];const o=li();(function(t){var e=[];for(var n in t)e.push(n);return e})(n).forEach((t,e)=>{n[t].color=o[e]});a.selectAll(".exp-map-cell").on("mouseover",(function(r){const o=_t(this);t.objects.heatmap.cellMouseover(r,a,o);let c=void 0===e[r.x]?r.x:e[r.x].tissueSiteDetail,s=void 0===n[r.y]?r.y:n[r.y].geneSymbol;i.show(`Tissue: ${c}<br/> Gene: ${s}<br/> Median TPM: ${parseFloat(r.displayValue.toExponential()).toPrecision(4)}`)})).on("mouseout",(function(t){a.selectAll("*").classed("highlighted",!1),i.hide()})),a.selectAll(".exp-map-ylabel").style("cursor","pointer").on("click",(function(a){let i=_t(this),o="";i.classed("clicked")?(i.classed("clicked",!1),o="delete"):(i.classed("clicked",!0),o="add"),function(t,e,n,r,a,i=jt()){switch(t){case"delete":a.data.external=a.data.external.filter(t=>t.gencodeId!=e),Rc(a.data.external,a,r);break;case"add":{const t=i.geneExp+e,o={};o[e]=n[e].color;const c=a.objects.heatmap.xScale.domain();u(t,{credentials:"include"}).then((function(t){void 0===a.data.external&&(a.data.external=[]),a.data.external=a.data.external.concat(function(t,e=!0,n){const r="geneExpression";if(!t.hasOwnProperty(r))throw"Parsing Error: required json attribute is missing: "+r;return t[r].forEach(t=>{["data","tissueSiteDetailId","geneSymbol","gencodeId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parsing Error: required json attribute is missing: "+e}),t.values=e?t.data.map(t=>Math.log10(+t+1)):t.data,t.group=t.tissueSiteDetailId,t.label=t.geneSymbol,t.color=void 0===n?"#90c1c1":n[t.gencodeId]}),t[r]}(t,!0,o)).filter(t=>c.indexOf(t.group)>-1),Rc(a.data.external,a,r)})).catch((function(t){console.error(t)}));break}default:console.warn("action not understood.")}}(o,a,n,e,t,r)}))}(_,M,T,a),null!=o&&o()}})).catch((function(t){console.error(t)}))})).catch((function(t){console.error(t)}))}function Gc(t){kt(".exp-map-xlabel").filter(e=>e==t).classed("query",!0)}function Vc(t,e){const n=t.config.panels.main.id,r=t.objects.heatmap;let a=_t("#"+n).selectAll(".exp-map-xcolor").data(r.xList),i=_t("#"+n).selectAll(".leaf-color").data(r.xList);a.attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[1]+5),i.attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[0]-10),a.enter().append("rect").attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[1]+5).attr("width",r.xScale.bandwidth()).attr("height",.5*r.yScale.bandwidth()).classed("exp-map-xcolor",!0).merge(a).style("fill",t=>void 0===e[t]?"#000000":"#"+e[t].colorHex),a.exit().remove(),t.objects.heatmap.yScale.domain().length>15&&(i.enter().append("rect").attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[0]-10).attr("width",r.xScale.bandwidth()).attr("height",.5*r.yScale.bandwidth()).classed("leaf-color",!0).merge(i).style("fill",t=>void 0===e[t]?"#000000":"#"+e[t].colorHex),i.exit().remove())}function Rc(t,e,n){const r={root:"violinRoot",tooltip:"violinTooltip",toolbar:"violinToolbar",clone:"violinClone",chart:"violinPlot",svg:"violinSvg",buttons:{save:"violinSave"}},a="#"+r.root,i="#"+r.tooltip;if(0==$(a).length)throw"Violin Plot Error: rootId does not exist.";if(0==$(i).length&&$("<div/>").attr("id",r.tooltip).appendTo($("body")),_t(a).selectAll("*").remove(),["toolbar","chart","clone"].forEach(t=>{$("<div/>").attr("id",r[t]).appendTo($(a))}),0==t.length)return void _t(a).style("opacity",0);let o=e.objects.heatmap.xScale.domain().map((t,e)=>({id:t,name:n[t].tissueSiteDetail}));const c=t.reduce((t,e)=>(t[e.label]=1,t),{}),s=Object.keys(c).length;if(0==s)return void _t(a).style("opacity",0);_t(a).style("opacity",1);const f=function(t=50,e=50,n=50,r=50){return{top:t,right:e,bottom:n,left:r}}(50,50,150,e.config.panels.main.x);let l=20*Object.keys(c).length*o.length;l=l<e.config.panels.main.w?e.config.panels.main.w:l;const u=function(t=1200,e=250,n=_setMargins()){return{width:t,height:e,outerWidth:t+(n.left+n.right),outerHeight:e+(n.top+n.bottom)}}(l,150,f),d=_t("#"+r.chart).append("svg").attr("width",u.outerWidth).attr("height",u.outerHeight).attr("id",r.svg).append("g").attr("transform",`translate(${f.left}, ${f.top})`),h=new Fc(t),b=h.createTooltip(r.tooltip);h.createToolbar(r.toolbar,b).createDownloadSvgButton(r.buttons.save,r.svg,r.root+"-save.svg",r.clone);const p=1!=s;h.render(d,u.width,u.height,.3,o.map(t=>t.id),[],"log10(TPM)",!0,30,!1,0,!1,p,!0);const g=Number(d.select("#violinLegend").select("rect").attr("width"));let v=Number(_t("#"+r.chart).select("svg").attr("width"));v=v<g+150?g+150:v,_t("#"+r.chart).select("svg").attr("width",v),function(t,e,n,r="top"){e.append("g").selectAll(".tcolor").data(t.scale.x.domain()).enter().append("rect").classed("tcolor",!0).attr("x",e=>t.scale.x(e)).attr("y",e=>"top"==r?t.scale.y.range()[1]-5:t.scale.y.range()[0]-5).attr("width",e=>t.scale.x.bandwidth()).attr("height",5).style("stroke-width",0).style("fill",t=>"#"+n[t].colorHex).style("opacity",.7)}(h,d,n,"bottom"),function(t,e){t.select(".violin-x-axis").selectAll("text").text(t=>void 0===e[t]?t:e[t].tissueSiteDetail)}(d,n)}function Xc(t,e,n){let r=void 0;const a=_t(".exp-map-xlabel.query");a.empty()||(r=a.datum());const i=_t("#"+e.config.panels.main.id),o=e.config.panels.main;e.objects.heatmap.redraw(i,t,e.objects.heatmap.yList,o),kt(".exp-map-xlabel").text(t=>void 0===n[t]?t:n[t].tissueSiteDetail).classed("query",!1),Vc(e,n),void 0!==r&&Gc(r),_t("#violinRoot").style("opacity",0),kt(".exp-map-ylabel").classed("clicked",!1),e.data.external=void 0}var Wc={createDatasetMenu:Oc,launchTopExpressed:Yc,launch:qc,searchById:Hc};t.BatchGeneExpression=Wc,t.createDatasetMenu=Oc,t.launch=qc,t.launchTopExpressed=Yc,t.searchById=Hc,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
