!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery"),require("file-saver")):"function"==typeof define&&define.amd?define(["exports","jquery","file-saver"],e):e((t=t||self).GeneEqtlVisualizer={},t.$,t.saveAs)}(this,(function(t,e,n){"use strict";e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e,n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n;var a={},r={};function i(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function o(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var a in t)a in e||n.push(e[a]=a)})),n}function l(t,e){var n=t+"",a=n.length;return a<e?new Array(e-a+1).join(0)+n:n}function c(t){var e=t.getUTCHours(),n=t.getUTCMinutes(),a=t.getUTCSeconds(),r=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+l(-t,6):t>9999?"+"+l(t,6):l(t,4)}(t.getUTCFullYear())+"-"+l(t.getUTCMonth()+1,2)+"-"+l(t.getUTCDate(),2)+(r?"T"+l(e,2)+":"+l(n,2)+":"+l(a,2)+"."+l(r,3)+"Z":a?"T"+l(e,2)+":"+l(n,2)+":"+l(a,2)+"Z":n||e?"T"+l(e,2)+":"+l(n,2)+"Z":"")}function s(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function l(t,e){var i,o=[],l=t.length,c=0,s=0,f=l<=0,u=!1;function d(){if(f)return r;if(u)return u=!1,a;var e,i,o=c;if(34===t.charCodeAt(o)){for(;c++<l&&34!==t.charCodeAt(c)||34===t.charCodeAt(++c););return(e=c)>=l?f=!0:10===(i=t.charCodeAt(c++))?u=!0:13===i&&(u=!0,10===t.charCodeAt(c)&&++c),t.slice(o+1,e-1).replace(/""/g,'"')}for(;c<l;){if(10===(i=t.charCodeAt(e=c++)))u=!0;else if(13===i)u=!0,10===t.charCodeAt(c)&&++c;else if(i!==n)continue;return t.slice(o,e)}return f=!0,t.slice(o,l)}for(10===t.charCodeAt(l-1)&&--l,13===t.charCodeAt(l-1)&&--l;(i=d())!==r;){for(var h=[];i!==a&&i!==r;)h.push(i),i=d();e&&null==(h=e(h,s++))||o.push(h)}return o}function s(e,n){return e.map((function(e){return n.map((function(t){return u(e[t])})).join(t)}))}function f(e){return e.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?c(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,r=l(t,(function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=i(t);return function(a,r){return e(n(a),r,t)}}(t,e):i(t)}));return r.columns=a||[],r},parseRows:l,format:function(e,n){return null==n&&(n=o(e)),[n.map(u).join(t)].concat(s(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=o(t)),s(t,e).join("\n")},formatRows:function(t){return t.map(f).join("\n")},formatRow:f,formatValue:u}}s(","),s("\t"),new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function f(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function u(t,e){return fetch(t,e).then(f)}var d={value:function(){}};function h(){for(var t,e=0,n=arguments.length,a={};e<n;++e){if(!(t=arguments[e]+"")||t in a||/[\s.]/.test(t))throw new Error("illegal type: "+t);a[t]=[]}return new p(a)}function p(t){this._=t}function b(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",a=t.indexOf(".");if(a>=0&&(n=t.slice(a+1),t=t.slice(0,a)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function g(t,e){for(var n,a=0,r=t.length;a<r;++a)if((n=t[a]).name===e)return n.value}function m(t,e,n){for(var a=0,r=t.length;a<r;++a)if(t[a].name===e){t[a]=d,t=t.slice(0,a).concat(t.slice(a+1));break}return null!=n&&t.push({name:e,value:n}),t}p.prototype=h.prototype={constructor:p,on:function(t,e){var n,a=this._,r=b(t+"",a),i=-1,o=r.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<o;)if(n=(t=r[i]).type)a[n]=m(a[n],t.name,e);else if(null==e)for(n in a)a[n]=m(a[n],t.name,null);return this}for(;++i<o;)if((n=(t=r[i]).type)&&(n=g(a[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new p(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,a,r=new Array(n),i=0;i<n;++i)r[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(a=this._[t]).length;i<n;++i)a[i].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var a=this._[t],r=0,i=a.length;r<i;++r)a[r].value.apply(e,n)}};var y="http://www.w3.org/1999/xhtml",v={svg:"http://www.w3.org/2000/svg",xhtml:y,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function x(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),v.hasOwnProperty(e)?{space:v[e],local:t}:t}function w(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===y&&e.documentElement.namespaceURI===y?e.createElement(t):e.createElementNS(n,t)}}function _(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function S(t){var e=x(t);return(e.local?_:w)(e)}function M(){}function A(t){return null==t?M:function(){return this.querySelector(t)}}function T(){return[]}function k(t){return null==t?T:function(){return this.querySelectorAll(t)}}function E(t){return function(){return this.matches(t)}}function N(t){return new Array(t.length)}function C(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}C.prototype={constructor:C,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function P(t,e,n,a,r,i){for(var o,l=0,c=e.length,s=i.length;l<s;++l)(o=e[l])?(o.__data__=i[l],a[l]=o):n[l]=new C(t,i[l]);for(;l<c;++l)(o=e[l])&&(r[l]=o)}function D(t,e,n,a,r,i,o){var l,c,s,f={},u=e.length,d=i.length,h=new Array(u);for(l=0;l<u;++l)(c=e[l])&&(h[l]=s="$"+o.call(c,c.__data__,l,e),s in f?r[l]=c:f[s]=c);for(l=0;l<d;++l)(c=f[s="$"+o.call(t,i[l],l,i)])?(a[l]=c,c.__data__=i[l],f[s]=null):n[l]=new C(t,i[l]);for(l=0;l<u;++l)(c=e[l])&&f[h[l]]===c&&(r[l]=c)}function I(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function L(t){return function(){this.removeAttribute(t)}}function z(t){return function(){this.removeAttributeNS(t.space,t.local)}}function U(t,e){return function(){this.setAttribute(t,e)}}function F(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function G(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function Y(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function q(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function V(t){return function(){this.style.removeProperty(t)}}function O(t,e,n){return function(){this.style.setProperty(t,e,n)}}function j(t,e,n){return function(){var a=e.apply(this,arguments);null==a?this.style.removeProperty(t):this.style.setProperty(t,a,n)}}function H(t,e){return t.style.getPropertyValue(e)||q(t).getComputedStyle(t,null).getPropertyValue(e)}function B(t){return function(){delete this[t]}}function X(t,e){return function(){this[t]=e}}function R(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Z(t){return t.trim().split(/^|\s+/)}function W(t){return t.classList||new K(t)}function K(t){this._node=t,this._names=Z(t.getAttribute("class")||"")}function Q(t,e){for(var n=W(t),a=-1,r=e.length;++a<r;)n.add(e[a])}function J(t,e){for(var n=W(t),a=-1,r=e.length;++a<r;)n.remove(e[a])}function tt(t){return function(){Q(this,t)}}function et(t){return function(){J(this,t)}}function nt(t,e){return function(){(e.apply(this,arguments)?Q:J)(this,t)}}function at(){this.textContent=""}function rt(t){return function(){this.textContent=t}}function it(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function ot(){this.innerHTML=""}function lt(t){return function(){this.innerHTML=t}}function ct(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function st(){this.nextSibling&&this.parentNode.appendChild(this)}function ft(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ut(){return null}function dt(){var t=this.parentNode;t&&t.removeChild(this)}function ht(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function pt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}K.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var bt={},gt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(bt={mouseenter:"mouseover",mouseleave:"mouseout"}));function mt(t,e,n){return t=yt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function yt(t,e,n){return function(a){var r=gt;gt=a;try{t.call(this,this.__data__,e,n)}finally{gt=r}}}function vt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function xt(t){return function(){var e=this.__on;if(e){for(var n,a=0,r=-1,i=e.length;a<i;++a)n=e[a],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function wt(t,e,n){var a=bt.hasOwnProperty(t.type)?mt:yt;return function(r,i,o){var l,c=this.__on,s=a(e,i,o);if(c)for(var f=0,u=c.length;f<u;++f)if((l=c[f]).type===t.type&&l.name===t.name)return this.removeEventListener(l.type,l.listener,l.capture),this.addEventListener(l.type,l.listener=s,l.capture=n),void(l.value=e);this.addEventListener(t.type,s,n),l={type:t.type,name:t.name,value:e,listener:s,capture:n},c?c.push(l):this.__on=[l]}}function _t(t,e,n){var a=q(t),r=a.CustomEvent;"function"==typeof r?r=new r(e,n):(r=a.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}function St(t,e){return function(){return _t(this,t,e)}}function Mt(t,e){return function(){return _t(this,t,e.apply(this,arguments))}}var At=[null];function Tt(t,e){this._groups=t,this._parents=e}function kt(){return new Tt([[document.documentElement]],At)}function Et(t){return"string"==typeof t?new Tt([[document.querySelector(t)]],[document.documentElement]):new Tt([[t]],At)}function Nt(){for(var t,e=gt;t=e.sourceEvent;)e=t;return e}function Ct(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=e.clientX,a.y=e.clientY,[(a=a.matrixTransform(t.getScreenCTM().inverse())).x,a.y]}var r=t.getBoundingClientRect();return[e.clientX-r.left-t.clientLeft,e.clientY-r.top-t.clientTop]}function $t(t){var e=Nt();return e.changedTouches&&(e=e.changedTouches[0]),Ct(t,e)}function Pt(){gt.preventDefault(),gt.stopImmediatePropagation()}function Dt(t){var e=t.document.documentElement,n=Et(t).on("dragstart.drag",Pt,!0);"onselectstart"in e?n.on("selectstart.drag",Pt,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}function It(t,e){var n=t.document.documentElement,a=Et(t).on("dragstart.drag",null);e&&(a.on("click.drag",Pt,!0),setTimeout((function(){a.on("click.drag",null)}),0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function Lt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function zt(t,e){var n=Object.create(t.prototype);for(var a in e)n[a]=e[a];return n}function Ut(){}Tt.prototype=kt.prototype={constructor:Tt,select:function(t){"function"!=typeof t&&(t=A(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o,l=e[r],c=l.length,s=a[r]=new Array(c),f=0;f<c;++f)(i=l[f])&&(o=t.call(i,i.__data__,f,l))&&("__data__"in i&&(o.__data__=i.__data__),s[f]=o);return new Tt(a,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=k(t));for(var e=this._groups,n=e.length,a=[],r=[],i=0;i<n;++i)for(var o,l=e[i],c=l.length,s=0;s<c;++s)(o=l[s])&&(a.push(t.call(o,o.__data__,s,l)),r.push(o));return new Tt(a,r)},filter:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],l=o.length,c=a[r]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&c.push(i);return new Tt(a,this._parents)},data:function(t,e){if(!t)return h=new Array(this.size()),s=-1,this.each((function(t){h[++s]=t})),h;var n=e?D:P,a=this._parents,r=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var i=r.length,o=new Array(i),l=new Array(i),c=new Array(i),s=0;s<i;++s){var f=a[s],u=r[s],d=u.length,h=t.call(f,f&&f.__data__,s,a),p=h.length,b=l[s]=new Array(p),g=o[s]=new Array(p);n(f,u,b,g,c[s]=new Array(d),h,e);for(var m,y,v=0,x=0;v<p;++v)if(m=b[v]){for(v>=x&&(x=v+1);!(y=g[x])&&++x<p;);m._next=y||null}}return(o=new Tt(o,a))._enter=l,o._exit=c,o},enter:function(){return new Tt(this._enter||this._groups.map(N),this._parents)},exit:function(){return new Tt(this._exit||this._groups.map(N),this._parents)},join:function(t,e,n){var a=this.enter(),r=this,i=this.exit();return a="function"==typeof t?t(a):a.append(t+""),null!=e&&(r=e(r)),null==n?i.remove():n(i),a&&r?a.merge(r).order():r},merge:function(t){for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),l=0;l<i;++l)for(var c,s=e[l],f=n[l],u=s.length,d=o[l]=new Array(u),h=0;h<u;++h)(c=s[h]||f[h])&&(d[h]=c);for(;l<a;++l)o[l]=e[l];return new Tt(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var a,r=t[e],i=r.length-1,o=r[i];--i>=0;)(a=r[i])&&(o&&4^a.compareDocumentPosition(o)&&o.parentNode.insertBefore(a,o),o=a);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=I);for(var n=this._groups,a=n.length,r=new Array(a),i=0;i<a;++i){for(var o,l=n[i],c=l.length,s=r[i]=new Array(c),f=0;f<c;++f)(o=l[f])&&(s[f]=o);s.sort(e)}return new Tt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var a=t[e],r=0,i=a.length;r<i;++r){var o=a[r];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,a=e.length;n<a;++n)for(var r,i=e[n],o=0,l=i.length;o<l;++o)(r=i[o])&&t.call(r,r.__data__,o,i);return this},attr:function(t,e){var n=x(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?z:L:"function"==typeof e?n.local?Y:G:n.local?F:U)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?V:"function"==typeof e?j:O)(t,e,null==n?"":n)):H(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?B:"function"==typeof e?R:X)(t,e)):this.node()[t]},classed:function(t,e){var n=Z(t+"");if(arguments.length<2){for(var a=W(this.node()),r=-1,i=n.length;++r<i;)if(!a.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?nt:e?tt:et)(n,e))},text:function(t){return arguments.length?this.each(null==t?at:("function"==typeof t?it:rt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?ot:("function"==typeof t?ct:lt)(t)):this.node().innerHTML},raise:function(){return this.each(st)},lower:function(){return this.each(ft)},append:function(t){var e="function"==typeof t?t:S(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:S(t),a=null==e?ut:"function"==typeof e?e:A(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),a.apply(this,arguments)||null)}))},remove:function(){return this.each(dt)},clone:function(t){return this.select(t?pt:ht)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var a,r,i=vt(t+""),o=i.length;if(!(arguments.length<2)){for(l=e?wt:xt,null==n&&(n=!1),a=0;a<o;++a)this.each(l(i[a],e,n));return this}var l=this.node().__on;if(l)for(var c,s=0,f=l.length;s<f;++s)for(a=0,c=l[s];a<o;++a)if((r=i[a]).type===c.type&&r.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?Mt:St)(t,e))}};var Ft="\\s*([+-]?\\d+)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Yt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",qt=/^#([0-9a-f]{3,8})$/,Vt=new RegExp("^rgb\\("+[Ft,Ft,Ft]+"\\)$"),Ot=new RegExp("^rgb\\("+[Yt,Yt,Yt]+"\\)$"),jt=new RegExp("^rgba\\("+[Ft,Ft,Ft,Gt]+"\\)$"),Ht=new RegExp("^rgba\\("+[Yt,Yt,Yt,Gt]+"\\)$"),Bt=new RegExp("^hsl\\("+[Gt,Yt,Yt]+"\\)$"),Xt=new RegExp("^hsla\\("+[Gt,Yt,Yt,Gt]+"\\)$"),Rt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Zt(){return this.rgb().formatHex()}function Wt(){return this.rgb().formatRgb()}function Kt(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=qt.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Qt(e):3===n?new ne(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Jt(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Jt(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Vt.exec(t))?new ne(e[1],e[2],e[3],1):(e=Ot.exec(t))?new ne(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=jt.exec(t))?Jt(e[1],e[2],e[3],e[4]):(e=Ht.exec(t))?Jt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Bt.exec(t))?oe(e[1],e[2]/100,e[3]/100,1):(e=Xt.exec(t))?oe(e[1],e[2]/100,e[3]/100,e[4]):Rt.hasOwnProperty(t)?Qt(Rt[t]):"transparent"===t?new ne(NaN,NaN,NaN,0):null}function Qt(t){return new ne(t>>16&255,t>>8&255,255&t,1)}function Jt(t,e,n,a){return a<=0&&(t=e=n=NaN),new ne(t,e,n,a)}function te(t){return t instanceof Ut||(t=Kt(t)),t?new ne((t=t.rgb()).r,t.g,t.b,t.opacity):new ne}function ee(t,e,n,a){return 1===arguments.length?te(t):new ne(t,e,n,null==a?1:a)}function ne(t,e,n,a){this.r=+t,this.g=+e,this.b=+n,this.opacity=+a}function ae(){return"#"+ie(this.r)+ie(this.g)+ie(this.b)}function re(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function ie(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function oe(t,e,n,a){return a<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ce(t,e,n,a)}function le(t){if(t instanceof ce)return new ce(t.h,t.s,t.l,t.opacity);if(t instanceof Ut||(t=Kt(t)),!t)return new ce;if(t instanceof ce)return t;var e=(t=t.rgb()).r/255,n=t.g/255,a=t.b/255,r=Math.min(e,n,a),i=Math.max(e,n,a),o=NaN,l=i-r,c=(i+r)/2;return l?(o=e===i?(n-a)/l+6*(n<a):n===i?(a-e)/l+2:(e-n)/l+4,l/=c<.5?i+r:2-i-r,o*=60):l=c>0&&c<1?0:o,new ce(o,l,c,t.opacity)}function ce(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function se(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Lt(Ut,Kt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Zt,formatHex:Zt,formatHsl:function(){return le(this).formatHsl()},formatRgb:Wt,toString:Wt}),Lt(ne,ee,zt(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ne(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ne(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:ae,formatHex:ae,formatRgb:re,toString:re})),Lt(ce,(function(t,e,n,a){return 1===arguments.length?le(t):new ce(t,e,n,null==a?1:a)}),zt(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ce(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ce(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,a=n+(n<.5?n:1-n)*e,r=2*n-a;return new ne(se(t>=240?t-240:t+120,r,a),se(t,r,a),se(t<120?t+240:t-120,r,a),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var fe=Math.PI/180,ue=180/Math.PI,de=6/29,he=3*de*de;function pe(t){if(t instanceof be)return new be(t.l,t.a,t.b,t.opacity);if(t instanceof we)return _e(t);t instanceof ne||(t=te(t));var e,n,a=ve(t.r),r=ve(t.g),i=ve(t.b),o=ge((.2225045*a+.7168786*r+.0606169*i)/1);return a===r&&r===i?e=n=o:(e=ge((.4360747*a+.3850649*r+.1430804*i)/.96422),n=ge((.0139322*a+.0971045*r+.7141733*i)/.82521)),new be(116*o-16,500*(e-o),200*(o-n),t.opacity)}function be(t,e,n,a){this.l=+t,this.a=+e,this.b=+n,this.opacity=+a}function ge(t){return t>.008856451679035631?Math.pow(t,1/3):t/he+4/29}function me(t){return t>de?t*t*t:he*(t-4/29)}function ye(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function ve(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function xe(t){if(t instanceof we)return new we(t.h,t.c,t.l,t.opacity);if(t instanceof be||(t=pe(t)),0===t.a&&0===t.b)return new we(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*ue;return new we(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function we(t,e,n,a){this.h=+t,this.c=+e,this.l=+n,this.opacity=+a}function _e(t){if(isNaN(t.h))return new be(t.l,0,0,t.opacity);var e=t.h*fe;return new be(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}Lt(be,(function(t,e,n,a){return 1===arguments.length?pe(t):new be(t,e,n,null==a?1:a)}),zt(Ut,{brighter:function(t){return new be(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new be(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new ne(ye(3.1338561*(e=.96422*me(e))-1.6168667*(t=1*me(t))-.4906146*(n=.82521*me(n))),ye(-.9787684*e+1.9161415*t+.033454*n),ye(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Lt(we,(function(t,e,n,a){return 1===arguments.length?xe(t):new we(t,e,n,null==a?1:a)}),zt(Ut,{brighter:function(t){return new we(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new we(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return _e(this).rgb()}}));var Se=-.14861,Me=1.78277,Ae=-.29227,Te=-.90649,ke=1.97294,Ee=ke*Te,Ne=ke*Me,Ce=Me*Ae-Te*Se;function $e(t){if(t instanceof De)return new De(t.h,t.s,t.l,t.opacity);t instanceof ne||(t=te(t));var e=t.r/255,n=t.g/255,a=t.b/255,r=(Ce*a+Ee*e-Ne*n)/(Ce+Ee-Ne),i=a-r,o=(ke*(n-r)-Ae*i)/Te,l=Math.sqrt(o*o+i*i)/(ke*r*(1-r)),c=l?Math.atan2(o,i)*ue-120:NaN;return new De(c<0?c+360:c,l,r,t.opacity)}function Pe(t,e,n,a){return 1===arguments.length?$e(t):new De(t,e,n,null==a?1:a)}function De(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function Ie(t){return function(){return t}}function Le(t,e){return function(n){return t+n*e}}function ze(t){return 1==(t=+t)?Ue:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(a){return Math.pow(t+a*e,n)}}(e,n,t):Ie(isNaN(e)?n:e)}}function Ue(t,e){var n=e-t;return n?Le(t,n):Ie(isNaN(t)?e:t)}Lt(De,Pe,zt(Ut,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new De(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new De(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*fe,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),a=Math.cos(t),r=Math.sin(t);return new ne(255*(e+n*(Se*a+Me*r)),255*(e+n*(Ae*a+Te*r)),255*(e+n*(ke*a)),this.opacity)}}));var Fe=function t(e){var n=ze(e);function a(t,e){var a=n((t=ee(t)).r,(e=ee(e)).r),r=n(t.g,e.g),i=n(t.b,e.b),o=Ue(t.opacity,e.opacity);return function(e){return t.r=a(e),t.g=r(e),t.b=i(e),t.opacity=o(e),t+""}}return a.gamma=t,a}(1);var Ge,Ye=(Ge=function(t){var e=t.length-1;return function(n){var a=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[a],i=t[a+1],o=a>0?t[a-1]:2*r-i,l=a<e-1?t[a+2]:2*i-r;return function(t,e,n,a,r){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*a+o*r)/6}((n-a/e)*e,o,r,i,l)}},function(t){var e,n,a=t.length,r=new Array(a),i=new Array(a),o=new Array(a);for(e=0;e<a;++e)n=ee(t[e]),r[e]=n.r||0,i[e]=n.g||0,o[e]=n.b||0;return r=Ge(r),i=Ge(i),o=Ge(o),n.opacity=1,function(t){return n.r=r(t),n.g=i(t),n.b=o(t),n+""}});function qe(t,e){e||(e=[]);var n,a=t?Math.min(e.length,t.length):0,r=e.slice();return function(i){for(n=0;n<a;++n)r[n]=t[n]*(1-i)+e[n]*i;return r}}function Ve(t,e){var n,a=e?e.length:0,r=t?Math.min(a,t.length):0,i=new Array(r),o=new Array(a);for(n=0;n<r;++n)i[n]=Ze(t[n],e[n]);for(;n<a;++n)o[n]=e[n];return function(t){for(n=0;n<r;++n)o[n]=i[n](t);return o}}function Oe(t,e){var n=new Date;return t=+t,e=+e,function(a){return n.setTime(t*(1-a)+e*a),n}}function je(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function He(t,e){var n,a={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?a[n]=Ze(t[n],e[n]):r[n]=e[n];return function(t){for(n in a)r[n]=a[n](t);return r}}var Be=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Xe=new RegExp(Be.source,"g");function Re(t,e){var n,a,r,i=Be.lastIndex=Xe.lastIndex=0,o=-1,l=[],c=[];for(t+="",e+="";(n=Be.exec(t))&&(a=Xe.exec(e));)(r=a.index)>i&&(r=e.slice(i,r),l[o]?l[o]+=r:l[++o]=r),(n=n[0])===(a=a[0])?l[o]?l[o]+=a:l[++o]=a:(l[++o]=null,c.push({i:o,x:je(n,a)})),i=Xe.lastIndex;return i<e.length&&(r=e.slice(i),l[o]?l[o]+=r:l[++o]=r),l.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,a=0;a<e;++a)l[(n=c[a]).i]=n.x(t);return l.join("")})}function Ze(t,e){var n,a=typeof e;return null==e||"boolean"===a?Ie(e):("number"===a?je:"string"===a?(n=Kt(e))?(e=n,Fe):Re:e instanceof Kt?Fe:e instanceof Date?Oe:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?qe:Array.isArray(e)?Ve:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?He:je)(t,e)}function We(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var Ke,Qe,Je,tn,en=180/Math.PI,nn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function an(t,e,n,a,r,i){var o,l,c;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(c=t*n+e*a)&&(n-=t*c,a-=e*c),(l=Math.sqrt(n*n+a*a))&&(n/=l,a/=l,c/=l),t*a<e*n&&(t=-t,e=-e,c=-c,o=-o),{translateX:r,translateY:i,rotate:Math.atan2(e,t)*en,skewX:Math.atan(c)*en,scaleX:o,scaleY:l}}function rn(t,e,n,a){function r(t){return t.length?t.pop()+" ":""}return function(i,o){var l=[],c=[];return i=t(i),o=t(o),function(t,a,r,i,o,l){if(t!==r||a!==i){var c=o.push("translate(",null,e,null,n);l.push({i:c-4,x:je(t,r)},{i:c-2,x:je(a,i)})}else(r||i)&&o.push("translate("+r+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,l,c),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(r(n)+"rotate(",null,a)-2,x:je(t,e)})):e&&n.push(r(n)+"rotate("+e+a)}(i.rotate,o.rotate,l,c),function(t,e,n,i){t!==e?i.push({i:n.push(r(n)+"skewX(",null,a)-2,x:je(t,e)}):e&&n.push(r(n)+"skewX("+e+a)}(i.skewX,o.skewX,l,c),function(t,e,n,a,i,o){if(t!==n||e!==a){var l=i.push(r(i)+"scale(",null,",",null,")");o.push({i:l-4,x:je(t,n)},{i:l-2,x:je(e,a)})}else 1===n&&1===a||i.push(r(i)+"scale("+n+","+a+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,l,c),i=o=null,function(t){for(var e,n=-1,a=c.length;++n<a;)l[(e=c[n]).i]=e.x(t);return l.join("")}}}var on=rn((function(t){return"none"===t?nn:(Ke||(Ke=document.createElement("DIV"),Qe=document.documentElement,Je=document.defaultView),Ke.style.transform=t,t=Je.getComputedStyle(Qe.appendChild(Ke),null).getPropertyValue("transform"),Qe.removeChild(Ke),an(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),ln=rn((function(t){return null==t?nn:(tn||(tn=document.createElementNS("http://www.w3.org/2000/svg","g")),tn.setAttribute("transform",t),(t=tn.transform.baseVal.consolidate())?an((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):nn)}),", ",")",")");function cn(t){return function e(n){function a(e,a){var r=t((e=Pe(e)).h,(a=Pe(a)).h),i=Ue(e.s,a.s),o=Ue(e.l,a.l),l=Ue(e.opacity,a.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=l(t),e+""}}return n=+n,a.gamma=e,a}(1)}cn((function(t,e){var n=e-t;return n?Le(t,n>180||n<-180?n-360*Math.round(n/360):n):Ie(isNaN(t)?e:t)}));var sn,fn,un=cn(Ue),dn=0,hn=0,pn=0,bn=0,gn=0,mn=0,yn="object"==typeof performance&&performance.now?performance:Date,vn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function xn(){return gn||(vn(wn),gn=yn.now()+mn)}function wn(){gn=0}function _n(){this._call=this._time=this._next=null}function Sn(t,e,n){var a=new _n;return a.restart(t,e,n),a}function Mn(){gn=(bn=yn.now())+mn,dn=hn=0;try{!function(){xn(),++dn;for(var t,e=sn;e;)(t=gn-e._time)>=0&&e._call.call(null,t),e=e._next;--dn}()}finally{dn=0,function(){var t,e,n=sn,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:sn=e);fn=t,Tn(a)}(),gn=0}}function An(){var t=yn.now(),e=t-bn;e>1e3&&(mn-=e,bn=t)}function Tn(t){dn||(hn&&(hn=clearTimeout(hn)),t-gn>24?(t<1/0&&(hn=setTimeout(Mn,t-yn.now()-mn)),pn&&(pn=clearInterval(pn))):(pn||(bn=yn.now(),pn=setInterval(An,1e3)),dn=1,vn(Mn)))}function kn(t,e,n){var a=new _n;return e=null==e?0:+e,a.restart((function(n){a.stop(),t(n+e)}),e,n),a}_n.prototype=Sn.prototype={constructor:_n,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?xn():+n)+(null==e?0:+e),this._next||fn===this||(fn?fn._next=this:sn=this,fn=this),this._call=t,this._time=n,Tn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Tn())}};var En=h("start","end","cancel","interrupt"),Nn=[];function Cn(t,e,n,a,r,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var a,r=t.__transition;function i(c){var s,f,u,d;if(1!==n.state)return l();for(s in r)if((d=r[s]).name===n.name){if(3===d.state)return kn(i);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete r[s]):+s<e&&(d.state=6,d.timer.stop(),d.on.call("cancel",t,t.__data__,d.index,d.group),delete r[s])}if(kn((function(){3===n.state&&(n.state=4,n.timer.restart(o,n.delay,n.time),o(c))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,a=new Array(u=n.tween.length),s=0,f=-1;s<u;++s)(d=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(a[++f]=d);a.length=f+1}}function o(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=5,1),i=-1,o=a.length;++i<o;)a[i].call(t,r);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var a in n.state=6,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=Sn((function(t){n.state=1,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}),0,n.time)}(t,n,{name:e,index:a,group:r,on:En,tween:Nn,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function $n(t,e){var n=Dn(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function Pn(t,e){var n=Dn(t,e);if(n.state>3)throw new Error("too late; already running");return n}function Dn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function In(t,e){var n,a,r,i=t.__transition,o=!0;if(i){for(r in e=null==e?null:e+"",i)(n=i[r]).name===e?(a=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(a?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[r]):o=!1;o&&delete t.__transition}}function Ln(t,e){var n,a;return function(){var r=Pn(this,t),i=r.tween;if(i!==n)for(var o=0,l=(a=n=i).length;o<l;++o)if(a[o].name===e){(a=a.slice()).splice(o,1);break}r.tween=a}}function zn(t,e,n){var a,r;if("function"!=typeof n)throw new Error;return function(){var i=Pn(this,t),o=i.tween;if(o!==a){r=(a=o).slice();for(var l={name:e,value:n},c=0,s=r.length;c<s;++c)if(r[c].name===e){r[c]=l;break}c===s&&r.push(l)}i.tween=r}}function Un(t,e,n){var a=t._id;return t.each((function(){var t=Pn(this,a);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Dn(t,a).value[e]}}function Fn(t,e){var n;return("number"==typeof e?je:e instanceof Kt?Fe:(n=Kt(e))?(e=n,Fe):Re)(t,e)}function Gn(t){return function(){this.removeAttribute(t)}}function Yn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function qn(t,e,n){var a,r,i=n+"";return function(){var o=this.getAttribute(t);return o===i?null:o===a?r:r=e(a=o,n)}}function Vn(t,e,n){var a,r,i=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===i?null:o===a?r:r=e(a=o,n)}}function On(t,e,n){var a,r,i;return function(){var o,l,c=n(this);if(null!=c)return(o=this.getAttribute(t))===(l=c+"")?null:o===a&&l===r?i:(r=l,i=e(a=o,c));this.removeAttribute(t)}}function jn(t,e,n){var a,r,i;return function(){var o,l,c=n(this);if(null!=c)return(o=this.getAttributeNS(t.space,t.local))===(l=c+"")?null:o===a&&l===r?i:(r=l,i=e(a=o,c));this.removeAttributeNS(t.space,t.local)}}function Hn(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Bn(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Xn(t,e){var n,a;function r(){var r=e.apply(this,arguments);return r!==a&&(n=(a=r)&&Bn(t,r)),n}return r._value=e,r}function Rn(t,e){var n,a;function r(){var r=e.apply(this,arguments);return r!==a&&(n=(a=r)&&Hn(t,r)),n}return r._value=e,r}function Zn(t,e){return function(){$n(this,t).delay=+e.apply(this,arguments)}}function Wn(t,e){return e=+e,function(){$n(this,t).delay=e}}function Kn(t,e){return function(){Pn(this,t).duration=+e.apply(this,arguments)}}function Qn(t,e){return e=+e,function(){Pn(this,t).duration=e}}function Jn(t,e){if("function"!=typeof e)throw new Error;return function(){Pn(this,t).ease=e}}function ta(t,e,n){var a,r,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?$n:Pn;return function(){var o=i(this,t),l=o.on;l!==a&&(r=(a=l).copy()).on(e,n),o.on=r}}var ea=kt.prototype.constructor;function na(t){return function(){this.style.removeProperty(t)}}function aa(t,e,n){return function(a){this.style.setProperty(t,e.call(this,a),n)}}function ra(t,e,n){var a,r;function i(){var i=e.apply(this,arguments);return i!==r&&(a=(r=i)&&aa(t,i,n)),a}return i._value=e,i}function ia(t){return function(e){this.textContent=t.call(this,e)}}function oa(t){var e,n;function a(){var a=t.apply(this,arguments);return a!==n&&(e=(n=a)&&ia(a)),e}return a._value=t,a}var la=0;function ca(t,e,n,a){this._groups=t,this._parents=e,this._name=n,this._id=a}function sa(){return++la}var fa=kt.prototype;ca.prototype=function(t){return kt().transition(t)}.prototype={constructor:ca,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=A(t));for(var a=this._groups,r=a.length,i=new Array(r),o=0;o<r;++o)for(var l,c,s=a[o],f=s.length,u=i[o]=new Array(f),d=0;d<f;++d)(l=s[d])&&(c=t.call(l,l.__data__,d,s))&&("__data__"in l&&(c.__data__=l.__data__),u[d]=c,Cn(u[d],e,n,d,u,Dn(l,n)));return new ca(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=k(t));for(var a=this._groups,r=a.length,i=[],o=[],l=0;l<r;++l)for(var c,s=a[l],f=s.length,u=0;u<f;++u)if(c=s[u]){for(var d,h=t.call(c,c.__data__,u,s),p=Dn(c,n),b=0,g=h.length;b<g;++b)(d=h[b])&&Cn(d,e,n,b,h,p);i.push(h),o.push(c)}return new ca(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],l=o.length,c=a[r]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&c.push(i);return new ca(a,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),l=0;l<i;++l)for(var c,s=e[l],f=n[l],u=s.length,d=o[l]=new Array(u),h=0;h<u;++h)(c=s[h]||f[h])&&(d[h]=c);for(;l<a;++l)o[l]=e[l];return new ca(o,this._parents,this._name,this._id)},selection:function(){return new ea(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=sa(),a=this._groups,r=a.length,i=0;i<r;++i)for(var o,l=a[i],c=l.length,s=0;s<c;++s)if(o=l[s]){var f=Dn(o,e);Cn(o,t,n,s,l,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new ca(a,this._parents,t,n)},call:fa.call,nodes:fa.nodes,node:fa.node,size:fa.size,empty:fa.empty,each:fa.each,on:function(t,e){var n=this._id;return arguments.length<2?Dn(this.node(),n).on.on(t):this.each(ta(n,t,e))},attr:function(t,e){var n=x(t),a="transform"===n?ln:Fn;return this.attrTween(t,"function"==typeof e?(n.local?jn:On)(n,a,Un(this,"attr."+t,e)):null==e?(n.local?Yn:Gn)(n):(n.local?Vn:qn)(n,a,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=x(t);return this.tween(n,(a.local?Xn:Rn)(a,e))},style:function(t,e,n){var a="transform"==(t+="")?on:Fn;return null==e?this.styleTween(t,function(t,e){var n,a,r;return function(){var i=H(this,t),o=(this.style.removeProperty(t),H(this,t));return i===o?null:i===n&&o===a?r:r=e(n=i,a=o)}}(t,a)).on("end.style."+t,na(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var a,r,i;return function(){var o=H(this,t),l=n(this),c=l+"";return null==l&&(this.style.removeProperty(t),c=l=H(this,t)),o===c?null:o===a&&c===r?i:(r=c,i=e(a=o,l))}}(t,a,Un(this,"style."+t,e))).each(function(t,e){var n,a,r,i,o="style."+e,l="end."+o;return function(){var c=Pn(this,t),s=c.on,f=null==c.value[o]?i||(i=na(e)):void 0;s===n&&r===f||(a=(n=s).copy()).on(l,r=f),c.on=a}}(this._id,t)):this.styleTween(t,function(t,e,n){var a,r,i=n+"";return function(){var o=H(this,t);return o===i?null:o===a?r:r=e(a=o,n)}}(t,a,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var a="style."+(t+="");if(arguments.length<2)return(a=this.tween(a))&&a._value;if(null==e)return this.tween(a,null);if("function"!=typeof e)throw new Error;return this.tween(a,ra(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Un(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,oa(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var a,r=Dn(this.node(),n).tween,i=0,o=r.length;i<o;++i)if((a=r[i]).name===t)return a.value;return null}return this.each((null==e?Ln:zn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Zn:Wn)(e,t)):Dn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Kn:Qn)(e,t)):Dn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Jn(e,t)):Dn(this.node(),e).ease},end:function(){var t,e,n=this,a=n._id,r=n.size();return new Promise((function(i,o){var l={value:o},c={value:function(){0==--r&&i()}};n.each((function(){var n=Pn(this,a),r=n.on;r!==t&&((e=(t=r).copy())._.cancel.push(l),e._.interrupt.push(l),e._.end.push(c)),n.on=e}))}))}};var ua={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function da(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return ua.time=xn(),ua;return n}function ha(t){return function(){return t}}function pa(t,e,n){this.target=t,this.type=e,this.selection=n}function ba(){gt.stopImmediatePropagation()}function ga(){gt.preventDefault(),gt.stopImmediatePropagation()}kt.prototype.interrupt=function(t){return this.each((function(){In(this,t)}))},kt.prototype.transition=function(t){var e,n;t instanceof ca?(e=t._id,t=t._name):(e=sa(),(n=ua).time=xn(),t=null==t?null:t+"");for(var a=this._groups,r=a.length,i=0;i<r;++i)for(var o,l=a[i],c=l.length,s=0;s<c;++s)(o=l[s])&&Cn(o,t,e,s,l,n||da(o,e));return new ca(a,this._parents,t,e)};var ma={name:"drag"},ya={name:"space"},va={name:"handle"},xa={name:"center"};function wa(t){return[+t[0],+t[1]]}function _a(t){return[wa(t[0]),wa(t[1])]}function Sa(t){return function(e){return function(t,e,n){arguments.length<3&&(n=e,e=Nt().changedTouches);for(var a,r=0,i=e?e.length:0;r<i;++r)if((a=e[r]).identifier===n)return Ct(t,a);return null}(e,gt.touches,t)}}var Ma={name:"x",handles:["w","e"].map(Pa),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Aa={name:"y",handles:["n","s"].map(Pa),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Ta={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Pa),input:function(t){return null==t?null:_a(t)},output:function(t){return t}},ka={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ea={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Na={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Ca={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},$a={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Pa(t){return{type:t}}function Da(){return!gt.ctrlKey&&!gt.button}function Ia(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function La(){return navigator.maxTouchPoints||"ontouchstart"in this}function za(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ua(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Fa(){return Ga(Ma)}function Ga(t){var e,n=Ia,a=Da,r=La,i=!0,o=h("start","brush","end"),l=6;function c(e){var n=e.property("__brush",g).selectAll(".overlay").data([Pa("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",ka.overlay).merge(n).each((function(){var t=za(this).extent;Et(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([Pa("selection")]).enter().append("rect").attr("class","selection").attr("cursor",ka.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));a.exit().remove(),a.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return ka[t.type]})),e.each(s).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",d).filter(r).on("touchstart.brush",d).on("touchmove.brush",p).on("touchend.brush touchcancel.brush",b).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function s(){var t=Et(this),e=za(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-l/2:e[0][0]-l/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-l/2:e[0][1]-l/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+l:l})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+l:l}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function f(t,e,n){return!n&&t.__brush.emitter||new u(t,e)}function u(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function d(){if((!e||gt.touches)&&a.apply(this,arguments)){var n,r,o,l,c,u,d,h,p,b,g,m=this,y=gt.target.__data__.type,v="selection"===(i&&gt.metaKey?y="overlay":y)?ma:i&&gt.altKey?xa:va,x=t===Aa?null:Ca[y],w=t===Ma?null:$a[y],_=za(m),S=_.extent,M=_.selection,A=S[0][0],T=S[0][1],k=S[1][0],E=S[1][1],N=0,C=0,$=x&&w&&i&&gt.shiftKey,P=gt.touches?Sa(gt.changedTouches[0].identifier):$t,D=P(m),I=D,L=f(m,arguments,!0).beforestart();"overlay"===y?(M&&(p=!0),_.selection=M=[[n=t===Aa?A:D[0],o=t===Ma?T:D[1]],[c=t===Aa?k:n,d=t===Ma?E:o]]):(n=M[0][0],o=M[0][1],c=M[1][0],d=M[1][1]),r=n,l=o,u=c,h=d;var z=Et(m).attr("pointer-events","none"),U=z.selectAll(".overlay").attr("cursor",ka[y]);if(gt.touches)L.moved=G,L.ended=q;else{var F=Et(gt.view).on("mousemove.brush",G,!0).on("mouseup.brush",q,!0);i&&F.on("keydown.brush",V,!0).on("keyup.brush",O,!0),Dt(gt.view)}ba(),In(m),s.call(m),L.start()}function G(){var t=P(m);!$||b||g||(Math.abs(t[0]-I[0])>Math.abs(t[1]-I[1])?g=!0:b=!0),I=t,p=!0,ga(),Y()}function Y(){var t;switch(N=I[0]-D[0],C=I[1]-D[1],v){case ya:case ma:x&&(N=Math.max(A-n,Math.min(k-c,N)),r=n+N,u=c+N),w&&(C=Math.max(T-o,Math.min(E-d,C)),l=o+C,h=d+C);break;case va:x<0?(N=Math.max(A-n,Math.min(k-n,N)),r=n+N,u=c):x>0&&(N=Math.max(A-c,Math.min(k-c,N)),r=n,u=c+N),w<0?(C=Math.max(T-o,Math.min(E-o,C)),l=o+C,h=d):w>0&&(C=Math.max(T-d,Math.min(E-d,C)),l=o,h=d+C);break;case xa:x&&(r=Math.max(A,Math.min(k,n-N*x)),u=Math.max(A,Math.min(k,c+N*x))),w&&(l=Math.max(T,Math.min(E,o-C*w)),h=Math.max(T,Math.min(E,d+C*w)))}u<r&&(x*=-1,t=n,n=c,c=t,t=r,r=u,u=t,y in Ea&&U.attr("cursor",ka[y=Ea[y]])),h<l&&(w*=-1,t=o,o=d,d=t,t=l,l=h,h=t,y in Na&&U.attr("cursor",ka[y=Na[y]])),_.selection&&(M=_.selection),b&&(r=M[0][0],u=M[1][0]),g&&(l=M[0][1],h=M[1][1]),M[0][0]===r&&M[0][1]===l&&M[1][0]===u&&M[1][1]===h||(_.selection=[[r,l],[u,h]],s.call(m),L.brush())}function q(){if(ba(),gt.touches){if(gt.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else It(gt.view,p),F.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);z.attr("pointer-events","all"),U.attr("cursor",ka.overlay),_.selection&&(M=_.selection),Ua(M)&&(_.selection=null,s.call(m)),L.end()}function V(){switch(gt.keyCode){case 16:$=x&&w;break;case 18:v===va&&(x&&(c=u-N*x,n=r+N*x),w&&(d=h-C*w,o=l+C*w),v=xa,Y());break;case 32:v!==va&&v!==xa||(x<0?c=u-N:x>0&&(n=r-N),w<0?d=h-C:w>0&&(o=l-C),v=ya,U.attr("cursor",ka.selection),Y());break;default:return}ga()}function O(){switch(gt.keyCode){case 16:$&&(b=g=$=!1,Y());break;case 18:v===xa&&(x<0?c=u:x>0&&(n=r),w<0?d=h:w>0&&(o=l),v=va,Y());break;case 32:v===ya&&(gt.altKey?(x&&(c=u-N*x,n=r+N*x),w&&(d=h-C*w,o=l+C*w),v=xa):(x<0?c=u:x>0&&(n=r),w<0?d=h:w>0&&(o=l),v=va),U.attr("cursor",ka[y]),Y());break;default:return}ga()}}function p(){f(this,arguments).moved()}function b(){f(this,arguments).ended()}function g(){var e=this.__brush||{selection:null};return e.extent=_a(n.apply(this,arguments)),e.dim=t,e}return c.move=function(e,n){e.selection?e.on("start.brush",(function(){f(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){f(this,arguments).end()})).tween("brush",(function(){var e=this,a=e.__brush,r=f(e,arguments),i=a.selection,o=t.input("function"==typeof n?n.apply(this,arguments):n,a.extent),l=Ze(i,o);function c(t){a.selection=1===t&&null===o?null:l(t),s.call(e),r.brush()}return null!==i&&null!==o?c:c(1)})):e.each((function(){var e=this,a=arguments,r=e.__brush,i=t.input("function"==typeof n?n.apply(e,a):n,r.extent),o=f(e,a).beforestart();In(e),r.selection=null===i?null:i,s.call(e),o.start().brush().end()}))},c.clear=function(t){c.move(t,null)},u.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,a){var r=gt;t.sourceEvent=gt,gt=t;try{e.apply(n,a)}finally{gt=r}}(new pa(c,e,t.output(this.state.selection)),o.apply,o,[e,this.that,this.args])}},c.extent=function(t){return arguments.length?(n="function"==typeof t?t:ha(_a(t)),c):n},c.filter=function(t){return arguments.length?(a="function"==typeof t?t:ha(!!t),c):a},c.touchable=function(t){return arguments.length?(r="function"==typeof t?t:ha(!!t),c):r},c.handleSize=function(t){return arguments.length?(l=+t,c):l},c.keyModifiers=function(t){return arguments.length?(i=!!t,c):i},c.on=function(){var t=o.on.apply(o,arguments);return t===o?c:t},c}function Ya(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var qa,Va,Oa=(1===(qa=Ya).length&&(Va=qa,qa=function(t,e){return Ya(Va(t),e)}),{left:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;qa(t[r],e)<0?n=r+1:a=r}return n},right:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;qa(t[r],e)>0?a=r:n=r+1}return n}}).right;function ja(t){return null===t?NaN:+t}function Ha(t,e){var n=function(t,e){var n,a,r=t.length,i=0,o=-1,l=0,c=0;if(null==e)for(;++o<r;)isNaN(n=ja(t[o]))||(c+=(a=n-l)*(n-(l+=a/++i)));else for(;++o<r;)isNaN(n=ja(e(t[o],o,t)))||(c+=(a=n-l)*(n-(l+=a/++i)));if(i>1)return c/(i-1)}(t,e);return n?Math.sqrt(n):n}function Ba(t,e){var n,a,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(a=r=n;++o<i;)null!=(n=t[o])&&(a>n&&(a=n),r<n&&(r=n))}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(a=r=n;++o<i;)null!=(n=e(t[o],o,t))&&(a>n&&(a=n),r<n&&(r=n));return[a,r]}function Xa(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var a=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(r);++a<r;)i[a]=t+a*n;return i}var Ra=Math.sqrt(50),Za=Math.sqrt(10),Wa=Math.sqrt(2);function Ka(t,e,n){var a=(e-t)/Math.max(0,n),r=Math.floor(Math.log(a)/Math.LN10),i=a/Math.pow(10,r);return r>=0?(i>=Ra?10:i>=Za?5:i>=Wa?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(i>=Ra?10:i>=Za?5:i>=Wa?2:1)}function Qa(t,e,n){if(null==n&&(n=ja),a=t.length){if((e=+e)<=0||a<2)return+n(t[0],0,t);if(e>=1)return+n(t[a-1],a-1,t);var a,r=(a-1)*e,i=Math.floor(r),o=+n(t[i],i,t);return o+(+n(t[i+1],i+1,t)-o)*(r-i)}}function Ja(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&n>a&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&n>a&&(a=n);return a}function tr(t,e){var n,a=t.length,r=a,i=-1,o=0;if(null==e)for(;++i<a;)isNaN(n=ja(t[i]))?--r:o+=n;else for(;++i<a;)isNaN(n=ja(e(t[i],i,t)))?--r:o+=n;if(r)return o/r}function er(t,e){var n,a=t.length,r=-1,i=[];if(null==e)for(;++r<a;)isNaN(n=ja(t[r]))||i.push(n);else for(;++r<a;)isNaN(n=ja(e(t[r],r,t)))||i.push(n);return Qa(i.sort(Ya),.5)}function nr(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&a>n&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&a>n&&(a=n);return a}function ar(){}function rr(t,e){var n=new ar;if(t instanceof ar)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var a,r=-1,i=t.length;if(null==e)for(;++r<i;)n.set(r,t[r]);else for(;++r<i;)n.set(e(a=t[r],r,t),a)}else if(t)for(var o in t)n.set(o,t[o]);return n}function ir(){var t,e,n,a=[],r=[];function i(n,r,o,l){if(r>=a.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var c,s,f,u=-1,d=n.length,h=a[r++],p=rr(),b=o();++u<d;)(f=p.get(c=h(s=n[u])+""))?f.push(s):p.set(c,[s]);return p.each((function(t,e){l(b,e,i(t,r,o,l))})),b}return n={object:function(t){return i(t,0,or,lr)},map:function(t){return i(t,0,cr,sr)},entries:function(t){return function t(n,i){if(++i>a.length)return n;var o,l=r[i-1];return null!=e&&i>=a.length?o=n.entries():(o=[],n.each((function(e,n){o.push({key:n,values:t(e,i)})}))),null!=l?o.sort((function(t,e){return l(t.key,e.key)})):o}(i(t,0,cr,sr),0)},key:function(t){return a.push(t),n},sortKeys:function(t){return r[a.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function or(){return{}}function lr(t,e,n){t[e]=n}function cr(){return rr()}function sr(t,e,n){t.set(e,n)}function fr(){}ar.prototype=rr.prototype={constructor:ar,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var ur=rr.prototype;function dr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function hr(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}fr.prototype=function(t,e){var n=new fr;if(t instanceof fr)t.each((function(t){n.add(t)}));else if(t){var a=-1,r=t.length;if(null==e)for(;++a<r;)n.add(t[a]);else for(;++a<r;)n.add(e(t[a],a,t))}return n}.prototype={constructor:fr,has:ur.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ur.remove,clear:ur.clear,values:ur.keys,size:ur.size,empty:ur.empty,each:ur.each};var pr=Array.prototype,br=pr.map,gr=pr.slice,mr={name:"implicit"};function yr(){var t=rr(),e=[],n=[],a=mr;function r(r){var i=r+"",o=t.get(i);if(!o){if(a!==mr)return a;t.set(i,o=e.push(r))}return n[(o-1)%n.length]}return r.domain=function(n){if(!arguments.length)return e.slice();e=[],t=rr();for(var a,i,o=-1,l=n.length;++o<l;)t.has(i=(a=n[o])+"")||t.set(i,e.push(a));return r},r.range=function(t){return arguments.length?(n=gr.call(t),r):n.slice()},r.unknown=function(t){return arguments.length?(a=t,r):a},r.copy=function(){return yr(e,n).unknown(a)},dr.apply(r,arguments),r}function vr(){var t,e,n=yr().unknown(void 0),a=n.domain,r=n.range,i=[0,1],o=!1,l=0,c=0,s=.5;function f(){var n=a().length,f=i[1]<i[0],u=i[f-0],d=i[1-f];t=(d-u)/Math.max(1,n-l+2*c),o&&(t=Math.floor(t)),u+=(d-u-t*(n-l))*s,e=t*(1-l),o&&(u=Math.round(u),e=Math.round(e));var h=Xa(n).map((function(e){return u+t*e}));return r(f?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(a(t),f()):a()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],f()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,f()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,f()):o},n.padding=function(t){return arguments.length?(l=Math.min(1,c=+t),f()):l},n.paddingInner=function(t){return arguments.length?(l=Math.min(1,t),f()):l},n.paddingOuter=function(t){return arguments.length?(c=+t,f()):c},n.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),f()):s},n.copy=function(){return vr(a(),i).round(o).paddingInner(l).paddingOuter(c).align(s)},dr.apply(f(),arguments)}function xr(t){return+t}var wr=[0,1];function _r(t){return t}function Sr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function Mr(t){var e,n=t[0],a=t[t.length-1];return n>a&&(e=n,n=a,a=e),function(t){return Math.max(n,Math.min(a,t))}}function Ar(t,e,n){var a=t[0],r=t[1],i=e[0],o=e[1];return r<a?(a=Sr(r,a),i=n(o,i)):(a=Sr(a,r),i=n(i,o)),function(t){return i(a(t))}}function Tr(t,e,n){var a=Math.min(t.length,e.length)-1,r=new Array(a),i=new Array(a),o=-1;for(t[a]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<a;)r[o]=Sr(t[o],t[o+1]),i[o]=n(e[o],e[o+1]);return function(e){var n=Oa(t,e,1,a)-1;return i[n](r[n](e))}}function kr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Er(){var t,e,n,a,r,i,o=wr,l=wr,c=Ze,s=_r;function f(){return a=Math.min(o.length,l.length)>2?Tr:Ar,r=i=null,u}function u(e){return isNaN(e=+e)?n:(r||(r=a(o.map(t),l,c)))(t(s(e)))}return u.invert=function(n){return s(e((i||(i=a(l,o.map(t),je)))(n)))},u.domain=function(t){return arguments.length?(o=br.call(t,xr),s===_r||(s=Mr(o)),f()):o.slice()},u.range=function(t){return arguments.length?(l=gr.call(t),f()):l.slice()},u.rangeRound=function(t){return l=gr.call(t),c=We,f()},u.clamp=function(t){return arguments.length?(s=t?Mr(o):_r,u):s!==_r},u.interpolate=function(t){return arguments.length?(c=t,f()):c},u.unknown=function(t){return arguments.length?(n=t,u):n},function(n,a){return t=n,e=a,f()}}function Nr(t,e){return Er()(t,e)}function Cr(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,a=t.slice(0,n);return[a.length>1?a[0]+a.slice(2):a,+t.slice(n+1)]}function $r(t){return(t=Cr(Math.abs(t)))?t[1]:NaN}var Pr,Dr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ir(t){if(!(e=Dr.exec(t)))throw new Error("invalid format: "+t);var e;return new Lr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Lr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function zr(t,e){var n=Cr(t,e);if(!n)return t+"";var a=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+a:a.length>r+1?a.slice(0,r+1)+"."+a.slice(r+1):a+new Array(r-a.length+2).join("0")}Ir.prototype=Lr.prototype,Lr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ur={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return zr(100*t,e)},r:zr,s:function(t,e){var n=Cr(t,e);if(!n)return t+"";var a=n[0],r=n[1],i=r-(Pr=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,o=a.length;return i===o?a:i>o?a+new Array(i-o+1).join("0"):i>0?a.slice(0,i)+"."+a.slice(i):"0."+new Array(1-i).join("0")+Cr(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Fr(t){return t}var Gr,Yr,qr,Vr=Array.prototype.map,Or=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function jr(t){var e,n,a=void 0===t.grouping||void 0===t.thousands?Fr:(e=Vr.call(t.grouping,Number),n=t.thousands+"",function(t,a){for(var r=t.length,i=[],o=0,l=e[0],c=0;r>0&&l>0&&(c+l+1>a&&(l=Math.max(1,a-c)),i.push(t.substring(r-=l,r+l)),!((c+=l+1)>a));)l=e[o=(o+1)%e.length];return i.reverse().join(n)}),r=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",l=void 0===t.numerals?Fr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Vr.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"-":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function u(t){var e=(t=Ir(t)).fill,n=t.align,u=t.sign,d=t.symbol,h=t.zero,p=t.width,b=t.comma,g=t.precision,m=t.trim,y=t.type;"n"===y?(b=!0,y="g"):Ur[y]||(void 0===g&&(g=12),m=!0,y="g"),(h||"0"===e&&"="===n)&&(h=!0,e="0",n="=");var v="$"===d?r:"#"===d&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",x="$"===d?i:/[%p]/.test(y)?c:"",w=Ur[y],_=/[defgprs%]/.test(y);function S(t){var r,i,c,d=v,S=x;if("c"===y)S=w(t)+S,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:w(Math.abs(t),g),m&&(t=function(t){t:for(var e,n=t.length,a=1,r=-1;a<n;++a)switch(t[a]){case".":r=e=a;break;case"0":0===r&&(r=a),e=a;break;default:if(!+t[a])break t;r>0&&(r=0)}return r>0?t.slice(0,r)+t.slice(e+1):t}(t)),M&&0==+t&&"+"!==u&&(M=!1),d=(M?"("===u?u:s:"-"===u||"("===u?"":u)+d,S=("s"===y?Or[8+Pr/3]:"")+S+(M&&"("===u?")":""),_)for(r=-1,i=t.length;++r<i;)if(48>(c=t.charCodeAt(r))||c>57){S=(46===c?o+t.slice(r+1):t.slice(r))+S,t=t.slice(0,r);break}}b&&!h&&(t=a(t,1/0));var A=d.length+t.length+S.length,T=A<p?new Array(p-A+1).join(e):"";switch(b&&h&&(t=a(T+t,T.length?p-S.length:1/0),T=""),n){case"<":t=d+t+S+T;break;case"=":t=d+T+t+S;break;case"^":t=T.slice(0,A=T.length>>1)+d+t+S+T.slice(A);break;default:t=T+d+t+S}return l(t)}return g=void 0===g?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),S.toString=function(){return t+""},S}return{format:u,formatPrefix:function(t,e){var n=u(((t=Ir(t)).type="f",t)),a=3*Math.max(-8,Math.min(8,Math.floor($r(e)/3))),r=Math.pow(10,-a),i=Or[8+a/3];return function(t){return n(r*t)+i}}}}function Hr(t,e,n,a){var r,i=function(t,e,n){var a=Math.abs(e-t)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),i=a/r;return i>=Ra?r*=10:i>=Za?r*=5:i>=Wa&&(r*=2),e<t?-r:r}(t,e,n);switch((a=Ir(null==a?",f":a)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=a.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor($r(e)/3)))-$r(Math.abs(t)))}(i,o))||(a.precision=r),qr(a,o);case"":case"e":case"g":case"p":case"r":null!=a.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,$r(e)-$r(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(a.precision=r-("e"===a.type));break;case"f":case"%":null!=a.precision||isNaN(r=function(t){return Math.max(0,-$r(Math.abs(t)))}(i))||(a.precision=r-2*("%"===a.type))}return Yr(a)}function Br(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var a,r,i,o,l=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((a=e<t)&&(r=t,t=e,e=r),0===(o=Ka(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(r=Math.ceil(e-t+1));++l<r;)i[l]=(t+l)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(r=Math.ceil(t-e+1));++l<r;)i[l]=(t-l)/o;return a&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var a=e();return Hr(a[0],a[a.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var a,r=e(),i=0,o=r.length-1,l=r[i],c=r[o];return c<l&&(a=l,l=c,c=a,a=i,i=o,o=a),(a=Ka(l,c,n))>0?a=Ka(l=Math.floor(l/a)*a,c=Math.ceil(c/a)*a,n):a<0&&(a=Ka(l=Math.ceil(l*a)/a,c=Math.floor(c*a)/a,n)),a>0?(r[i]=Math.floor(l/a)*a,r[o]=Math.ceil(c/a)*a,e(r)):a<0&&(r[i]=Math.ceil(l*a)/a,r[o]=Math.floor(c*a)/a,e(r)),t},t}function Xr(){var t=Nr(_r,_r);return t.copy=function(){return kr(t,Xr())},dr.apply(t,arguments),Br(t)}function Rr(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function Zr(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Wr(t){return t<0?-t*t:t*t}function Kr(t){var e=t(_r,_r),n=1;function a(){return 1===n?t(_r,_r):.5===n?t(Zr,Wr):t(Rr(n),Rr(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,a()):n},Br(e)}function Qr(){var t=Kr(Er());return t.copy=function(){return kr(t,Qr()).exponent(t.exponent())},dr.apply(t,arguments),t}Gr=jr({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Yr=Gr.format,qr=Gr.formatPrefix;var Jr=new Date,ti=new Date;function ei(t,e,n,a){function r(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return r.floor=function(e){return t(e=new Date(+e)),e},r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,a,i){var o,l=[];if(n=r.ceil(n),i=null==i?1:Math.floor(i),!(n<a&&i>0))return l;do{l.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<a);return l},r.filter=function(n){return ei((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,a){if(t>=t)if(a<0)for(;++a<=0;)for(;e(t,-1),!n(t););else for(;--a>=0;)for(;e(t,1),!n(t););}))},n&&(r.count=function(e,a){return Jr.setTime(+e),ti.setTime(+a),t(Jr),t(ti),Math.floor(n(Jr,ti))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(a?function(e){return a(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var ni=ei((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));ni.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ei((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):ni:null};ei((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),ei((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()})),ei((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}));var ai=ei((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}));function ri(t){return ei((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var ii=ri(0),oi=ri(1),li=(ri(2),ri(3),ri(4)),ci=(ri(5),ri(6),ei((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),ei((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()})));ci.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ei((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};ei((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})),ei((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}));var si=ei((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}));function fi(t){return ei((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var ui=fi(0),di=fi(1),hi=(fi(2),fi(3),fi(4)),pi=(fi(5),fi(6),ei((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),ei((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));function bi(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function gi(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function mi(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}pi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ei((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var yi,vi,xi,wi={"-":"",_:" ",0:"0"},_i=/^\s*\d+/,Si=/^%/,Mi=/[\\^$*+?|[\]().{}]/g;function Ai(t,e,n){var a=t<0?"-":"",r=(a?-t:t)+"",i=r.length;return a+(i<n?new Array(n-i+1).join(e)+r:r)}function Ti(t){return t.replace(Mi,"\\$&")}function ki(t){return new RegExp("^(?:"+t.map(Ti).join("|")+")","i")}function Ei(t){for(var e={},n=-1,a=t.length;++n<a;)e[t[n].toLowerCase()]=n;return e}function Ni(t,e,n){var a=_i.exec(e.slice(n,n+1));return a?(t.w=+a[0],n+a[0].length):-1}function Ci(t,e,n){var a=_i.exec(e.slice(n,n+1));return a?(t.u=+a[0],n+a[0].length):-1}function $i(t,e,n){var a=_i.exec(e.slice(n,n+2));return a?(t.U=+a[0],n+a[0].length):-1}function Pi(t,e,n){var a=_i.exec(e.slice(n,n+2));return a?(t.V=+a[0],n+a[0].length):-1}function Di(t,e,n){var a=_i.exec(e.slice(n,n+2));return a?(t.W=+a[0],n+a[0].length):-1}function Ii(t,e,n){var a=_i.exec(e.slice(n,n+4));return a?(t.y=+a[0],n+a[0].length):-1}function Li(t,e,n){var a=_i.exec(e.slice(n,n+2));return a?(t.y=+a[0]+(+a[0]>68?1900:2e3),n+a[0].length):-1}function zi(t,e,n){var a=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return a?(t.Z=a[1]?0:-(a[2]+(a[3]||"00")),n+a[0].length):-1}function Ui(t,e,n){var a=_i.exec(e.slice(n,n+1));return a?(t.q=3*a[0]-3,n+a[0].length):-1}function Fi(t,e,n){var a=_i.exec(e.slice(n,n+2));return a?(t.m=a[0]-1,n+a[0].length):-1}function Gi(t,e,n){var a=_i.exec(e.slice(n,n+2));return a?(t.d=+a[0],n+a[0].length):-1}function Yi(t,e,n){var a=_i.exec(e.slice(n,n+3));return a?(t.m=0,t.d=+a[0],n+a[0].length):-1}function qi(t,e,n){var a=_i.exec(e.slice(n,n+2));return a?(t.H=+a[0],n+a[0].length):-1}function Vi(t,e,n){var a=_i.exec(e.slice(n,n+2));return a?(t.M=+a[0],n+a[0].length):-1}function Oi(t,e,n){var a=_i.exec(e.slice(n,n+2));return a?(t.S=+a[0],n+a[0].length):-1}function ji(t,e,n){var a=_i.exec(e.slice(n,n+3));return a?(t.L=+a[0],n+a[0].length):-1}function Hi(t,e,n){var a=_i.exec(e.slice(n,n+6));return a?(t.L=Math.floor(a[0]/1e3),n+a[0].length):-1}function Bi(t,e,n){var a=Si.exec(e.slice(n,n+1));return a?n+a[0].length:-1}function Xi(t,e,n){var a=_i.exec(e.slice(n));return a?(t.Q=+a[0],n+a[0].length):-1}function Ri(t,e,n){var a=_i.exec(e.slice(n));return a?(t.s=+a[0],n+a[0].length):-1}function Zi(t,e){return Ai(t.getDate(),e,2)}function Wi(t,e){return Ai(t.getHours(),e,2)}function Ki(t,e){return Ai(t.getHours()%12||12,e,2)}function Qi(t,e){return Ai(1+ai.count(ci(t),t),e,3)}function Ji(t,e){return Ai(t.getMilliseconds(),e,3)}function to(t,e){return Ji(t,e)+"000"}function eo(t,e){return Ai(t.getMonth()+1,e,2)}function no(t,e){return Ai(t.getMinutes(),e,2)}function ao(t,e){return Ai(t.getSeconds(),e,2)}function ro(t){var e=t.getDay();return 0===e?7:e}function io(t,e){return Ai(ii.count(ci(t)-1,t),e,2)}function oo(t,e){var n=t.getDay();return t=n>=4||0===n?li(t):li.ceil(t),Ai(li.count(ci(t),t)+(4===ci(t).getDay()),e,2)}function lo(t){return t.getDay()}function co(t,e){return Ai(oi.count(ci(t)-1,t),e,2)}function so(t,e){return Ai(t.getFullYear()%100,e,2)}function fo(t,e){return Ai(t.getFullYear()%1e4,e,4)}function uo(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Ai(e/60|0,"0",2)+Ai(e%60,"0",2)}function ho(t,e){return Ai(t.getUTCDate(),e,2)}function po(t,e){return Ai(t.getUTCHours(),e,2)}function bo(t,e){return Ai(t.getUTCHours()%12||12,e,2)}function go(t,e){return Ai(1+si.count(pi(t),t),e,3)}function mo(t,e){return Ai(t.getUTCMilliseconds(),e,3)}function yo(t,e){return mo(t,e)+"000"}function vo(t,e){return Ai(t.getUTCMonth()+1,e,2)}function xo(t,e){return Ai(t.getUTCMinutes(),e,2)}function wo(t,e){return Ai(t.getUTCSeconds(),e,2)}function _o(t){var e=t.getUTCDay();return 0===e?7:e}function So(t,e){return Ai(ui.count(pi(t)-1,t),e,2)}function Mo(t,e){var n=t.getUTCDay();return t=n>=4||0===n?hi(t):hi.ceil(t),Ai(hi.count(pi(t),t)+(4===pi(t).getUTCDay()),e,2)}function Ao(t){return t.getUTCDay()}function To(t,e){return Ai(di.count(pi(t)-1,t),e,2)}function ko(t,e){return Ai(t.getUTCFullYear()%100,e,2)}function Eo(t,e){return Ai(t.getUTCFullYear()%1e4,e,4)}function No(){return"+0000"}function Co(){return"%"}function $o(t){return+t}function Po(t){return Math.floor(+t/1e3)}!function(t){yi=function(t){var e=t.dateTime,n=t.date,a=t.time,r=t.periods,i=t.days,o=t.shortDays,l=t.months,c=t.shortMonths,s=ki(r),f=Ei(r),u=ki(i),d=Ei(i),h=ki(o),p=Ei(o),b=ki(l),g=Ei(l),m=ki(c),y=Ei(c),v={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:null,d:Zi,e:Zi,f:to,H:Wi,I:Ki,j:Qi,L:Ji,m:eo,M:no,p:function(t){return r[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:$o,s:Po,S:ao,u:ro,U:io,V:oo,w:lo,W:co,x:null,X:null,y:so,Y:fo,Z:uo,"%":Co},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return l[t.getUTCMonth()]},c:null,d:ho,e:ho,f:yo,H:po,I:bo,j:go,L:mo,m:vo,M:xo,p:function(t){return r[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:$o,s:Po,S:wo,u:_o,U:So,V:Mo,w:Ao,W:To,x:null,X:null,y:ko,Y:Eo,Z:No,"%":Co},w={a:function(t,e,n){var a=h.exec(e.slice(n));return a?(t.w=p[a[0].toLowerCase()],n+a[0].length):-1},A:function(t,e,n){var a=u.exec(e.slice(n));return a?(t.w=d[a[0].toLowerCase()],n+a[0].length):-1},b:function(t,e,n){var a=m.exec(e.slice(n));return a?(t.m=y[a[0].toLowerCase()],n+a[0].length):-1},B:function(t,e,n){var a=b.exec(e.slice(n));return a?(t.m=g[a[0].toLowerCase()],n+a[0].length):-1},c:function(t,n,a){return M(t,e,n,a)},d:Gi,e:Gi,f:Hi,H:qi,I:qi,j:Yi,L:ji,m:Fi,M:Vi,p:function(t,e,n){var a=s.exec(e.slice(n));return a?(t.p=f[a[0].toLowerCase()],n+a[0].length):-1},q:Ui,Q:Xi,s:Ri,S:Oi,u:Ci,U:$i,V:Pi,w:Ni,W:Di,x:function(t,e,a){return M(t,n,e,a)},X:function(t,e,n){return M(t,a,e,n)},y:Li,Y:Ii,Z:zi,"%":Bi};function _(t,e){return function(n){var a,r,i,o=[],l=-1,c=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++l<s;)37===t.charCodeAt(l)&&(o.push(t.slice(c,l)),null!=(r=wi[a=t.charAt(++l)])?a=t.charAt(++l):r="e"===a?" ":"0",(i=e[a])&&(a=i(n,r)),o.push(a),c=l+1);return o.push(t.slice(c,l)),o.join("")}}function S(t,e){return function(n){var a,r,i=mi(1900,void 0,1);if(M(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(e&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(a=gi(mi(i.y,0,1))).getUTCDay(),a=r>4||0===r?di.ceil(a):di(a),a=si.offset(a,7*(i.V-1)),i.y=a.getUTCFullYear(),i.m=a.getUTCMonth(),i.d=a.getUTCDate()+(i.w+6)%7):(r=(a=bi(mi(i.y,0,1))).getDay(),a=r>4||0===r?oi.ceil(a):oi(a),a=ai.offset(a,7*(i.V-1)),i.y=a.getFullYear(),i.m=a.getMonth(),i.d=a.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),r="Z"in i?gi(mi(i.y,0,1)).getUTCDay():bi(mi(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(r+5)%7:i.w+7*i.U-(r+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,gi(i)):bi(i)}}function M(t,e,n,a){for(var r,i,o=0,l=e.length,c=n.length;o<l;){if(a>=c)return-1;if(37===(r=e.charCodeAt(o++))){if(r=e.charAt(o++),!(i=w[r in wi?e.charAt(o++):r])||(a=i(t,n,a))<0)return-1}else if(r!=n.charCodeAt(a++))return-1}return a}return v.x=_(n,v),v.X=_(a,v),v.c=_(e,v),x.x=_(n,x),x.X=_(a,x),x.c=_(e,x),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t+="",!0);return e.toString=function(){return t},e}}}(t),yi.format,yi.parse,vi=yi.utcFormat,xi=yi.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||vi("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||xi("%Y-%m-%dT%H:%M:%S.%LZ");function Do(){var t,e,n,a,r,i=0,o=1,l=_r,c=!1;function s(e){return isNaN(e=+e)?r:l(0===n?.5:(e=(a(e)-t)*n,c?Math.max(0,Math.min(1,e)):e))}return s.domain=function(r){return arguments.length?(t=a(i=+r[0]),e=a(o=+r[1]),n=t===e?0:1/(e-t),s):[i,o]},s.clamp=function(t){return arguments.length?(c=!!t,s):c},s.interpolator=function(t){return arguments.length?(l=t,s):l},s.unknown=function(t){return arguments.length?(r=t,s):r},function(r){return a=r,t=r(i),e=r(o),n=t===e?0:1/(e-t),s}}function Io(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function Lo(t){if(0==e("#"+t).length){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}function zo(t={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let e=Xa(1,t.x+1),n=Xa(1,t.y+1),a=[];return e.forEach(e=>{e="x"+e.toString(),n.forEach(n=>{n="y"+n.toString();let r=Math.random()*t.scaleFactor;r=t.diverging&&Math.random()<.5?-r:r,a.push({x:e,y:n,value:r,displayValue:parseFloat(r.toExponential()).toPrecision(3),r:t.bubble?30*Math.random():void 0})})}),a}function Uo(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v8&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v8&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v8&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v8&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v8&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v8&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v8",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}function Fo(t){let e=t.split("_");return 1===e[2].length&&1===e[3].length?t:(e[2].length>e[3].length?(e[2]="del",e.splice(3,1)):e[3].length>e[2].length?(e[3]="ins",e.splice(2,1)):(e[3]="sub",e.splice(2,1)),e.join("_"))}class Go{constructor(t,e=!1,n=30,a=-40,r=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=a,this.duration=r}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),Et("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){Et("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=gt.pageX,e=gt.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;Et("#"+this.id).style("left",t+"px").style("top",e+"px")}edit(t){Et("#"+this.id).html(t)}}function Yo(t){for(var e=t.length/6|0,n=new Array(e),a=0;a<e;)n[a]="#"+t.slice(6*a,6*++a);return n}function qo(t){return Ye(t[t.length-1])}Yo("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Yo("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Yo("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Yo("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Yo("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Yo("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Yo("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Yo("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Yo("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Yo("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),qo(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Yo)),qo(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Yo));var Vo=qo(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Yo)),Oo=qo(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Yo)),jo=qo(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Yo)),Ho=qo(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Yo)),Bo=qo(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Yo));qo(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Yo)),qo(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Yo));var Xo=qo(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Yo));qo(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Yo)),qo(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Yo));var Ro=qo(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Yo));qo(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Yo));var Zo=qo(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Yo));qo(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Yo)),qo(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Yo));var Wo=qo(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Yo));qo(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Yo)),qo(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Yo)),qo(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Yo));var Ko=qo(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Yo)),Qo=qo(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Yo)),Jo=qo(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Yo)),tl=qo(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Yo)),el=qo(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Yo)),nl=qo(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Yo));un(Pe(300,.5,0),Pe(-240,.5,1));un(Pe(-100,.75,.35),Pe(80,1.5,.8)),un(Pe(260,.75,.35),Pe(80,1.5,.8)),Pe(),ee();function al(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}al(Yo("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));al(Yo("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),al(Yo("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),al(Yo("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function rl(t,e="YlGnBu",n,a,r=!1){a=void 0===a?Ja(t):a,n=void 0===n?nr(t):n;const i=function t(){var e=Br(Do()(_r));return e.copy=function(){return Io(e,t())},hr.apply(e,arguments)}(function(t){const e={BuGn:Xo,OrRd:Ro,PuBu:Zo,YlGnBu:Wo,Blues:Ko,Oranges:nl,Greens:Qo,Purples:tl,Reds:el,Greys:Jo,Grays:Jo,RdBu:jo,RdGy:Ho,PiYG:Vo,PuOr:Oo,RdYlBu:Bo};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return r?i.domain([a,n]):i.domain([n,a]),i}function il(t,e,n,a,r,i=10,o=10,l={h:10,w:40},c="h",s=!1){let f=[];if(s){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=t.map(t=>t*e),f=f.concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${a.x}, ${a.y})`).selectAll(".legend").data(f).enter().append("g").classed("legend",!0);"h"===c?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",l.h).attr("transform",`translate(${a.x}, ${a.y})`),u.append("rect").attr("x",(t,e)=>l.w*e).attr("y",5).attr("width",l.w).attr("height",l.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>l.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${a.x}, ${a.y+l.h*f.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>l.h*e).attr("width",l.w).attr("height",l.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>l.h*e+l.h/2))}class ol{constructor(t,e=!0,n=10,a="Reds"){this.data=t,this.useLog=e,this.logBase=n,this.colorScheme=a,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.bubbleScale=void 0,this.toolbar=void 0,this.tooltip=void 0}addTooltip(t){let n=e("#"+t),a=t+"-tooltip";0==e("#"+a).length&&e("<div/>").attr("id",a).appendTo(n),this.tooltip=new Go(a),Et("#"+a).classed("bubblemap-tooltip",!0)}drawCanvas(t,e={w:1e3,h:600,top:20,left:20},n,a={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(e,n);let r=t.node().getContext("2d");r.fillStyle="#ffffff",r.rect(0,0,t.attr("width"),t.attr("height")),r.fill(),this.data.forEach(t=>{r.beginPath(),r.fillStyle=this.colorScale(t.value),r.arc(this.xScale(t.x)+this.xScale.bandwidth()/2,this.yScale(t.y),this.bubbleScale(t.r),0,2*Math.PI),r.fill(),r.closePath()});let i=a.column,o=a.row;o.show&&(r.save(),r.textAlign=i.textAlign,r.fillStyle="black",r.font="10px Open Sans",this.yScale.domain().forEach(t=>{r.fillText(t,this.xScale.range()[0]-o.adjust,this.yScale(t)+2)}),r.restore()),i.show&&this.xScale.domain().forEach(t=>{r.save(),r.fillStyle="black",r.font="10px Open Sans",r.textAlign=i.textAlign,r.translate(this.xScale(t)+this.xScale.bandwidth()/2-3,this.yScale.range()[1]+i.adjust),r.rotate(0==i.angle?0:Math.PI/(180/i.angle)),r.fillText(t,0,0),r.restore()})}drawCombo(t,e,n={w:1e3,h:600,top:0,left:0},a,r=!0,i={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){let o={w:n.w,h:n.h2,top:n.top,left:n.left};this.drawSvg(e,o,a,50,i);let l=t.append("g").attr("clip-path","url(#clip)");if(this._setMiniScales(n,a),l.selectAll(".mini-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","mini-map-cell").attr("row",t=>"x"+this.xScaleMini.domain().indexOf(t.x)).attr("col",t=>"y"+this.yScaleMini.domain().indexOf(t.y)).attr("cx",t=>this.xScaleMini(t.x)+this.xScaleMini.bandwidth()/2).attr("cy",t=>this.yScaleMini(t.y)).attr("r",t=>this.bubbleScaleMini(t.r)).style("fill",t=>this.colorScale(t.value)),r){let a=Fa().extent([[0,0],[n.w,n.h]]).on("brush",()=>{this._brushed(e,i)});t.append("g").attr("class","brush").call(a).call(a.move,[0,50*this.xScaleMini.bandwidth()])}}drawSvg(t,e={w:1e3,h:600,top:0,left:0},n,a=50,r={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(e,n,a);let i=this.tooltip;t.append("g").attr("clip-path","url(#clip)").selectAll(".bubble-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","bubble-map-cell").attr("row",t=>"x"+this.xScale.domain().indexOf(t.x)).attr("col",t=>"y"+this.yScale.domain().indexOf(t.y)).attr("cx",t=>this.xScale(t.x)+this.xScale.bandwidth()/2).attr("cy",t=>this.yScale(t.y)+this.yScale.bandwidth()/2).attr("r",t=>this.bubbleScale(t.r)).style("fill",t=>this.colorScale(t.value)).on("mouseover",(function(e){let n=Et(this),a=n.attr("row"),r=n.attr("col");t.selectAll(".bubble-map-xlabel").filter("."+a).classed("highlighted",!0),t.selectAll(".bubble-map-ylabel").filter("."+r).classed("highlighted",!0),n.classed("highlighted",!0);let o=void 0===e.displayValue?parseFloat(e.value.toExponential()).toPrecision(4):e.displayValue,l=void 0===e.rDisplayValue?e.r.toPrecision(4):e.rDisplayValue,c=void 0===e.displayX?e.x:e.displayX,s=void 0===e.displayY?e.y:e.displayY;i.show(`Column: ${c} <br/> Row: ${s}<br/> Value: ${o}<br/> Size: ${l}`)})).on("mouseout",(function(){t.selectAll("*").classed("highlighted",!1),i.hide()}));let o=r.column,l=r.row;if(o.show){let e={};ir().key(t=>t.x).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayX});t.selectAll(".bubble-map-xlabel").data(this.xScale.domain()).enter().append("text").attr("class",(t,e)=>"bubble-map-xlabel x"+e).attr("x",0).attr("y",0).attr("text-anchor","left"==o.textAlign?"start":"end").style("cursor","default").style("font-size",()=>(Math.floor(this.xScale.bandwidth()/2)>12?12:Math.floor(this.xScale.bandwidth()/2))+"px").attr("transform",t=>`translate(${this.xScale(t)+this.xScale.bandwidth()/3}, ${this.yScale.range()[1]+o.adjust}) rotate(${o.angle})`).text(t=>e[t]||t)}if(l.show){let e={};ir().key(t=>t.y).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayY});t.selectAll(".bubble-map-ylabel").data(this.yScale.domain()).enter().append("text").attr("class",(t,e)=>"bubble-map-ylabel y"+e).attr("x",0).attr("y",0).attr("text-anchor","left"==l.textAlign?"start":"end").style("cursor","default").style("font-size",()=>(Math.floor(this.yScale.bandwidth()/1.5)>14?14:Math.floor(this.yScale.bandwidth()/1.5)<10?10:Math.floor(this.yScale.bandwidth()/1.5))+"px").attr("transform",t=>`translate(${this.xScale.range()[0]-l.adjust}, ${this.yScale(t)+this.yScale.bandwidth()/1.5}) rotate(${l.angle})`).text(t=>e[t]||t)}}drawColorLegend(t,e={x:0,y:0},n=5,a=""){il(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:10,w:40},"h",!0)}drawBubbleLegend(t,e={x:0,y:0,title:"Bubble legend"},n=5,a=""){t.selectAll(".bmap-bubble-legend").remove();let r=[...Array(n+1).keys()],i=(this.bubbleScale.domain()[1]-this.bubbleScale.domain()[0])/n,o=r.map(t=>this.bubbleScale.domain()[0]+t*i),l=t.append("g").attr("class","bmap-bubble-legend").attr("transform",`translate(${e.x}, ${e.y})`);l.append("text").attr("class","color-legend").text(e.title).attr("x",-10).attr("text-anchor","end").attr("y",10);let c=l.selectAll(".legend").data(o).enter().append("g").classed("legend",!0);c.append("circle").attr("cx",(t,e)=>40*e).attr("cy",10).attr("r",t=>this.bubbleScale(t)).style("fill","black"),c.append("text").attr("class","color-legend").text(t=>this.useLog?Math.pow(base,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>40*e-5).attr("y",0)}_brushed(t,e){let n=gt.selection,a=Math.round(n[0]/this.xScaleMini.step()),r=Math.round(n[1]/this.xScaleMini.step());this.xScale.domain(this.xScaleMini.domain().slice(a,r));let i=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:i,min:2}),t.selectAll(".bubble-map-cell").attr("cx",t=>{let e=this.xScale(t.x);return void 0===e?this.xScale.bandwidth()/2:e+this.xScale.bandwidth()/2}).attr("r",t=>void 0===this.xScale(t.x)?0:this.bubbleScale(t.r)),t.selectAll(".bubble-map-xlabel").attr("transform",t=>`translate(${this.xScale(t)+5||0}, ${this.yScale.range()[1]+e.column.adjust}) rotate(${e.column.angle})`).style("display",t=>void 0===this.xScale(t)?"none":"block")}_setMiniScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScaleMini&&(this.xScaleMini=this._setXScaleMini(t)),void 0===this.yScaleMini&&(this.yScaleMini=this._setYScaleMini(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScaleMini){let t=this._setBubbleMax(!0);this.bubbleScaleMini=this._setBubbleScale({max:t,min:1})}}_setScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScale&&(this.xScale=this._setXScale(t)),void 0===this.yScale&&(this.yScale=this._setYScale(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScale){let t=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:t,min:2})}}_parseXList(){return ir().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_parseYList(){return ir().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_setXScaleMini(t={w:1e3,left:20}){let e=this._parseXList();return this._setXScale(t,e)}_setXScale(t={w:1e3,left:20},e){return e=void 0===e?this._parseXList():e,vr().domain(e).range([t.left,t.left+t.w]).padding(.05)}_setYScaleMini(t={h:600,top:20}){let e=this._parseYList();return this._setYScale(t,e)}_setYScale(t={h:600,top:20},e){return e=void 0===e?this._parseYList():e,vr().domain(e).range([t.top,t.top+t.h]).padding(.05)}_setColorScale(t){let e=this.useLog;return rl(void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t,this.colorScheme,void 0,void 0,!0)}_setBubbleMax(t=!1,e=2,n=10){let a=t?this.xScaleMini:this.xScale,r=t?this.yScaleMini:this.yScale,i=Ja([a.bandwidth(),r.bandwidth()])/e;return n<i?n:i}_setBubbleScale(t={max:10,min:0}){return function(){return Qr.apply(null,arguments).exponent(.5)}().domain([3,Ja(this.data.map(t=>t.r))]).range([t.min,t.max])}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class ll{constructor(t,e=0,n=!0,a=10,r="Greys",i=[0,1]){this.data=this._unique(t),this.dataDict={},this.cutoff=e,this.filteredData=this._filter(this.data,this.cutoff),this.dataDict=this._generateDataDict(this.filteredData),this.useLog=n,this.logBase=a,this.colorScheme=r,this.colorScale=this._setColorScale(i),this.xScale=void 0,this.yScale=void 0,this.labelScale=void 0,this.tooltip=void 0}addTooltip(t){let e=t+"-tooltip";0==$("#"+e).length&&$("<div/>").attr("id",e).appendTo($("#"+t)),this.tooltip=new Go(e,!1,40,0),Et("#"+e).classed("half-map-tooltip",!0)}draw(t,e,n={w:600,top:20,left:20},a=[0,1],r=!0,i=90,o,l){this._drawCanvas(t,n,a,o,l);this.drawSvg(e,n,!1,r,i,a,o,l)}drawColorLegend(t,e={x:0,y:0},n=5,a="",r=[0,1]){void 0===this.colorScale&&this._setColorScale(r),il(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:20,w:10},"v")}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}_drawCanvas(t,e={w:600,top:20,left:20},n=[0,1],a,r){this._setScales(e,n,a,r);let i=t.node().getContext("2d");i.save(),i.translate(e.left,e.top+this.xScale.bandwidth()*Math.sqrt(2)/2),i.rotate(-.25*Math.PI),i.clearRect(-e.w,-e.w,2*e.w,2*e.w),this.filteredData.forEach(t=>{let e=this.xScale(t.x),n=this.yScale(t.y);void 0!==e&&void 0!==n&&(t.color=0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value),i.fillStyle=this.colorScale(t.value),i.fillRect(e,n,this.xScale.bandwidth(),this.yScale.bandwidth()))}),i.restore()}drawSvg(t,e,n=!0,a=!0,r=90,i=[0,1],o,l){if(n){this._setScales(e,i,o,l);let n=t.append("g").attr("clip-path","url(#clip)").selectAll(".half-map-cell").data(this.filteredData);n.enter().append("rect").attr("class","half-map-cell").attr("row",t=>"y"+this.yScale.domain().indexOf(t.y)).attr("column",t=>"x"+this.xScale.domain().indexOf(t.x)).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("transform","rotate(-45)").merge(n).style("fill",t=>0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value))}a&&(this._setLabelScale(e),t.selectAll().data(this.labelScale.domain()).enter().append("text").attr("class",(t,e)=>"half-map-label l"+e).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","none").attr("transform",t=>`translate(${this.labelScale(t)+this.labelScale.step()/2}, -5) rotate(-${r})`).text(t=>t));let c=t.append("rect").attr("class","half-map-cursor").attr("x",0).attr("y",0).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("stroke","#d2111b").style("stroke-width","1px").style("fill","none").style("display","none");t.on("mouseout",()=>{c.style("display","none"),this.tooltip.hide(),t.selectAll(".half-map-label").classed("highlighted",!1)}),Et(t.node().parentNode).style("cursor","none").style("position","absolute").on("mousemove",()=>{let e=$t(t.node()),n=e[0],r=e[1],i=.25*Math.PI,o=n*Math.cos(i)-r*Math.sin(i)+this.xScale.step()/2,l=n*Math.sin(i)+r*Math.cos(i)-this.yScale.step()/2;if(n<0||r<0||o<0||l<0)return this.tooltip.hide(),void c.style("display","none");let s=Math.floor(o/this.xScale.step()),f=Math.floor(l/this.yScale.step()),u=this.xScale.domain()[s],d=this.yScale.domain()[f],h=this.dataDict[u+d];void 0!==h?(c.attr("transform",`translate(${n},${r}) rotate(-45)`),c.style("display","block"),this.tooltip.show(`${u}<br/> ${d}<br/> Value: ${h.displayValue}`),a&&(t.selectAll(".half-map-label").classed("highlighted",!1),t.select(".l"+s).classed("highlighted",!0),t.select(".l"+f).classed("highlighted",!0))):(this.tooltip.hide(),c.style("display","none"))})}_unique(t){t.sort((t,e)=>t.x<e.x?-1:t.x>e.x?1:t.y<e.y?-1:t.y>e.y?1:0);let e={};return t.filter(t=>{let n=t.x+t.y,a=t.y+t.x;return!e.hasOwnProperty(n)&&!e.hasOwnProperty(a)&&(e[n]=!0,!0)})}_filter(t,e){return t.filter(t=>!(t.value<e))}_generateDataDict(t){let e={};return t.forEach(t=>{e[t.x+t.y]=t,e[t.y+t.x]=t}),e}_setScales(t={w:600,top:20,left:20},e=[0,1],n,a){(n||void 0===this.xScale)&&this._setXScale(t,n),(a||void 0===this.yScale)&&this._setYScale(t,a),void 0===this.colorScale&&this._setColorScale(e)}_setXScale(t={w:600},e){void 0===e&&(e=ir().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.xScale=vr().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setYScale(t={w:600},e){void 0===e&&(e=ir().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.yScale=vr().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setLabelScale(t={w:600}){void 0===this.xScale&&this._setXScale();let e=this.xScale.domain();this.labelScale=vr().domain(e).range([0,t.w]).padding(.05)}_setColorScale(t){let e=this.useLog,n=void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t;this.colorScale=rl(n,this.colorScheme)}}var cl=function t(e){function n(t,n){var a,r;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=a)i=a,a=null;else do{a=2*e()-1,i=2*e()-1,r=a*a+i*i}while(!r||r>1);return t+n*i*Math.sqrt(-2*Math.log(r)/r)}}return n.source=t,n}((function(){return Math.random()}));class sl{constructor(t,n,a=!1){e("#"+t).show();const r=a?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=e("<div/>").addClass(r).appendTo("#"+t),this.buttons={},this.tooltip=n}createDownloadSvgButton(t,e,n,a,r="fa-download"){this.createButton(t,r);Et("#"+t).on("click",()=>{this.downloadSvg(e,n,a)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);Et("#"+t).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,n="fa-download"){const a=e("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return e("<i/>").addClass("fa "+n).appendTo(a),this.buttons[t]=a,a}attachTooltip(t){this.tooltip=t}downloadSvg(t,a,r){let i=e(e(e(""+("#"+t)))[0]),o=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),l=function(t){for(var n="",a=document.styleSheets,r=0;r<a.length;r++)try{if(null==a[r].cssRules)continue;for(var i=a[r].cssRules,o=0;o<i.length;o++){var l=i[o];if(void 0!==l.style){var c,s=void 0===l.selectorText?l.selectorText:l.selectorText.replace(`#${t[0].id} `,"");try{c=e(t).find(s)}catch(t){c=[]}c.length>0&&(n+=l.selectorText+" { "+l.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var f=document.createElement("style");return f.setAttribute("type","text/css"),f.innerHTML="<![CDATA[\n"+n+"\n]]>",f}(i.get());o.prepend(l),e("#"+r).html("").hide();let c=e("#"+r).append(o).html(),s=new Blob([c],{type:"image/svg+xml"});n(s,a),e("#"+r).html("").hide()}}var fl=Array.prototype.slice;function ul(t){return t}function dl(t){return"translate("+(t+.5)+",0)"}function hl(t){return"translate(0,"+(t+.5)+")"}function pl(t){return function(e){return+t(e)}}function bl(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function gl(){return!this.__axis}function ml(t,e){var n=[],a=null,r=null,i=6,o=6,l=3,c=1===t||4===t?-1:1,s=4===t||2===t?"x":"y",f=1===t||3===t?dl:hl;function u(u){var d=null==a?e.ticks?e.ticks.apply(e,n):e.domain():a,h=null==r?e.tickFormat?e.tickFormat.apply(e,n):ul:r,p=Math.max(i,0)+l,b=e.range(),g=+b[0]+.5,m=+b[b.length-1]+.5,y=(e.bandwidth?bl:pl)(e.copy()),v=u.selection?u.selection():u,x=v.selectAll(".domain").data([null]),w=v.selectAll(".tick").data(d,e).order(),_=w.exit(),S=w.enter().append("g").attr("class","tick"),M=w.select("line"),A=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(s+"2",c*i)),A=A.merge(S.append("text").attr("fill","currentColor").attr(s,c*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),u!==v&&(x=x.transition(u),w=w.transition(u),M=M.transition(u),A=A.transition(u),_=_.transition(u).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=y(t))?f(t):this.getAttribute("transform")})),S.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return f(e&&isFinite(e=e(t))?e:y(t))}))),_.remove(),x.attr("d",4===t||2==t?o?"M"+c*o+","+g+"H0.5V"+m+"H"+c*o:"M0.5,"+g+"V"+m:o?"M"+g+","+c*o+"V0.5H"+m+"V"+c*o:"M"+g+",0.5H"+m),w.attr("opacity",1).attr("transform",(function(t){return f(y(t))})),M.attr(s+"2",c*i),A.attr(s,c*p).text(h),v.filter(gl).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),v.each((function(){this.__axis=y}))}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=fl.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:fl.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(a=null==t?null:fl.call(t),u):a&&a.slice()},u.tickFormat=function(t){return arguments.length?(r=t,u):r},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(l=+t,u):l},u}function yl(t){return ml(3,t)}var vl=Math.PI,xl=2*vl,wl=xl-1e-6;function _l(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Sl(){return new _l}function Ml(t){return function(){return t}}function Al(t){this._context=t}function Tl(t){return new Al(t)}function kl(t){return t[0]}function El(t){return t[1]}function Nl(){var t=kl,e=null,n=Ml(0),a=El,r=Ml(!0),i=null,o=Tl,l=null;function c(c){var s,f,u,d,h,p=c.length,b=!1,g=new Array(p),m=new Array(p);for(null==i&&(l=o(h=Sl())),s=0;s<=p;++s){if(!(s<p&&r(d=c[s],s,c))===b)if(b=!b)f=s,l.areaStart(),l.lineStart();else{for(l.lineEnd(),l.lineStart(),u=s-1;u>=f;--u)l.point(g[u],m[u]);l.lineEnd(),l.areaEnd()}b&&(g[s]=+t(d,s,c),m[s]=+n(d,s,c),l.point(e?+e(d,s,c):g[s],a?+a(d,s,c):m[s]))}if(h)return l=null,h+""||null}function s(){return function(){var t=kl,e=El,n=Ml(!0),a=null,r=Tl,i=null;function o(o){var l,c,s,f=o.length,u=!1;for(null==a&&(i=r(s=Sl())),l=0;l<=f;++l)!(l<f&&n(c=o[l],l,o))===u&&((u=!u)?i.lineStart():i.lineEnd()),u&&i.point(+t(c,l,o),+e(c,l,o));if(s)return i=null,s+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:Ml(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Ml(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Ml(!!t),o):n},o.curve=function(t){return arguments.length?(r=t,null!=a&&(i=r(a)),o):r},o.context=function(t){return arguments.length?(null==t?a=i=null:i=r(a=t),o):a},o}().defined(r).curve(o).context(i)}return c.x=function(n){return arguments.length?(t="function"==typeof n?n:Ml(+n),e=null,c):t},c.x0=function(e){return arguments.length?(t="function"==typeof e?e:Ml(+e),c):t},c.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:Ml(+t),c):e},c.y=function(t){return arguments.length?(n="function"==typeof t?t:Ml(+t),a=null,c):n},c.y0=function(t){return arguments.length?(n="function"==typeof t?t:Ml(+t),c):n},c.y1=function(t){return arguments.length?(a=null==t?null:"function"==typeof t?t:Ml(+t),c):a},c.lineX0=c.lineY0=function(){return s().x(t).y(n)},c.lineY1=function(){return s().x(t).y(a)},c.lineX1=function(){return s().x(e).y(n)},c.defined=function(t){return arguments.length?(r="function"==typeof t?t:Ml(!!t),c):r},c.curve=function(t){return arguments.length?(o=t,null!=i&&(l=o(i)),c):o},c.context=function(t){return arguments.length?(null==t?i=l=null:l=o(i=t),c):i},c}function Cl(t){return t<0?-1:1}function $l(t,e,n){var a=t._x1-t._x0,r=e-t._x1,i=(t._y1-t._y0)/(a||r<0&&-0),o=(n-t._y1)/(r||a<0&&-0),l=(i*r+o*a)/(a+r);return(Cl(i)+Cl(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(l))||0}function Pl(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Dl(t,e,n){var a=t._x0,r=t._y0,i=t._x1,o=t._y1,l=(i-a)/3;t._context.bezierCurveTo(a+l,r+l*e,i-l,o-l*n,i,o)}function Il(t){this._context=t}function Ll(t){this._context=t}_l.prototype=Sl.prototype={constructor:_l,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,a){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+a)},bezierCurveTo:function(t,e,n,a,r,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +a+","+(this._x1=+r)+","+(this._y1=+i)},arcTo:function(t,e,n,a,r){t=+t,e=+e,n=+n,a=+a,r=+r;var i=this._x1,o=this._y1,l=n-t,c=a-e,s=i-t,f=o-e,u=s*s+f*f;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(f*l-c*s)>1e-6&&r){var d=n-i,h=a-o,p=l*l+c*c,b=d*d+h*h,g=Math.sqrt(p),m=Math.sqrt(u),y=r*Math.tan((vl-Math.acos((p+u-b)/(2*g*m)))/2),v=y/m,x=y/g;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*s)+","+(e+v*f)),this._+="A"+r+","+r+",0,0,"+ +(f*d>s*h)+","+(this._x1=t+x*l)+","+(this._y1=e+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,a,r,i){t=+t,e=+e,i=!!i;var o=(n=+n)*Math.cos(a),l=n*Math.sin(a),c=t+o,s=e+l,f=1^i,u=i?a-r:r-a;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+c+","+s),n&&(u<0&&(u=u%xl+xl),u>wl?this._+="A"+n+","+n+",0,1,"+f+","+(t-o)+","+(e-l)+"A"+n+","+n+",0,1,"+f+","+(this._x1=c)+","+(this._y1=s):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=vl)+","+f+","+(this._x1=t+n*Math.cos(r))+","+(this._y1=e+n*Math.sin(r))))},rect:function(t,e,n,a){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +a+"h"+-n+"Z"},toString:function(){return this._}},Al.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},Il.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Dl(this,this._t0,Pl(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Dl(this,Pl(this,n=$l(this,t,e)),n);break;default:Dl(this,this._t0,n=$l(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new Ll(t)}.prototype=Object.create(Il.prototype)).point=function(t,e){Il.prototype.point.call(this,e,t)},Ll.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,a,r,i){this._context.bezierCurveTo(e,t,a,n,i,r)}};const zl=function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)},Ul=function(t){let e=(Qa(t,.75)-Qa(t,.25))/1.34;return 1.06*Math.min(Ha(t),e)*Math.pow(t.length,-.2)};class Fl{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0}render(t,e=500,n=357,a=.05,r,i=[-3,3],o="Y axis",l=!0,c=30,s=!0,f=0,u=!1,d=!1,h=!1,p=!1,b=!1,g=!1,m=0){if(this.reset=()=>{t.selectAll("*").remove(),this.render(t,e,n,a,r,i,o,l,c,s,f,u,d,h,p,b,g)},this.updateYScale=function(i,o){t.selectAll("*").remove(),void 0===o&&(o=[]),this.render(t,e,n,a,r,[],i,l,c,s,f,u,d,h,p,b,g)},this.updateXScale=function(r){void 0===r&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,e,n,a,r,[],o,l,c,s,f,u,d,h,p,b,g)},void 0===i||0==i.length){let t=[];this.data.forEach(e=>t=t.concat(e.values)),i=Ba(t)}this.groups=ir().key(t=>t.group).entries(this.data),this.scale={x:vr().rangeRound([0,e]).domain(r||this.groups.map(t=>t.key)).paddingInner(a),subx:vr(),y:Xr().rangeRound([n,0]).domain(i),z:Xr()},this.groups.forEach(e=>{let a=e.key,r=e.values,o=this.groupInfo[a];if(e.index=this.scale.x.domain().indexOf(a),void 0!==o){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(o[t])<=parseFloat(o.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,e)=>`translate(${this.scale.x(a)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`).text(t=>`${t}: ${parseFloat(parseFloat(o[t]).toPrecision(3)).toExponential()}`)}b&&r.sort((t,e)=>t.label<e.label?-1:t.label>e.label?1:0),this.scale.subx.domain(r.map(t=>t.label)).rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]),r.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(Ya),this._drawViolin(t,n,u,e.index,g,m))});var l=18;if(p){const e=vr().domain(r.map(t=>null==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+l})`).call(yl(e))}if(s){l=5;const e=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+l})`).call(yl(this.scale.subx));f>0&&e.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${f}, 2, 10)`)}});let y=s?55:0;var v;if(this.xAxis=l?yl(this.scale.x):yl(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+y})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${c}, -10, 10)`),y=5,this.yAxis=(v=this.scale.y,ml(4,v)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${y}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*y+Et(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(o),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),d&&this._addGroupDivider(t),h){const e=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");e.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=e.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),a=10;n.append("rect").attr("x",(t,e)=>5+60*e+this.scale.x.range()[0]).attr("y",-28).attr("width",a).attr("height",a).style("fill",t=>t.color),n.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,e)=>17+60*e+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,a=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${a})`).text(e)}createTooltip(t){return 0==e("#"+t).length&&e("<div/>").attr("id",t).appendTo(e("body")),this.tooltip=new Go(t),Et("#"+t).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return this.toolbar=new sl(t,e),this.toolbar}addBrush(t){const e=Ga(Ta);e.on("end",()=>{this.zoom(t,e)}),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,a=gt.selection;if(void 0===e)this.reset();else if(a){this.scale.x.domain(this.scale.x.domain().filter((t,e)=>{const n=Math.floor(a[0][0]/this.scale.x.bandwidth()),r=Math.floor(a[1][0]/this.scale.x.bandwidth());return e>=n&&e<=r}));const n=Math.floor(this.scale.y.invert(a[1][1])),r=Math.floor(this.scale.y.invert(a[0][1]));this.scale.y.domain([n,r]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout((function(){n=null}),350);this.reset()}let r=t.transition().duration(750);t.select(".axis--x").transition(r).call(this.xAxis),t.select(".axis--y").transition(r).call(this.yAxis),this.groups.forEach((e,n)=>{let a=e.key,i=e.values;this.scale.subx.rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(a);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=t.select(`#violin${e.index}-${n.label}`);i.select(".violin").transition(r).attr("d",Nl().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const o=Qa(n.values,.25),l=Qa(n.values,.75),c=.1;i.select(".violin-ir").transition(r).attr("x",this.scale.z(-c)).attr("y",this.scale.y(l)).attr("width",Math.abs(this.scale.z(-c)-this.scale.z(c))).attr("height",Math.abs(this.scale.y(l)-this.scale.y(o)));const s=er(n.values);i.select(".violin-median").transition(r).attr("x1",this.scale.z(-c)).attr("x2",this.scale.z(c)).attr("y1",this.scale.y(s)).attr("y2",this.scale.y(s))})})}_drawViolin(t,e,n,a,r,i){let o=function(t,e,n){return function(a){return e.map(e=>[e,tr(a,a=>t((e-a)/n))/n])}}(zl,this.scale.y.ticks(100),Ul(e.values));const l=Ba(e.values),c=o(e.values).filter(t=>t[0]>=l[0]&&t[0]<=l[1]),s=t.append("g").attr("id",`violin${a}-${e.label}`).attr("class","violin-g").datum(e);if(e.values.length>=i&&c.length&&this._validVertices(c)){let i=Ja(c,t=>Math.abs(t[1]));this.scale.z.domain([-i,i]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);let o=Nl().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const l=s.append("path").datum(c).attr("d",o).classed("violin",!0).style("fill",()=>void 0!==e.color?e.color:a%2==0?"#90c1c1":"#94a8b8"),f=Qa(e.values,.25),u=Qa(e.values,.75),d=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(u-f),a=Ja(e.values.filter(t=>t<=u+1.5*n)),r=nr(e.values.filter(t=>t>=f-1.5*n));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(a)).attr("y2",this.scale.y(r)).style("stroke","#fff")}s.append("rect").attr("x",this.scale.z(-d)).attr("y",this.scale.y(u)).attr("width",Math.abs(this.scale.z(-d)-this.scale.z(d))).attr("height",Math.abs(this.scale.y(u)-this.scale.y(f))).attr("class","violin-ir");const h=er(e.values);if(s.append("line").attr("x1",this.scale.z(-d)).attr("x2",this.scale.z(d)).attr("y1",this.scale.y(h)).attr("y2",this.scale.y(h)).attr("class","violin-median"),r){let t=cl(0,d/2);const n=Math.abs(u-f),a=Ja(e.values.filter(t=>t<=u+1.5*n)),r=nr(e.values.filter(t=>t>=f-1.5*n)),i=e.values.filter(t=>t<r||t>a);s.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(t())).attr("cy",t=>this.scale.y(t)).attr("r",2)}s.on("mouseover",()=>{l.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+h.toPrecision(4)+"<br/>")}),s.on("mouseout",()=>{l.classed("highlighted",!1)})}else if(i){let t=Ja(e.values,t=>Math.abs(t));this.scale.z.domain([-t,t]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const n=this.scale.z.domain()[1]/3;let a=cl(0,n/2);s.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",()=>this.scale.z(a())).attr("cy",t=>this.scale.y(t)).attr("r",2)}}_sanityCheck(t){const e=["group","label","values"];t.forEach(t=>{e.forEach(e=>{if(void 0===t[e])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const e=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),a=(t,a)=>a!==e.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+n/2:0;t.selectAll(".vline").data(e).enter().append("line").classed("vline",!0).attr("x1",a).attr("x2",a).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,n)=>n!=e.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,e)=>t.concat(e),[]).filter(t=>isNaN(t)).length}}const Gl={id:"gtexGroupedViolinPlot",data:{heatmap:zo({x:50,y:10,scaleFactor:1e3}),dendroHeatmap:{rowTree:"(((TP53:0.17,SLK:0.17):1.18,NDRG4:1.34):1.33,ACTN3:2.67);",colTree:"(((Adipose Visceral Omentum:0.06,Adipose Subcutaneous:0.06):0.00,Bladder:0.06):0.16,Adrenal Gland:0.22);",heatmap:[{y:"SLK",value:35.505,x:"Adipose Subcutaneous",unit:"TPM"},{y:"SLK",value:29.28,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"SLK",value:17.405,x:"Adrenal Gland",unit:"TPM"},{y:"SLK",value:53.29,x:"Bladder",unit:"TPM"},{y:"NDRG4",value:12.035,x:"Adipose Subcutaneous",unit:"TPM"},{y:"NDRG4",value:6.531000000000001,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"NDRG4",value:134.8,x:"Adrenal Gland",unit:"TPM"},{y:"NDRG4",value:7.1160000000000005,x:"Bladder",unit:"TPM"},{y:"TP53",value:29.935,x:"Adipose Subcutaneous",unit:"TPM"},{y:"TP53",value:23.55,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"TP53",value:18.515,x:"Adrenal Gland",unit:"TPM"},{y:"TP53",value:40.51,x:"Bladder",unit:"TPM"},{y:"ACTN3",value:.33145,x:"Adipose Subcutaneous",unit:"TPM"},{y:"ACTN3",value:.3317,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"ACTN3",value:.100005,x:"Adrenal Gland",unit:"TPM"},{y:"ACTN3",value:.48100000000000004,x:"Bladder",unit:"TPM"}]},groupedViolinPlot:[{group:"Group 1",label:"Gene 1",values:Xa(0,2e3).map(cl(2,1))},{group:"Group 1",label:"Gene 2",values:Xa(0,2e3).map(cl(5,1))},{group:"Group 1",label:"Gene 3",values:Xa(0,2e3).map(cl(10,1))},{group:"Group 2",label:"Gene 1",values:Xa(0,2e3).map(cl(5,1))},{group:"Group 2",label:"Gene 2",values:Xa(0,2e3).map(cl(3,1))},{group:"Group 2",label:"Gene 3",values:Xa(0,2e3).map(cl(1,1))},{group:"Group 3",label:"Gene 1",values:Xa(0,2e3).map(cl(2,1))},{group:"Group 3",label:"Gene 2",values:Xa(0,2e3).map(cl(3,1))},{group:"Group 3",label:"Gene 3",values:Xa(0,2e3).map(cl(5,1))}],transcriptTracks:{exons:{"ENST00000311595.9":[{chrom:"17",chromEnd:77071172,exonId:"ENSE00002713933.1",exonNumber:"1",chromStart:77071151,strand:"+"},{chrom:"17",chromEnd:77073579,exonId:"ENSE00003672628.1",exonNumber:"2",chromStart:77073512,strand:"+"},{chrom:"17",chromEnd:77073946,exonId:"ENSE00003475281.1",exonNumber:"3",chromStart:77073745,strand:"+"},{chrom:"17",chromEnd:77075719,exonId:"ENSE00001111713.1",exonNumber:"4",chromStart:77075571,strand:"+"},{chrom:"17",chromEnd:77076446,exonId:"ENSE00003651250.1",exonNumber:"5",chromStart:77076289,strand:"+"},{chrom:"17",chromEnd:77077155,exonId:"ENSE00003607773.1",exonNumber:"6",chromStart:77077007,strand:"+"},{chrom:"17",chromEnd:77078612,exonId:"ENSE00002720924.1",exonNumber:"7",chromStart:77077980,strand:"+"}]},transcripts:[{chromosome:"17",end:77078612,gencodeId:"ENSG00000167280.12",geneSymbol:"ENGASE",start:77071151,strand:"+",transcriptId:"ENST00000311595.9"}]},bubbleMap:zo({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),ldPlot:zo({x:2,y:2,scaleFactor:1})}.groupedViolinPlot,width:500,height:300,marginLeft:100,marginRight:20,marginTop:50,marginBottom:100,showDivider:!0,xPadding:.3,yLabel:"Random Value",showSubX:!0,showX:!0,xAngle:0,subXAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0};function Yl(t=Gl){console.log(t.data);let e={top:t.marginTop,right:t.marginRight,bottom:t.marginBottom,left:t.marginLeft};Lo(t.id);let n=t.width-(t.marginLeft+t.marginRight),a=t.height-(t.marginTop+t.marginBottom),r=(t.id,t.id+"Tooltip"),i=function(t,e,n,a,r,i="relative"){return Lo(t),void 0===r&&(r=t+"-svg"),Et("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",r).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}(t.id,t.width,t.height,e);const o=new Fl(t.data);return o.render(i,n,a,t.xPadding,void 0,[],t.yLabel,t.showX,t.xAngle,t.showSubX,t.subXAngle,t.showWhisker,t.showDivider,t.showLegend,t.showSampleSize,t.sortSubX,t.showOutliers,t.numPoints),i.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1),o.createTooltip(r),i}function ql(t,e,n,a,r,i=Uo()){u(i.dyneqtl+`?variantId=${n}&gencodeId=${e}&tissueSiteDetailId=${a}`,{credentials:"include"}).then((function(e){let n=function(t){["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: Required json attribute is missing: "+e}),t.expression_values=t.data.map(t=>parseFloat(t)),t.genotypes=t.genotypes.map(t=>parseFloat(t)),t.homoRefExp=t.expression_values.filter((e,n)=>0===t.genotypes[n]),t.homoAltExp=t.expression_values.filter((e,n)=>2===t.genotypes[n]),t.heteroExp=t.expression_values.filter((e,n)=>1===t.genotypes[n]);let e=t.variantId.split(/_/)[2],n=t.variantId.split(/_/)[3];return t.het=e+n,t.ref=e+e,t.alt=n+n,t}(e);t.data=[{group:r||n.tissueSiteDetailId,label:n.ref.length>2?"ref":n.ref,size:n.homoRefExp.length,values:n.homoRefExp},{group:r||n.tissueSiteDetailId,label:n.het.length>2?"het":n.het,size:n.heteroExp.length,values:n.heteroExp},{group:r||n.tissueSiteDetailId,label:n.alt.length>2?"alt":n.alt,size:n.homoAltExp.length,values:n.homoAltExp}],t.numPoints=10,Yl(t)}))}function Vl(t,e,n=Uo()){$("#"+t.divSpinner).show(),u(n.geneId+e,{credentials:"include"}).then(a=>{let r=function(t,e=!1,n=null){if(!t.hasOwnProperty("gene"))throw"Parsing Error: attribute gene doesn't exist.";if(0===t.gene.length)throw alert("No gene is found"),"Fatal Error: gene(s) not found";if(e){if(null===n)throw"Please provide a gene ID for search results validation";if(t.gene.length>1){let e=t.gene.filter(t=>t.geneSymbolUpper===n.toUpperCase()||t.gencodeId===n.toUpperCase());if(e.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";if(0===e.length)throw alert("No gene is found with "+n),"Fatal Error: gene not found";t.gene=e}return t.gene[0]}return t.gene}(a,!0,e);$("#"+t.divGeneInfo).empty(),$("<span/>").html(`<span>${r.geneSymbol} (${r.gencodeId}), ${r.chromosome}:${r.start} - ${r.end} (${r.strand}), ${r.description}`).appendTo($("#"+t.divGeneInfo));let i=[u(n.tissue,{credentials:"include"}),u(n.exon+r.gencodeId,{credentials:"include"}),u(n.singleTissueEqtl+r.gencodeId,{credentials:"include"})];Promise.all(i).then((function(e){let a=function(t){const e="tissueInfo";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e],a=n[0];if(!a.hasOwnProperty("tissueSiteDetailId"))throw"Parsing Error: required attr is missing: tissueSiteDetailId";if(!a.hasOwnProperty("rnaSeqAndGenotypeSampleCount"))throw"Parsing Error: required attr is missing: rnaSeqAndGenotypeSampleCount";return n}(e[0]),i=function(t){const e="tissueInfo";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),n.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{})}(e[0]),o=function(t){if(!t.hasOwnProperty("exon"))throw"Parsing Error: required json attribute is missing: exon";return t.exon}(e[1]),l=function(t,e){const n="singleTissueEqtl";if(!t.hasOwnProperty(n))throw"Parsing Error: required attribute is not found: "+n;return["variantId","tissueSiteDetailId","nes","pValue"].forEach(e=>{if(!t[n][0].hasOwnProperty(e))throw"Parsing Error: required attribute is missing: "+n}),t[n].map(t=>(t.x=t.variantId,t.displayX=Fo(t.variantId),t.y=t.tissueSiteDetailId,e&&(t.displayY=e[t.tissueSiteDetailId].tissueSiteDetail),t.value=t.nes,t.displayValue=t.nes.toPrecision(3),t.r=-Math.log10(t.pValue),t.rDisplayValue=parseFloat(t.pValue.toExponential()).toPrecision(3),t))}(e[2],i);t.data=l;let c=Hl(t=function(t){t.margin={left:t.marginLeft+t.focusPanelLabels.row.width+t.focusPanelLabels.row.adjust,top:t.marginTop,right:t.marginRight,bottom:t.marginBottom+t.focusPanelLabels.column.height};let e=ir().key(t=>t.y).entries(t.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN),n=(t.height-(t.margin.top+t.margin.bottom+t.miniPanelHeight+t.legendHeight))/e.length;n<10?t.height=10*e.length+t.margin.top+t.margin.bottom+t.miniPanelHeight+t.legendHeight:n>18&&(t.height=18*e.length+t.margin.top+t.margin.bottom+t.miniPanelHeight+t.legendHeight);if(t.inWidth=t.width-(t.margin.left+t.margin.right),t.inHeight=t.height-(t.margin.top+t.margin.bottom),t.focusPanelHeight=t.inHeight-(t.legendHeight+t.miniPanelHeight),t.focusPanelHeight<0)throw"Config error: focus panel height is negative.";return t.focusPanelMargin={left:t.margin.left,top:t.margin.top+t.miniPanelHeight+t.legendHeight},t.ldPanelMargin={left:t.margin.left,top:0},t}(t),r,a,o,i,n);u(n.ld+r.gencodeId,{credentials:"include"}).then(e=>{let s=function(t){if(!t.hasOwnProperty("ld"))throw"Parsing Error: required json attribute is missing: ld";let e=[],n={};return t.ld.forEach(t=>{let a=t[0].split(",").sort();n[a[0]]=!0,n[a[1]]=!0,e.push({x:a[0],displayX:Fo(a[0]),y:a[1],displayY:Fo(a[1]),value:parseFloat(t[1]),displayValue:parseFloat(t[1]).toPrecision(3)})}),Object.keys(n).forEach(t=>{e.push({x:t,displayX:Fo(t),y:t,displayY:Fo(t),value:1,displayValue:"1"})}),e}(e);t.ldData=s.filter(e=>e.value>=t.ldCutoff),jl(t,c),$("#"+t.divSpinner).hide();c.yScale.domain(),c.xScale.domain();$("#"+t.divModal).on("hidden.bs.modal",e=>{let s=[];$("#"+t.divModal).find(":input").each((function(){$(this).prop("checked")&&s.push($(this).val())})),t.data=l.filter(t=>s.indexOf(t.y)>=0);ir().key(t=>t.x).entries(t.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN);c=Hl(t,r,a,o,i,n,!0),jl(t,c)})})}))})}function Ol(t,e,n,a){Lo(t),void 0===a&&(a=t+"-svg"),Et("#"+a).remove();let r=Et("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",a);return r.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",e).attr("height",n),r}function jl(t,e){let n=new ll(t.ldData,t.ldCutoff,!1,void 0,t.ldColorScheme,[0,1]);$("#"+t.ldId).empty(),n.addTooltip(t.ldId);let a=Et("#"+t.ldId).append("canvas").attr("id",t.ldId+"-ld-canvas").attr("width",t.width).attr("height",t.width).style("position","absolute"),r=Ol(t.ldId,t.width,t.width,void 0),i=r.append("g").attr("class","ld").attr("id","ldG").attr("transform",`translate(${t.ldPanelMargin.left}, ${t.ldPanelMargin.top})`);n.drawColorLegend(r,{x:t.ldPanelMargin.left,y:100},10,"LD"),i.selectAll("*").remove();let o={w:t.inWidth,top:t.ldPanelMargin.top,left:t.ldPanelMargin.left};n.draw(a,i,o,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain()),e.brush.on("brush",()=>{e.brushEvent(),i.selectAll("*").remove(),n.draw(a,i,o,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain())}),function(t,e,n,a,r){Lo(t),Rl([{id:"ldPanel",class:"col-xs-12 col-sm-6 col-lg-2",fontSize:"11px",search:{id:"ldLimit",size:3,value:0,label:"LD cutoff R<sup>2</sup>>="},slider:{id:"ldSlider",type:"range",min:0,max:1,step:.1,value:0}}],t);let i=0;const o=()=>{e.filteredData=e._filter(e.data,i),a.selectAll("*").remove(),e.draw(n,a,r,[0,1],!1,void 0)};$("#ldLimit").keydown(t=>{if(13==t.keyCode){let t=parseFloat($("#ldLimit").val());i=t,o()}}),$("#ldSlider").on("change mousemove",()=>{let t=$("#ldSlider").val();$("#ldLimit").val(t),i=t,o()})}(t.divDashboard,n,a,i,o)}function Hl(t,e,n,a,r,i,o=!1){let l=new ol(t.data,t.useLog,t.logBase,t.colorScheme);l.addTooltip(t.id),l.urls=i,l.variantsInExons={},l.rsLookUp={},l.varLookUp={};let c=Ol(t.id,t.width,t.height,void 0),s=c.append("g").attr("class","context").attr("id","miniG").attr("transform",`translate(${t.margin.left}, ${t.margin.top})`),f=c.append("g").attr("id","focusG").attr("class","focus").attr("transform",`translate(${t.focusPanelMargin.left}, ${t.focusPanelMargin.top})`);return l.drawCombo(s,f,{w:t.inWidth,h:t.miniPanelHeight,top:5,left:0,h2:t.focusPanelHeight},t.colorScaleDomain,!1,t.focusPanelLabels),$("#"+t.divInfo).text("Total eQTL counts: "+t.data.length),f.selectAll(".bubble-map-cell").on("mouseover",(function(t){let e=Et(this),n=e.attr("row"),a=e.attr("col");f.selectAll(".bubble-map-xlabel").filter("."+n).classed("highlighted",!0),f.selectAll(".bubble-map-ylabel").filter("."+a).classed("highlighted",!0),e.classed("highlighted",!0);let r=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue,i=void 0===t.rDisplayValue?t.r.toPrecision(4):t.rDisplayValue,o=void 0===t.displayX?t.x:t.displayX,c=void 0===t.displayY?t.y:t.displayY;l.tooltip.show(`Column: ${o} <br/> Row: ${c}<br/> NES: ${r}<br/> p-value: ${i}`)})),function(t,e,n,a,r,i){Lo(t),$("#"+t).empty();let o=$("<div/>").attr("class","col-xs-12 col-sm-6 col-lg-1").css("padding-top","4px").css("margin","1px").css("font-size","12px").appendTo($("#"+t));$("<span/>").attr("data-toggle","modal").attr("data-target","#"+n).css("margin-left","2px").css("padding-top","2px").css("color","#0868ac").css("cursor","pointer").html('<i class="fas fa-filter"></i>Filter Tissues<br/>').appendTo(o);let l=$("#"+n).find(".modal-body");0==$("#"+n).find(":input").length&&a.yScale.domain().forEach(t=>{let e=$("<label/>");$("<input/>").attr("value",t).attr("type","checkbox").prop("checked",!0).appendTo(e),$("<span/>").css("font-size","12px").css("margin-left","2px").html(i[t].tissueSiteDetail).appendTo(e),e.appendTo(l),$("<br/>").appendTo(l)});Rl([{id:"pvaluePanel",class:"col-xs-12 col-sm-6 col-lg-2",fontSize:"11px",search:{id:"pvalueLimit",size:3,value:0,label:"-log<sub>10</sub>(pValue)>="},slider:{id:"pvalueSlider",type:"range",min:0,max:20,step:1,value:0}},{id:"nesPanel",class:"col-xs-12 col-sm-6 col-lg-2",fontSize:"11px",search:{id:"nesLimit",size:3,value:0,label:"abs(NES)>="},slider:{id:"nesSlider",type:"range",min:0,max:1,step:.1,value:0}},{id:"variantPanel",fontSize:"11px",class:"col-xs-12 col-sm-6 col-lg-2",search:{id:"varLocator",size:20,label:"Variant locator",placeholder:"  Variant or RS ID... "}}],t);let c=$("<div/>").attr("class","col-xs-12 col-sm-6 col-lg-1").css("padding-top","2px").css("margin","1px").css("font-size","12px").appendTo($("#"+t));$("<input/>").attr("id","rsSwitch").attr("type","checkbox").css("margin-left","10px").appendTo(c);$("<label/>").css("margin-left","2px").css("padding-top","2px").css("font-size","11px").html("Use RS ID").appendTo(c);let s=0,f=0,u=r.select("#focusG"),d=r.select("#miniG");const h=()=>{u.selectAll(".bubble-map-cell").style("fill",t=>t.r<s||Math.abs(t.value)<f?"#fff":a.colorScale(t.value));let t=0;d.selectAll(".mini-map-cell").style("fill",e=>e.r<s||Math.abs(e.value)<f?"#fff":(t+=1,a.colorScale(e.value))),$("#"+e).text("Total eQTL counts: "+t)};$("#pvalueLimit").keydown(t=>{13==t.keyCode&&(s=parseFloat($("#pvalueLimit").val()),h())}),$("#pvalueSlider").on("change mousemove",()=>{let t=$("#pvalueSlider").val();$("#pvalueLimit").val(t),s=t,h()}),$("#nesLimit").keydown(t=>{13==t.keyCode&&(f=parseFloat($("#nesLimit").val()),h())}),$("#nesSlider").on("change mousemove",()=>{let t=$("#nesSlider").val();$("#nesLimit").val(t),f=t,h()}),d.selectAll(".mini-marker").data(a.xScaleMini.domain()).enter().append("rect").classed("mini-marker",!0).attr("x",t=>a.xScaleMini(t)).attr("y",a.yScaleMini.range()[1]).attr("width",a.xScaleMini.bandwidth()).attr("height",a.yScaleMini.bandwidth()),$("#varLocator").keyup(t=>{let e=$("#varLocator").val();if(e.length>3){const t=new RegExp(e);u.selectAll(".bubble-map-xlabel").classed("query",e=>t.test(e)||t.test(a.rsLookUp[e])||t.test(a.varLookUp[e])),d.selectAll(".mini-marker").classed("highlighted",e=>t.test(e)||t.test(a.rsLookUp[e])||t.test(a.varLookUp[e]))}else u.selectAll(".bubble-map-xlabel").classed("query",!1),d.selectAll(".mini-marker").classed("highlighted",!1)}),$("#rsSwitch").change(()=>{$("#rsSwitch").is(":checked")?u.selectAll(".bubble-map-xlabel").text(t=>a.rsLookUp[t]):u.selectAll(".bubble-map-xlabel").text(t=>a.varLookUp[t])})}(t.divDashboard,t.divInfo,t.divModal,l,c,r),function(t){t.rsLookUp={},t.varLookUp={},ir().key(t=>t.x).entries(t.data).forEach(e=>{let n=e.values[0];if(void 0===n.hasOwnProperty("snpId"))throw"Input Error: RS ID lookup table is not built.";if(void 0===n.hasOwnProperty("displayX"))throw"Input Error: display label lookup table is not built.";t.rsLookUp[e.key]=e.values[0].snpId,t.varLookUp[e.key]=e.values[0].displayX})}(l),l.variantsInExons=function(t,e){let n={};return t.forEach(t=>{let a=parseFloat(t.split("_")[1]);e.filter(t=>t.start<=a&&t.end>=a).length>0&&(n[t]=!0)}),n}(l.xScale.domain(),a),function(t,e,n){let a=n.select("#focusG").append("g").attr("id","tissueBadgeG").selectAll(".tissue-badge").data(t.filter(t=>void 0!==e.yScale(t.tissueSiteDetailId))).enter().append("g").classed("tissue-badge",!0);a.append("ellipse").attr("cx",e.xScale.range()[0]-e.xScale.bandwidth()/2-10).attr("cy",t=>e.yScale(t.tissueSiteDetailId)+e.yScale.bandwidth()/2).attr("rx",11).attr("ry",e.yScale.bandwidth()/2).attr("fill","#748797"),a.append("text").text(t=>t.rnaSeqAndGenotypeSampleCount).attr("x",e.xScale.range()[0]-e.xScale.bandwidth()/2-17).attr("y",t=>e.yScale(t.tissueSiteDetailId)+e.yScale.bandwidth()/2+3).attr("fill","#ffffff").style("font-size","8px").attr("text-anchor","center")}(n,l,c),function(t,e){let n="+"==t.strand?t.start:t.end,a="+"==t.strand?t.end:t.start,r=e.xScaleMini.domain();const i=t=>r.filter((e,n)=>{let a=parseFloat(e.split("_")[1]);if(a===t)return!0;if(void 0===r[n+1])return!1;let i=parseFloat(r[n+1].split("_")[1])||void 0;return(a-t)*(i-t)<0});let o=i(n),l=i(a);e.tss=o[0],e.tes=l[0]}(e,l),Bl(l,c,!0),Xl(e,l,c),function(t,e,n){let a=n.id+"violin-dialog";(function(t,e,n){Lo(t);let a=$("#"+t),r=$("<div/>").attr("id",e).attr("title",n).appendTo(a),i=$("<div/>").html("Clear All").appendTo(r),o=$("<div/>").attr("id","bMap-content").appendTo(r);r.dialog({title:n,autoOpen:!1}),i.click((function(){o.empty()}))})(n.divDashboard,n.id+"violin-dialog","eQTL Violin Plot Dialog"),e.selectAll(".bubble-map-cell").on("click",e=>{$("#"+a).dialog("open");let n=$("<div/>").attr("class","bMap-dialog").css("float","left").css("margin","20px").appendTo($("#bMap-content")),r=$("<div/>").appendTo(n);$("<i/>").attr("class","fa fa-window-close").css("margin-right","2px").click((function(){n.remove()})).appendTo(r),$("<span/>").attr("class","title").html(`${e.displayX}<br/>${e.displayY}`).appendTo(r);let i="dEqtl"+Date.now().toString();$("<div/>").attr("id",i).appendTo(n),ql({id:i,data:void 0,width:250,height:200,marginLeft:50,marginRight:20,marginTop:20,marginBottom:50,showDivider:!1,xPadding:.3,yLabel:"Norm. Expression",showSubX:!0,showX:!1,subXAngle:0,xAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0},e.gencodeId,e.variantId,e.tissueSiteDetailId,e.displayY,t.urls)})}(l,c,t),l.brushEvent=()=>{let n=function(t,e,n){let a=gt.selection,r=Math.round(a[0]/e.xScaleMini.step()),i=Math.round(a[1]/e.xScaleMini.step()),o=e.xScaleMini.domain().slice(r,i);e.xScale.domain(o);let l=e._setBubbleMax();e.bubbleScale.range([2,l]),e.drawBubbleLegend(n,{x:t.width/2*1.1,y:t.focusPanelMargin.top-50,title:"-log10(p-value)"},5,"-log10(p-value)"),n.select("#focusG").selectAll(".bubble-map-cell").attr("cx",t=>{let n=e.xScale(t.x);return void 0===n?e.xScale.bandwidth()/2:n+e.xScale.bandwidth()/2}).attr("r",t=>void 0===e.xScale(t.x)?0:e.bubbleScale(t.r));let c=t.focusPanelLabels.column;return n.select("#focusG").selectAll(".bubble-map-xlabel").attr("transform",t=>`translate(${e.xScale(t)+e.xScale.bandwidth()/3||0}, ${e.yScale.range()[1]+c.adjust}) rotate(${c.angle})`).style("font-size",()=>(Math.floor(e.xScale.bandwidth()/2)>10?10:Math.floor(e.xScale.bandwidth()/2))+"px").style("display",t=>void 0===e.xScale(t)?"none":"block"),o}(t,l,c);return(l.tss&&l.xScale(l.tss)||l.tes&&l.xScale(l.tes))&&Bl(l,c,!1),Xl(e,l,c),n},l.brush=Fa().extent([[0,0],[t.inWidth,t.miniPanelHeight+5]]).on("brush",l.brushEvent),l.drawColorLegend(c,{x:t.focusPanelMargin.left,y:t.focusPanelMargin.top-50},4,"NES"),s.append("g").attr("class","brush").call(l.brush).call(l.brush.move,[0,80*l.xScaleMini.bandwidth()]),l.xScaleMini.domain().length==l.xScale.domain().length&&s.style("display","none"),l}function Bl(t,e,n=!1){if(n){let n=e.select("#miniG").append("g").attr("id","miniSiteMarkers");n.append("line").attr("x1",t.xScaleMini(t.tss)+t.xScaleMini.bandwidth()).attr("x2",t.xScaleMini(t.tss)+t.xScaleMini.bandwidth()).attr("y1",0).attr("y2",t.yScaleMini.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),n.append("line").attr("x1",t.xScaleMini(t.tes)+t.xScaleMini.bandwidth()).attr("x2",t.xScaleMini(t.tes)+t.xScaleMini.bandwidth()).attr("y1",0).attr("y2",t.yScaleMini.range()[1]).style("stroke","#748797").style("stroke-width",2)}else{e.select("#siteMarkers").remove();let n=e.select("#focusG").append("g").attr("id","siteMarkers");t.tss&&t.xScale(t.tss)&&(n.append("line").attr("x1",t.xScale(t.tss)+t.xScale.bandwidth()).attr("x2",t.xScale(t.tss)+t.xScale.bandwidth()).attr("y1",0).attr("y2",t.yScale.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),n.append("text").text("TSS").attr("x",t.xScale(t.tss)).attr("y",-5).attr("text-anchor","center").style("font-size","12px")),t.tes&&t.xScale(t.tes)&&(n.append("line").attr("x1",t.xScale(t.tes)+t.xScale.bandwidth()).attr("x2",t.xScale(t.tes)+t.xScale.bandwidth()).attr("y1",0).attr("y2",t.yScale.range()[1]).style("stroke","#748797").style("stroke-width",2),n.append("text").text("TES").attr("x",t.xScale(t.tes)).attr("y",-5).attr("text-anchor","center").style("font-size","12px"))}}function Xl(t,e,n){let a="+"==t.strand?t.start:t.end;let r=[1e-6,.005,.01,.1,.5,2,3,4,5].map((function(t){return 1e5*t})),i=function t(){var e,n=[.5],a=[0,1],r=1;function i(t){return t<=t?a[Oa(n,t,0,r)]:e}return i.domain=function(t){return arguments.length?(n=gr.call(t),r=Math.min(n.length,a.length-1),i):n.slice()},i.range=function(t){return arguments.length?(a=gr.call(t),r=Math.min(n.length,a.length-1),i):a.slice()},i.invertExtent=function(t){var e=a.indexOf(t);return[n[e-1],n[e]]},i.unknown=function(t){return arguments.length?(e=t,i):e},i.copy=function(){return t().domain(n).range(a).unknown(e)},dr.apply(i,arguments)}().domain(r).range(["#000","#252525","#525252","#737373","#969696","#f0f0f0","#fff"]);n.select("#tssDistG").remove();let o=n.select("#focusG").append("g").attr("id","tssDistG");o.selectAll(".track").data(e.xScale.domain()).enter().append("rect").classed("track",!0).attr("x",t=>e.xScale(t)).attr("y",e.yScale.range()[1]).attr("width",e.xScale.bandwidth()).attr("height",e.yScale.bandwidth()).attr("fill",t=>{let e=Math.abs(parseFloat(t.split("_")[1])-a);return i(e)}).attr("stroke",t=>e.variantsInExons[t]?"#239db8":"#cacaca").attr("stroke-width",t=>e.variantsInExons[t]?"2px":"1px").on("mouseover",(function(t){let n=Math.abs(parseFloat(t.split("_")[1])-a),r=`${t}<br/>${e.rsLookUp[t]}<br/>TSS Distance: ${n} bp</br>`;r=e.variantsInExons[t]?r+"Exon Region":r,e.tooltip.show(r),Et(this).classed("highlighted",!0)})).on("mouseout",(function(t){e.tooltip.hide(),function(t){return"string"==typeof t?new Tt([document.querySelectorAll(t)],[document.documentElement]):new Tt([null==t?[]:t],At)}(".track").classed("highlighted",!1)})),o.append("text").text("TSS Proximity").attr("x",e.xScale.range()[0]).attr("y",e.yScale.range()[1]+e.yScale.bandwidth()).attr("text-anchor","end").style("font-size","8px")}function Rl(t,e){t.forEach((t,n)=>{if(0==$("#"+t.id).length){let n=$("<div/>").attr("id",t.id).attr("class",t.class).css("font-size",t.fontSize).css("margin","1px").css("padding-top","2px").appendTo($("#"+e));n.addClass(t.class),$("<label/>").css("font-weight","normal").html(t.search.label).appendTo(n);$("<input/>").attr("id",t.search.id).attr("value",t.search.value).attr("size",t.search.size).attr("placeholder",t.search.placeholder).css("margin-left","2px").appendTo(n);void 0!==t.slider&&$("<input/>").attr("id",t.slider.id).attr("value",t.slider.value).attr("type",t.slider.type).attr("min",t.slider.min).attr("max",t.slider.max).attr("step",t.slider.step).css("margin-left","0px").css("width","100px").appendTo(n)}})}var Zl={render:Vl};t.GeneEqtlVisualizer=Zl,t.render=Vl,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V2LmJ1bmRsZS5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Rzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL3Rzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2F1dG9UeXBlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9qc29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zb3VyY2VFdmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3BvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbW91c2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9ldmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2RyYWcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9leGl0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2pvaW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2Rlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2RlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW1wdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZWFjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hcHBlbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0dW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlckFycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9vYmplY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZW91dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0clR3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZGVsYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kdXJhdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2Vhc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHRUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZmlsdGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vbWVyZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90cmFuc2l0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdGV4dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3JlbW92ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2V2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9ub2V2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW50ZXJydXB0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9icnVzaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3RvdWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hc2NlbmRpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL251bWJlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZGV2aWF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy92YXJpYW5jZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZXh0ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGlja3MuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3F1YW50aWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tYXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lYW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lZGlhbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWluLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL21hcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9uZXN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3NldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaW5pdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2JhbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL251bWJlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZXhwb25lbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRTcGVjaWZpZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRQcmVmaXhBdXRvLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0Um91bmRlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0R3JvdXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFRyaW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25Sb3VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvbkZpeGVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3Bvdy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taWxsaXNlY29uZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9zZWNvbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZHVyYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWludXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2hvdXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZGF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3dlZWsuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMveWVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9tb250aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNaW51dGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjSG91ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNEYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjV2Vlay5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNZZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2lzb0Zvcm1hdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvUGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3NlcXVlbnRpYWwuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy91dGlscy5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvVG9vbHRpcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NvbG9ycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3JhbXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvQWNjZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvRGFyazIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYWlyZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwxLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0My5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1RhYmxlYXUxMC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9CckJHLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1BSR24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUGlZRy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QdU9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRHeS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1NwZWN0cmFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9CdUduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9CdVB1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9HbkJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9PclJkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdUJ1R24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1UmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1JkUHUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR25CdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxPckJyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbE9yUmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9CbHVlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0dyZWVucy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0dyZXlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvUHVycGxlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1JlZHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9PcmFuZ2VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9jdWJlaGVsaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3JhaW5ib3cuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3NpbmVib3cuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3ZpcmlkaXMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9jb2xvcnMuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9CdWJibGVNYXAuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9IYWxmTWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvbm9ybWFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZGVmYXVsdFNvdXJjZS5qcyIsIi4uLy4uL3NyYy9tb2R1bGVzL1Rvb2xiYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvaWRlbnRpdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXhpcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1wYXRoL3NyYy9wYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9wb2ludC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJlYS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbGluZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbW9ub3RvbmUuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9rZGUuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9Hcm91cGVkVmlvbGluLmpzIiwiLi4vLi4vc3JjL0dURXhWaXouanMiLCIuLi8uLi9zcmMvRXF0bFZpb2xpblBsb3QuanMiLCIuLi8uLi9zcmMvR2VuZUVxdGxWaXN1YWxpemVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aHJlc2hvbGQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RBbGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEVPTCA9IHt9LFxuICAgIEVPRiA9IHt9LFxuICAgIFFVT1RFID0gMzQsXG4gICAgTkVXTElORSA9IDEwLFxuICAgIFJFVFVSTiA9IDEzO1xuXG5mdW5jdGlvbiBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucykge1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZFwiLCBcInJldHVybiB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdIHx8IFxcXCJcXFwiXCI7XG4gIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xufVxuXG5mdW5jdGlvbiBjdXN0b21Db252ZXJ0ZXIoY29sdW1ucywgZikge1xuICB2YXIgb2JqZWN0ID0gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpO1xuICByZXR1cm4gZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgcmV0dXJuIGYob2JqZWN0KHJvdyksIGksIGNvbHVtbnMpO1xuICB9O1xufVxuXG4vLyBDb21wdXRlIHVuaXF1ZSBjb2x1bW5zIGluIG9yZGVyIG9mIGRpc2NvdmVyeS5cbmZ1bmN0aW9uIGluZmVyQ29sdW1ucyhyb3dzKSB7XG4gIHZhciBjb2x1bW5TZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgY29sdW1ucyA9IFtdO1xuXG4gIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICBmb3IgKHZhciBjb2x1bW4gaW4gcm93KSB7XG4gICAgICBpZiAoIShjb2x1bW4gaW4gY29sdW1uU2V0KSkge1xuICAgICAgICBjb2x1bW5zLnB1c2goY29sdW1uU2V0W2NvbHVtbl0gPSBjb2x1bW4pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbHVtbnM7XG59XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgd2lkdGgpIHtcbiAgdmFyIHMgPSB2YWx1ZSArIFwiXCIsIGxlbmd0aCA9IHMubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKDApICsgcyA6IHM7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciA8IDAgPyBcIi1cIiArIHBhZCgteWVhciwgNilcbiAgICA6IHllYXIgPiA5OTk5ID8gXCIrXCIgKyBwYWQoeWVhciwgNilcbiAgICA6IHBhZCh5ZWFyLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG4gIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSxcbiAgICAgIG1pbnV0ZXMgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgIHNlY29uZHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IFwiSW52YWxpZCBEYXRlXCJcbiAgICAgIDogZm9ybWF0WWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIDQpICsgXCItXCIgKyBwYWQoZGF0ZS5nZXRVVENNb250aCgpICsgMSwgMikgKyBcIi1cIiArIHBhZChkYXRlLmdldFVUQ0RhdGUoKSwgMilcbiAgICAgICsgKG1pbGxpc2Vjb25kcyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCI6XCIgKyBwYWQoc2Vjb25kcywgMikgKyBcIi5cIiArIHBhZChtaWxsaXNlY29uZHMsIDMpICsgXCJaXCJcbiAgICAgIDogc2Vjb25kcyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCI6XCIgKyBwYWQoc2Vjb25kcywgMikgKyBcIlpcIlxuICAgICAgOiBtaW51dGVzIHx8IGhvdXJzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIlpcIlxuICAgICAgOiBcIlwiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEJvZHkocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiXG4gICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gZm9ybWF0RGF0ZSh2YWx1ZSlcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHZhbHVlICs9IFwiXCIpID8gXCJcXFwiXCIgKyB2YWx1ZS5yZXBsYWNlKC9cIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdEJvZHk6IGZvcm1hdEJvZHksXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93cyxcbiAgICBmb3JtYXRSb3c6IGZvcm1hdFJvdyxcbiAgICBmb3JtYXRWYWx1ZTogZm9ybWF0VmFsdWVcbiAgfTtcbn1cbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2LmpzXCI7XG5cbnZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG5leHBvcnQgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuZXhwb3J0IHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRCb2R5ID0gY3N2LmZvcm1hdEJvZHk7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Um93ID0gY3N2LmZvcm1hdFJvdztcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0VmFsdWUgPSBjc3YuZm9ybWF0VmFsdWU7XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2Rzdi5qc1wiO1xuXG52YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG5leHBvcnQgdmFyIHRzdlBhcnNlID0gdHN2LnBhcnNlO1xuZXhwb3J0IHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRCb2R5ID0gdHN2LmZvcm1hdEJvZHk7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Um93ID0gdHN2LmZvcm1hdFJvdztcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0VmFsdWUgPSB0c3YuZm9ybWF0VmFsdWU7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhdXRvVHlwZShvYmplY3QpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldLnRyaW0oKSwgbnVtYmVyLCBtO1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gbnVsbDtcbiAgICBlbHNlIGlmICh2YWx1ZSA9PT0gXCJ0cnVlXCIpIHZhbHVlID0gdHJ1ZTtcbiAgICBlbHNlIGlmICh2YWx1ZSA9PT0gXCJmYWxzZVwiKSB2YWx1ZSA9IGZhbHNlO1xuICAgIGVsc2UgaWYgKHZhbHVlID09PSBcIk5hTlwiKSB2YWx1ZSA9IE5hTjtcbiAgICBlbHNlIGlmICghaXNOYU4obnVtYmVyID0gK3ZhbHVlKSkgdmFsdWUgPSBudW1iZXI7XG4gICAgZWxzZSBpZiAobSA9IHZhbHVlLm1hdGNoKC9eKFstK11cXGR7Mn0pP1xcZHs0fSgtXFxkezJ9KC1cXGR7Mn0pPyk/KFRcXGR7Mn06XFxkezJ9KDpcXGR7Mn0oXFwuXFxkezN9KT8pPyhafFstK11cXGR7Mn06XFxkezJ9KT8pPyQvKSkge1xuICAgICAgaWYgKGZpeHR6ICYmICEhbVs0XSAmJiAhbVs3XSkgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8tL2csIFwiL1wiKS5yZXBsYWNlKC9ULywgXCIgXCIpO1xuICAgICAgdmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgY29udGludWU7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtZHN2L2lzc3Vlcy80NVxudmFyIGZpeHR6ID0gbmV3IERhdGUoXCIyMDE5LTAxLTAxVDAwOjAwXCIpLmdldEhvdXJzKCkgfHwgbmV3IERhdGUoXCIyMDE5LTA3LTAxVDAwOjAwXCIpLmdldEhvdXJzKCk7IiwiZnVuY3Rpb24gcmVzcG9uc2VKc29uKHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDQgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDUpIHJldHVybjtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlSnNvbik7XG59XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSB8fCAvW1xccy5dLy50ZXN0KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgX1t0XSA9IFtdO1xuICB9XG4gIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG59XG5cbmZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgdGhpcy5fID0gXztcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbkRpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICB0LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcbiAgfSxcbiAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldCh0eXBlLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gYy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIiwiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2VcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZShmYWxzZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKHRydWUpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwidmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG5leHBvcnQgdmFyIGV2ZW50ID0gbnVsbDtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50KSkge1xuICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQxKSB7XG4gICAgdmFyIGV2ZW50MCA9IGV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICB2YXIgZXZlbnQwID0gZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICBldmVudCA9IGV2ZW50MTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0gZmluYWxseSB7XG4gICAgZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW5cIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBqb2luOiBzZWxlY3Rpb25fam9pbixcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcIi4vc2VsZWN0aW9uL29uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY3VycmVudCA9IGV2ZW50LCBzb3VyY2U7XG4gIHdoaWxlIChzb3VyY2UgPSBjdXJyZW50LnNvdXJjZUV2ZW50KSBjdXJyZW50ID0gc291cmNlO1xuICByZXR1cm4gY3VycmVudDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIGV2ZW50KSB7XG4gIHZhciBzdmcgPSBub2RlLm93bmVyU1ZHRWxlbWVudCB8fCBub2RlO1xuXG4gIGlmIChzdmcuY3JlYXRlU1ZHUG9pbnQpIHtcbiAgICB2YXIgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgcG9pbnQgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obm9kZS5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgIHJldHVybiBbcG9pbnQueCwgcG9pbnQueV07XG4gIH1cblxuICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiBbZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCAtIG5vZGUuY2xpZW50TGVmdCwgZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wIC0gbm9kZS5jbGllbnRUb3BdO1xufVxuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50XCI7XG5pbXBvcnQgcG9pbnQgZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICB2YXIgZXZlbnQgPSBzb3VyY2VFdmVudCgpO1xuICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIGV2ZW50ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gIHJldHVybiBwb2ludChub2RlLCBldmVudCk7XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2V2ZW50IGZyb20gXCIuL25vZXZlbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmlldykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICByb290Ll9fbm9zZWxlY3QgPSByb290LnN0eWxlLk1velVzZXJTZWxlY3Q7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHllc2RyYWcodmlldywgbm9jbGljaykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIGlmIChub2NsaWNrKSB7XG4gICAgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG51bGwpOyB9LCAwKTtcbiAgfVxuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gcm9vdC5fX25vc2VsZWN0O1xuICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4ID0gL14jKFswLTlhLWZdezMsOH0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGNvcHk6IGZ1bmN0aW9uKGNoYW5uZWxzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IHRoaXMuY29uc3RydWN0b3IsIHRoaXMsIGNoYW5uZWxzKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gIH0sXG4gIGhleDogY29sb3JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IGNvbG9yX2Zvcm1hdEhleCxcbiAgZm9ybWF0SHNsOiBjb2xvcl9mb3JtYXRIc2wsXG4gIGZvcm1hdFJnYjogY29sb3JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogY29sb3JfZm9ybWF0UmdiXG59KTtcblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRIZXgoKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SHNsKCkge1xuICByZXR1cm4gaHNsQ29udmVydCh0aGlzKS5mb3JtYXRIc2woKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0UmdiKCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRSZ2IoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtLCBsO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4LmV4ZWMoZm9ybWF0KSkgPyAobCA9IG1bMV0ubGVuZ3RoLCBtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBsID09PSA2ID8gcmdibihtKSAvLyAjZmYwMDAwXG4gICAgICA6IGwgPT09IDMgPyBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpIC8vICNmMDBcbiAgICAgIDogbCA9PT0gOCA/IHJnYmEobSA+PiAyNCAmIDB4ZmYsIG0gPj4gMTYgJiAweGZmLCBtID4+IDggJiAweGZmLCAobSAmIDB4ZmYpIC8gMHhmZikgLy8gI2ZmMDAwMDAwXG4gICAgICA6IGwgPT09IDQgPyByZ2JhKChtID4+IDEyICYgMHhmKSB8IChtID4+IDggJiAweGYwKSwgKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKCgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZikpIC8gMHhmZikgLy8gI2YwMDBcbiAgICAgIDogbnVsbCkgLy8gaW52YWxpZCBoZXhcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKC0wLjUgPD0gdGhpcy5yICYmIHRoaXMuciA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmcgJiYgdGhpcy5nIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuYiAmJiB0aGlzLmIgPCAyNTUuNSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiByZ2JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IHJnYl9mb3JtYXRIZXgsXG4gIGZvcm1hdFJnYjogcmdiX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IHJnYl9mb3JtYXRSZ2Jcbn0pKTtcblxuZnVuY3Rpb24gcmdiX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIFwiI1wiICsgaGV4KHRoaXMucikgKyBoZXgodGhpcy5nKSArIGhleCh0aGlzLmIpO1xufVxuXG5mdW5jdGlvbiByZ2JfZm9ybWF0UmdiKCkge1xuICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBmb3JtYXRIc2w6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgIHJldHVybiAoYSA9PT0gMSA/IFwiaHNsKFwiIDogXCJoc2xhKFwiKVxuICAgICAgICArICh0aGlzLmggfHwgMCkgKyBcIiwgXCJcbiAgICAgICAgKyAodGhpcy5zIHx8IDApICogMTAwICsgXCIlLCBcIlxuICAgICAgICArICh0aGlzLmwgfHwgMCkgKiAxMDAgKyBcIiVcIlxuICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGVudGVyID0gdHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIiA/IG9uZW50ZXIoZW50ZXIpIDogZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiZXhwb3J0IHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbmV4cG9ydCB2YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYn0gZnJvbSBcIi4vY29sb3IuanNcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG4vLyBodHRwczovL29ic2VydmFibGVocS5jb20vQG1ib3N0b2NrL2xhYi1hbmQtcmdiXG52YXIgSyA9IDE4LFxuICAgIFhuID0gMC45NjQyMixcbiAgICBZbiA9IDEsXG4gICAgWm4gPSAwLjgyNTIxLFxuICAgIHQwID0gNCAvIDI5LFxuICAgIHQxID0gNiAvIDI5LFxuICAgIHQyID0gMyAqIHQxICogdDEsXG4gICAgdDMgPSB0MSAqIHQxICogdDE7XG5cbmZ1bmN0aW9uIGxhYkNvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBoY2wybGFiKG8pO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gcmdiMmxyZ2Ioby5yKSxcbiAgICAgIGcgPSByZ2IybHJnYihvLmcpLFxuICAgICAgYiA9IHJnYjJscmdiKG8uYiksXG4gICAgICB5ID0geHl6MmxhYigoMC4yMjI1MDQ1ICogciArIDAuNzE2ODc4NiAqIGcgKyAwLjA2MDYxNjkgKiBiKSAvIFluKSwgeCwgejtcbiAgaWYgKHIgPT09IGcgJiYgZyA9PT0gYikgeCA9IHogPSB5OyBlbHNlIHtcbiAgICB4ID0geHl6MmxhYigoMC40MzYwNzQ3ICogciArIDAuMzg1MDY0OSAqIGcgKyAwLjE0MzA4MDQgKiBiKSAvIFhuKTtcbiAgICB6ID0geHl6MmxhYigoMC4wMTM5MzIyICogciArIDAuMDk3MTA0NSAqIGcgKyAwLjcxNDE3MzMgKiBiKSAvIFpuKTtcbiAgfVxuICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncmF5KGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIG5ldyBMYWIobCwgMCwgMCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGxhYkNvbnZlcnQobCkgOiBuZXcgTGFiKGwsIGEsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLmEgPSArYTtcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoTGFiLCBsYWIsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGxyZ2IycmdiKCAzLjEzMzg1NjEgKiB4IC0gMS42MTY4NjY3ICogeSAtIDAuNDkwNjE0NiAqIHopLFxuICAgICAgbHJnYjJyZ2IoLTAuOTc4NzY4NCAqIHggKyAxLjkxNjE0MTUgKiB5ICsgMC4wMzM0NTQwICogeiksXG4gICAgICBscmdiMnJnYiggMC4wNzE5NDUzICogeCAtIDAuMjI4OTkxNCAqIHkgKyAxLjQwNTI0MjcgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiBscmdiMnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IybHJnYih4KSB7XG4gIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuXG5mdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgaWYgKG8uYSA9PT0gMCAmJiBvLmIgPT09IDApIHJldHVybiBuZXcgSGNsKE5hTiwgMCA8IG8ubCAmJiBvLmwgPCAxMDAgPyAwIDogTmFOLCBvLmwsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGNoKGwsIGMsIGgsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGwpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5mdW5jdGlvbiBoY2wybGFiKG8pIHtcbiAgaWYgKGlzTmFOKG8uaCkpIHJldHVybiBuZXcgTGFiKG8ubCwgMCwgMCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGNsMmxhYih0aGlzKS5yZ2IoKTtcbiAgfVxufSkpO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2IsIGRhcmtlciwgYnJpZ2h0ZXJ9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGguanNcIjtcblxudmFyIEEgPSAtMC4xNDg2MSxcbiAgICBCID0gKzEuNzgyNzcsXG4gICAgQyA9IC0wLjI5MjI3LFxuICAgIEQgPSAtMC45MDY0OSxcbiAgICBFID0gKzEuOTcyOTQsXG4gICAgRUQgPSBFICogRCxcbiAgICBFQiA9IEUgKiBCLFxuICAgIEJDX0RBID0gQiAqIEMgLSBEICogQTtcblxuZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgQ3ViZWhlbGl4KSByZXR1cm4gbmV3IEN1YmVoZWxpeChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcbiAgICAgIGJsID0gYiAtIGwsXG4gICAgICBrID0gKEUgKiAoZyAtIGwpIC0gQyAqIGJsKSAvIEQsXG4gICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcbiAgICAgIGggPSBzID8gTWF0aC5hdGFuMihrLCBibCkgKiByYWQyZGVnIC0gMTIwIDogTmFOO1xuICByZXR1cm4gbmV3IEN1YmVoZWxpeChoIDwgMCA/IGggKyAzNjAgOiBoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGN1YmVoZWxpeENvbnZlcnQoaCkgOiBuZXcgQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoQ3ViZWhlbGl4LCBjdWJlaGVsaXgsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSBpc05hTih0aGlzLmgpID8gMCA6ICh0aGlzLmggKyAxMjApICogZGVnMnJhZCxcbiAgICAgICAgbCA9ICt0aGlzLmwsXG4gICAgICAgIGEgPSBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyAqIGwgKiAoMSAtIGwpLFxuICAgICAgICBjb3NoID0gTWF0aC5jb3MoaCksXG4gICAgICAgIHNpbmggPSBNYXRoLnNpbihoKTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIDI1NSAqIChsICsgYSAqIChBICogY29zaCArIEIgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoQyAqIGNvc2ggKyBEICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEUgKiBjb3NoKSksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWQuanNcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICBpZiAoIWIpIGIgPSBbXTtcbiAgdmFyIG4gPSBhID8gTWF0aC5taW4oYi5sZW5ndGgsIGEubGVuZ3RoKSA6IDAsXG4gICAgICBjID0gYi5zbGljZSgpLFxuICAgICAgaTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjW2ldID0gYVtpXSAqICgxIC0gdCkgKyBiW2ldICogdDtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyQXJyYXkoeCkge1xuICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHgpICYmICEoeCBpbnN0YW5jZW9mIERhdGFWaWV3KTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gKGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheSA6IGdlbmVyaWNBcnJheSkoYSwgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmljQXJyYXkoYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5hKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IHZhbHVlKGFbaV0sIGJbaV0pO1xuICBmb3IgKDsgaSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKiAoMSAtIHQpICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2IuanNcIjtcbmltcG9ydCB7Z2VuZXJpY0FycmF5fSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZS5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0LmpzXCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZy5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gY29sb3IoYikpID8gKGIgPSBjLCByZ2IpIDogc3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyByZ2JcbiAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICA6IGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gZ2VuZXJpY0FycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKiAoMSAtIHQpICsgYiAqIHQpO1xuICB9O1xufVxuIiwidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZS5qc1wiO1xuXG52YXIgY3NzTm9kZSxcbiAgICBjc3NSb290LFxuICAgIGNzc1ZpZXcsXG4gICAgc3ZnTm9kZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyLmpzXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2UuanNcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4IGFzIGNvbG9yQ3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZnVuY3Rpb24gY3ViZWhlbGl4KGh1ZSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGN1YmVoZWxpeEdhbW1hKHkpIHtcbiAgICB5ID0gK3k7XG5cbiAgICBmdW5jdGlvbiBjdWJlaGVsaXgoc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JDdWJlaGVsaXgoc3RhcnQpKS5oLCAoZW5kID0gY29sb3JDdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGN1YmVoZWxpeC5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xuXG4gICAgcmV0dXJuIGN1YmVoZWxpeDtcbiAgfSkoMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1YmVoZWxpeChodWUpO1xuZXhwb3J0IHZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4KGNvbG9yKTtcbiIsInZhciBmcmFtZSA9IDAsIC8vIGlzIGFuIGFuaW1hdGlvbiBmcmFtZSBwZW5kaW5nP1xuICAgIHRpbWVvdXQgPSAwLCAvLyBpcyBhIHRpbWVvdXQgcGVuZGluZz9cbiAgICBpbnRlcnZhbCA9IDAsIC8vIGFyZSBhbnkgdGltZXJzIGFjdGl2ZT9cbiAgICBwb2tlRGVsYXkgPSAxMDAwLCAvLyBob3cgZnJlcXVlbnRseSB3ZSBjaGVjayBmb3IgY2xvY2sgc2tld1xuICAgIHRhc2tIZWFkLFxuICAgIHRhc2tUYWlsLFxuICAgIGNsb2NrTGFzdCA9IDAsXG4gICAgY2xvY2tOb3cgPSAwLFxuICAgIGNsb2NrU2tldyA9IDAsXG4gICAgY2xvY2sgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwib2JqZWN0XCIgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2UgOiBEYXRlLFxuICAgIHNldEZyYW1lID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgOiBmdW5jdGlvbihmKSB7IHNldFRpbWVvdXQoZiwgMTcpOyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gY2xvY2tOb3cgfHwgKHNldEZyYW1lKGNsZWFyTm93KSwgY2xvY2tOb3cgPSBjbG9jay5ub3coKSArIGNsb2NrU2tldyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICBjbG9ja05vdyA9IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lckZsdXNoKCkge1xuICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgKytmcmFtZTsgLy8gUHJldGVuZCB3ZeKAmXZlIHNldCBhbiBhbGFybSwgaWYgd2UgaGF2ZW7igJl0IGFscmVhZHkuXG4gIHZhciB0ID0gdGFza0hlYWQsIGU7XG4gIHdoaWxlICh0KSB7XG4gICAgaWYgKChlID0gY2xvY2tOb3cgLSB0Ll90aW1lKSA+PSAwKSB0Ll9jYWxsLmNhbGwobnVsbCwgZSk7XG4gICAgdCA9IHQuX25leHQ7XG4gIH1cbiAgLS1mcmFtZTtcbn1cblxuZnVuY3Rpb24gd2FrZSgpIHtcbiAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xuICBmcmFtZSA9IHRpbWVvdXQgPSAwO1xuICB0cnkge1xuICAgIHRpbWVyRmx1c2goKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmcmFtZSA9IDA7XG4gICAgbmFwKCk7XG4gICAgY2xvY2tOb3cgPSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBva2UoKSB7XG4gIHZhciBub3cgPSBjbG9jay5ub3coKSwgZGVsYXkgPSBub3cgLSBjbG9ja0xhc3Q7XG4gIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG59XG5cbmZ1bmN0aW9uIG5hcCgpIHtcbiAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xuICB3aGlsZSAodDEpIHtcbiAgICBpZiAodDEuX2NhbGwpIHtcbiAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICB9XG4gIH1cbiAgdGFza1RhaWwgPSB0MDtcbiAgc2xlZXAodGltZSk7XG59XG5cbmZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgaWYgKGZyYW1lKSByZXR1cm47IC8vIFNvb25lc3QgYWxhcm0gYWxyZWFkeSBzZXQsIG9yIHdpbGwgYmUuXG4gIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7IC8vIFN0cmljdGx5IGxlc3MgdGhhbiBpZiB3ZSByZWNvbXB1dGVkIGNsb2NrTm93LlxuICBpZiAoZGVsYXkgPiAyNCkge1xuICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIHRpbWUgLSBjbG9jay5ub3coKSAtIGNsb2NrU2tldyk7XG4gICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW50ZXJ2YWwpIGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpLCBpbnRlcnZhbCA9IHNldEludGVydmFsKHBva2UsIHBva2VEZWxheSk7XG4gICAgZnJhbWUgPSAxLCBzZXRGcmFtZSh3YWtlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtUaW1lcn0gZnJvbSBcIi4vdGltZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICBkZWxheSA9IGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5O1xuICB0LnJlc3RhcnQoZnVuY3Rpb24oZWxhcHNlZCkge1xuICAgIHQuc3RvcCgpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJjYW5jZWxcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBydW5uaW5nXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLlxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG5vZGUsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBzY2hlZHVsZS5vbi5jYWxsKGFjdGl2ZSA/IFwiaW50ZXJydXB0XCIgOiBcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gIH1cblxuICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0KHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICB0cmFuc2l0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUudmFsdWUgfHwgKHNjaGVkdWxlLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldChub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gIH07XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fb24gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3QuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGwuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdGlvbiBmcm9tIFwiLi9zZWxlY3Rpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZVR3ZWVuIGZyb20gXCIuL3N0eWxlVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHQgZnJvbSBcIi4vdGV4dC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dFR3ZWVuIGZyb20gXCIuL3RleHRUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90d2VlbiBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZW5kIGZyb20gXCIuL2VuZC5qc1wiO1xuXG52YXIgaWQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gVHJhbnNpdGlvbihncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gIHRoaXMuX25hbWUgPSBuYW1lO1xuICB0aGlzLl9pZCA9IGlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdGlvbigpLnRyYW5zaXRpb24obmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdJZCgpIHtcbiAgcmV0dXJuICsraWQ7XG59XG5cbnZhciBzZWxlY3Rpb25fcHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZTtcblxuVHJhbnNpdGlvbi5wcm90b3R5cGUgPSB0cmFuc2l0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zaXRpb24sXG4gIHNlbGVjdDogdHJhbnNpdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogdHJhbnNpdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXG4gIG1lcmdlOiB0cmFuc2l0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXG4gIGNhbGw6IHNlbGVjdGlvbl9wcm90b3R5cGUuY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxuICBvbjogdHJhbnNpdGlvbl9vbixcbiAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxuICBzdHlsZTogdHJhbnNpdGlvbl9zdHlsZSxcbiAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXG4gIHRleHRUd2VlbjogdHJhbnNpdGlvbl90ZXh0VHdlZW4sXG4gIHJlbW92ZTogdHJhbnNpdGlvbl9yZW1vdmUsXG4gIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25fZHVyYXRpb24sXG4gIGVhc2U6IHRyYW5zaXRpb25fZWFzZSxcbiAgZW5kOiB0cmFuc2l0aW9uX2VuZFxufTtcbiIsImltcG9ydCB7c2VsZWN0b3J9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICAgIHNjaGVkdWxlKHN1Ymdyb3VwW2ldLCBuYW1lLCBpZCwgaSwgc3ViZ3JvdXAsIGdldChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0b3JBbGx9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBmb3IgKHZhciBjaGlsZHJlbiA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSwgY2hpbGQsIGluaGVyaXQgPSBnZXQobm9kZSwgaWQpLCBrID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgayA8IGw7ICsraykge1xuICAgICAgICAgIGlmIChjaGlsZCA9IGNoaWxkcmVuW2tdKSB7XG4gICAgICAgICAgICBzY2hlZHVsZShjaGlsZCwgbmFtZSwgaWQsIGssIGNoaWxkcmVuLCBpbmhlcml0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goY2hpbGRyZW4pO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHttYXRjaGVyfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zaXRpb24pIHtcbiAgaWYgKHRyYW5zaXRpb24uX2lkICE9PSB0aGlzLl9pZCkgdGhyb3cgbmV3IEVycm9yO1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZDAgPSB0aGlzLl9pZCxcbiAgICAgIGlkMSA9IG5ld0lkKCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgdmFyIGluaGVyaXQgPSBnZXQobm9kZSwgaWQwKTtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQxLCBpLCBncm91cCwge1xuICAgICAgICAgIHRpbWU6IGluaGVyaXQudGltZSArIGluaGVyaXQuZGVsYXkgKyBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgIGR1cmF0aW9uOiBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGVhc2U6IGluaGVyaXQuZWFzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZDEpO1xufVxuIiwiaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudHdlZW4oXCJ0ZXh0XCIsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IHRleHRGdW5jdGlvbih0d2VlblZhbHVlKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSkpXG4gICAgICA6IHRleHRDb25zdGFudCh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlRnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLl9fdHJhbnNpdGlvbikgaWYgKCtpICE9PSBpZCkgcmV0dXJuO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9uKFwiZW5kLnJlbW92ZVwiLCByZW1vdmVGdW5jdGlvbih0aGlzLl9pZCkpO1xufVxuIiwiaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgb24wLCBvbjEsIHRoYXQgPSB0aGlzLCBpZCA9IHRoYXQuX2lkLCBzaXplID0gdGhhdC5zaXplKCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgY2FuY2VsID0ge3ZhbHVlOiByZWplY3R9LFxuICAgICAgICBlbmQgPSB7dmFsdWU6IGZ1bmN0aW9uKCkgeyBpZiAoLS1zaXplID09PSAwKSByZXNvbHZlKCk7IH19O1xuXG4gICAgdGhhdC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKG9uICE9PSBvbjApIHtcbiAgICAgICAgb24xID0gKG9uMCA9IG9uKS5jb3B5KCk7XG4gICAgICAgIG9uMS5fLmNhbmNlbC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmludGVycnVwdC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmVuZC5wdXNoKGVuZCk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwgdHlwZSwgc2VsZWN0aW9uKSB7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtjdXN0b21FdmVudCwgZXZlbnQsIHRvdWNoLCBtb3VzZSwgc2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IEJydXNoRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifSxcbiAgICBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn0sXG4gICAgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn0sXG4gICAgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbmZ1bmN0aW9uIG51bWJlcjEoZSkge1xuICByZXR1cm4gWytlWzBdLCArZVsxXV07XG59XG5cbmZ1bmN0aW9uIG51bWJlcjIoZSkge1xuICByZXR1cm4gW251bWJlcjEoZVswXSksIG51bWJlcjEoZVsxXSldO1xufVxuXG5mdW5jdGlvbiB0b3VjaGVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgIHJldHVybiB0b3VjaCh0YXJnZXQsIGV2ZW50LnRvdWNoZXMsIGlkZW50aWZpZXIpO1xuICB9O1xufVxuXG52YXIgWCA9IHtcbiAgbmFtZTogXCJ4XCIsXG4gIGhhbmRsZXM6IFtcIndcIiwgXCJlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHgsIGUpIHsgcmV0dXJuIHggPT0gbnVsbCA/IG51bGwgOiBbWyt4WzBdLCBlWzBdWzFdXSwgWyt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgPT0gbnVsbCA/IG51bGwgOiBbW2VbMF1bMF0sICt5WzBdXSwgW2VbMV1bMF0sICt5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcIndcIiwgXCJlXCIsIFwic1wiLCBcIm53XCIsIFwibmVcIiwgXCJzd1wiLCBcInNlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSA9PSBudWxsID8gbnVsbCA6IG51bWJlcjIoeHkpOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgc3ZnID0gdGhpcy5vd25lclNWR0VsZW1lbnQgfHwgdGhpcztcbiAgaWYgKHN2Zy5oYXNBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIpKSB7XG4gICAgc3ZnID0gc3ZnLnZpZXdCb3guYmFzZVZhbDtcbiAgICByZXR1cm4gW1tzdmcueCwgc3ZnLnldLCBbc3ZnLnggKyBzdmcud2lkdGgsIHN2Zy55ICsgc3ZnLmhlaWdodF1dO1xuICB9XG4gIHJldHVybiBbWzAsIDBdLCBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG4vLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxuZnVuY3Rpb24gbG9jYWwobm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX19icnVzaCkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgcmV0dXJuIG5vZGUuX19icnVzaDtcbn1cblxuZnVuY3Rpb24gZW1wdHkoZXh0ZW50KSB7XG4gIHJldHVybiBleHRlbnRbMF1bMF0gPT09IGV4dGVudFsxXVswXVxuICAgICAgfHwgZXh0ZW50WzBdWzFdID09PSBleHRlbnRbMV1bMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFNlbGVjdGlvbihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX19icnVzaDtcbiAgcmV0dXJuIHN0YXRlID8gc3RhdGUuZGltLm91dHB1dChzdGF0ZS5zZWxlY3Rpb24pIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWCgpIHtcbiAgcmV0dXJuIGJydXNoKFgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hZKCkge1xuICByZXR1cm4gYnJ1c2goWSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gYnJ1c2goWFkpO1xufVxuXG5mdW5jdGlvbiBicnVzaChkaW0pIHtcbiAgdmFyIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIGtleXMgPSB0cnVlLFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgICB9KTtcblxuICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgIC5kYXRhKFt0eXBlKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICB2YXIgaGFuZGxlID0gZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICBncm91cFxuICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBicnVzaC5tb3ZlID0gZnVuY3Rpb24oZ3JvdXAsIHNlbGVjdGlvbikge1xuICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIHNlbGVjdGlvbjEgPT09IG51bGwgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgIT09IG51bGwgJiYgc2VsZWN0aW9uMSAhPT0gbnVsbCA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoKS5icnVzaCgpLmVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgYnJ1c2gubW92ZShncm91cCwgbnVsbCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICByZXR1cm4gKCFjbGVhbiAmJiB0aGF0Ll9fYnJ1c2guZW1pdHRlcikgfHwgbmV3IEVtaXR0ZXIodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBFbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgZWxzZSB0aGlzLmVtaXQoXCJicnVzaFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYnJ1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgQnJ1c2hFdmVudChicnVzaCwgdHlwZSwgZGltLm91dHB1dCh0aGlzLnN0YXRlLnNlbGVjdGlvbikpLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nICYmICFldmVudC50b3VjaGVzKSByZXR1cm47XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICB0eXBlID0gZXZlbnQudGFyZ2V0Ll9fZGF0YV9fLnR5cGUsXG4gICAgICAgIG1vZGUgPSAoa2V5cyAmJiBldmVudC5tZXRhS2V5ID8gdHlwZSA9IFwib3ZlcmxheVwiIDogdHlwZSkgPT09IFwic2VsZWN0aW9uXCIgPyBNT0RFX0RSQUcgOiAoa2V5cyAmJiBldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFKSxcbiAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgIHN0YXRlID0gbG9jYWwodGhhdCksXG4gICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcbiAgICAgICAgRSA9IGV4dGVudFsxXVswXSwgZTAsIGUxLFxuICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgIGR4ID0gMCxcbiAgICAgICAgZHkgPSAwLFxuICAgICAgICBtb3ZpbmcsXG4gICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYga2V5cyAmJiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgbG9ja1gsXG4gICAgICAgIGxvY2tZLFxuICAgICAgICBwb2ludGVyID0gZXZlbnQudG91Y2hlcyA/IHRvdWNoZXIoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uaWRlbnRpZmllcikgOiBtb3VzZSxcbiAgICAgICAgcG9pbnQwID0gcG9pbnRlcih0aGF0KSxcbiAgICAgICAgcG9pbnQgPSBwb2ludDAsXG4gICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cywgdHJ1ZSkuYmVmb3Jlc3RhcnQoKTtcblxuICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgaWYgKHNlbGVjdGlvbikgbW92aW5nID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtcbiAgICAgICAgW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSxcbiAgICAgICAgW2UwID0gZGltID09PSBZID8gRSA6IHcwLCBzMCA9IGRpbSA9PT0gWCA/IFMgOiBuMF1cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XG4gICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgIH1cblxuICAgIHcxID0gdzA7XG4gICAgbjEgPSBuMDtcbiAgICBlMSA9IGUwO1xuICAgIHMxID0gczA7XG5cbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGVtaXQubW92ZWQgPSBtb3ZlZDtcbiAgICAgIGVtaXQuZW5kZWQgPSBlbmRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgICBpZiAoa2V5cykgdmlld1xuICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuXG4gICAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgIGVtaXQuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgdmFyIHBvaW50MSA9IHBvaW50ZXIodGhhdCk7XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQxWzBdIC0gcG9pbnRbMF0pID4gTWF0aC5hYnMocG9pbnQxWzFdIC0gcG9pbnRbMV0pKSBsb2NrWSA9IHRydWU7XG4gICAgICAgIGVsc2UgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgcG9pbnQgPSBwb2ludDE7XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgbW92ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUoKSB7XG4gICAgICB2YXIgdDtcblxuICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9IQU5ETEU6IHtcbiAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblggPiAwKSBkeCA9IE1hdGgubWF4KFcgLSBlMCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwLCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBuMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBNYXRoLm1heChOIC0gczAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIHcxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgZTAgKyBkeCAqIHNpZ25YKSk7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdFbmFibGUoZXZlbnQudmlldywgbW92aW5nKTtcbiAgICAgICAgdmlldy5vbihcImtleWRvd24uYnJ1c2gga2V5dXAuYnJ1c2ggbW91c2Vtb3ZlLmJydXNoIG1vdXNldXAuYnJ1c2hcIiwgbnVsbCk7XG4gICAgICB9XG4gICAgICBncm91cC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIik7XG4gICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KTtcbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIChvbiBzdGFydCkhXG4gICAgICBpZiAoZW1wdHkoc2VsZWN0aW9uKSkgc3RhdGUuc2VsZWN0aW9uID0gbnVsbCwgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICBlbWl0LmVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZCgpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTEgLSBkeDsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxIC0gZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5dXBwZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIGlmIChzaGlmdGluZykge1xuICAgICAgICAgICAgbG9ja1ggPSBsb2NrWSA9IHNoaWZ0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0VcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9TUEFDRSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5tb3ZlZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kZWQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgIHN0YXRlLmV4dGVudCA9IG51bWJlcjIoZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChudW1iZXIyKF8pKSwgYnJ1c2gpIDogZXh0ZW50O1xuICB9O1xuXG4gIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IGZpbHRlcjtcbiAgfTtcblxuICBicnVzaC50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgYnJ1c2guaGFuZGxlU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoYW5kbGVTaXplID0gK18sIGJydXNoKSA6IGhhbmRsZVNpemU7XG4gIH07XG5cbiAgYnJ1c2gua2V5TW9kaWZpZXJzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGtleXMgPSAhIV8sIGJydXNoKSA6IGtleXM7XG4gIH07XG5cbiAgYnJ1c2gub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gYnJ1c2ggOiB2YWx1ZTtcbiAgfTtcblxuICByZXR1cm4gYnJ1c2g7XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnRcIjtcbmltcG9ydCBwb2ludCBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCB0b3VjaGVzLCBpZGVudGlmaWVyKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgaWRlbnRpZmllciA9IHRvdWNoZXMsIHRvdWNoZXMgPSBzb3VyY2VFdmVudCgpLmNoYW5nZWRUb3VjaGVzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcyA/IHRvdWNoZXMubGVuZ3RoIDogMCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKHRvdWNoID0gdG91Y2hlc1tpXSkuaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmV0dXJuIHBvaW50KG5vZGUsIHRvdWNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3RvclwiO1xuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCB2YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG59XG4iLCJpbXBvcnQgdmFyaWFuY2UgZnJvbSBcIi4vdmFyaWFuY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgdmFyIHYgPSB2YXJpYW5jZShhcnJheSwgZik7XG4gIHJldHVybiB2ID8gTWF0aC5zcXJ0KHYpIDogdjtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gMCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG1lYW4gPSAwLFxuICAgICAgdmFsdWUsXG4gICAgICBkZWx0YSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobSA+IDEpIHJldHVybiBzdW0gLyAobSAtIDEpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFttaW4sIG1heF07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgKiBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgLSBpKSAvIHN0ZXA7XG4gIH1cblxuICBpZiAocmV2ZXJzZSkgdGlja3MucmV2ZXJzZSgpO1xuXG4gIHJldHVybiB0aWNrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKTtcbiAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpXG4gICAgICA6IC1NYXRoLnBvdygxMCwgLXBvd2VyKSAvIChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHAsIHZhbHVlb2YpIHtcbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkgdmFsdWVvZiA9IG51bWJlcjtcbiAgaWYgKCEobiA9IHZhbHVlcy5sZW5ndGgpKSByZXR1cm47XG4gIGlmICgocCA9ICtwKSA8PSAwIHx8IG4gPCAyKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzWzBdLCAwLCB2YWx1ZXMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzW24gLSAxXSwgbiAtIDEsIHZhbHVlcyk7XG4gIHZhciBuLFxuICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgaTAgPSBNYXRoLmZsb29yKGkpLFxuICAgICAgdmFsdWUwID0gK3ZhbHVlb2YodmFsdWVzW2kwXSwgaTAsIHZhbHVlcyksXG4gICAgICB2YWx1ZTEgPSArdmFsdWVvZih2YWx1ZXNbaTAgKyAxXSwgaTAgKyAxLCB2YWx1ZXMpO1xuICByZXR1cm4gdmFsdWUwICsgKHZhbHVlMSAtIHZhbHVlMCkgKiAoaSAtIGkwKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IG4sXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBpZiAobSkgcmV0dXJuIHN1bSAvIG07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi9xdWFudGlsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBudW1iZXJzID0gW107XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBxdWFudGlsZShudW1iZXJzLnNvcnQoYXNjZW5kaW5nKSwgMC41KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJleHBvcnQgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAob2JqZWN0LCBmKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwO1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChmKG8gPSBvYmplY3RbaV0sIGksIG9iamVjdCksIG8pO1xuICB9XG5cbiAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwO1xuIiwiaW1wb3J0IG1hcCBmcm9tIFwiLi9tYXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gW10sXG4gICAgICBzb3J0S2V5cyA9IFtdLFxuICAgICAgc29ydFZhbHVlcyxcbiAgICAgIHJvbGx1cCxcbiAgICAgIG5lc3Q7XG5cbiAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xuICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkge1xuICAgICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgYXJyYXkuc29ydChzb3J0VmFsdWVzKTtcbiAgICAgIHJldHVybiByb2xsdXAgIT0gbnVsbCA/IHJvbGx1cChhcnJheSkgOiBhcnJheTtcbiAgICB9XG5cbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICBrZXlWYWx1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHZhbHVlc0J5S2V5ID0gbWFwKCksXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUmVzdWx0KCk7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleSh2YWx1ZSA9IGFycmF5W2ldKSArIFwiXCIpKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWVzQnlLZXkuZWFjaChmdW5jdGlvbih2YWx1ZXMsIGtleSkge1xuICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgIGlmICgrK2RlcHRoID4ga2V5cy5sZW5ndGgpIHJldHVybiBtYXA7XG4gICAgdmFyIGFycmF5LCBzb3J0S2V5ID0gc29ydEtleXNbZGVwdGggLSAxXTtcbiAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICBlbHNlIGFycmF5ID0gW10sIG1hcC5lYWNoKGZ1bmN0aW9uKHYsIGspIHsgYXJyYXkucHVzaCh7a2V5OiBrLCB2YWx1ZXM6IGVudHJpZXModiwgZGVwdGgpfSk7IH0pO1xuICAgIHJldHVybiBzb3J0S2V5ICE9IG51bGwgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTsgfSkgOiBhcnJheTtcbiAgfVxuXG4gIHJldHVybiBuZXN0ID0ge1xuICAgIG9iamVjdDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVPYmplY3QsIHNldE9iamVjdCk7IH0sXG4gICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gZW50cmllcyhhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApLCAwKTsgfSxcbiAgICBrZXk6IGZ1bmN0aW9uKGQpIHsga2V5cy5wdXNoKGQpOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0VmFsdWVzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0VmFsdWVzID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHJvbGx1cDogZnVuY3Rpb24oZikgeyByb2xsdXAgPSBmOyByZXR1cm4gbmVzdDsgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBtYXAoKTtcbn1cblxuZnVuY3Rpb24gc2V0TWFwKG1hcCwga2V5LCB2YWx1ZSkge1xuICBtYXAuc2V0KGtleSwgdmFsdWUpO1xufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIG1hcCwgcHJlZml4fSBmcm9tIFwiLi9tYXBcIjtcblxuZnVuY3Rpb24gU2V0KCkge31cblxudmFyIHByb3RvID0gbWFwLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZXQsXG4gIGhhczogcHJvdG8uaGFzLFxuICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgKz0gXCJcIjtcbiAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gIHNpemU6IHByb3RvLnNpemUsXG4gIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgZWFjaDogcHJvdG8uZWFjaFxufTtcblxuZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xuICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2V0KSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSkgeyBzZXQuYWRkKHZhbHVlKTsgfSk7XG5cbiAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGluaXRSYW5nZShkb21haW4sIHJhbmdlKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLnJhbmdlKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMucmFuZ2UocmFuZ2UpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRJbnRlcnBvbGF0b3IoZG9tYWluLCBpbnRlcnBvbGF0b3IpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMuaW50ZXJwb2xhdG9yKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMuaW50ZXJwb2xhdG9yKGludGVycG9sYXRvcikuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbiIsImltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmV4cG9ydCB2YXIgaW1wbGljaXQgPSB7bmFtZTogXCJpbXBsaWNpdFwifTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbCgpIHtcbiAgdmFyIGluZGV4ID0gbWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBtYXAoKTtcbiAgICB2YXIgaSA9IC0xLCBuID0gXy5sZW5ndGgsIGQsIGtleTtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoa2V5ID0gKGQgPSBfW2ldKSArIFwiXCIpKSBpbmRleC5zZXQoa2V5LCBkb21haW4ucHVzaChkKSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbChkb21haW4sIHJhbmdlKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJpbXBvcnQge3JhbmdlIGFzIHNlcXVlbmNlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgb3JkaW5hbCBmcm9tIFwiLi9vcmRpbmFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhbmQoKSB7XG4gIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICBvcmRpbmFsUmFuZ2UgPSBzY2FsZS5yYW5nZSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgc3RlcCxcbiAgICAgIGJhbmR3aWR0aCxcbiAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICBwYWRkaW5nSW5uZXIgPSAwLFxuICAgICAgcGFkZGluZ091dGVyID0gMCxcbiAgICAgIGFsaWduID0gMC41O1xuXG4gIGRlbGV0ZSBzY2FsZS51bmtub3duO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBkb21haW4oKS5sZW5ndGgsXG4gICAgICAgIHJldmVyc2UgPSByYW5nZVsxXSA8IHJhbmdlWzBdLFxuICAgICAgICBzdGFydCA9IHJhbmdlW3JldmVyc2UgLSAwXSxcbiAgICAgICAgc3RvcCA9IHJhbmdlWzEgLSByZXZlcnNlXTtcbiAgICBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgxLCBuIC0gcGFkZGluZ0lubmVyICsgcGFkZGluZ091dGVyICogMik7XG4gICAgaWYgKHJvdW5kKSBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICBzdGFydCArPSAoc3RvcCAtIHN0YXJ0IC0gc3RlcCAqIChuIC0gcGFkZGluZ0lubmVyKSkgKiBhbGlnbjtcbiAgICBiYW5kd2lkdGggPSBzdGVwICogKDEgLSBwYWRkaW5nSW5uZXIpO1xuICAgIGlmIChyb3VuZCkgc3RhcnQgPSBNYXRoLnJvdW5kKHN0YXJ0KSwgYmFuZHdpZHRoID0gTWF0aC5yb3VuZChiYW5kd2lkdGgpO1xuICAgIHZhciB2YWx1ZXMgPSBzZXF1ZW5jZShuKS5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gc3RhcnQgKyBzdGVwICogaTsgfSk7XG4gICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuYmFuZHdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmR3aWR0aDtcbiAgfTtcblxuICBzY2FsZS5zdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHN0ZXA7XG4gIH07XG5cbiAgc2NhbGUucm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWluKDEsIHBhZGRpbmdPdXRlciA9ICtfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgXyksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9ICtfLCByZXNjYWxlKCkpIDogcGFkZGluZ091dGVyO1xuICB9O1xuXG4gIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kKGRvbWFpbigpLCByYW5nZSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShyZXNjYWxlKCksIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBvaW50aXNoKHNjYWxlKSB7XG4gIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICBzY2FsZS5wYWRkaW5nID0gc2NhbGUucGFkZGluZ091dGVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ0lubmVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcG9pbnRpc2goY29weSgpKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCgpIHtcbiAgcmV0dXJuIHBvaW50aXNoKGJhbmQuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYWRkaW5nSW5uZXIoMSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bWFwLCBzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihkb21haW4pIHtcbiAgdmFyIGEgPSBkb21haW5bMF0sIGIgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdLCB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCByYW5nZSwgaW50ZXJwb2xhdGUpKSkodHJhbnNmb3JtKGNsYW1wKHgpKSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIGNsYW1wKHVudHJhbnNmb3JtKChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgaW50ZXJwb2xhdGVOdW1iZXIpKSkoeSkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwLmNhbGwoXywgbnVtYmVyKSwgY2xhbXAgPT09IGlkZW50aXR5IHx8IChjbGFtcCA9IGNsYW1wZXIoZG9tYWluKSksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gc2xpY2UuY2FsbChfKSwgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSBfID8gY2xhbXBlcihkb21haW4pIDogaWRlbnRpdHksIHNjYWxlKSA6IGNsYW1wICE9PSBpZGVudGl0eTtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0LCB1KSB7XG4gICAgdHJhbnNmb3JtID0gdCwgdW50cmFuc2Zvcm0gPSB1O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXModHJhbnNmb3JtLCB1bnRyYW5zZm9ybSkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoKSh0cmFuc2Zvcm0sIHVudHJhbnNmb3JtKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyh+KT8oW2EteiVdKT8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHtcbiAgICBmaWxsOiBtYXRjaFsxXSxcbiAgICBhbGlnbjogbWF0Y2hbMl0sXG4gICAgc2lnbjogbWF0Y2hbM10sXG4gICAgc3ltYm9sOiBtYXRjaFs0XSxcbiAgICB6ZXJvOiBtYXRjaFs1XSxcbiAgICB3aWR0aDogbWF0Y2hbNl0sXG4gICAgY29tbWE6IG1hdGNoWzddLFxuICAgIHByZWNpc2lvbjogbWF0Y2hbOF0gJiYgbWF0Y2hbOF0uc2xpY2UoMSksXG4gICAgdHJpbTogbWF0Y2hbOV0sXG4gICAgdHlwZTogbWF0Y2hbMTBdXG4gIH0pO1xufVxuXG5mb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG5leHBvcnQgZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICB0aGlzLmZpbGwgPSBzcGVjaWZpZXIuZmlsbCA9PT0gdW5kZWZpbmVkID8gXCIgXCIgOiBzcGVjaWZpZXIuZmlsbCArIFwiXCI7XG4gIHRoaXMuYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24gPT09IHVuZGVmaW5lZCA/IFwiPlwiIDogc3BlY2lmaWVyLmFsaWduICsgXCJcIjtcbiAgdGhpcy5zaWduID0gc3BlY2lmaWVyLnNpZ24gPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogc3BlY2lmaWVyLnNpZ24gKyBcIlwiO1xuICB0aGlzLnN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIuc3ltYm9sICsgXCJcIjtcbiAgdGhpcy56ZXJvID0gISFzcGVjaWZpZXIuemVybztcbiAgdGhpcy53aWR0aCA9IHNwZWNpZmllci53aWR0aCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci53aWR0aDtcbiAgdGhpcy5jb21tYSA9ICEhc3BlY2lmaWVyLmNvbW1hO1xuICB0aGlzLnByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIucHJlY2lzaW9uO1xuICB0aGlzLnRyaW0gPSAhIXNwZWNpZmllci50cmltO1xuICB0aGlzLnR5cGUgPSBzcGVjaWZpZXIudHlwZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci50eXBlICsgXCJcIjtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09PSB1bmRlZmluZWQgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyAodGhpcy50cmltID8gXCJ+XCIgOiBcIlwiKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKVxuICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbCh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV07XG4gIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbn1cbiIsImltcG9ydCBmb3JtYXRQcmVmaXhBdXRvIGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBmb3JtYXRSb3VuZGVkIGZyb20gXCIuL2Zvcm1hdFJvdW5kZWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXG4gIFwiZFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTsgfSxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuaW1wb3J0IGZvcm1hdEdyb3VwIGZyb20gXCIuL2Zvcm1hdEdyb3VwLmpzXCI7XG5pbXBvcnQgZm9ybWF0TnVtZXJhbHMgZnJvbSBcIi4vZm9ybWF0TnVtZXJhbHMuanNcIjtcbmltcG9ydCBmb3JtYXRTcGVjaWZpZXIgZnJvbSBcIi4vZm9ybWF0U3BlY2lmaWVyLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHJpbSBmcm9tIFwiLi9mb3JtYXRUcmltLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHlwZXMgZnJvbSBcIi4vZm9ybWF0VHlwZXMuanNcIjtcbmltcG9ydCB7cHJlZml4RXhwb25lbnR9IGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eS5qc1wiO1xuXG52YXIgbWFwID0gQXJyYXkucHJvdG90eXBlLm1hcCxcbiAgICBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIsK1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxvY2FsZSkge1xuICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgPT09IHVuZGVmaW5lZCB8fCBsb2NhbGUudGhvdXNhbmRzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdEdyb3VwKG1hcC5jYWxsKGxvY2FsZS5ncm91cGluZywgTnVtYmVyKSwgbG9jYWxlLnRob3VzYW5kcyArIFwiXCIpLFxuICAgICAgY3VycmVuY3lQcmVmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMF0gKyBcIlwiLFxuICAgICAgY3VycmVuY3lTdWZmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMV0gKyBcIlwiLFxuICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsID09PSB1bmRlZmluZWQgPyBcIi5cIiA6IGxvY2FsZS5kZWNpbWFsICsgXCJcIixcbiAgICAgIG51bWVyYWxzID0gbG9jYWxlLm51bWVyYWxzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdE51bWVyYWxzKG1hcC5jYWxsKGxvY2FsZS5udW1lcmFscywgU3RyaW5nKSksXG4gICAgICBwZXJjZW50ID0gbG9jYWxlLnBlcmNlbnQgPT09IHVuZGVmaW5lZCA/IFwiJVwiIDogbG9jYWxlLnBlcmNlbnQgKyBcIlwiLFxuICAgICAgbWludXMgPSBsb2NhbGUubWludXMgPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogbG9jYWxlLm1pbnVzICsgXCJcIixcbiAgICAgIG5hbiA9IGxvY2FsZS5uYW4gPT09IHVuZGVmaW5lZCA/IFwiTmFOXCIgOiBsb2NhbGUubmFuICsgXCJcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lQcmVmaXggOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVN1ZmZpeCA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgc2lnbi4gLTAgaXMgbm90IGxlc3MgdGhhbiAwLCBidXQgMSAvIC0wIGlzIVxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCAxIC8gdmFsdWUgPCAwO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyBuYW4gOiBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gYWZ0ZXIgZm9ybWF0dGluZywgYW5kIG5vIGV4cGxpY2l0IHBvc2l0aXZlIHNpZ24gaXMgcmVxdWVzdGVkLCBoaWRlIHRoZSBzaWduLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDAgJiYgc2lnbiAhPT0gXCIrXCIpIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBtaW51cykgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZS5qc1wiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciBmb3JtYXQ7XG5leHBvcnQgdmFyIGZvcm1hdFByZWZpeDtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRlY2ltYWw6IFwiLlwiLFxuICB0aG91c2FuZHM6IFwiLFwiLFxuICBncm91cGluZzogWzNdLFxuICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXSxcbiAgbWludXM6IFwiLVwiXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrcywgdGlja0luY3JlbWVudH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQgY29udGludW91cywge2NvcHksIGlkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgc3RhcnQgPSBkW2kwXSxcbiAgICAgICAgc3RvcCA9IGRbaTFdLFxuICAgICAgICBzdGVwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH1cblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCB7Y29weSwgaWRlbnRpdHksIHRyYW5zZm9ybWVyfSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Qb3coZXhwb25lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGV4cG9uZW50KSA6IE1hdGgucG93KHgsIGV4cG9uZW50KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3FydCh4KSB7XG4gIHJldHVybiB4IDwgMCA/IC1NYXRoLnNxcnQoLXgpIDogTWF0aC5zcXJ0KHgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TcXVhcmUoeCkge1xuICByZXR1cm4geCA8IDAgPyAteCAqIHggOiB4ICogeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvd2lzaCh0cmFuc2Zvcm0pIHtcbiAgdmFyIHNjYWxlID0gdHJhbnNmb3JtKGlkZW50aXR5LCBpZGVudGl0eSksXG4gICAgICBleHBvbmVudCA9IDE7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICByZXR1cm4gZXhwb25lbnQgPT09IDEgPyB0cmFuc2Zvcm0oaWRlbnRpdHksIGlkZW50aXR5KVxuICAgICAgICA6IGV4cG9uZW50ID09PSAwLjUgPyB0cmFuc2Zvcm0odHJhbnNmb3JtU3FydCwgdHJhbnNmb3JtU3F1YXJlKVxuICAgICAgICA6IHRyYW5zZm9ybSh0cmFuc2Zvcm1Qb3coZXhwb25lbnQpLCB0cmFuc2Zvcm1Qb3coMSAvIGV4cG9uZW50KSk7XG4gIH1cblxuICBzY2FsZS5leHBvbmVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHBvbmVudCA9ICtfLCByZXNjYWxlKCkpIDogZXhwb25lbnQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBvdygpIHtcbiAgdmFyIHNjYWxlID0gcG93aXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgcG93KCkpLmV4cG9uZW50KHNjYWxlLmV4cG9uZW50KCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcXJ0KCkge1xuICByZXR1cm4gcG93LmFwcGx5KG51bGwsIGFyZ3VtZW50cykuZXhwb25lbnQoMC41KTtcbn1cbiIsInZhciB0MCA9IG5ldyBEYXRlLFxuICAgIHQxID0gbmV3IERhdGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgPyBuZXcgRGF0ZSA6IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW10sIHByZXZpb3VzO1xuICAgIHN0YXJ0ID0gaW50ZXJ2YWwuY2VpbChzdGFydCk7XG4gICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgIGRvIHJhbmdlLnB1c2gocHJldmlvdXMgPSBuZXcgRGF0ZSgrc3RhcnQpKSwgb2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCk7XG4gICAgd2hpbGUgKHByZXZpb3VzIDwgc3RhcnQgJiYgc3RhcnQgPCBzdG9wKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkgZGF0ZS5zZXRUaW1lKGRhdGUgLSAxKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB0MC5zZXRUaW1lKCtzdGFydCksIHQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDApLCBmbG9vcmkodDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAsIHQxKSk7XG4gICAgfTtcblxuICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgIDogaW50ZXJ2YWwuZmlsdGVyKGZpZWxkXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGludGVydmFsO1xufVxuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciBtaWxsaXNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAvLyBub29wXG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxubWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGspICogayk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWlsbGlzZWNvbmQ7XG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc2Vjb25kO1xuZXhwb3J0IHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuIiwiZXhwb3J0IHZhciBkdXJhdGlvblNlY29uZCA9IDFlMztcbmV4cG9ydCB2YXIgZHVyYXRpb25NaW51dGUgPSA2ZTQ7XG5leHBvcnQgdmFyIGR1cmF0aW9uSG91ciA9IDM2ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uRGF5ID0gODY0ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uV2VlayA9IDYwNDhlNTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBtaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWludXRlO1xuZXhwb3J0IHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCAtIGRhdGUuZ2V0TWludXRlcygpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5LCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIGRheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRheTtcbmV4cG9ydCB2YXIgZGF5cyA9IGRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB3ZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHN1bmRheSA9IHdlZWtkYXkoMCk7XG5leHBvcnQgdmFyIG1vbmRheSA9IHdlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHR1ZXNkYXkgPSB3ZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB0aHVyc2RheSA9IHdlZWtkYXkoNCk7XG5leHBvcnQgdmFyIGZyaWRheSA9IHdlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciBzdW5kYXlzID0gc3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBtb25kYXlzID0gbW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHdlZG5lc2RheXMgPSB3ZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHRodXJzZGF5cyA9IHRodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBzYXR1cmRheXMgPSBzYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciBtb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb250aDtcbmV4cG9ydCB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNNaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01pbnV0ZTtcbmV4cG9ydCB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXJ9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNIb3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNIb3VyO1xuZXhwb3J0IHZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXl9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNEYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0RheTtcbmV4cG9ydCB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbmZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciB1dGNTdW5kYXkgPSB1dGNXZWVrZGF5KDApO1xuZXhwb3J0IHZhciB1dGNNb25kYXkgPSB1dGNXZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5ID0gdXRjV2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5ID0gdXRjV2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXkgPSB1dGNXZWVrZGF5KDQpO1xuZXhwb3J0IHZhciB1dGNGcmlkYXkgPSB1dGNXZWVrZGF5KDUpO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheSA9IHV0Y1dlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5cyA9IHV0Y1N1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheXMgPSB1dGNUdWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5cyA9IHV0Y0ZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXlzID0gdXRjU2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IHtcbiAgdGltZURheSxcbiAgdGltZVN1bmRheSxcbiAgdGltZU1vbmRheSxcbiAgdGltZVRodXJzZGF5LFxuICB0aW1lWWVhcixcbiAgdXRjRGF5LFxuICB1dGNTdW5kYXksXG4gIHV0Y01vbmRheSxcbiAgdXRjVGh1cnNkYXksXG4gIHV0Y1llYXJcbn0gZnJvbSBcImQzLXRpbWVcIjtcblxuZnVuY3Rpb24gbG9jYWxEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbn1cblxuZnVuY3Rpb24gdXRjRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbn1cblxuZnVuY3Rpb24gbmV3RGF0ZSh5LCBtLCBkKSB7XG4gIHJldHVybiB7eTogeSwgbTogbSwgZDogZCwgSDogMCwgTTogMCwgUzogMCwgTDogMH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdExvY2FsZShsb2NhbGUpIHtcbiAgdmFyIGxvY2FsZV9kYXRlVGltZSA9IGxvY2FsZS5kYXRlVGltZSxcbiAgICAgIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsXG4gICAgICBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLFxuICAgICAgbG9jYWxlX3BlcmlvZHMgPSBsb2NhbGUucGVyaW9kcyxcbiAgICAgIGxvY2FsZV93ZWVrZGF5cyA9IGxvY2FsZS5kYXlzLFxuICAgICAgbG9jYWxlX3Nob3J0V2Vla2RheXMgPSBsb2NhbGUuc2hvcnREYXlzLFxuICAgICAgbG9jYWxlX21vbnRocyA9IGxvY2FsZS5tb250aHMsXG4gICAgICBsb2NhbGVfc2hvcnRNb250aHMgPSBsb2NhbGUuc2hvcnRNb250aHM7XG5cbiAgdmFyIHBlcmlvZFJlID0gZm9ybWF0UmUobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgcGVyaW9kTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICB3ZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBtb250aFJlID0gZm9ybWF0UmUobG9jYWxlX21vbnRocyksXG4gICAgICBtb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfbW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydE1vbnRocyksXG4gICAgICBzaG9ydE1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG5cbiAgdmFyIGZvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0V2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0U2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0TW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdE1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0SG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdERheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0TWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0TWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0UGVyaW9kLFxuICAgIFwicVwiOiBmb3JtYXRRdWFydGVyLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0U2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0V2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0V2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0WWVhcixcbiAgICBcIllcIjogZm9ybWF0RnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFpvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHV0Y0Zvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFVUQ1Nob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0VVRDV2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0VVRDU2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0VVRDTW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0VVRDSG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0VVRDTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0VVRDUGVyaW9kLFxuICAgIFwicVwiOiBmb3JtYXRVVENRdWFydGVyLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0VVRDV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICBcIllcIjogZm9ybWF0VVRDRnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHBhcnNlcyA9IHtcbiAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IHBhcnNlV2Vla2RheSxcbiAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgIFwiY1wiOiBwYXJzZUxvY2FsZURhdGVUaW1lLFxuICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImZcIjogcGFyc2VNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IHBhcnNlSG91cjI0LFxuICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcbiAgICBcImpcIjogcGFyc2VEYXlPZlllYXIsXG4gICAgXCJMXCI6IHBhcnNlTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBwYXJzZU1pbnV0ZXMsXG4gICAgXCJwXCI6IHBhcnNlUGVyaW9kLFxuICAgIFwicVwiOiBwYXJzZVF1YXJ0ZXIsXG4gICAgXCJRXCI6IHBhcnNlVW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogcGFyc2VTZWNvbmRzLFxuICAgIFwidVwiOiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogcGFyc2VXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXG4gICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIlpcIjogcGFyc2Vab25lLFxuICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgLy8gVGhlc2UgcmVjdXJzaXZlIGRpcmVjdGl2ZSBkZWZpbml0aW9ucyBtdXN0IGJlIGRlZmVycmVkLlxuICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCBmb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgdXRjRm9ybWF0cyk7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgZWxzZSBwYWQgPSBjID09PSBcImVcIiA/IFwiIFwiIDogXCIwXCI7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBaKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIGQgPSBuZXdEYXRlKDE5MDAsIHVuZGVmaW5lZCwgMSksXG4gICAgICAgICAgaSA9IHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nICs9IFwiXCIsIDApLFxuICAgICAgICAgIHdlZWssIGRheTtcbiAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAvLyBJZiBhIFVOSVggdGltZXN0YW1wIGlzIHNwZWNpZmllZCwgcmV0dXJuIGl0LlxuICAgICAgaWYgKFwiUVwiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLlEpO1xuICAgICAgaWYgKFwic1wiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLnMgKiAxMDAwICsgKFwiTFwiIGluIGQgPyBkLkwgOiAwKSk7XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgdXRjUGFyc2UsIG5ldmVyIHVzZSB0aGUgbG9jYWwgdGltZXpvbmUuXG4gICAgICBpZiAoWiAmJiAhKFwiWlwiIGluIGQpKSBkLlogPSAwO1xuXG4gICAgICAvLyBUaGUgYW0tcG0gZmxhZyBpcyAwIGZvciBBTSwgYW5kIDEgZm9yIFBNLlxuICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgIC8vIElmIHRoZSBtb250aCB3YXMgbm90IHNwZWNpZmllZCwgaW5oZXJpdCBmcm9tIHRoZSBxdWFydGVyLlxuICAgICAgaWYgKGQubSA9PT0gdW5kZWZpbmVkKSBkLm0gPSBcInFcIiBpbiBkID8gZC5xIDogMDtcblxuICAgICAgLy8gQ29udmVydCBkYXktb2Ytd2VlayBhbmQgd2Vlay1vZi15ZWFyIHRvIGRheS1vZi15ZWFyLlxuICAgICAgaWYgKFwiVlwiIGluIGQpIHtcbiAgICAgICAgaWYgKGQuViA8IDEgfHwgZC5WID4gNTMpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gMTtcbiAgICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLCBkYXkgPSB3ZWVrLmdldFVUQ0RheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHV0Y01vbmRheS5jZWlsKHdlZWspIDogdXRjTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXRVVENEYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdlZWsgPSBsb2NhbERhdGUobmV3RGF0ZShkLnksIDAsIDEpKSwgZGF5ID0gd2Vlay5nZXREYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB0aW1lTW9uZGF5LmNlaWwod2VlaykgOiB0aW1lTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB0aW1lRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0RGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpIHtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwidVwiIGluIGQgPyBkLnUgJSA3IDogXCJXXCIgaW4gZCA/IDEgOiAwO1xuICAgICAgICBkYXkgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLmdldFVUQ0RheSgpIDogbG9jYWxEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSkuZ2V0RGF5KCk7XG4gICAgICAgIGQubSA9IDA7XG4gICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0aW1lIHpvbmUgaXMgc3BlY2lmaWVkLCBhbGwgZmllbGRzIGFyZSBpbnRlcnByZXRlZCBhcyBVVEMgYW5kIHRoZW5cbiAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICBkLkggKz0gZC5aIC8gMTAwIHwgMDtcbiAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgIHJldHVybiBsb2NhbERhdGUoZCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nLCBqKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgbSA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIGMsXG4gICAgICAgIHBhcnNlO1xuXG4gICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICBpZiAoaiA+PSBtKSByZXR1cm4gLTE7XG4gICAgICBjID0gc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgIGlmIChjID09PSAzNykge1xuICAgICAgICBjID0gc3BlY2lmaWVyLmNoYXJBdChpKyspO1xuICAgICAgICBwYXJzZSA9IHBhcnNlc1tjIGluIHBhZHMgPyBzcGVjaWZpZXIuY2hhckF0KGkrKykgOiBjXTtcbiAgICAgICAgaWYgKCFwYXJzZSB8fCAoKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApKSByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKGMgIT0gc3RyaW5nLmNoYXJDb2RlQXQoaisrKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGo7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVBlcmlvZChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHBlcmlvZFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLnAgPSBwZXJpb2RMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gd2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0TW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydE1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IHNob3J0TW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlVGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV90aW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0SG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UXVhcnRlcihkKSB7XG4gICAgcmV0dXJuIDEgKyB+fihkLmdldE1vbnRoKCkgLyAzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldFVUQ0hvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1F1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRVVENNb250aCgpIC8gMyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGZhbHNlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH0sXG4gICAgdXRjRm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgdXRjUGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgdHJ1ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gIH07XG59XG5cbnZhciBwYWRzID0ge1wiLVwiOiBcIlwiLCBcIl9cIjogXCIgXCIsIFwiMFwiOiBcIjBcIn0sXG4gICAgbnVtYmVyUmUgPSAvXlxccypcXGQrLywgLy8gbm90ZTogaWdub3JlcyBuZXh0IGRpcmVjdGl2ZVxuICAgIHBlcmNlbnRSZSA9IC9eJS8sXG4gICAgcmVxdW90ZVJlID0gL1tcXFxcXiQqKz98W1xcXSgpLnt9XS9nO1xuXG5mdW5jdGlvbiBwYWQodmFsdWUsIGZpbGwsIHdpZHRoKSB7XG4gIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLFxuICAgICAgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLFxuICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgcmV0dXJuIHNpZ24gKyAobGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpICsgc3RyaW5nIDogc3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gcmVxdW90ZShzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UocmVxdW90ZVJlLCBcIlxcXFwkJlwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UmUobmFtZXMpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyBuYW1lcy5tYXAocmVxdW90ZSkuam9pbihcInxcIikgKyBcIilcIiwgXCJpXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMb29rdXAobmFtZXMpIHtcbiAgdmFyIG1hcCA9IHt9LCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBtYXBbbmFtZXNbaV0udG9Mb3dlckNhc2UoKV0gPSBpO1xuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC53ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJJU08oZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5WID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRnVsbFllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDQpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdICsgKCtuWzBdID4gNjggPyAxOTAwIDogMjAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vab25lKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IC9eKFopfChbKy1dXFxkXFxkKSg/Ojo/KFxcZFxcZCkpPy8uZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5aID0gblsxXSA/IDAgOiAtKG5bMl0gKyAoblszXSB8fCBcIjAwXCIpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVF1YXJ0ZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC5xID0gblswXSAqIDMgLSAzLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9udGhOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZk1vbnRoKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQubSA9IDAsIGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSG91cjI0KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWludXRlcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWxsaXNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWNyb3NlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gTWF0aC5mbG9vcihuWzBdIC8gMTAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VMaXRlcmFsUGVyY2VudChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQucyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdGltZURheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0U2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICByZXR1cm4gZGF5ID09PSAwID8gNyA6IGRheTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZVN1bmRheS5jb3VudCh0aW1lWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB0aW1lVGh1cnNkYXkoZCkgOiB0aW1lVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh0aW1lVGh1cnNkYXkuY291bnQodGltZVllYXIoZCksIGQpICsgKHRpbWVZZWFyKGQpLmdldERheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZU1vbmRheS5jb3VudCh0aW1lWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHV0Y1RodXJzZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpICsgKHV0Y1llYXIoZCkuZ2V0VVRDRGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldFVUQ0RheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgcmV0dXJuIFwiKzAwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gIHJldHVybiBcIiVcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcChkKSB7XG4gIHJldHVybiArZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMoZCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigrZCAvIDEwMDApO1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgdGltZUZvcm1hdDtcbmV4cG9ydCB2YXIgdGltZVBhcnNlO1xuZXhwb3J0IHZhciB1dGNGb3JtYXQ7XG5leHBvcnQgdmFyIHV0Y1BhcnNlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGF0ZVRpbWU6IFwiJXgsICVYXCIsXG4gIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICBwZXJpb2RzOiBbXCJBTVwiLCBcIlBNXCJdLFxuICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICB0aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgdGltZVBhcnNlID0gbG9jYWxlLnBhcnNlO1xuICB1dGNGb3JtYXQgPSBsb2NhbGUudXRjRm9ybWF0O1xuICB1dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7dXRjRm9ybWF0fSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlLmpzXCI7XG5cbmV4cG9ydCB2YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcblxuZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbn1cblxudmFyIGZvcm1hdElzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nXG4gICAgPyBmb3JtYXRJc29OYXRpdmVcbiAgICA6IHV0Y0Zvcm1hdChpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRJc287XG4iLCJpbXBvcnQge2lzb1NwZWNpZmllcn0gZnJvbSBcIi4vaXNvRm9ybWF0LmpzXCI7XG5pbXBvcnQge3V0Y1BhcnNlfSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHBhcnNlSXNvTmF0aXZlKHN0cmluZykge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xufVxuXG52YXIgcGFyc2VJc28gPSArbmV3IERhdGUoXCIyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIilcbiAgICA/IHBhcnNlSXNvTmF0aXZlXG4gICAgOiB1dGNQYXJzZShpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBwYXJzZUlzbztcbiIsImltcG9ydCB7aWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdEludGVycG9sYXRvcn0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhclwiO1xuaW1wb3J0IHtsb2dnaXNofSBmcm9tIFwiLi9sb2dcIjtcbmltcG9ydCB7c3ltbG9naXNofSBmcm9tIFwiLi9zeW1sb2dcIjtcbmltcG9ydCB7cG93aXNofSBmcm9tIFwiLi9wb3dcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICB0MCxcbiAgICAgIHQxLFxuICAgICAgazEwLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgaW50ZXJwb2xhdG9yID0gaWRlbnRpdHksXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogaW50ZXJwb2xhdG9yKGsxMCA9PT0gMCA/IDAuNSA6ICh4ID0gKHRyYW5zZm9ybSh4KSAtIHQwKSAqIGsxMCwgY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB4KSkgOiB4KSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodDAgPSB0cmFuc2Zvcm0oeDAgPSArX1swXSksIHQxID0gdHJhbnNmb3JtKHgxID0gK19bMV0pLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMSAvICh0MSAtIHQwKSwgc2NhbGUpIDogW3gwLCB4MV07XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHQwID0gdCh4MCksIHQxID0gdCh4MSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAuaW50ZXJwb2xhdG9yKHNvdXJjZS5pbnRlcnBvbGF0b3IoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXF1ZW50aWFsKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIoKShpZGVudGl0eSkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxMb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbExvZygpKS5iYXNlKHNjYWxlLmJhc2UoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsU3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBzZXF1ZW50aWFsU3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbFBvdygpIHtcbiAgdmFyIHNjYWxlID0gcG93aXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbFBvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxTcXJ0KCkge1xuICByZXR1cm4gc2VxdWVudGlhbFBvdy5hcHBseShudWxsLCBhcmd1bWVudHMpLmV4cG9uZW50KDAuNSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKipcbiAqIENyZWF0ZXMgYW4gU1ZHXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gYSBET00gZWxlbWVudCBJRCB0aGF0IHN0YXJ0cyB3aXRoIGEgXCIjXCJcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY31cbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggdHdvIGF0dHJpYnV0ZXM6IHdpZHRoIGFuZCBoZWlnaHRcbiAqIEByZXR1cm4ge1NlbGVjdGlvbn0gdGhlIGQzIHNlbGVjdGlvbiBvYmplY3Qgb2YgdGhlIFNWR1xuICovXG5cbmltcG9ydCBqUXVlcnkgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRG9tSWQoaWQpe1xuICAgIC8vIHRlc3QgaW5wdXQgcGFyYW1zXG4gICAgaWYgKGpRdWVyeShgIyR7aWR9YCkubGVuZ3RoID09IDApIHtcbiAgICAgICAgbGV0IGVycm9yID0gYElucHV0IEVycm9yOiBET00gSUQgJHtpZH0gaXMgbm90IGZvdW5kLmA7XG4gICAgICAgIC8vYWxlcnQoZXJyb3IpO1xuICAgICAgICBjb25zb2xlLndhcm4oZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgQ2FudmFzIEQzIG9iamVjdFxuICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBwYXJlbnQgZG9tIElEXG4gKiBAcGFyYW0gd2lkdGgge051bWVyaWN9OiB0aGUgb3V0ZXIgd2lkdGhcbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9OiB0aGUgb3V0ZXIgaGVpZ2h0XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggYXR0cjogbGVmdCwgdG9wXG4gKiBAcGFyYW0gY2FudmFzSWQge1N0cmluZ31cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzKGlkLCB3aWR0aCwgaGVpZ2h0LCBtYXJnaW4sIGNhbnZhc0lkPXVuZGVmaW5lZCwgcG9zaXRpb249XCJhYnNvbHV0ZVwiKXtcbiAgICBjaGVja0RvbUlkKGlkKTtcbiAgICBpZihjYW52YXNJZD09PXVuZGVmaW5lZCkgY2FudmFzSWQ9YCR7aWR9LWNhbnZhc2A7XG4gICAgcmV0dXJuIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgLmFwcGVuZChcImNhbnZhc1wiKVxuICAgICAgICAuYXR0cignaWQnLCBjYW52YXNJZClcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBwb3NpdGlvbikgLy8gVE9ETzogc2hvdWxkIHRoZSBwb3NpdGlvbiBiZSB1c2VyLWRlZmluZWQ/IHJlbGF0aXZlIHZzIGFic29sdXRlXG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIFNWRyBEMyBvYmplY3RcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgcGFyZW50IGRvbSBJRFxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfTogdGhlIG91dGVyIHdpZHRoXG4gKiBAcGFyYW0gaGVpZ2h0IHtOdW1lcmljfTogdGhlIG91dGVyIGhlaWdodFxuICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIGF0dHI6IGxlZnQsIHRvcFxuICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN2ZyhpZCwgd2lkdGgsIGhlaWdodCwgbWFyZ2luLCBzdmdJZD11bmRlZmluZWQsIHBvc2l0aW9uPVwicmVsYXRpdmVcIil7XG4gICAgY2hlY2tEb21JZChpZCk7XG4gICAgaWYgKHN2Z0lkPT09dW5kZWZpbmVkKSBzdmdJZD1gJHtpZH0tc3ZnYDtcbiAgICByZXR1cm4gc2VsZWN0KFwiI1wiK2lkKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuYXR0cihcImlkXCIsIHN2Z0lkKVxuICAgICAgICAvLyAuc3R5bGUoXCJwb3NpdGlvblwiLCBwb3NpdGlvbilcbiAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4udG9wfSlgKVxufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gc3ZnT2JqXG4gKiBAcGFyYW0gZG93bmxvYWRGaWxlTmFtZSB7U3RyaW5nfVxuICogQHBhcmFtIHRlbXBEb3dubG9hZERpdklkIHtTdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZFN2ZyhzdmdPYmosIGRvd25sb2FkRmlsZU5hbWUsIHRlbXBEb3dubG9hZERpdklkKXtcbiAgICBjb25zb2xlLmxvZyhzdmdPYmopO1xuICAgIHZhciAkc3ZnQ29weSA9IHN2Z09iai5jbG9uZSgpXG4gICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgLmF0dHIoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuXG4gICAgLy8gcGFyc2UgYW5kIGFkZCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgdmFyIHN0eWxlcyA9IHBhcnNlQ3NzU3R5bGVzKHN2Z09iai5nZXQoKSk7XG4gICAgJHN2Z0NvcHkucHJlcGVuZChzdHlsZXMpO1xuXG4gICAgalF1ZXJ5KFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmh0bWwoJycpLmhpZGUoKTtcbiAgICB2YXIgc3ZnSHRtbCA9IGpRdWVyeShcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5hcHBlbmQoJHN2Z0NvcHkpLmh0bWwoKTtcblxuICAgIHZhciBzdmdCbG9iID0gbmV3IEJsb2IoW3N2Z0h0bWxdLCB7dHlwZTogXCJpbWFnZS9zdmcreG1sXCJ9KTtcbiAgICBzYXZlQXMoc3ZnQmxvYiwgZG93bmxvYWRGaWxlTmFtZSk7XG5cbiAgICAvLyBjbGVhciB0aGUgdGVtcCBkb3dubG9hZCBkaXZcbiAgICBqUXVlcnkoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuaHRtbCgnJykuaGlkZSgpO1xufVxuLyoqXG4gKiBBIGZ1bmN0aW9uIGZvciBwYXJzaW5nIHRoZSBDU1Mgc3R5bGUgc2hlZXQgYW5kIGluY2x1ZGluZyB0aGUgc3R5bGUgcHJvcGVydGllcyBpbiB0aGUgZG93bmxvYWRhYmxlIFNWRy5cbiAqIEBwYXJhbSBkb21cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3NTdHlsZXMgKGRvbSkge1xuICAgIHZhciB1c2VkID0gXCJcIjtcbiAgICB2YXIgc2hlZXRzID0gZG9jdW1lbnQuc3R5bGVTaGVldHM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNoZWV0cy5sZW5ndGg7IGkrKykgeyAvLyBUT0RPOiB3YWxrIHRocm91Z2ggdGhpcyBibG9jayBvZiBjb2RlXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChzaGVldHNbaV0uY3NzUnVsZXMgPT0gbnVsbCkgY29udGludWU7XG4gICAgICAgICAgICB2YXIgcnVsZXMgPSBzaGVldHNbaV0uY3NzUnVsZXM7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YocnVsZS5zdHlsZSkgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92aW5nIGFueSBzZWxlY3RvciB0ZXh0IGluY2x1ZGluZyBzdmcgZWxlbWVudCBJRCAtLSBkb20gYWxyZWFkeSBzZWxlY3RzIGZvciB0aGF0XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHJ1bGUuc2VsZWN0b3JUZXh0ID09PSB1bmRlZmluZWQ/IHJ1bGUuc2VsZWN0b3JUZXh0IDogcnVsZS5zZWxlY3RvclRleHQucmVwbGFjZShgIyR7ZG9tWzBdLmlkfSBgLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vU29tZSBzZWxlY3RvcnMgd29uJ3Qgd29yaywgYW5kIG1vc3Qgb2YgdGhlc2UgZG9uJ3QgbWF0dGVyLlxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSBqUXVlcnkoZG9tKS5maW5kKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VkICs9IHJ1bGUuc2VsZWN0b3JUZXh0ICsgXCIgeyBcIiArIHJ1bGUuc3R5bGUuY3NzVGV4dCArIFwiIH1cXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gSW4gRmlyZWZveCwgaWYgc3R5bGVzaGVldCBvcmlnaW5hdGVzIGZyb20gYSBkaWZmIGRvbWFpbixcbiAgICAgICAgICAgIC8vIHRyeWluZyB0byBhY2Nlc3MgdGhlIGNzc1J1bGVzIHdpbGwgdGhyb3cgYSBTZWN1cml0eUVycm9yLlxuICAgICAgICAgICAgLy8gSGVuY2UsIHdlIG11c3QgdXNlIGEgdHJ5L2NhdGNoIHRvIGhhbmRsZSB0aGlzIGluIEZpcmVmb3hcbiAgICAgICAgICAgIGlmIChlLm5hbWUgIT09ICdTZWN1cml0eUVycm9yJykgdGhyb3cgZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XG4gICAgcy5pbm5lckhUTUwgPSBcIjwhW0NEQVRBW1xcblwiICsgdXNlZCArIFwiXFxuXV0+XCI7XG5cbiAgICByZXR1cm4gcztcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGxpc3Qgb2YgeCp5IGRhdGEgb2JqZWN0cyB3aXRoIHJhbmRvbSB2YWx1ZXNcbiAqIFRoZSBkYXRhIG9iamVjdCBoYXMgdGhpcyBzdHJ1Y3R1cmU6IHt4OiB4bGFiZWwsIHk6IHlsYWJlbCwgdmFsdWU6IHNvbWUgdmFsdWUsIGRpc3BsYXlWYWx1ZTogc29tZSB2YWx1ZX1cbiAqIEBwYXJhbSBwYXJcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tTWF0cml4KHBhcj17eDoyMCwgeToyMCwgc2NhbGVGYWN0b3I6MSwgZGl2ZXJnaW5nOmZhbHNlLCBidWJibGU6ZmFsc2V9KXtcbiAgICBsZXQgWCA9IHJhbmdlKDEsIHBhci54KzEpOyAvLyBnZW5lcmF0ZXMgYSAxLWJhc2VkIGxpc3QuXG4gICAgbGV0IFkgPSByYW5nZSgxLCBwYXIueSsxKTtcbiAgICBsZXQgZGF0YSA9IFtdO1xuICAgIFguZm9yRWFjaCgoeCk9PntcbiAgICAgICAgeCA9ICd4JyArIHgudG9TdHJpbmcoKTtcbiAgICAgICAgWS5mb3JFYWNoKCh5KT0+e1xuICAgICAgICAgICAgeSA9ICd5JyArIHkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGxldCB2ID0gTWF0aC5yYW5kb20oKSpwYXIuc2NhbGVGYWN0b3I7XG4gICAgICAgICAgICB2ID0gcGFyLmRpdmVyZ2luZyYmTWF0aC5yYW5kb20oKSA8IDAuNSA/IC12IDogdjsgLy8gcmFuZG9tbHkgYXNzaWduaW5nIG5lZ2F0aXZlIGFuZCBwb3NpdGl2ZSB2YWx1ZXNcbiAgICAgICAgICAgIGRhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogcGFyc2VGbG9hdCh2LnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oMyksXG4gICAgICAgICAgICAgICAgcjogcGFyLmJ1YmJsZT9NYXRoLnJhbmRvbSgpKjMwOnVuZGVmaW5lZCAvLyBvbmx5IHJlbGV2YW50IHRvIGJ1YmJsZSBtYXBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiByYW5kb20gdmFsdWVzXG4gKiBAcGFyYW0gcGFyXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUxpc3QocGFyPXtuOjEwMCwgc2NhbGVGYWN0b3I6MX0pIHtcbiAgICBsZXQgWCA9IHJhbmdlKDAsIHBhci5uKTsgLy8gZ2VuZXJhdGVzIGEgMS1iYXNlZCBsaXN0LlxuICAgIGxldCBkYXRhID0gW107XG4gICAgcmV0dXJuIFgubWFwKCh4KSA9PiBNYXRoLnJhbmRvbSgpICogcGFyLnNjYWxlRmFjdG9yKTtcblxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R3RleFVybHMoKXtcbiAgICBjb25zdCBob3N0ID0gJ2h0dHBzOi8vZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nO1xuICAgIC8vIGNvbnN0IGhvc3QgPSAnaHR0cHM6Ly9kZXYuZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIGdlbmUtZXF0bCB2aXN1YWxpemVyIHNwZWNpZmljXG4gICAgICAgIHNpbmdsZVRpc3N1ZUVxdGw6IGhvc3QgKyAnYXNzb2NpYXRpb24vc2luZ2xlVGlzc3VlRXF0bD9mb3JtYXQ9anNvbiZkYXRhc2V0SWQ9Z3RleF92OCZnZW5jb2RlSWQ9JyxcbiAgICAgICAgbGQ6IGhvc3QgKyAnZGF0YXNldC9sZD9mb3JtYXQ9anNvbiZkYXRhc2V0SWQ9Z3RleF92OCZnZW5jb2RlSWQ9JyxcblxuICAgICAgICAvLyBlcXRsIERhc2hib2FyZCBzcGVjaWZpY1xuICAgICAgICBkeW5lcXRsOiBob3N0ICsgJ2Fzc29jaWF0aW9uL2R5bmVxdGwnLFxuICAgICAgICBzbnA6IGhvc3QgKyAncmVmZXJlbmNlL3ZhcmlhbnQ/Zm9ybWF0PWpzb24mc25wSWQ9JyxcbiAgICAgICAgdmFyaWFudElkOiBob3N0ICsgJ2RhdGFzZXQvdmFyaWFudD9mb3JtYXQ9anNvbiZ2YXJpYW50SWQ9JyxcblxuICAgICAgICAvLyB0cmFuc2NyaXB0LCBleG9uLCBqdW5jdGlvbiBleHByZXNzaW9uIHNwZWNpZmljXG4gICAgICAgIGV4b25FeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5FeG9uRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92OCZoY2x1c3Rlcj10cnVlJmdlbmNvZGVJZD0nLFxuICAgICAgICB0cmFuc2NyaXB0RXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuVHJhbnNjcmlwdEV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjgmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAganVuY3Rpb25FeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5KdW5jdGlvbkV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjgmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAgdHJhbnNjcmlwdDogaG9zdCArICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9kYXRhc2V0SWQ9Z3RleF92OCZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZXhvbjogaG9zdCArICdyZWZlcmVuY2UvZXhvbj9kYXRhc2V0SWQ9Z3RleF92OCZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZ2VuZU1vZGVsOiBob3N0ICsgJ2RhdGFzZXQvY29sbGFwc2VkR2VuZU1vZGVsRXhvbj9kYXRhc2V0SWQ9Z3RleF92OCZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZ2VuZU1vZGVsVW5maWx0ZXJlZDogaG9zdCArICdkYXRhc2V0L2Z1bGxDb2xsYXBzZWRHZW5lTW9kZWxFeG9uP2RhdGFzZXRJZD1ndGV4X3Y4JmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiB2aW9saW4gcGxvdCBzcGVjaWZpY1xuICAgICAgICBnZW5lRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vZ2VuZUV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjgmZ2VuY29kZUlkPScsXG5cbiAgICAgICAgLy8gZ2VuZSBleHByZXNzaW9uIGhlYXQgbWFwIHNwZWNpZmljXG4gICAgICAgIG1lZEdlbmVFeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5HZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92OCZoY2x1c3Rlcj10cnVlJnBhZ2VTaXplPTEwMDAwJyxcblxuICAgICAgICAvLyBnZW5lIGV4cHJlc3Npb24gYm94cGxvdCBzcGVjaWZpY1xuICAgICAgICBnZW5lRXhwQm94cGxvdDogaG9zdCArICdleHByZXNzaW9uL2dlbmVFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y4JmJveHBsb3REZXRhaWw9ZnVsbCZnZW5jb2RlSWQ9JyxcblxuICAgICAgICAvLyB0b3AgZXhwcmVzc2VkIGdlbmUgZXhwcmVzc2lvbiBzcGVjaWZpY1xuICAgICAgICB0b3BJblRpc3N1ZUZpbHRlcmVkOiBob3N0ICsgJ2V4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZT9kYXRhc2V0SWQ9Z3RleF92OCZmaWx0ZXJNdEdlbmU9dHJ1ZSZzb3J0Qnk9bWVkaWFuJnNvcnREaXJlY3Rpb249ZGVzYyZwYWdlU2l6ZT01MCZ0aXNzdWVTaXRlRGV0YWlsSWQ9JyxcbiAgICAgICAgdG9wSW5UaXNzdWU6IGhvc3QgKyAnZXhwcmVzc2lvbi90b3BFeHByZXNzZWRHZW5lP2RhdGFzZXRJZD1ndGV4X3Y4JnNvcnRCeT1tZWRpYW4mc29ydERpcmVjdGlvbj1kZXNjJnBhZ2VTaXplPTUwJnRpc3N1ZVNpdGVEZXRhaWxJZD0nLFxuXG4gICAgICAgIGdlbmVJZDogaG9zdCArICdyZWZlcmVuY2UvZ2VuZT9mb3JtYXQ9anNvbiZnZW5jb2RlVmVyc2lvbj12MjYmZ2Vub21lQnVpbGQ9R1JDaDM4JTJGaGczOCZnZW5lSWQ9JyxcblxuICAgICAgICAvLyB0aXNzdWUgbWVudSBzcGVjaWZpY1xuICAgICAgICB0aXNzdWU6ICBob3N0ICsgJ2RhdGFzZXQvdGlzc3VlSW5mbz9mb3JtYXQ9anNvbiZkYXRhc2V0SWQ9Z3RleF92OCcsXG5cbiAgICAgICAgLy8gbG9jYWwgc3RhdGljIGZpbGVzXG4gICAgICAgIHNhbXBsZTogJ3RtcFN1bW1hcnlEYXRhL2d0ZXguU2FtcGxlLmNzdicsXG4gICAgICAgIHJuYXNlcUNyYW06ICd0bXBTdW1tYXJ5RGF0YS9ybmFzZXFfY3JhbV9maWxlc192N19kYkdhUF8wMTE1MTYudHh0JyxcbiAgICAgICAgd2dzQ3JhbTogJ3RtcFN1bW1hcnlEYXRhL3dnc19jcmFtX2ZpbGVzX3Y3X2hnMzhfZGJHYVBfMDExNTE2LnR4dCcsXG5cbiAgICAgICAgLy8gZmlyZUNsb3VkXG4gICAgICAgIGZjQmlsbGluZzogJ2h0dHBzOi8vYXBpLmZpcmVjbG91ZC5vcmcvYXBpL3Byb2ZpbGUvYmlsbGluZycsXG4gICAgICAgIGZjV29ya1NwYWNlOiAnaHR0cHM6Ly9hcGkuZmlyZWNsb3VkLm9yZy9hcGkvd29ya3NwYWNlcycsXG4gICAgICAgIGZjUG9ydGFsV29ya1NwYWNlOiAnaHR0cHM6Ly9wb3J0YWwuZmlyZWNsb3VkLm9yZy8jd29ya3NwYWNlcydcbiAgICB9XG59XG5cbi8qKlxuICogcGFyc2UgR1RFeCBkeW5lcXRsIGpzb25cbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZHluZXF0bCB3ZWIgc2VydmljZVxuICogQHJldHVybnMgZGF0YSB7SlNPTn0gbW9kaWZpZWQgZGF0YVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRHluRXF0bChqc29uKXtcbiAgICAvLyBjaGVjayByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZXNcbiAgICBbJ2RhdGEnLCAnZ2Vub3R5cGVzJywgJ3BWYWx1ZScsICdwVmFsdWVUaHJlc2hvbGQnLCAndGlzc3VlU2l0ZURldGFpbElkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoZCkpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihqc29uKTtcbiAgICAgICAgICAgIHRocm93ICdQYXJzZSBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGpzb24uZXhwcmVzc2lvbl92YWx1ZXMgPSBqc29uLmRhdGEubWFwKChkKT0+cGFyc2VGbG9hdChkKSk7XG4gICAganNvbi5nZW5vdHlwZXMgPSBqc29uLmdlbm90eXBlcy5tYXAoKGQpPT5wYXJzZUZsb2F0KGQpKTtcblxuICAgIGpzb24uaG9tb1JlZkV4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09PSAwXG4gICAgfSk7XG4gICAganNvbi5ob21vQWx0RXhwID0ganNvbi5leHByZXNzaW9uX3ZhbHVlcy5maWx0ZXIoKGQsaSkgPT4ge1xuICAgICAgICByZXR1cm4ganNvbi5nZW5vdHlwZXNbaV0gPT09IDJcbiAgICB9KTtcbiAgICBqc29uLmhldGVyb0V4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09PSAxXG4gICAgfSk7XG5cbiAgICAvLyBnZW5lcmF0ZSBnZW5vdHlwZSB0ZXh0IGxhYmVsc1xuICAgIGxldCByZWYgPSBqc29uLnZhcmlhbnRJZC5zcGxpdCgvXy8pWzJdO1xuICAgIGxldCBhbHQgPSBqc29uLnZhcmlhbnRJZC5zcGxpdCgvXy8pWzNdO1xuICAgIGpzb24uaGV0ID0gcmVmICsgYWx0O1xuICAgIGpzb24ucmVmID0gcmVmICsgcmVmO1xuICAgIGpzb24uYWx0ID0gYWx0ICsgYWx0O1xuXG4gICAgcmV0dXJuIGpzb247XG59XG5cblxuLyoqXG4gKiBQYXJzZSB0aGUgc2luZ2xlIHRpc3N1ZSBlcXRscyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIHRpc3N1ZVNpdGVUYWJsZSB7SnNvbn0gb3B0aW9uYWwgZm9yIG1hcHBpbmcgdGlzc3VlU2l0ZURldGFpbElkIHRvIHRpc3N1ZVNpdGVEZXRhaWwsIGEgZGljdGlvbmFyeSBvZiB0aXNzdWVTaXRlIG9iamVjdHMgKHdpdGggdGhlIGF0dHIgdGlzc3VlU2l0ZURldGFpbCkgaW5kZXhlZCBieSB0aXNzdWVTaXRlRGV0YWlsSWQsIGFuZFxuICogQHJldHVybnMge0xpc3R9IG9mIGVxdGxzIHdpdGggYXR0cmlidXRlcyByZXF1aXJlZCBmb3IgR0VWIHJlbmRlcmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTaW5nbGVUaXNzdWVFcXRscyhkYXRhLCB0aXNzdWVTaXRlVGFibGUgPSB1bmRlZmluZWQpe1xuICAgIGNvbnN0IGF0dHIgPSAnc2luZ2xlVGlzc3VlRXF0bCc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0cmlidXRlIGlzIG5vdCBmb3VuZDogXCIgKyBhdHRyO1xuICAgIFsndmFyaWFudElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICduZXMnLCAncFZhbHVlJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgaWYgKCFkYXRhW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGspKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIH0pO1xuXG5cbiAgICByZXR1cm4gZGF0YVthdHRyXS5tYXAoKGQpPT57XG4gICAgICAgIGQueCA9IGQudmFyaWFudElkO1xuICAgICAgICBkLmRpc3BsYXlYID0gZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChkLnZhcmlhbnRJZCk7XG4gICAgICAgIGQueSA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBpZiAodGlzc3VlU2l0ZVRhYmxlKSBkLmRpc3BsYXlZID0gdGlzc3VlU2l0ZVRhYmxlW2QudGlzc3VlU2l0ZURldGFpbElkXS50aXNzdWVTaXRlRGV0YWlsO1xuICAgICAgICBkLnZhbHVlID0gZC5uZXM7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gZC5uZXMudG9QcmVjaXNpb24oMyk7XG4gICAgICAgIGQuciA9IC1NYXRoLmxvZzEwKGQucFZhbHVlKTsgLy8gc2V0IHIgdG8gYmUgdGhlIC1sb2cxMChwLXZhbHVlKVxuICAgICAgICBkLnJEaXNwbGF5VmFsdWUgPSBwYXJzZUZsb2F0KGQucFZhbHVlLnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oMyk7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH0pXG59XG5cbi8qKlxuICogUGFyc2UgdGhlIGdlbmVzIGZyb20gR1RFeCB3ZWIgc2VydmljZVxuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZ2VuZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2VuZXMoZGF0YSwgc2luZ2xlPWZhbHNlLCBnZW5lSWQ9bnVsbCl7XG4gICAgY29uc3QgYXR0ciA9ICdnZW5lJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiBhdHRyaWJ1dGUgZ2VuZSBkb2Vzbid0IGV4aXN0LlwiO1xuICAgIGlmIChkYXRhLmdlbmUubGVuZ3RoPT09MCl7XG4gICAgICAgICBhbGVydChcIk5vIGdlbmUgaXMgZm91bmRcIik7XG4gICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBnZW5lKHMpIG5vdCBmb3VuZFwiO1xuICAgICB9XG4gICAgaWYgKHNpbmdsZSl7XG4gICAgICAgIGlmIChnZW5lSWQgPT09IG51bGwpIHRocm93IFwiUGxlYXNlIHByb3ZpZGUgYSBnZW5lIElEIGZvciBzZWFyY2ggcmVzdWx0cyB2YWxpZGF0aW9uXCI7XG4gICAgICAgIGlmIChkYXRhLmdlbmUubGVuZ3RoPjEpIHsgLy8gd2hlbiBhIHNpbmdsZSBnZW5lIElEIGhhcyBtdWx0aXBsZSBtYXRjaGVzXG4gICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gZGF0YS5nZW5lLmZpbHRlcigoZyk9PntcbiAgICAgICAgICAgICAgICAgcmV0dXJuIGcuZ2VuZVN5bWJvbFVwcGVyPT09Z2VuZUlkLnRvVXBwZXJDYXNlKCkgfHwgZy5nZW5jb2RlSWQgPT09IGdlbmVJZC50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgYWxlcnQoXCJGYXRhbCBFcnJvcjogaW5wdXQgZ2VuZSBJRCBpcyBub3QgdW5pcXVlLlwiKTtcbiAgICAgICAgICAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogaW5wdXQgZ2VuZSBJRCBpcyBub3QgdW5pcXVlLlwiO1xuICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyZWQubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICAgICAgICAgYWxlcnQoXCJObyBnZW5lIGlzIGZvdW5kIHdpdGggXCIgKyBnZW5lSWQpO1xuICAgICAgICAgICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBnZW5lIG5vdCBmb3VuZFwiO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICBkYXRhLmdlbmUgPSBmaWx0ZXJlZFxuICAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiBkYXRhLmdlbmVbMF1cbiAgICB9XG4gICAgZWxzZSByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3Vlc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgdGlzc3Vlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVzKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlSW5mbyc7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHIgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgY29uc3QgdGlzc3VlcyA9IGpzb25bYXR0cl07XG5cbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICd0aXNzdWVTaXRlRGV0YWlsJywgJ2NvbG9ySGV4J10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCF0aXNzdWVzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRpc3N1ZXM7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXMgYW5kIHJldHVybiBhIGxvb2t1cCB0YWJsZSBpbmRleGVkIGJ5IHRpc3N1ZVNpdGVEZXRhaWxJZFxuICogQHBhcmFtIGpzb24gZnJvbSB3ZWIgc2VydmljZSB0aXNzdWVTaXRlRGV0YWlsXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlRGljdChqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZUluZm8nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uW2F0dHJdO1xuICAgIC8vIHNhbml0eSBjaGVja1xuICAgIFsndGlzc3VlU2l0ZURldGFpbElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWwnLCAnY29sb3JIZXgnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHIgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRpc3N1ZXMucmVkdWNlKChhcnIsIGQpPT57YXJyW2QudGlzc3VlU2l0ZURldGFpbElkXSA9IGQ7IHJldHVybiBhcnI7fSx7fSk7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXMgc2FtcGxlIGNvdW50cywgR1RFeCByZWxlYXNlIHNwZWNpZmljXG4gKiBAcGFyYW0ganNvbiBmcm9tIHdlYiBzZXJ2aWNlIHRpc3N1ZUluZm9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlU2FtcGxlQ291bnRzKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlSW5mbyc7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHIgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgY29uc3QgdGlzc3VlcyA9IGpzb25bYXR0cl07XG5cbiAgICAvLyBjaGVjayBqc29uIHN0cnVjdHVyZVxuICAgIGNvbnN0IHRpc3N1ZSA9IHRpc3N1ZXNbMF07XG4gICAgaWYgKCF0aXNzdWUuaGFzT3duUHJvcGVydHkoJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0ciBpcyBtaXNzaW5nOiB0aXNzdWVTaXRlRGV0YWlsSWQnO1xuICAgIGlmICghdGlzc3VlLmhhc093blByb3BlcnR5KCdybmFTZXFBbmRHZW5vdHlwZVNhbXBsZUNvdW50JykpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBhdHRyIGlzIG1pc3Npbmc6IHJuYVNlcUFuZEdlbm90eXBlU2FtcGxlQ291bnQnO1xuICAgIHJldHVybiB0aXNzdWVzO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWUgZ3JvdXBzXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSBmb3JFcXRsIHtCb29sZWFufSByZXN0cmljdCB0byBlcXRsIHRpc3N1ZXNcbiAqIEByZXR1cm5zIHtEaWN0aW9uYXJ5fSBvZiBsaXN0cyBvZiB0aXNzdWVzIGluZGV4ZWQgYnkgdGhlIHRpc3N1ZSBncm91cCBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZVNpdGVzKGRhdGEsIGZvckVxdGw9ZmFsc2Upe1xuICAgIC8vIHRoZSBsaXN0IG9mIGludmFsaWQgZXF0bCB0aXNzdWVzIGR1ZSB0byBzYW1wbGUgc2l6ZSA8IDcwXG4gICAgLy8gYSBoYXJkLWNvZGVkIGxpc3QgYmVjYXVzZSB0aGUgc2FtcGxlIHNpemUgaXMgbm90IGVhc3kgdG8gcmV0cmlldmVcbiAgICBjb25zdCBpbnZhbGlkVGlzc3VlcyA9IFsnQmxhZGRlcicsICdDZXJ2aXhfRWN0b2NlcnZpeCcsICdDZXJ2aXhfRW5kb2NlcnZpeCcsICdGYWxsb3BpYW5fVHViZScsICdLaWRuZXlfQ29ydGV4J107XG5cbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZUluZm8nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgbGV0IHRpc3N1ZXMgPSBkYXRhW2F0dHJdO1xuICAgIFsndGlzc3VlU2l0ZScsJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsJ3Rpc3N1ZVNpdGVEZXRhaWwnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IGBwYXJzZVRpc3N1ZVNpdGVzIGF0dHIgZXJyb3IuICR7ZH0gaXMgbm90IGZvdW5kYDtcbiAgICB9KTtcbiAgICB0aXNzdWVzID0gZm9yRXF0bD09PWZhbHNlP3Rpc3N1ZXM6dGlzc3Vlcy5maWx0ZXIoKGQpPT57cmV0dXJuICFpbnZhbGlkVGlzc3Vlcy5pbmNsdWRlcyhkLnRpc3N1ZVNpdGVEZXRhaWxJZCl9KTsgLy8gYW4gYXJyYXkgb2YgdGlzc3VlU2l0ZURldGFpbElkIG9iamVjdHNcblxuICAgIC8vIGJ1aWxkIHRoZSB0aXNzdWVHcm91cHMgbG9va3VwIGRpY3Rpb25hcnkgaW5kZXhlZCBieSB0aGUgdGlzc3VlIGdyb3VwIG5hbWUgKGkuZS4gdGhlIHRpc3N1ZSBtYWluIHNpdGUgbmFtZSlcbiAgICBsZXQgdGlzc3VlR3JvdXBzID0gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PntcbiAgICAgICAgbGV0IGdyb3VwTmFtZSA9IGQudGlzc3VlU2l0ZTtcbiAgICAgICAgbGV0IHNpdGUgPSB7XG4gICAgICAgICAgICBpZDogZC50aXNzdWVTaXRlRGV0YWlsSWQsXG4gICAgICAgICAgICBuYW1lOiBkLnRpc3N1ZVNpdGVEZXRhaWxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFhcnIuaGFzT3duUHJvcGVydHkoZ3JvdXBOYW1lKSkgYXJyW2dyb3VwTmFtZV0gPSBbXTsgLy8gaW5pdGlhdGUgYW4gYXJyYXlcbiAgICAgICAgYXJyW2dyb3VwTmFtZV0ucHVzaChzaXRlKTtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCB7fSk7XG5cbiAgICAvLyBtb2RpZnkgdGhlIHRpc3N1ZSBncm91cHMgdGhhdCBoYXZlIG9ubHkgYSBzaW5nbGUgc2l0ZVxuICAgIC8vIGJ5IHJlcGxhY2luZyB0aGUgZ3JvdXAncyBuYW1lIHdpdGggdGhlIHNpbmdsZSBzaXRlJ3MgbmFtZSAtLSByZXN1bHRpbmcgYSBiZXR0ZXIgQWxwaGFiZXRpY2FsIG9yZGVyIG9mIHRoZSB0aXNzdWUgZ3JvdXBzXG5cbiAgICBPYmplY3Qua2V5cyh0aXNzdWVHcm91cHMpLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICh0aXNzdWVHcm91cHNbZF0ubGVuZ3RoID09PSAxKXsgLy8gYSBzaW5nbGUtc2l0ZSBncm91cFxuICAgICAgICAgICAgbGV0IHNpdGUgPSB0aXNzdWVHcm91cHNbZF1bMF07IC8vIHRoZSBzaW5nbGUgc2l0ZVxuICAgICAgICAgICAgZGVsZXRlIHRpc3N1ZUdyb3Vwc1tkXTsgLy8gcmVtb3ZlIHRoZSBvbGQgZ3JvdXAgaW4gdGhlIGRpY3Rpb25hcnlcbiAgICAgICAgICAgIHRpc3N1ZUdyb3Vwc1tzaXRlLm5hbWVdID0gW3NpdGVdOyAvLyBjcmVhdGUgYSBuZXcgZ3JvdXAgd2l0aCB0aGUgc2l0ZSdzIG5hbWVcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aXNzdWVHcm91cHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4b25zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSBpc0Z1bGwge0Jvb2xlYW59XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXhvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTW9kZWxFeG9ucyhqc29uLCBpc0Z1bGwpe1xuICAgIGNvbnN0IGF0dHIgPSBpc0Z1bGw/J2Z1bGxDb2xsYXBzZWRHZW5lTW9kZWxFeG9uJzonY29sbGFwc2VkR2VuZU1vZGVsRXhvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpe1xuICAgICAgICBjb25zb2xlLmVycm9yKGpzb24pO1xuICAgICAgICB0aHJvdyAnUGFyc2luZyBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgfVxuICAgIC8vIHNhbml0eSBjaGVja1xuICAgIFsnc3RhcnQnLCAnZW5kJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0ubWFwKChkKT0+e1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBkLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZC5lbmQ7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRoZSBqdW5jdGlvbnNcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YganVuY3Rpb25zXG4gKiAvLyBqdW5jdGlvbiBhbm5vdGF0aW9ucyBhcmUgbm90IHN0b3JlZCBpbiBNb25nb1xuICAgIC8vIHNvIGhlcmUgd2UgdXNlIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlIHRvIHBhcnNlIHRoZSBqdW5jdGlvbiBJRCBmb3IgaXRzIGdlbm9taWMgbG9jYXRpb25cbiAgICAvLyBhc3N1bWluZyB0aGF0IGVhY2ggdGlzc3VlIGhhcyB0aGUgc2FtZSBqdW5jdGlvbnMsXG4gICAgLy8gdG8gZ3JhYiBhbGwgdGhlIGtub3duIGp1bmN0aW9ucyBvZiBhIGdlbmUsIHdlIG9ubHkgbmVlZCB0byBxdWVyeSBvbmUgdGlzc3VlXG4gICAgLy8gaGVyZSB3ZSBhcmJpdHJhcmlseSBwaWNrIExpdmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKdW5jdGlvbnMoanNvbil7XG5cbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkp1bmN0aW9uRXhwcmVzc2lvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiBwYXJzZUp1bmN0aW9ucyBpbnB1dCBlcnJvci4gJyArIGF0dHI7XG5cbiAgICAvLyBjaGVjayByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZXNcbiAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdqdW5jdGlvbklkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgLy8gdXNlIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBqc29uIG9iamVjdHMgYXMgYSB0ZXN0IGNhc2VcbiAgICAgICAgaWYoanNvblthdHRyXS5sZW5ndGggJiYgIWpzb25bYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihqc29uW2F0dHJdWzBdKTtcbiAgICAgICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqdW5jdGlvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ganNvblthdHRyXS5maWx0ZXIoKGQpPT5kLnRpc3N1ZVNpdGVEZXRhaWxJZD09PSdMaXZlcicpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3MgPSBkLmp1bmN0aW9uSWQuc3BsaXQoJ18nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb206IHBvc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbVN0YXJ0OiBwb3NbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21FbmQ6IHBvc1syXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqdW5jdGlvbklkOiBkLmp1bmN0aW9uSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdHJhbnNjcmlwdCBpc29mb3JtcyBmcm9tIHRoZSBHVEV4IHdlYiBzZXJ2aWNlOiAncmVmZXJlbmNlL3RyYW5zY3JpcHQ/cmVsZWFzZT12NyZnZW5jb2RlX2lkPSdcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogcmV0dXJucyBhIGRpY3Rpb25hcnkgb2YgdHJhbnNjcmlwdCBleG9uIG9iamVjdCBsaXN0cyBpbmRleGVkIGJ5IHRyYW5zY3JpcHQgSURzIC0tIEVOU1QgSURzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25zKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAnZXhvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBleG9uJztcbiAgICByZXR1cm4ganNvblthdHRyXS5yZWR1Y2UoKGEsIGQpPT57XG4gICAgICAgIC8vIGNoZWNrIHJlcXVpcmVkIGF0dHJpYnV0ZXNcbiAgICAgICAgWyd0cmFuc2NyaXB0SWQnLCAnY2hyb21vc29tZScsICdzdGFydCcsICdlbmQnLCAnZXhvbk51bWJlcicsICdleG9uSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsga1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFbZC50cmFuc2NyaXB0SWRdID09PSB1bmRlZmluZWQpIGFbZC50cmFuc2NyaXB0SWRdID0gW107XG4gICAgICAgIGQuY2hyb20gPSBkLmNocm9tb3NvbWU7XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgYVtkLnRyYW5zY3JpcHRJZF0ucHVzaChkKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfSwge30pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gZnJvbSB3ZWIgc2VydmljZSBleG9uXG4gKiByZXR1cm5zIGEgbGlzdCBvZiBhbGwgRXhvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhvbnNUb0xpc3QoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICdleG9uJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IGV4b24nO1xuICAgIHJldHVybiBqc29uW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufSBmcm9tIEdURXggd2ViIHNlcnZpY2UgJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiByZXR1cm5zIGEgbGlzdCBvZiBpc29mb3JtIG9iamVjdHMgc29ydGVkIGJ5IGxlbmd0aCBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRyYW5zY3JpcHRzKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAndHJhbnNjcmlwdCc7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdwYXJzZUlzb2Zvcm1zIGlucHV0IGVycm9yJyk7XG5cbiAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzLCB1c2UgdGhlIGZpcnN0IHRyYW5zY3JpcHQgYXMgdGhlIHRlc3QgY2FzZVxuICAgIFsndHJhbnNjcmlwdElkJywgJ3N0YXJ0JywgJ2VuZCddLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBqc29uW2F0dHJdLnNvcnQoKGEsIGIpPT57XG4gICAgICAgIGNvbnN0IGwxID0gTWF0aC5hYnMoYS5lbmQgLSBhLnN0YXJ0KSArIDE7XG4gICAgICAgIGNvbnN0IGwyID0gTWF0aC5hYnMoYi5lbmQgLSBiLnN0YXJ0KSArIDE7XG4gICAgICAgIHJldHVybiAtKGwxLWwyKTsgLy8gc29ydCBieSBpc29mb3JtIGxlbmd0aCBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgZmluYWwgKG1hc2tlZCkgZ2VuZSBtb2RlbCBleG9uIGV4cHJlc3Npb25cbiAqIGV4cHJlc3Npb24gaXMgbm9ybWFsaXplZCB0byByZWFkcyBwZXIga2JcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBvZiBleG9uIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBleG9ucyB7TGlzdH0gb2YgZXhvbnMgd2l0aCBwb3NpdGlvbnNcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBleG9uIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhvbkV4cHJlc3Npb24oZGF0YSwgZXhvbnMpe1xuICAgIGNvbnN0IGV4b25EaWN0ID0gZXhvbnMucmVkdWNlKChhLCBkKT0+e2FbZC5leG9uSWRdID0gZDsgcmV0dXJuIGE7fSwge30pO1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuRXhvbkV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VFeG9uRXhwcmVzc2lvbiBpbnB1dCBlcnJvcicpO1xuXG4gICAgY29uc3QgZXhvbk9iamVjdHMgPSBkYXRhW2F0dHJdO1xuICAgIC8vIGVycm9yLWNoZWNraW5nXG4gICAgWydtZWRpYW4nLCAnZXhvbklkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZXhvbk9iamVjdHNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VFeG9uRXhwcmVzc2lvbiBhdHRyIG5vdCBmb3VuZDogJyArIGQ7XG4gICAgfSk7XG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4gZXhvbiBjb3VudHNcbiAgICBleG9uT2JqZWN0cy5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIGNvbnN0IGV4b24gPSBleG9uRGljdFtkLmV4b25JZF07IC8vIGZvciByZXRyaWV2aW5nIGV4b24gcG9zaXRpb25zXG4gICAgICAgIC8vIGVycm9yLWNoZWNraW5nXG4gICAgICAgIFsnZW5kJywgJ3N0YXJ0J10uZm9yRWFjaCgocCk9PntcbiAgICAgICAgICAgIGlmICghZXhvbi5oYXNPd25Qcm9wZXJ0eShwKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZUV4b25FeHByZXNzaW9uIHBvc2l0aW9uIGF0dHIgbm90IGZvdW5kOiAnICsgcDtcbiAgICAgICAgfSk7XG4gICAgICAgIGQubCA9IGV4b24uZW5kIC0gZXhvbi5zdGFydCArIDE7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pL2QubDtcbiAgICAgICAgZC5kaXNwbGF5VmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pL2QubDtcbiAgICAgICAgZC54ID0gZC5leG9uSWQ7XG4gICAgICAgIGQueSA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGV4b24uc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBleG9uLmVuZDtcbiAgICAgICAgZC51bml0ID0gJ21lZGlhbiAnICsgZC51bml0ICsgJyBwZXIgYmFzZSc7XG4gICAgICAgIGQudGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICB9KTtcbiAgICByZXR1cm4gZXhvbk9iamVjdHMuc29ydCgoYSxiKT0+e1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PGIuY2hyb21TdGFydCkgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PmIuY2hyb21TdGFydCkgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0pOyAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG59XG5cbi8qKlxuICogUGFyc2UganVuY3Rpb24gbWVkaWFuIHJlYWQgY291bnQgZGF0YVxuICogQHBhcmFtIGRhdGEge0pTT059IG9mIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YganVuY3Rpb24gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5KdW5jdGlvbkV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VKdW5jdGlvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcblxuICAgIGNvbnN0IGp1bmN0aW9ucyA9IGRhdGFbYXR0cl07XG5cbiAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgIGlmIChqdW5jdGlvbnMgPT09IHVuZGVmaW5lZCB8fCBqdW5jdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignTm8ganVuY3Rpb24gZGF0YSBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuXG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4ganVuY3Rpb24gcmVhZCBjb3VudHNcbiAgICBqdW5jdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdqdW5jdGlvbklkJywgJ21lZGlhbicsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZ3IgRXJyb3I6IHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGF0dHIgbm90IGZvdW5kOiAnICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgbGV0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnggPSBkLmp1bmN0aW9uSWQ7XG4gICAgICAgIGQueSA9IHRpc3N1ZUlkO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgfSk7XG5cbiAgICAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgcmV0dXJuIGp1bmN0aW9ucy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmIChhLmp1bmN0aW9uSWQ+Yi5qdW5jdGlvbklkKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5qdW5jdGlvbklkPGIuanVuY3Rpb25JZCkgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5UcmFuc2NyaXB0RXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdQYXJzaW5nIEVycm9yOiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCB0cmFuc2NpcHQgYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudHJhbnNjcmlwdElkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb24sIGFuZCB0cmFuc3Bvc2UgdGhlIG1hdHJpeFxuICogQHBhcmFtIGRhdGFcbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZShkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xuICAgICAgICB0aHJvdygnUGFyc2luZyBFcnJvcjogcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZSBpbnB1dCBlcnJvci4nKTtcbiAgICB9XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCB0cmFuc2NyaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgY29uc3QgdGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLnkgPSBkLnRyYW5zY3JpcHRJZDtcbiAgICAgICAgZC54ID0gdGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC50aXNzdWVJZCA9IHRpc3N1ZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcGFyc2UgbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICogQHBhcmFtIGRhdGEge0pzb259IHdpdGggYXR0ciBtZWRpYW5HZW5lRXhwcmVzc2lvblxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1lZGlhbkV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5HZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCBhZGp1c3QgPSAxO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICAgIC8vIGVycm9yLWNoZWNraW5nIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGVzOlxuICAgIGlmIChkYXRhW2F0dHJdLmxlbmd0aCA9PT0gMCkgdGhyb3cgJ3BhcnNlTWVkaWFuRXhwcmVzc2lvbiBmaW5kcyBubyBkYXRhLic7XG4gICAgWydtZWRpYW4nLCAndGlzc3VlU2l0ZURldGFpbElkJywgJ2dlbmNvZGVJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkYXRhW2F0dHJdWzBdKTtcbiAgICAgICAgICAgIHRocm93IGBQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5ncDogJHtkfWA7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgcmVzdWx0cyA9IGRhdGFbYXR0cl07XG4gICAgcmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKGQpe1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC54ID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQueSA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHRzO1xufVxuXG4vKipcbiAqIHBhcnNlIHRoZSBleHByZXNzaW9uIGRhdGEgb2YgYSBnZW5lIGZvciBhIGdyb3VwZWQgdmlvbGluIHBsb3RcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZ2VuZSBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gY29sb3JzIHtEaWN0aW9uYXJ5fSB0aGUgdmlvbGluIGNvbG9yIGZvciBnZW5lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbihkYXRhLCB1c2VMb2c9dHJ1ZSwgY29sb3JzPXVuZGVmaW5lZCl7XG4gICAgY29uc3QgYXR0ciA9ICdnZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIFsnZGF0YScsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuZVN5bWJvbCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZC52YWx1ZXMgPSB1c2VMb2c/ZC5kYXRhLm1hcCgoZGQpPT57cmV0dXJuIE1hdGgubG9nMTAoK2RkKzEpfSk6ZC5kYXRhO1xuICAgICAgICBkLmdyb3VwID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQubGFiZWwgPSBkLmdlbmVTeW1ib2w7XG4gICAgICAgIGQuY29sb3IgPSBjb2xvcnM9PT11bmRlZmluZWQ/JyM5MGMxYzEnOmNvbG9yc1tkLmdlbmNvZGVJZF07XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIExEIChsaW5rYWdlIGRpc2VxdWlsaWJyaXVtIGRhdGEpXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gZnJvbSBHVEV4IGxkIHdlYiBzZXJ2aWNlXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUxEKGRhdGEpIHtcbiAgICBjb25zdCBhdHRyID0gJ2xkJztcbiAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBsZXQgcGFyc2VkID0gW107XG4gICAgbGV0IHVuaXF1ZSA9IHt9O1xuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBsZXQgbGFiZWxzID0gZFswXS5zcGxpdChcIixcIikuc29ydCgpOyAvLyBzb3J0IHRoZSB2YXJpYW50IElEc1xuICAgICAgICB1bmlxdWVbbGFiZWxzWzBdXSA9IHRydWU7XG4gICAgICAgIHVuaXF1ZVtsYWJlbHNbMV1dID0gdHJ1ZTtcbiAgICAgICAgcGFyc2VkLnB1c2goe1xuICAgICAgICAgICAgeDogbGFiZWxzWzBdLFxuICAgICAgICAgICAgZGlzcGxheVg6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQobGFiZWxzWzBdKSxcbiAgICAgICAgICAgIHk6IGxhYmVsc1sxXSxcbiAgICAgICAgICAgIGRpc3BsYXlZOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGxhYmVsc1sxXSksXG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VGbG9hdChkWzFdKSxcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogcGFyc2VGbG9hdChkWzFdKS50b1ByZWNpc2lvbigzKSAvLyB0b1ByZWNpc2lvbigpIHJldHVybnMgYSBzdHJpbmdcbiAgICAgICAgfSlcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyh1bmlxdWUpLmZvckVhY2goKGQpPT57XG4gICAgICAgIHBhcnNlZC5wdXNoKHtcbiAgICAgICAgICAgIHg6IGQsXG4gICAgICAgICAgICBkaXNwbGF5WDogZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChkKSxcbiAgICAgICAgICAgIHk6IGQsXG4gICAgICAgICAgICBkaXNwbGF5WTogZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChkKSxcbiAgICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICAgICAgZGlzcGxheVZhbHVlOiBcIjFcIlxuICAgICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiBwYXJzZWQ7XG59XG5cbi8qIHBhcnNlIHRoZSBleHByZXNzaW9uIGRhdGEgb2YgYSBnZW5lIGZvciBib3hwbG90XG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gZnJvbSBHVEV4IGdlbmUgZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHBhcmFtIHRpc3N1ZXMge09iamVjdH0gbWFwcGluZyBvZiB0aXNzdWUgaWRzIHRvIGxhYmVscyAodGlzc3VlIG5hbWUpXG4gKiBAcGFyYW0gY29sb3JzIHtPYmplY3R9IG1hcHBpbmcgb2YgdGlzc3VlIGlkcyB0byBib3hwbG90IGNvbG9yc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZW5lRXhwcmVzc2lvbkZvckJveHBsb3QoZGF0YSwgdGlzc3Vlcz11bmRlZmluZWQsIGNvbG9ycz11bmRlZmluZWQpIHtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmVFeHByZXNzaW9uJztcblxuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyhgUGFyc2luZyBlcnJvcjogcmVxdWlyZWQgSlNPTiBhdHRyaWJ1dGUgJHthdHRyfSBtaXNzaW5nLmApO1xuXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBbJ2RhdGEnLCAnZ2VuY29kZUlkJywgJ2dlbmVTeW1ib2wnLCAndGlzc3VlU2l0ZURldGFpbElkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmICghZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgYFBhcnNpbmcgZXJyb3I6IHJlcXVpcmVkIEpTT04gYXR0cmlidXRlICR7a30gaXMgbWlzc2luZyBmcm9tIGEgcmVjb3JkLmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLmxhYmVsID0gdGlzc3Vlcz09PXVuZGVmaW5lZD9kLnRpc3N1ZVNpdGVEZXRhaWxJZDp0aXNzdWVzW2QudGlzc3VlU2l0ZURldGFpbElkXTtcbiAgICAgICAgZC5jb2xvciA9IGNvbG9ycz09PXVuZGVmaW5lZD8nIzQ2ODJiNCc6Y29sb3JzW2QudGlzc3VlU2l0ZURldGFpbElkXTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIGdlbmVyYXRlIHZhcmlhbnQgSUQgc2hvcnRoYW5kXG4gKiBAcGFyYW0gaWRcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGlkKXtcbiAgICBsZXQgdGVtcCA9IGlkLnNwbGl0KFwiX1wiKTtcbiAgICBpZih0ZW1wWzJdLmxlbmd0aCA9PT0gMSAmJiB0ZW1wWzNdLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGlkO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID4gdGVtcFszXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFsyXSA9IFwiZGVsXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDMsIDEpOyAvLyBkZWxldGUgdGhlIGFsdFxuICAgIH1cbiAgICBlbHNlIGlmKHRlbXBbM10ubGVuZ3RoID4gdGVtcFsyXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFszXSA9IFwiaW5zXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDIsIDEpOyAvLyBkZWxldGUgdGhlIHJlZlxuICAgIH1cbiAgICBlbHNlIHsgLy8gdGVtcFszXS5sZW5ndGggPT0gdGVtcFsyXS5sZW5ndGggYW5kIHRlbXBbM10ubGVuZ3RoID4gMVxuICAgICAgICB0ZW1wWzNdID0gXCJzdWJcIjtcbiAgICAgICAgdGVtcC5zcGxpY2UoMiwgMSk7IC8vIGRlbGV0ZSB0aGUgcmVmXG4gICAgfVxuICAgIHJldHVybiB0ZW1wLmpvaW4oXCJfXCIpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuaW1wb3J0IHtzZWxlY3QsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3RyYW5zaXRpb259IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbHRpcCB7XG4gICAgY29uc3RydWN0b3IoaWQsIHZlcmJvc2U9ZmFsc2UsIG9mZnNldFg9MzAsIG9mZnNldFk9LTQwLCBkdXJhdGlvbj0xMDApe1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMudmVyYm9zZSA9IHZlcmJvc2U7XG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IG9mZnNldFg7XG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IG9mZnNldFk7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB9XG5cbiAgICBzaG93KGluZm8pIHtcbiAgICAgICAgaWYodGhpcy52ZXJib3NlKSBjb25zb2xlLmxvZyhpbmZvKTtcbiAgICAgICAgdGhpcy5lZGl0KGluZm8pO1xuICAgICAgICB0aGlzLm1vdmUoKTtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJpbmxpbmVcIilcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxLjApXG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjApO1xuICAgICAgICB0aGlzLmVkaXQoXCJcIik7XG4gICAgfVxuXG4gICAgbW92ZSh4ID0gZXZlbnQucGFnZVgsIHkgPSBldmVudC5wYWdlWSkge1xuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh4KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHkpO1xuICAgICAgICB9XG4gICAgICAgIHggPSB4ICsgdGhpcy5vZmZzZXRYOyAvLyBUT0RPOiBnZXQgcmlkIG9mIHRoZSBoYXJkLWNvZGVkIGFkanVzdG1lbnRcbiAgICAgICAgeSA9ICh5ICsgdGhpcy5vZmZzZXRZKTwwPzEwOnkrdGhpcy5vZmZzZXRZO1xuICAgICAgICBjb25zdCB0ID0gc2VsZWN0KCcjJyt0aGlzLmlkKVxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBgJHt4fXB4YClcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBgJHt5fXB4YClcbiAgICB9XG5cbiAgICBlZGl0KGluZm8pIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC5odG1sKGluZm8pXG4gICAgfVxufVxuXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgdmFyIG4gPSBzcGVjaWZpZXIubGVuZ3RoIC8gNiB8IDAsIGNvbG9ycyA9IG5ldyBBcnJheShuKSwgaSA9IDA7XG4gIHdoaWxlIChpIDwgbikgY29sb3JzW2ldID0gXCIjXCIgKyBzcGVjaWZpZXIuc2xpY2UoaSAqIDYsICsraSAqIDYpO1xuICByZXR1cm4gY29sb3JzO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVJnYkJhc2lzfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2NoZW1lKSB7XG4gIHJldHVybiBpbnRlcnBvbGF0ZVJnYkJhc2lzKHNjaGVtZVtzY2hlbWUubGVuZ3RoIC0gMV0pO1xufVxuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjFmNzdiNGZmN2YwZTJjYTAyY2Q2MjcyODk0NjdiZDhjNTY0YmUzNzdjMjdmN2Y3ZmJjYmQyMjE3YmVjZlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI3ZmM5N2ZiZWFlZDRmZGMwODZmZmZmOTkzODZjYjBmMDAyN2ZiZjViMTc2NjY2NjZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiMWI5ZTc3ZDk1ZjAyNzU3MGIzZTcyOThhNjZhNjFlZTZhYjAyYTY3NjFkNjY2NjY2XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImE2Y2VlMzFmNzhiNGIyZGY4YTMzYTAyY2ZiOWE5OWUzMWExY2ZkYmY2ZmZmN2YwMGNhYjJkNjZhM2Q5YWZmZmY5OWIxNTkyOFwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJmYmI0YWViM2NkZTNjY2ViYzVkZWNiZTRmZWQ5YTZmZmZmY2NlNWQ4YmRmZGRhZWNmMmYyZjJcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiYjNlMmNkZmRjZGFjY2JkNWU4ZjRjYWU0ZTZmNWM5ZmZmMmFlZjFlMmNjY2NjY2NjXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImU0MWExYzM3N2ViODRkYWY0YTk4NGVhM2ZmN2YwMGZmZmYzM2E2NTYyOGY3ODFiZjk5OTk5OVwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI2NmMyYTVmYzhkNjI4ZGEwY2JlNzhhYzNhNmQ4NTRmZmQ5MmZlNWM0OTRiM2IzYjNcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiOGRkM2M3ZmZmZmIzYmViYWRhZmI4MDcyODBiMWQzZmRiNDYyYjNkZTY5ZmNjZGU1ZDlkOWQ5YmM4MGJkY2NlYmM1ZmZlZDZmXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjRlNzlhN2YyOGUyY2UxNTc1OTc2YjdiMjU5YTE0ZmVkYzk0OWFmN2FhMWZmOWRhNzljNzU1ZmJhYjBhYlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImQ4YjM2NWY1ZjVmNTVhYjRhY1wiLFxuICBcImE2NjExYWRmYzI3ZDgwY2RjMTAxODU3MVwiLFxuICBcImE2NjExYWRmYzI3ZGY1ZjVmNTgwY2RjMTAxODU3MVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2M3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2Y1ZjVmNWM3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJhZjhkYzNmN2Y3Zjc3ZmJmN2JcIixcbiAgXCI3YjMyOTRjMmE1Y2ZhNmRiYTAwMDg4MzdcIixcbiAgXCI3YjMyOTRjMmE1Y2ZmN2Y3ZjdhNmRiYTAwMDg4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThmN2Y3ZjdkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTlhM2M5ZjdmN2Y3YTFkNzZhXCIsXG4gIFwiZDAxYzhiZjFiNmRhYjhlMTg2NGRhYzI2XCIsXG4gIFwiZDAxYzhiZjFiNmRhZjdmN2Y3YjhlMTg2NGRhYzI2XCIsXG4gIFwiYzUxYjdkZTlhM2M5ZmRlMGVmZTZmNWQwYTFkNzZhNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZTlhM2M5ZmRlMGVmZjdmN2Y3ZTZmNWQwYTFkNzZhNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZjdmN2Y3ZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxXCIsXG4gIFwiOGUwMTUyYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxMjc2NDE5XCIsXG4gIFwiOGUwMTUyYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZjdmN2Y3ZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxMjc2NDE5XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcIjk5OGVjM2Y3ZjdmN2YxYTM0MFwiLFxuICBcIjVlM2M5OWIyYWJkMmZkYjg2M2U2NjEwMVwiLFxuICBcIjVlM2M5OWIyYWJkMmY3ZjdmN2ZkYjg2M2U2NjEwMVwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmY3ZjdmN2ZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZjhhNjJmN2Y3Zjc2N2E5Y2ZcIixcbiAgXCJjYTAwMjBmNGE1ODI5MmM1ZGUwNTcxYjBcIixcbiAgXCJjYTAwMjBmNGE1ODJmN2Y3Zjc5MmM1ZGUwNTcxYjBcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdmN2Y3ZjdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZmZmZmZmOTk5OTk5XCIsXG4gIFwiY2EwMDIwZjRhNTgyYmFiYWJhNDA0MDQwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZmZmZmZmYmFiYWJhNDA0MDQwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZTBlMGUwOTk5OTk5NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZmZmZmZmZTBlMGUwOTk5OTk5NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZmZmZmZmZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkMWExYTFhXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZmZmZmZmZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkMWExYTFhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjkxYmZkYlwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZDllOTJjN2JiNlwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZDllOTJjN2JiNlwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA5MGUwZjNmODkxYmZkYjQ1NzViNFwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA5MGZmZmZiZmUwZjNmODkxYmZkYjQ1NzViNFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGZmZmZiZmUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNFwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNDMxMzY5NVwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGZmZmZiZmUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNDMxMzY5NVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWNmNjBcIixcbiAgXCJkNzE5MWNmZGFlNjFhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJmZmZmYmZkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTlkNTk0XCIsXG4gIFwiZDcxOTFjZmRhZTYxYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZmZmZmJmZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVmOTk5ZDhjOTJjYTI1ZlwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDIzOGI0NVwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlMGVjZjQ5ZWJjZGE4ODU2YTdcIixcbiAgXCJlZGY4ZmJiM2NkZTM4Yzk2YzY4ODQxOWRcIixcbiAgXCJlZGY4ZmJiM2NkZTM4Yzk2YzY4ODU2YTc4MTBmN2NcIixcbiAgXCJlZGY4ZmJiZmQzZTY5ZWJjZGE4Yzk2YzY4ODU2YTc4MTBmN2NcIixcbiAgXCJlZGY4ZmJiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ2ZTAxNmJcIixcbiAgXCJmN2ZjZmRlMGVjZjRiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ2ZTAxNmJcIixcbiAgXCJmN2ZjZmRlMGVjZjRiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ4MTBmN2M0ZDAwNGJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBmM2RiYThkZGI1NDNhMmNhXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0MmI4Y2JlXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg2OGFjMDg0MDgxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZThjOGZkYmI4NGUzNGEzM1wiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWQ3MzAxZlwiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZmIzMDAwMDdmMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlY2UyZjBhNmJkZGIxYzkwOTlcIixcbiAgXCJmNmVmZjdiZGM5ZTE2N2E5Y2YwMjgxOGFcIixcbiAgXCJmNmVmZjdiZGM5ZTE2N2E5Y2YxYzkwOTkwMTZjNTlcIixcbiAgXCJmNmVmZjdkMGQxZTZhNmJkZGI2N2E5Y2YxYzkwOTkwMTZjNTlcIixcbiAgXCJmNmVmZjdkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTY0NTBcIixcbiAgXCJmZmY3ZmJlY2UyZjBkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTY0NTBcIixcbiAgXCJmZmY3ZmJlY2UyZjBkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTZjNTkwMTQ2MzZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlN2YyYTZiZGRiMmI4Y2JlXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMDU3MGIwXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDQ1YThkMDIzODU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU3ZTFlZmM5OTRjN2RkMWM3N1wiLFxuICBcImYxZWVmNmQ3YjVkOGRmNjViMGNlMTI1NlwiLFxuICBcImYxZWVmNmQ3YjVkOGRmNjViMGRkMWM3Nzk4MDA0M1wiLFxuICBcImYxZWVmNmQ0YjlkYWM5OTRjN2RmNjViMGRkMWM3Nzk4MDA0M1wiLFxuICBcImYxZWVmNmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1NjkxMDAzZlwiLFxuICBcImY3ZjRmOWU3ZTFlZmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1NjkxMDAzZlwiLFxuICBcImY3ZjRmOWU3ZTFlZmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1Njk4MDA0MzY3MDAxZlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZGUwZGRmYTlmYjVjNTFiOGFcIixcbiAgXCJmZWViZTJmYmI0YjlmNzY4YTFhZTAxN2VcIixcbiAgXCJmZWViZTJmYmI0YjlmNzY4YTFjNTFiOGE3YTAxNzdcIixcbiAgXCJmZWViZTJmY2M1YzBmYTlmYjVmNzY4YTFjNTFiOGE3YTAxNzdcIixcbiAgXCJmZWViZTJmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzdcIixcbiAgXCJmZmY3ZjNmZGUwZGRmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzdcIixcbiAgXCJmZmY3ZjNmZGUwZGRmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzc0OTAwNmFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWRmOGIxN2ZjZGJiMmM3ZmI4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MjI1ZWE4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MjUzNDk0MDgxZDU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImY3ZmNiOWFkZGQ4ZTMxYTM1NFwiLFxuICBcImZmZmZjY2MyZTY5OTc4YzY3OTIzODQ0M1wiLFxuICBcImZmZmZjY2MyZTY5OTc4YzY3OTMxYTM1NDAwNjgzN1wiLFxuICBcImZmZmZjY2Q5ZjBhM2FkZGQ4ZTc4YzY3OTMxYTM1NDAwNjgzN1wiLFxuICBcImZmZmZjY2Q5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNWEzMlwiLFxuICBcImZmZmZlNWY3ZmNiOWQ5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNWEzMlwiLFxuICBcImZmZmZlNWY3ZmNiOWQ5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNjgzNzAwNDUyOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZmY3YmNmZWM0NGZkOTVmMGVcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjljYzRjMDJcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI5OTM0MDQ2NjI1MDZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZlZGEwZmViMjRjZjAzYjIwXCIsXG4gIFwiZmZmZmIyZmVjYzVjZmQ4ZDNjZTMxYTFjXCIsXG4gIFwiZmZmZmIyZmVjYzVjZmQ4ZDNjZjAzYjIwYmQwMDI2XCIsXG4gIFwiZmZmZmIyZmVkOTc2ZmViMjRjZmQ4ZDNjZjAzYjIwYmQwMDI2XCIsXG4gIFwiZmZmZmIyZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYjEwMDI2XCIsXG4gIFwiZmZmZmNjZmZlZGEwZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYjEwMDI2XCIsXG4gIFwiZmZmZmNjZmZlZGEwZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYmQwMDI2ODAwMDI2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImRlZWJmNzllY2FlMTMxODJiZFwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjIxNzFiNVwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NTE5YzA4MzA2YlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1ZTBhMWQ5OWIzMWEzNTRcIixcbiAgXCJlZGY4ZTliYWU0YjM3NGM0NzYyMzhiNDVcIixcbiAgXCJlZGY4ZTliYWU0YjM3NGM0NzYzMWEzNTQwMDZkMmNcIixcbiAgXCJlZGY4ZTljN2U5YzBhMWQ5OWI3NGM0NzYzMWEzNTQwMDZkMmNcIixcbiAgXCJlZGY4ZTljN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDVhMzJcIixcbiAgXCJmN2ZjZjVlNWY1ZTBjN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDVhMzJcIixcbiAgXCJmN2ZjZjVlNWY1ZTBjN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZjBmMGYwYmRiZGJkNjM2MzYzXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NTI1MjUyXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1MDAwMDAwXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmZWRmNWJjYmRkYzc1NmJiMVwiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODZhNTFhM1wiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzU0Mjc4ZjNmMDA3ZFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWUwZDJmYzkyNzJkZTJkMjZcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFjYjE4MWRcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWRhNTBmMTU2NzAwMGRcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlNmNlZmRhZTZiZTY1NTBkXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZDk0NzAxXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxYTYzNjAzN2YyNzA0XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgzMDAsIDAuNSwgMC4wKSwgY3ViZWhlbGl4KC0yNDAsIDAuNSwgMS4wKSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCB2YXIgd2FybSA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoLTEwMCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbmV4cG9ydCB2YXIgY29vbCA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMjYwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcblxudmFyIGMgPSBjdWJlaGVsaXgoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICBpZiAodCA8IDAgfHwgdCA+IDEpIHQgLT0gTWF0aC5mbG9vcih0KTtcbiAgdmFyIHRzID0gTWF0aC5hYnModCAtIDAuNSk7XG4gIGMuaCA9IDM2MCAqIHQgLSAxMDA7XG4gIGMucyA9IDEuNSAtIDEuNSAqIHRzO1xuICBjLmwgPSAwLjggLSAwLjkgKiB0cztcbiAgcmV0dXJuIGMgKyBcIlwiO1xufVxuIiwiaW1wb3J0IHtyZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuXG52YXIgYyA9IHJnYigpLFxuICAgIHBpXzFfMyA9IE1hdGguUEkgLyAzLFxuICAgIHBpXzJfMyA9IE1hdGguUEkgKiAyIC8gMztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICB2YXIgeDtcbiAgdCA9ICgwLjUgLSB0KSAqIE1hdGguUEk7XG4gIGMuciA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCkpICogeDtcbiAgYy5nID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMV8zKSkgKiB4O1xuICBjLmIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQgKyBwaV8yXzMpKSAqIHg7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5mdW5jdGlvbiByYW1wKHJhbmdlKSB7XG4gIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxuZXhwb3J0IHZhciBtYWdtYSA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTA5MDIwMjBiMDIwMjBkMDMwMzBmMDMwMzEyMDQwNDE0MDUwNDE2MDYwNTE4MDYwNTFhMDcwNjFjMDgwNzFlMDkwNzIwMGEwODIyMGIwOTI0MGMwOTI2MGQwYTI5MGUwYjJiMTAwYjJkMTEwYzJmMTIwZDMxMTMwZDM0MTQwZTM2MTUwZTM4MTYwZjNiMTgwZjNkMTkxMDNmMWExMDQyMWMxMDQ0MWQxMTQ3MWUxMTQ5MjAxMTRiMjExMTRlMjIxMTUwMjQxMjUzMjUxMjU1MjcxMjU4MjkxMTVhMmExMTVjMmMxMTVmMmQxMTYxMmYxMTYzMzExMTY1MzMxMDY3MzQxMDY5MzYxMDZiMzgxMDZjMzkwZjZlM2IwZjcwM2QwZjcxM2YwZjcyNDAwZjc0NDIwZjc1NDQwZjc2NDUxMDc3NDcxMDc4NDkxMDc4NGExMDc5NGMxMTdhNGUxMTdiNGYxMjdiNTExMjdjNTIxMzdjNTQxMzdkNTYxNDdkNTcxNTdlNTkxNTdlNWExNjdlNWMxNjdmNWQxNzdmNWYxODdmNjAxODgwNjIxOTgwNjQxYTgwNjUxYTgwNjcxYjgwNjgxYzgxNmExYzgxNmIxZDgxNmQxZDgxNmUxZTgxNzAxZjgxNzIxZjgxNzMyMDgxNzUyMTgxNzYyMTgxNzgyMjgxNzkyMjgyN2IyMzgyN2MyMzgyN2UyNDgyODAyNTgyODEyNTgxODMyNjgxODQyNjgxODYyNzgxODgyNzgxODkyODgxOGIyOTgxOGMyOTgxOGUyYTgxOTAyYTgxOTEyYjgxOTMyYjgwOTQyYzgwOTYyYzgwOTgyZDgwOTkyZDgwOWIyZTdmOWMyZTdmOWUyZjdmYTAyZjdmYTEzMDdlYTMzMDdlYTUzMTdlYTYzMTdkYTgzMjdkYWEzMzdkYWIzMzdjYWQzNDdjYWUzNDdiYjAzNTdiYjIzNTdiYjMzNjdhYjUzNjdhYjczNzc5YjgzNzc5YmEzODc4YmMzOTc4YmQzOTc3YmYzYTc3YzAzYTc2YzIzYjc1YzQzYzc1YzUzYzc0YzczZDczYzgzZTczY2EzZTcyY2MzZjcxY2Q0MDcxY2Y0MDcwZDA0MTZmZDI0MjZmZDM0MzZlZDU0NDZkZDY0NTZjZDg0NTZjZDk0NjZiZGI0NzZhZGM0ODY5ZGU0OTY4ZGY0YTY4ZTA0YzY3ZTI0ZDY2ZTM0ZTY1ZTQ0ZjY0ZTU1MDY0ZTc1MjYzZTg1MzYyZTk1NDYyZWE1NjYxZWI1NzYwZWM1ODYwZWQ1YTVmZWU1YjVlZWY1ZDVlZjA1ZjVlZjE2MDVkZjI2MjVkZjI2NDVjZjM2NTVjZjQ2NzVjZjQ2OTVjZjU2YjVjZjY2YzVjZjY2ZTVjZjc3MDVjZjc3MjVjZjg3NDVjZjg3NjVjZjk3ODVkZjk3OTVkZjk3YjVkZmE3ZDVlZmE3ZjVlZmE4MTVmZmI4MzVmZmI4NTYwZmI4NzYxZmM4OTYxZmM4YTYyZmM4YzYzZmM4ZTY0ZmM5MDY1ZmQ5MjY2ZmQ5NDY3ZmQ5NjY4ZmQ5ODY5ZmQ5YTZhZmQ5YjZiZmU5ZDZjZmU5ZjZkZmVhMTZlZmVhMzZmZmVhNTcxZmVhNzcyZmVhOTczZmVhYTc0ZmVhYzc2ZmVhZTc3ZmViMDc4ZmViMjdhZmViNDdiZmViNjdjZmViNzdlZmViOTdmZmViYjgxZmViZDgyZmViZjg0ZmVjMTg1ZmVjMjg3ZmVjNDg4ZmVjNjhhZmVjODhjZmVjYThkZmVjYzhmZmVjZDkwZmVjZjkyZmVkMTk0ZmVkMzk1ZmVkNTk3ZmVkNzk5ZmVkODlhZmRkYTljZmRkYzllZmRkZWEwZmRlMGExZmRlMmEzZmRlM2E1ZmRlNWE3ZmRlN2E5ZmRlOWFhZmRlYmFjZmNlY2FlZmNlZWIwZmNmMGIyZmNmMmI0ZmNmNGI2ZmNmNmI4ZmNmN2I5ZmNmOWJiZmNmYmJkZmNmZGJmXCIpKTtcblxuZXhwb3J0IHZhciBpbmZlcm5vID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMGEwMjAyMGMwMjAyMGUwMzAyMTAwNDAzMTIwNDAzMTQwNTA0MTcwNjA0MTkwNzA1MWIwODA1MWQwOTA2MWYwYTA3MjIwYjA3MjQwYzA4MjYwZDA4MjkwZTA5MmIxMDA5MmQxMTBhMzAxMjBhMzIxNDBiMzQxNTBiMzcxNjBiMzkxODBjM2MxOTBjM2UxYjBjNDExYzBjNDMxZTBjNDUxZjBjNDgyMTBjNGEyMzBjNGMyNDBjNGYyNjBjNTEyODBiNTMyOTBiNTUyYjBiNTcyZDBiNTkyZjBhNWIzMTBhNWMzMjBhNWUzNDBhNWYzNjA5NjEzODA5NjIzOTA5NjMzYjA5NjQzZDA5NjUzZTA5NjY0MDBhNjc0MjBhNjg0NDBhNjg0NTBhNjk0NzBiNmE0OTBiNmE0YTBjNmI0YzBjNmI0ZDBkNmM0ZjBkNmM1MTBlNmM1MjBlNmQ1NDBmNmQ1NTBmNmQ1NzEwNmU1OTEwNmU1YTExNmU1YzEyNmU1ZDEyNmU1ZjEzNmU2MTEzNmU2MjE0NmU2NDE1NmU2NTE1NmU2NzE2NmU2OTE2NmU2YTE3NmU2YzE4NmU2ZDE4NmU2ZjE5NmU3MTE5NmU3MjFhNmU3NDFhNmU3NTFiNmU3NzFjNmQ3ODFjNmQ3YTFkNmQ3YzFkNmQ3ZDFlNmQ3ZjFlNmM4MDFmNmM4MjIwNmM4NDIwNmI4NTIxNmI4NzIxNmI4ODIyNmE4YTIyNmE4YzIzNjk4ZDIzNjk4ZjI0Njk5MDI1Njg5MjI1Njg5MzI2Njc5NTI2Njc5NzI3NjY5ODI3NjY5YTI4NjU5YjI5NjQ5ZDI5NjQ5ZjJhNjNhMDJhNjNhMjJiNjJhMzJjNjFhNTJjNjBhNjJkNjBhODJlNWZhOTJlNWVhYjJmNWVhZDMwNWRhZTMwNWNiMDMxNWJiMTMyNWFiMzMyNWFiNDMzNTliNjM0NThiNzM1NTdiOTM1NTZiYTM2NTViYzM3NTRiZDM4NTNiZjM5NTJjMDNhNTFjMTNhNTBjMzNiNGZjNDNjNGVjNjNkNGRjNzNlNGNjODNmNGJjYTQwNGFjYjQxNDljYzQyNDhjZTQzNDdjZjQ0NDZkMDQ1NDVkMjQ2NDRkMzQ3NDNkNDQ4NDJkNTRhNDFkNzRiM2ZkODRjM2VkOTRkM2RkYTRlM2NkYjUwM2JkZDUxM2FkZTUyMzhkZjUzMzdlMDU1MzZlMTU2MzVlMjU3MzRlMzU5MzNlNDVhMzFlNTVjMzBlNjVkMmZlNzVlMmVlODYwMmRlOTYxMmJlYTYzMmFlYjY0MjllYjY2MjhlYzY3MjZlZDY5MjVlZTZhMjRlZjZjMjNlZjZlMjFmMDZmMjBmMTcxMWZmMTczMWRmMjc0MWNmMzc2MWJmMzc4MTlmNDc5MThmNTdiMTdmNTdkMTVmNjdlMTRmNjgwMTNmNzgyMTJmNzg0MTBmODg1MGZmODg3MGVmODg5MGNmOThiMGJmOThjMGFmOThlMDlmYTkwMDhmYTkyMDdmYTk0MDdmYjk2MDZmYjk3MDZmYjk5MDZmYjliMDZmYjlkMDdmYzlmMDdmY2ExMDhmY2EzMDlmY2E1MGFmY2E2MGNmY2E4MGRmY2FhMGZmY2FjMTFmY2FlMTJmY2IwMTRmY2IyMTZmY2I0MThmYmI2MWFmYmI4MWRmYmJhMWZmYmJjMjFmYmJlMjNmYWMwMjZmYWMyMjhmYWM0MmFmYWM2MmRmOWM3MmZmOWM5MzJmOWNiMzVmOGNkMzdmOGNmM2FmN2QxM2RmN2QzNDBmNmQ1NDNmNmQ3NDZmNWQ5NDlmNWRiNGNmNGRkNGZmNGRmNTNmNGUxNTZmM2UzNWFmM2U1NWRmMmU2NjFmMmU4NjVmMmVhNjlmMWVjNmRmMWVkNzFmMWVmNzVmMWYxNzlmMmYyN2RmMmY0ODJmM2Y1ODZmM2Y2OGFmNGY4OGVmNWY5OTJmNmZhOTZmOGZiOWFmOWZjOWRmYWZkYTFmY2ZmYTRcIikpO1xuXG5leHBvcnQgdmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7bWF4LCBtaW59IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzY2FsZVNlcXVlbnRpYWx9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0ICogYXMgZDNDaHJvbWF0aWMgZnJvbSBcImQzLXNjYWxlLWNocm9tYXRpY1wiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xvckNoYXJ0KHNodWZmbGU9dHJ1ZSl7XG4gICAgLy8gcmVmIGlsbHVzdHJhdG9yIGNvbG9yIHRoZW1lc1xuICAgIGNvbnN0IGNvbG9ycyA9IFtcbiAgICAgICAgXCJyZ2IoMTAwLDExOCwxMjApXCIsXG4gICAgICAgIFwicmdiKDEwMSwxNDEsMTQ1KVwiLFxuICAgICAgICBcInJnYigxMDMsMTI2LDgyKVwiLFxuICAgICAgICBcInJnYigxMDMsMTg0LDIyMilcIixcbiAgICAgICAgXCJyZ2IoMTA4LDExMCw4OClcIixcblxuICAgICAgICBcInJnYigxMDgsMTQ3LDEyOClcIixcbiAgICAgICAgXCJyZ2IoMTE5LDE0NCwxODIpXCIsXG4gICAgICAgIFwicmdiKDEyNiwxMzAsMTIyKVwiLFxuICAgICAgICBcInJnYigxMzMsMTczLDE4NilcIixcbiAgICAgICAgXCJyZ2IoMTM3LDExNCw5MSlcIixcbiAgICAgICAgXCJyZ2IoMTQ1LDE3MCwxNTcpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTQ1LDIwMSwyMzIpXCIsXG4gICAgICAgIFwicmdiKDE0NywxMDUsNjYpXCIsXG4gICAgICAgIFwicmdiKDE1OSwxMTQsMTE2KVwiLFxuICAgICAgICBcInJnYigxNTksMTg4LDE5MSlcIixcbiAgICAgICAgXCJyZ2IoMTU5LDIyOSwxOTQpXCIsXG4gICAgICAgIFwicmdiKDE2MywxNjMsMTcxKVwiLFxuXG4gICAgICAgIFwicmdiKDE2NCwyMDcsMTkwKVwiLFxuICAgICAgICBcInJnYigxNzIsMTA4LDEzMClcIixcbiAgICAgICAgXCJyZ2IoMTczLDg0LDExNClcIixcbiAgICAgICAgXCJyZ2IoMTc0LDE5NSwyMjIpXCIsXG4gICAgICAgIFwicmdiKDE3NiwyMDQsMTUzKVwiLFxuXG4gICAgICAgIFwicmdiKDE3OSwxODAsMTUwKVwiLFxuICAgICAgICBcInJnYigxODAsMjIwLDIzNylcIixcbiAgICAgICAgXCJyZ2IoMTgzLDIwMiwxMjEpXCIsXG4gICAgICAgIFwicmdiKDE5MiwyMDIsODUpXCIsXG4gICAgICAgIFwicmdiKDE5MywxOTEsMTkzXCIsXG4gICAgICAgIFwicmdiKDE5NSw5NywxMzYpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTk5LDEyMSwxMDIpXCIsXG4gICAgICAgIFwicmdiKDIwNywyMDIsNzYpXCIsXG4gICAgICAgIFwicmdiKDIwOSwyMTksMTg5KVwiLFxuICAgICAgICBcInJnYigyMTMsMjUxLDI1NSlcIixcbiAgICAgICAgXCJyZ2IoMjE1LDk0LDU2KVwiLFxuXG4gICAgICAgIFwicmdiKDIxOCwxMTQsMTI2KVwiLFxuICAgICAgICBcInJnYigyMjMsOTAsNzMpXCIsXG4gICAgICAgIFwicmdiKDIyNCwyNDcsMjE3KVwiLFxuICAgICAgICBcInJnYigyMjcsMjA1LDE2NClcIixcbiAgICAgICAgXCJyZ2IoMjI4LDE2OCwxODUpXCIsXG5cbiAgICAgICAgXCJyZ2IoMjMwLDE3NiwxNTIpXCIsXG4gICAgICAgIFwicmdiKDIzMiwyMTIsMTc1KVwiLFxuICAgICAgICBcInJnYigyMzksMjAxLDc2KVwiLFxuICAgICAgICBcInJnYigyNDAsMTI0LDEwOClcIixcbiAgICAgICAgXCJyZ2IoMjQ2LDIzMiwxNzcpXCIsXG5cbiAgICAgICAgXCJyZ2IoMjQ5LDIyOCwxNzMpXCIsXG4gICAgICAgIFwicmdiKDI1MiwyNDUsMTkxKVwiLFxuICAgICAgICBcInJnYigyNTUsMTg4LDEwMylcIixcbiAgICAgICAgXCJyZ2IoNDUsOTQsMTEwKVwiLFxuICAgICAgICBcInJnYig1MSwxNTMsMjA0KVwiLFxuXG4gICAgICAgIFwicmdiKDYwLDEyNCwxNDUpXCIsXG4gICAgICAgIFwicmdiKDYyLDg3LDE0NSlcIixcbiAgICAgICAgXCJyZ2IoNjUsMTE1LDEyMClcIixcbiAgICAgICAgXCJyZ2IoODksMjE2LDIyOSlcIixcbiAgICAgICAgXCJyZ2IoOTQsMTc4LDE1MylcIixcbiAgICAgICAgXCJyZ2IoOTUsMTI0LDEzNClcIlxuICAgIF07XG5cbiAgICBpZiAoc2h1ZmZsZSkgcmV0dXJuIHNodWZmbGVDb2xvcnMoY29sb3JzKTtcbiAgICByZXR1cm4gY29sb3JzO1xufVxuXG5mdW5jdGlvbiBzaHVmZmxlQ29sb3JzKGFycmF5KSB7XG4gICAgLy8gRmlzaGVyLVlhdGVzIHNodWZmbGVcbiAgICBsZXQgY291bnRlciA9IGFycmF5Lmxlbmd0aDtcblxuICAgIC8vIFdoaWxlIHRoZXJlIGFyZSBlbGVtZW50cyBpbiB0aGUgYXJyYXlcbiAgICB3aGlsZSAoY291bnRlciA+IDApIHtcbiAgICAgICAgLy8gUGljayBhIHJhbmRvbSBpbmRleFxuICAgICAgICBsZXQgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb3VudGVyKTtcblxuICAgICAgICAvLyBEZWNyZWFzZSBjb3VudGVyIGJ5IDFcbiAgICAgICAgY291bnRlci0tO1xuXG4gICAgICAgIC8vIEFuZCBzd2FwIHRoZSBsYXN0IGVsZW1lbnQgd2l0aCBpdFxuICAgICAgICBsZXQgdGVtcCA9IGFycmF5W2NvdW50ZXJdO1xuICAgICAgICBhcnJheVtjb3VudGVyXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdGVtcDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogZ2V0IGEgY29sb3Igc2NoZW1lIGJ5IG5hbWVcbiAqIEBwYXJhbSBuYW1lIHtlbnVtfTogQnVHbiwgT3JSZC4uLi5cbiAqIEByZXR1cm5zIHsqfTogYSBjb250aW51b3VzIGludGVycG9sYXRvciAodXNlZCB3aXRoIGQzLnNjYWxlU2VxdWVudGlhbClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbG9ySW50ZXJwb2xhdG9yKG5hbWUpe1xuICAgIC8vIHJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLXNjYWxlLWNocm9tYXRpYy9ibG9iL21hc3Rlci9SRUFETUUubWQjc2VxdWVudGlhbC1tdWx0aS1odWVcblxuICAgIGNvbnN0IGludGVycG9sYXRvcnMgPSB7XG4gICAgICAgIEJ1R246IGQzQ2hyb21hdGljLmludGVycG9sYXRlQnVHbixcbiAgICAgICAgT3JSZDogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVPclJkLFxuICAgICAgICBQdUJ1OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVB1QnUsXG4gICAgICAgIFlsR25CdTogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVZbEduQnUsXG4gICAgICAgIEJsdWVzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUJsdWVzLFxuICAgICAgICBPcmFuZ2VzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZU9yYW5nZXMsXG4gICAgICAgIEdyZWVuczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmVlbnMsXG4gICAgICAgIFB1cnBsZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUHVycGxlcyxcbiAgICAgICAgUmVkczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVSZWRzLFxuICAgICAgICBHcmV5czogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmV5cyxcbiAgICAgICAgR3JheXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlR3JleXMsXG5cbiAgICAgICAgLy8gZGl2ZXJnaW5nIGNvbG9yIHNjaGVtZXNcbiAgICAgICAgUmRCdTogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVSZEJ1LFxuICAgICAgICBSZEd5OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJkR3ksXG4gICAgICAgIFBpWUc6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUGlZRyxcbiAgICAgICAgUHVPcjogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdU9yLFxuICAgICAgICBSZFlsQnU6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUmRZbEJ1XG4gICAgfTtcbiAgICBpZiAoIWludGVycG9sYXRvcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29uc3QgZXJyID0gXCJVbnJlY29nbml6ZWQgY29sb3I6IFwiICsgbmFtZTtcbiAgICAgICAgYWxlcnQoZXJyKTtcbiAgICAgICAgdGhyb3coZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIGludGVycG9sYXRvcnNbbmFtZV07XG59XG5cbi8qKlxuICogcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtc2NhbGVcbiAqIHJlZmVyZW5jZTogaHR0cDovL2JsLm9ja3Mub3JnL2N1cnJhbi8zMDk0YjM3ZTYzYjkxOGJhYjBhMDY3ODdlMTYxNjA3YlxuICogc2NhbGVTZXF1ZW50aWFsIG1hcHMgdGhlIGNvbnRpbnVvdXMgZG9tYWluIHRvIGEgY29udGludW91cyBjb2xvciBzY2FsZVxuICogQHBhcmFtIGRhdGEge0xpc3R9IG9mIG51bWVyaWNhbCBkYXRhXG4gKiBAcGFyYW0gY29sb3JzIHtTdHJpbmd9IGEgY29sb3IgbmFtZSB0aGF0IGlzIGF2YWlsYWJsZSBpbiBnZXRDb2xvckludGVycG9sYXRvcigpXG4gKiBAcGFyYW0gZG1pbiB7TnVtYmVyfSBtaW5pbXVtIGRvbWFpbiB2YWx1ZVxuICogQHBhcmFtIGRtYXgge051bWJlcn0gbWF4aW11bSBkb21haW4gdmFsdWVcbiAqIEBwYXJhbSByZXZlcnNlIHtCb29sZWFufSByZXZlcnNlIHRoZSBjb2xvciBzY2hlbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbG9yU2NhbGUoZGF0YSwgY29sb3JzPVwiWWxHbkJ1XCIsIGRtaW49dW5kZWZpbmVkLCBkbWF4PXVuZGVmaW5lZCwgcmV2ZXJzZT1mYWxzZSkge1xuICAgIC8vIGxldCBkbWF4ID0gTWF0aC5yb3VuZChtYXgoZGF0YSkpO1xuICAgIGRtYXggPSBkbWF4ID09PSB1bmRlZmluZWQ/bWF4KGRhdGEpOmRtYXg7XG4gICAgZG1pbiA9IGRtaW4gPT09IHVuZGVmaW5lZD9taW4oZGF0YSk6ZG1pbjtcbiAgICBjb25zdCBzY2FsZSA9IHNjYWxlU2VxdWVudGlhbChnZXRDb2xvckludGVycG9sYXRvcihjb2xvcnMpKTtcbiAgICBpZihyZXZlcnNlKSBzY2FsZS5kb21haW4oW2RtYXgsIGRtaW5dKTtcbiAgICBlbHNlIHNjYWxlLmRvbWFpbihbZG1pbiwgZG1heF0pO1xuICAgIHJldHVybiBzY2FsZTtcbn1cblxuLyoqXG4gKiBEcmF3IGEgY29sb3IgbGVnZW5kIGJhci5cbiAqIERlcGVuZGVuY2llczogZXhwcmVzc2lvbk1hcC5jc3NcbiAqIEBwYXJhbSB0aXRsZSB7U3RyaW5nfVxuICogQHBhcmFtIGRvbSB7b2JqZWN0fSBEMyBkb20gb2JqZWN0XG4gKiBAcGFyYW0gc2NhbGUge09iamVjdH0gRDMgc2NhbGUgb2YgdGhlIGNvbG9yXG4gKiBAcGFyYW0gY29uZmlnIHtPYmplY3R9IHdpdGggYXR0cjogeCwgeVxuICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn1cbiAqIEBwYXJhbSB0aWNrcyB7SW50ZWdlcn0gbnVtYmVyIG9mIHRpY2tzIChvbmUtc2lkZWQpXG4gKiBAcGFyYW0gYmFzZSB7SW50ZWdlcn0gbG9nIGJhc2VcbiAqIEBwYXJhbSBjZWxsIHtPYmplY3R9IHdpdGggYXR0cmlidXRlczogaCwgd1xuICogQHBhcmFtIG9yaWVudGF0aW9uIHtlbnVtfSBoIG9yIHYsIGkuZS4gaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbFxuICogQHBhcmFtIGRpdmVyZ2luZyB7Qm9vbGVhbn0gd2hldGhlciB0aGUgY29sb3Igc2NoZW1lIGlzIGRpdmVyZ2luZ1xuICogQHBhcmFtIGNlbGxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRyYXdDb2xvckxlZ2VuZCh0aXRsZSwgZG9tLCBzY2FsZSwgY29uZmlnLCB1c2VMb2csIHRpY2tzPTEwLCBiYXNlPTEwLCBjZWxsPXtoOjEwLCB3OjQwfSwgb3JpZW50YXRpb249XCJoXCIsIGRpdmVyZ2luZz1mYWxzZSl7XG4gICAgbGV0IGRhdGEgPSBbXTtcblxuICAgIGlmKGRpdmVyZ2luZyl7XG4gICAgICAgIGxldCByYW5nZSA9IFsuLi5BcnJheSh0aWNrcysxKS5rZXlzKCldO1xuICAgICAgICBsZXQgaW50ZXJ2YWwgPSBzY2FsZS5kb21haW4oKVsxXS90aWNrcztcbiAgICAgICAgZGF0YSA9IHJhbmdlLm1hcCgoZCk9PmQqaW50ZXJ2YWwpO1xuICAgICAgICBkYXRhID0gZGF0YS5jb25jYXQocmFuZ2UuZmlsdGVyKChkKT0+ZCE9MCkubWFwKChkKT0+MC1kKmludGVydmFsKSkuc29ydCgoYSwgYikgPT4ge3JldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjt9KTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgbGV0IHJhbmdlID0gWy4uLkFycmF5KHRpY2tzKzEpLmtleXMoKV07XG4gICAgICAgIGxldCBpbnRlcnZhbCA9IHNjYWxlLmRvbWFpbigpWzFdL3RpY2tzO1xuICAgICAgICBkYXRhID0gcmFuZ2UubWFwKChkKT0+ZCppbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgLy8gbGVnZW5kIGdyb3Vwc1xuICAgIGNvbnN0IGxlZ2VuZHMgPSBkb20uYXBwZW5kKFwiZ1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtjb25maWcueH0sICR7Y29uZmlnLnl9KWApXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCIubGVnZW5kXCIpLmRhdGEoZGF0YSk7XG5cbiAgICBjb25zdCBnID0gbGVnZW5kcy5lbnRlcigpLmFwcGVuZChcImdcIikuY2xhc3NlZChcImxlZ2VuZFwiLCB0cnVlKTtcblxuICAgIGlmIChvcmllbnRhdGlvbiA9PT0gJ2gnKXtcbiAgICAgICAgIC8vIGxlZ2VuZCB0aXRsZVxuICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNvbG9yLWxlZ2VuZFwiKVxuICAgICAgICAgICAgLnRleHQodGl0bGUpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgLTEwKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGNlbGwuaClcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtjb25maWcueH0sICR7Y29uZmlnLnl9KWApO1xuXG4gICAgICAgIC8vIHRoZSBjb2xvciBsZWdlbmRcbiAgICAgICAgZy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQsIGkpID0+IGNlbGwudyppKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDUpXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGNlbGwudylcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGNlbGwuaClcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgc2NhbGUpO1xuXG4gICAgICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNvbG9yLWxlZ2VuZFwiKVxuICAgICAgICAgICAgLnRleHQoKGQpID0+IHVzZUxvZz8oTWF0aC5wb3coYmFzZSwgZCktMSkudG9QcmVjaXNpb24oMik6ZC50b1ByZWNpc2lvbigyKSkgLy8gYXNzdW1pbmcgdGhhdCByYXcgdmFsdWUgaGFkIGJlZW4gYWRqdXN0ZWQgYnkgKzEgdG8gZGVhbCB3aXRoIGxvZyB0cmFuc2Zvcm1pbmcgemVyb3NcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gY2VsbC53ICogaSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAgLy8gbGVnZW5kIHRpdGxlXG4gICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCh0aXRsZSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCA1KVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtjb25maWcueH0sICR7Y29uZmlnLnkgKyBjZWxsLmggKiBkYXRhLmxlbmd0aH0pcm90YXRlKDkwKWApO1xuXG4gICAgICAgIGcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQsIGkpID0+IGNlbGwuaCppKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjZWxsLncpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBjZWxsLmgpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHNjYWxlKTtcblxuICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiB1c2VMb2c/KE1hdGgucG93KGJhc2UsIGQpLTEpLnRvUHJlY2lzaW9uKDIpOmQudG9QcmVjaXNpb24oMikpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMTUpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQsIGkpID0+IGNlbGwuaCAqIGkgKyAoY2VsbC5oLzIpKTtcbiAgICB9XG5cblxuXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQge25lc3R9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge21heH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NlbGVjdCwgZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2NhbGVCYW5kLCBzY2FsZVNxcnR9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHticnVzaFh9IGZyb20gXCJkMy1icnVzaFwiO1xuXG5pbXBvcnQgVG9vbHRpcCBmcm9tIFwiLi9Ub29sdGlwXCI7XG5pbXBvcnQge3NldENvbG9yU2NhbGUsIGRyYXdDb2xvckxlZ2VuZH0gZnJvbSBcIi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1YmJsZU1hcCB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgdXNlTG9nPXRydWUsIGxvZ0Jhc2U9MTAsIGNvbG9yU2NoZW1lPVwiUmVkc1wiKXtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy51c2VMb2cgPSB1c2VMb2c7XG4gICAgICAgIHRoaXMubG9nQmFzZSA9IGxvZ0Jhc2U7XG4gICAgICAgIHRoaXMuY29sb3JTY2hlbWUgPSBjb2xvclNjaGVtZTtcblxuICAgICAgICAvLyBpbml0aWF0ZXMgYWRkaXRpb25hbCBhdHRyaWJ1dGVzXG4gICAgICAgIHRoaXMueFNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnlTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb2xvclNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJ1YmJsZVNjYWxlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRoaXMudG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGFkZFRvb2x0aXAocGFyZW50SWQpe1xuICAgICAgICBsZXQgcGFyZW50ID0galF1ZXJ5KGAjJHtwYXJlbnRJZH1gKTtcbiAgICAgICAgbGV0IHRvb2x0aXBJZCA9IHBhcmVudElkICsgJy10b29sdGlwJztcbiAgICAgICAgaWYgKGpRdWVyeShgIyR7dG9vbHRpcElkfWApLmxlbmd0aCA9PSAwKSBqUXVlcnkoJzxkaXYvPicpLmF0dHIoJ2lkJywgdG9vbHRpcElkKS5hcHBlbmRUbyhwYXJlbnQpO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcCh0b29sdGlwSWQpO1xuICAgICAgICBzZWxlY3QoYCMke3Rvb2x0aXBJZH1gKS5jbGFzc2VkKCdidWJibGVtYXAtdG9vbHRpcCcsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciB0aGUgYnViYmxlIG1hcCBpbiBjYW52YXNcbiAgICAgKiBAcGFyYW0gY2FudmFzIHtPQkpFQ1R9OiB0aGUgY2FudmFzIERPTSBEMyBzZWxlY3Qgb2JqZWN0XG4gICAgICogQHBhcmFtIGRpbWVuc2lvbnMge09CSkVDVH06IHRoZSBwbG90J3MgZGltZW5zaW9uc1xuICAgICAqIEBwYXJhbSBjb2xvclNjYWxlRG9tYWluIHtMSVNUfSBkZWZpbmUgdGhlIGNvbG9yIHNjYWxlIGRvbWFpbigpXG4gICAgICogQHBhcmFtIHNob3dMYWJlbHMge0Jvb2xlYW59XG4gICAgICogQHBhcmFtIGNvbHVtbkxhYmVsQW5nbGUge0ludGVnZXJ9XG4gICAgICogQHBhcmFtIGNvbHVtbkxhYmVsUG9zQWRqdXN0IHtJbnRlZ2VyfVxuICAgICAqL1xuICAgIGRyYXdDYW52YXMoY2FudmFzLFxuICAgICAgICBkaW1lbnNpb25zPXt3OjEwMDAsIGg6NjAwLCB0b3A6MjAsIGxlZnQ6MjB9LFxuICAgICAgICBjb2xvclNjYWxlRG9tYWluPXVuZGVmaW5lZCxcbiAgICAgICAgbGFiZWxDb25maWcgPSB7XG4gICAgICAgICAgICBjb2x1bW46IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFuZ2xlOiAzMCxcbiAgICAgICAgICAgICAgICBhZGp1c3Q6IDAsXG4gICAgICAgICAgICAgICAgbG9jYXRpb246ICdib3R0b20nLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICByb3c6IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICAgICAgICAgIGFkanVzdDogMCxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgICAgfVxuICAgIH0pe1xuICAgICAgICB0aGlzLl9zZXRTY2FsZXMoZGltZW5zaW9ucywgY29sb3JTY2FsZURvbWFpbik7XG5cbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMubm9kZSgpLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgLy9iYWNrZ3JvdW5kXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyNmZmZmZmYnO1xuICAgICAgICBjb250ZXh0LnJlY3QoMCwwLGNhbnZhcy5hdHRyKCd3aWR0aCcpLCBjYW52YXMuYXR0cignaGVpZ2h0JykpO1xuICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgLy8gYnViYmxlc1xuICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuY29sb3JTY2FsZShkLnZhbHVlKTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKHRoaXMueFNjYWxlKGQueCkgKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yLCB0aGlzLnlTY2FsZShkLnkpLCB0aGlzLmJ1YmJsZVNjYWxlKGQuciksIDAsIDIqTWF0aC5QSSk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHRleHQgbGFiZWxzXG4gICAgICAgIGxldCBjbCA9IGxhYmVsQ29uZmlnLmNvbHVtbjtcbiAgICAgICAgbGV0IHJsID0gbGFiZWxDb25maWcucm93O1xuICAgICAgICBpZihybC5zaG93KSB7XG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gY2wudGV4dEFsaWduO1xuICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICAgICAgY29udGV4dC5mb250ID0gJzEwcHggT3BlbiBTYW5zJztcbiAgICAgICAgICAgIHRoaXMueVNjYWxlLmRvbWFpbigpLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxUZXh0KGQsIHRoaXMueFNjYWxlLnJhbmdlKClbMF0gLSBybC5hZGp1c3QsIHRoaXMueVNjYWxlKGQpICsgMik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoY2wuc2hvdykge1xuICAgICAgICAgICAgdGhpcy54U2NhbGUuZG9tYWluKCkuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICdibGFjayc7XG4gICAgICAgICAgICAgICAgY29udGV4dC5mb250ID0gJzEwcHggT3BlbiBTYW5zJztcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRleHRBbGlnbiA9IGNsLnRleHRBbGlnbjtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSh0aGlzLnhTY2FsZShkKSt0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yIC0gMywgdGhpcy55U2NhbGUucmFuZ2UoKVsxXSArIGNsLmFkanVzdCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yb3RhdGUoY2wuYW5nbGU9PTA/MDpNYXRoLlBJLygxODAvY2wuYW5nbGUpKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxUZXh0KGQsIDAsIDApO1xuICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRyYXdDb21ibyhcbiAgICBtaW5pRG9tLFxuICAgIGZvY3VzRG9tLFxuICAgIGRpbWVuc2lvbnM9e3c6MTAwMCwgaDo2MDAsIHRvcDowLCBsZWZ0OjB9LFxuICAgIGNvbG9yU2NhbGVEb21haW49dW5kZWZpbmVkLFxuICAgIGFkZEJydXNoPXRydWUsXG4gICAgbGFiZWxDb25maWcgPSB7XG4gICAgICAgIGNvbHVtbjoge1xuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIGFuZ2xlOiAzMCxcbiAgICAgICAgICAgIGFkanVzdDogMCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiAnYm90dG9tJyxcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgICAgIH0sXG4gICAgICAgcm93OiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgYW5nbGU6IDAsXG4gICAgICAgICAgICBhZGp1c3Q6IDAsXG4gICAgICAgICAgICBsb2NhdGlvbjogJ2xlZnQnLFxuICAgICAgICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgIH1cbiAgICB9KSB7XG5cbiAgICAgICAgbGV0IHN2Z0RpbSA9IHtcbiAgICAgICAgICAgIHc6IGRpbWVuc2lvbnMudyxcbiAgICAgICAgICAgIGg6IGRpbWVuc2lvbnMuaDIsXG4gICAgICAgICAgICB0b3A6IGRpbWVuc2lvbnMudG9wLFxuICAgICAgICAgICAgbGVmdDogZGltZW5zaW9ucy5sZWZ0XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZHJhd1N2Zyhmb2N1c0RvbSwgc3ZnRGltLCBjb2xvclNjYWxlRG9tYWluLCA1MCwgbGFiZWxDb25maWcpO1xuXG4gICAgICAgIGxldCBidWJibGVzID0gbWluaURvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsaXAtcGF0aFwiLCBcInVybCgjY2xpcClcIik7XG4gICAgICAgIHRoaXMuX3NldE1pbmlTY2FsZXMoZGltZW5zaW9ucywgY29sb3JTY2FsZURvbWFpbik7XG4gICAgICAgIGJ1YmJsZXMuc2VsZWN0QWxsKFwiLm1pbmktbWFwLWNlbGxcIilcbiAgICAgICAgICAgIC5kYXRhKHRoaXMuZGF0YSwgKGQpID0+IGQudmFsdWUpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ21pbmktbWFwLWNlbGwnKVxuICAgICAgICAgICAgLmF0dHIoXCJyb3dcIiwgKGQpID0+IGB4JHt0aGlzLnhTY2FsZU1pbmkuZG9tYWluKCkuaW5kZXhPZihkLngpfWApXG4gICAgICAgICAgICAuYXR0cihcImNvbFwiLCAoZCkgPT4gYHkke3RoaXMueVNjYWxlTWluaS5kb21haW4oKS5pbmRleE9mKGQueSl9YClcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IHRoaXMueFNjYWxlTWluaShkLngpICsgdGhpcy54U2NhbGVNaW5pLmJhbmR3aWR0aCgpIC8gMilcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpID0+IHRoaXMueVNjYWxlTWluaShkLnkpKVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIChkKSA9PiB0aGlzLmJ1YmJsZVNjYWxlTWluaShkLnIpKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCkgPT4gdGhpcy5jb2xvclNjYWxlKGQudmFsdWUpKTtcblxuICAgICAgICBpZiAoYWRkQnJ1c2gpIHtcblxuICAgICAgICAgICAgbGV0IGJydXNoID0gYnJ1c2hYKClcbiAgICAgICAgICAgICAgICAuZXh0ZW50KFtcbiAgICAgICAgICAgICAgICAgICAgWzAsIDBdLFxuICAgICAgICAgICAgICAgICAgICBbZGltZW5zaW9ucy53LCBkaW1lbnNpb25zLmhdXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAub24oXCJicnVzaFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9icnVzaGVkKGZvY3VzRG9tLCBsYWJlbENvbmZpZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtaW5pRG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYnJ1c2hcIilcbiAgICAgICAgICAgICAgICAuY2FsbChicnVzaClcbiAgICAgICAgICAgICAgICAvLyAuY2FsbChicnVzaC5tb3ZlLCB0aGlzLnhTY2FsZU1pbmkucmFuZ2UoKSk7XG4gICAgICAgICAgICAgICAgLmNhbGwoYnJ1c2gubW92ZSwgWzAsIHRoaXMueFNjYWxlTWluaS5iYW5kd2lkdGgoKSAqIDUwXSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGRyYXdTdmcoZG9tLCBkaW1lbnNpb25zPXt3OjEwMDAsIGg6NjAwLCB0b3A6MCwgbGVmdDowfSwgY29sb3JTY2FsZURvbWFpbj11bmRlZmluZWQsIGJydXNoU2l6ZT01MCwgbGFiZWxDb25maWc9e1xuICAgICAgICAgICAgY29sdW1uOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbmdsZTogMzAsXG4gICAgICAgICAgICAgICAgYWRqdXN0OiAwLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnYm90dG9tJyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgcm93OiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbmdsZTogMCxcbiAgICAgICAgICAgICAgICBhZGp1c3Q6IDAsXG4gICAgICAgICAgICAgICAgbG9jYXRpb246ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgIH1cbiAgICAgICAgfSl7XG4gICAgICAgIHRoaXMuX3NldFNjYWxlcyhkaW1lbnNpb25zLCBjb2xvclNjYWxlRG9tYWluLCBicnVzaFNpemUpO1xuICAgICAgICBsZXQgdG9vbHRpcCA9IHRoaXMudG9vbHRpcDtcbiAgICAgICAgLy8gYnViYmxlc1xuICAgICAgICBsZXQgYnViYmxlcyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsaXAtcGF0aFwiLCBcInVybCgjY2xpcClcIik7XG5cbiAgICAgICAgYnViYmxlcy5zZWxlY3RBbGwoXCIuYnViYmxlLW1hcC1jZWxsXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLmRhdGEsIChkKT0+ZC52YWx1ZSlcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYnViYmxlLW1hcC1jZWxsXCIpXG4gICAgICAgICAgICAuYXR0cihcInJvd1wiLCAoZCk9PiBgeCR7dGhpcy54U2NhbGUuZG9tYWluKCkuaW5kZXhPZihkLngpfWApXG4gICAgICAgICAgICAuYXR0cihcImNvbFwiLCAoZCk9PiBgeSR7dGhpcy55U2NhbGUuZG9tYWluKCkuaW5kZXhPZihkLnkpfWApXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIChkKSA9PiB0aGlzLnhTY2FsZShkLngpICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpID0+IHRoaXMueVNjYWxlKGQueSkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIChkKSA9PiB0aGlzLmJ1YmJsZVNjYWxlKGQucikpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiB0aGlzLmNvbG9yU2NhbGUoZC52YWx1ZSkpXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gc2VsZWN0KHRoaXMpO1xuICAgICAgICAgICAgICAgIGxldCByb3dDbGFzcyA9IHNlbGVjdGVkLmF0dHIoXCJyb3dcIik7XG4gICAgICAgICAgICAgICAgbGV0IGNvbENsYXNzID0gc2VsZWN0ZWQuYXR0cihcImNvbFwiKTtcbiAgICAgICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmJ1YmJsZS1tYXAteGxhYmVsXCIpLmZpbHRlcihgLiR7cm93Q2xhc3N9YClcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgZG9tLnNlbGVjdEFsbChcIi5idWJibGUtbWFwLXlsYWJlbFwiKS5maWx0ZXIoYC4ke2NvbENsYXNzfWApXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbGV0IGRpc3BsYXlWYWx1ZSA9IGQuZGlzcGxheVZhbHVlID09PSB1bmRlZmluZWQ/cGFyc2VGbG9hdChkLnZhbHVlLnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oNCk6ZC5kaXNwbGF5VmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IGRpc3BsYXlTaXplID0gZC5yRGlzcGxheVZhbHVlID09PSB1bmRlZmluZWQ/IGQuci50b1ByZWNpc2lvbig0KTpkLnJEaXNwbGF5VmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IGRpc3BsYXlYID0gZC5kaXNwbGF5WCA9PT0gdW5kZWZpbmVkPyBkLng6ZC5kaXNwbGF5WDtcbiAgICAgICAgICAgICAgICBsZXQgZGlzcGxheVkgPSBkLmRpc3BsYXlZID09PSB1bmRlZmluZWQ/IGQueTpkLmRpc3BsYXlZO1xuICAgICAgICAgICAgICAgIHRvb2x0aXAuc2hvdyhgQ29sdW1uOiAke2Rpc3BsYXlYfSA8YnIvPiBSb3c6ICR7ZGlzcGxheVl9PGJyLz4gVmFsdWU6ICR7ZGlzcGxheVZhbHVlfTxici8+IFNpemU6ICR7ZGlzcGxheVNpemV9YCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHRleHQgbGFiZWxzXG4gICAgICAgIGxldCBjbCA9IGxhYmVsQ29uZmlnLmNvbHVtbjtcbiAgICAgICAgbGV0IHJsID0gbGFiZWxDb25maWcucm93O1xuICAgICAgICBpZihjbC5zaG93KSB7XG4gICAgICAgICAgICAvLyBjb2x1bW4gbGFiZWxzXG4gICAgICAgICAgICBsZXQgbG9va3VwID0ge307XG4gICAgICAgICAgICBuZXN0KClcbiAgICAgICAgICAgICAgICAua2V5KChkKSA9PiBkLngpIC8vIGdyb3VwIHRoaXMuZGF0YSBieSBkLnhcbiAgICAgICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbG9va3VwW2Qua2V5XSA9IGQudmFsdWVzWzBdLmRpc3BsYXlYXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgeExhYmVscyA9IGRvbS5zZWxlY3RBbGwoJy5idWJibGUtbWFwLXhsYWJlbCcpLmRhdGEodGhpcy54U2NhbGUuZG9tYWluKCkpXG4gICAgICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgKGQsIGkpID0+IGBidWJibGUtbWFwLXhsYWJlbCB4JHtpfWApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBjbC50ZXh0QWxpZ249PSdsZWZ0Jz8nc3RhcnQnOidlbmQnKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2l6ZSA9IE1hdGguZmxvb3IodGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvIDIpPjEyPzEyOk1hdGguZmxvb3IodGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvIDIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7c2l6ZX1weGBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUoZCkgKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSAvIDM7XG4gICAgICAgICAgICAgICAgICAgIGxldCB5ID0gdGhpcy55U2NhbGUucmFuZ2UoKVsxXSArIGNsLmFkanVzdDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSkgcm90YXRlKCR7Y2wuYW5nbGV9KWA7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGV4dCgoZCkgPT4gbG9va3VwW2RdfHxkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmwuc2hvdyl7XG4gICAgICAgICAgICAvLyByb3cgbGFiZWxzXG4gICAgICAgICAgICBsZXQgbG9va3VwID0ge307XG4gICAgICAgICAgICBuZXN0KClcbiAgICAgICAgICAgICAgICAua2V5KChkKSA9PiBkLnkpIC8vIGdyb3VwIHRoaXMuZGF0YSBieSBkLnlcbiAgICAgICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbG9va3VwW2Qua2V5XSA9IGQudmFsdWVzWzBdLmRpc3BsYXlZXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgeUxhYmVscyA9IGRvbS5zZWxlY3RBbGwoJy5idWJibGUtbWFwLXlsYWJlbCcpLmRhdGEodGhpcy55U2NhbGUuZG9tYWluKCkpXG4gICAgICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgKGQsIGkpID0+IGBidWJibGUtbWFwLXlsYWJlbCB5JHtpfWApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBybC50ZXh0QWxpZ249PSdsZWZ0Jz8nc3RhcnQnOidlbmQnKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgKCk9PntcblxuICAgICAgICAgICAgICAgICAgICBsZXQgc2l6ZSA9IE1hdGguZmxvb3IodGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMS41KT4xND8xNDpNYXRoLmZsb29yKHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzEuNSk8MTA/MTA6TWF0aC5mbG9vcih0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8xLjUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7c2l6ZX1weGBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUucmFuZ2UoKVswXSAtIHJsLmFkanVzdDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHkgPSB0aGlzLnlTY2FsZShkKSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzEuNTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSkgcm90YXRlKCR7cmwuYW5nbGV9KWA7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGV4dCgoZCkgPT4gbG9va3VwW2RdfHxkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRyYXdDb2xvckxlZ2VuZChkb20sIGxlZ2VuZENvbmZpZz17eDowLCB5OjB9LCB0aWNrcz01LCB1bml0PVwiXCIpe1xuICAgICAgICBkcmF3Q29sb3JMZWdlbmQodW5pdCwgZG9tLCB0aGlzLmNvbG9yU2NhbGUsIGxlZ2VuZENvbmZpZywgdGhpcy51c2VMb2csIHRpY2tzLCB0aGlzLmxvZ0Jhc2UsIHtoOjEwLCB3OjQwfSwgXCJoXCIsIHRydWUpO1xuICAgIH1cblxuICAgIGRyYXdCdWJibGVMZWdlbmQoZG9tLCBsZWdlbmRDb25maWc9e3g6MCwgeTowLCB0aXRsZTpcIkJ1YmJsZSBsZWdlbmRcIn0sIHRpY2tzPTUsIHVuaXQ9XCJcIil7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIuYm1hcC1idWJibGUtbGVnZW5kXCIpLnJlbW92ZSgpOyAvLyBjbGVhciBwcmV2aW91c2x5IHJlbmRlcmVkIGxlZ2VuZCBpZiBhbnkuXG5cbiAgICAgICAgbGV0IHJhbmdlID0gWy4uLkFycmF5KHRpY2tzKzEpLmtleXMoKV07XG4gICAgICAgIGxldCBpbnRlcnZhbCA9ICh0aGlzLmJ1YmJsZVNjYWxlLmRvbWFpbigpWzFdLXRoaXMuYnViYmxlU2NhbGUuZG9tYWluKClbMF0pL3RpY2tzO1xuICAgICAgICBsZXQgZGF0YSA9IHJhbmdlLm1hcCgoZCk9PnRoaXMuYnViYmxlU2NhbGUuZG9tYWluKClbMF0rZCppbnRlcnZhbCk7IC8vIGFzc3VtaW5nIGQgaXMgcG9zaXRpdmVcblxuICAgICAgICAvLyBsZWdlbmQgZ3JvdXBzXG4gICAgICAgIGxldCBsZWdlbmRHID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYm1hcC1idWJibGUtbGVnZW5kXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2xlZ2VuZENvbmZpZy54fSwgJHtsZWdlbmRDb25maWcueX0pYCk7XG4gICAgICAgICAvLyBsZWdlbmQgdGl0bGVcbiAgICAgICAgbGVnZW5kRy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dChsZWdlbmRDb25maWcudGl0bGUpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgLTEwKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDEwKTtcblxuICAgICAgICBsZXQgbGVnZW5kcyA9IGxlZ2VuZEcuc2VsZWN0QWxsKFwiLmxlZ2VuZFwiKS5kYXRhKGRhdGEpO1xuXG4gICAgICAgIGxldCBnID0gbGVnZW5kcy5lbnRlcigpLmFwcGVuZChcImdcIikuY2xhc3NlZChcImxlZ2VuZFwiLCB0cnVlKTtcbiAgICAgICAgLy8gdGhlIGJ1YmJsZXNcbiAgICAgICAgbGV0IGNlbGxXID0gNDA7XG4gICAgICAgIGcuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIChkLCBpKSA9PiBjZWxsVyppKVxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAxMClcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAoZCk9PnRoaXMuYnViYmxlU2NhbGUoZCkpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwiYmxhY2tcIik7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gdGhpcy51c2VMb2c/KE1hdGgucG93KGJhc2UsIGQpKS50b1ByZWNpc2lvbigyKTpkLnRvUHJlY2lzaW9uKDIpKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiBjZWxsVyAqIGkgLTUpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMCk7XG4gICAgfVxuXG4gICAgLy8gcHJpdmF0ZSBtZXRob2RzXG4gICAgX2JydXNoZWQoZm9jdXNEb20sIGxhYmVsQ29uZmlnKXtcblxuICAgICAgICBsZXQgc2VsZWN0aW9uID0gZXZlbnQuc2VsZWN0aW9uO1xuICAgICAgICBsZXQgYnJ1c2hMZWZ0ID0gTWF0aC5yb3VuZChzZWxlY3Rpb25bMF0gLyB0aGlzLnhTY2FsZU1pbmkuc3RlcCgpKTtcbiAgICAgICAgbGV0IGJydXNoUmlnaHQgPSBNYXRoLnJvdW5kKHNlbGVjdGlvblsxXSAvIHRoaXMueFNjYWxlTWluaS5zdGVwKCkpO1xuICAgICAgICB0aGlzLnhTY2FsZS5kb21haW4odGhpcy54U2NhbGVNaW5pLmRvbWFpbigpLnNsaWNlKGJydXNoTGVmdCwgYnJ1c2hSaWdodCkpOyAvLyByZXNldCB0aGUgeFNjYWxlIGRvbWFpblxuICAgICAgICBsZXQgYnViYmxlTWF4ID0gdGhpcy5fc2V0QnViYmxlTWF4KCk7XG4gICAgICAgIHRoaXMuYnViYmxlU2NhbGUgPSB0aGlzLl9zZXRCdWJibGVTY2FsZSh7bWF4OiBidWJibGVNYXgsIG1pbjogMn0pOyAvLyBUT0RPOiBjaGFuZ2UgaGFyZC1jb2RlZCBtaW4gcmFkaXVzXG5cbiAgICAgICAgLy8gdXBkYXRlIHRoZSBmb2N1cyBidWJibGVzXG4gICAgICAgIGZvY3VzRG9tLnNlbGVjdEFsbChcIi5idWJibGUtbWFwLWNlbGxcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMueFNjYWxlKGQueCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHggPT09IHVuZGVmaW5lZCA/IHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpIC8gMiA6IHggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSAvIDI7XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMueFNjYWxlKGQueCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHggPT09IHVuZGVmaW5lZCA/IDAgOiB0aGlzLmJ1YmJsZVNjYWxlKGQucik7IC8vIGluZGljYXRpbmcgdGhhdCB0aGUgYnViYmxlIGlzIG5vdCBpbiBmb2N1cyB6b25lLCBzbyBzZXQgdGhlIHJhZGl1cyB0byB6ZXJvXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyB1cGRhdGUgdGhlIGNvbHVtbiBsYWJlbHNcbiAgICAgICAgZm9jdXNEb20uc2VsZWN0QWxsKFwiLmJ1YmJsZS1tYXAteGxhYmVsXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUoZCkgKyA1IHx8IDA7IC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgICAgICAgICAgICAgbGV0IHkgPSB0aGlzLnlTY2FsZS5yYW5nZSgpWzFdICsgbGFiZWxDb25maWcuY29sdW1uLmFkanVzdDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KSByb3RhdGUoJHtsYWJlbENvbmZpZy5jb2x1bW4uYW5nbGV9KWA7XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnhTY2FsZShkKTsgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVcbiAgICAgICAgICAgICAgICByZXR1cm4geCA9PT0gdW5kZWZpbmVkID8gXCJub25lXCIgOiBcImJsb2NrXCI7XG4gICAgICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIF9zZXRNaW5pU2NhbGVzKGRpbWVuc2lvbnM9e3c6MTAwMCwgaDo2MDAsIHRvcDoyMCwgbGVmdDoyMH0sIGNEb21haW4pe1xuICAgICAgICBpZiAodGhpcy54U2NhbGVNaW5pID09PSB1bmRlZmluZWQpIHRoaXMueFNjYWxlTWluaSA9IHRoaXMuX3NldFhTY2FsZU1pbmkoZGltZW5zaW9ucyk7XG4gICAgICAgIGlmICh0aGlzLnlTY2FsZU1pbmkgPT09IHVuZGVmaW5lZCkgdGhpcy55U2NhbGVNaW5pID0gdGhpcy5fc2V0WVNjYWxlTWluaShkaW1lbnNpb25zKTtcbiAgICAgICAgaWYgKHRoaXMuY29sb3JTY2FsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLmNvbG9yU2NhbGUgPSB0aGlzLl9zZXRDb2xvclNjYWxlKGNEb21haW4pO1xuICAgICAgICBpZiAodGhpcy5idWJibGVTY2FsZU1pbmkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IGJ1YmJsZU1heCA9IHRoaXMuX3NldEJ1YmJsZU1heCh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuYnViYmxlU2NhbGVNaW5pID0gdGhpcy5fc2V0QnViYmxlU2NhbGUoe21heDogYnViYmxlTWF4LCBtaW46MX0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3NldFNjYWxlcyhkaW1lbnNpb25zPXt3OjEwMDAsIGg6NjAwLCB0b3A6MjAsIGxlZnQ6MjB9LCBjRG9tYWluKXtcbiAgICAgICAgaWYgKHRoaXMueFNjYWxlID09PSB1bmRlZmluZWQpIHRoaXMueFNjYWxlID0gdGhpcy5fc2V0WFNjYWxlKGRpbWVuc2lvbnMpO1xuICAgICAgICBpZiAodGhpcy55U2NhbGUgPT09IHVuZGVmaW5lZCkgdGhpcy55U2NhbGUgPSB0aGlzLl9zZXRZU2NhbGUoZGltZW5zaW9ucyk7XG4gICAgICAgIGlmICh0aGlzLmNvbG9yU2NhbGUgPT09IHVuZGVmaW5lZCkgdGhpcy5jb2xvclNjYWxlID0gdGhpcy5fc2V0Q29sb3JTY2FsZShjRG9tYWluKTtcbiAgICAgICAgaWYgKHRoaXMuYnViYmxlU2NhbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IGJ1YmJsZU1heCA9IHRoaXMuX3NldEJ1YmJsZU1heCgpO1xuICAgICAgICAgICAgdGhpcy5idWJibGVTY2FsZSA9IHRoaXMuX3NldEJ1YmJsZVNjYWxlKHttYXg6YnViYmxlTWF4LCBtaW46IDJ9KTsgLy8gVE9ETzogY2hhbmdlIGhhcmQtY29kZWQgbWluIHJhZGl1c1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3BhcnNlWExpc3QoKXtcbiAgICAgICAgIGxldCB4TGlzdCA9IG5lc3QoKVxuICAgICAgICAgICAgLmtleSgoZCkgPT4gZC54KSAvLyBncm91cCB0aGlzLmRhdGEgYnkgZC54XG4gICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpXG4gICAgICAgICAgICAubWFwKChkKSA9PiBkLmtleSkgLy8gdGhlbiByZXR1cm4gdGhlIHVuaXF1ZSBsaXN0IG9mIGQueFxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IHtyZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47fSk7XG4gICAgICAgICByZXR1cm4geExpc3Q7XG4gICAgfVxuXG4gICAgX3BhcnNlWUxpc3QoKXtcbiAgICAgICAgbGV0IHlMaXN0ID0gbmVzdCgpXG4gICAgICAgICAgICAua2V5KChkKSA9PiBkLnkpIC8vIGdyb3VwIHRoaXMuZGF0YSBieSBkLnhcbiAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSlcbiAgICAgICAgICAgIC5tYXAoKGQpID0+IGQua2V5KSAvLyB0aGVuIHJldHVybiB0aGUgdW5pcXVlIGxpc3Qgb2YgZC54XG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4ge3JldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjt9KTtcbiAgICAgICAgcmV0dXJuIHlMaXN0O1xuICAgIH1cblxuICAgIF9zZXRYU2NhbGVNaW5pKGRpbT17dzoxMDAwLCBsZWZ0OjIwfSl7XG4gICAgICAgIGxldCB4TGlzdCA9IHRoaXMuX3BhcnNlWExpc3QoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldFhTY2FsZShkaW0sIHhMaXN0KTtcbiAgICB9XG5cbiAgICBfc2V0WFNjYWxlKGRpbT17dzoxMDAwLCBsZWZ0OjIwfSwgeExpc3QgPSB1bmRlZmluZWQpe1xuICAgICAgICAvLyB1c2UgZDMgbmVzdCBkYXRhIHN0cnVjdHVyZSB0byBmaW5kIHRoZSB1bmlxdWUgbGlzdCBvZiB4IGxhYmVsc1xuICAgICAgICAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1jb2xsZWN0aW9uI25lc3RzXG4gICAgICAgIHhMaXN0ID0geExpc3Q9PT11bmRlZmluZWQ/dGhpcy5fcGFyc2VYTGlzdCgpOnhMaXN0O1xuICAgICAgICByZXR1cm4gc2NhbGVCYW5kKCkgLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtc2NhbGUjc2NhbGVCYW5kXG4gICAgICAgICAgICAuZG9tYWluKHhMaXN0KSAvLyBwZXJoYXBzIGl0IGlzbid0IG5lY2Vzc2FyeSB0byBzdG9yZSB4TGlzdCwgaXQgY291bGQgYmUgcmV0cmlldmVkIGJ5IHhTY2FsZS5kb21haW5cbiAgICAgICAgICAgIC5yYW5nZShbZGltLmxlZnQsIGRpbS5sZWZ0K2RpbS53XSlcbiAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7IC8vIHRlbXBvcmFyaWx5IGhhcmQtY29kZWQgdmFsdWVcbiAgICB9XG5cbiAgICBfc2V0WVNjYWxlTWluaShkaW09e2g6NjAwLCB0b3A6MjB9KXtcbiAgICAgICAgLy8gdXNlIGQzIG5lc3QgZGF0YSBzdHJ1Y3R1cmUgdG8gZmluZCB0aGUgdW5pcXVlIGxpc3Qgb2YgeSBsYWJlbHNcbiAgICAgICAgLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtY29sbGVjdGlvbiNuZXN0c1xuICAgICAgICBsZXQgeUxpc3QgPSB0aGlzLl9wYXJzZVlMaXN0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXRZU2NhbGUoZGltLCB5TGlzdCk7XG4gICAgfVxuXG4gICAgX3NldFlTY2FsZShkaW09e2g6NjAwLCB0b3A6MjB9LCB5TGlzdD11bmRlZmluZWQpe1xuICAgICAgICAvLyB1c2UgZDMgbmVzdCBkYXRhIHN0cnVjdHVyZSB0byBmaW5kIHRoZSB1bmlxdWUgbGlzdCBvZiB5IGxhYmVsc1xuICAgICAgICAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1jb2xsZWN0aW9uI25lc3RzXG4gICAgICAgIHlMaXN0ID0geUxpc3Q9PT11bmRlZmluZWQ/dGhpcy5fcGFyc2VZTGlzdCgpOnlMaXN0O1xuXG4gICAgICAgIHJldHVybiBzY2FsZUJhbmQoKSAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1zY2FsZSNzY2FsZUJhbmRcbiAgICAgICAgICAgIC5kb21haW4oeUxpc3QpIC8vIHBlcmhhcHMgaXQgaXNuJ3QgbmVjZXNzYXJ5IHRvIHN0b3JlIHhMaXN0LCBpdCBjb3VsZCBiZSByZXRyaWV2ZWQgYnkgeFNjYWxlLmRvbWFpblxuICAgICAgICAgICAgLnJhbmdlKFtkaW0udG9wLCBkaW0udG9wK2RpbS5oXSlcbiAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7IC8vIHRlbXBvcmFyaWx5IGhhcmQtY29kZWQgdmFsdWVcbiAgICB9XG5cbiAgICBfc2V0Q29sb3JTY2FsZShkb21haW4pe1xuICAgICAgICBsZXQgdXNlTG9nID0gdGhpcy51c2VMb2c7XG4gICAgICAgIGxldCBkYXRhID0gZG9tYWluPT09dW5kZWZpbmVkP3RoaXMuZGF0YS5tYXAoKGQpPT51c2VMb2c/dGhpcy5fbG9nKGQudmFsdWUpOmQudmFsdWUpOmRvbWFpbjtcbiAgICAgICAgcmV0dXJuIHNldENvbG9yU2NhbGUoZGF0YSwgdGhpcy5jb2xvclNjaGVtZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGJ1YmJsZSBtYXhcbiAgICAgKiBAcGFyYW0gbWluaSB7Qm9vbGVhbn0gc2V0dGluZyBmb3IgdGhlIG1pbmkgbWFwXG4gICAgICogQHBhcmFtIHNjYWxlRmFjdG9yIHtJbnRlZ2VyfVxuICAgICAqIEBwYXJhbSBhYnNNYXgge051bWJlcn0gc2V0IGFuIGFic29sdXRlIG1heCB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0QnViYmxlTWF4KG1pbmk9ZmFsc2UsIHNjYWxlRmFjdG9yPTIsIGFic01heCA9IDEwKXtcbiAgICAgICAgbGV0IHhTY2FsZSA9IG1pbmk/IHRoaXMueFNjYWxlTWluaTp0aGlzLnhTY2FsZTtcbiAgICAgICAgbGV0IHlTY2FsZSA9IG1pbmk/IHRoaXMueVNjYWxlTWluaTp0aGlzLnlTY2FsZTtcbiAgICAgICAgbGV0IHJtYXggPSBtYXgoW3hTY2FsZS5iYW5kd2lkdGgoKSwgeVNjYWxlLmJhbmR3aWR0aCgpXSkvc2NhbGVGYWN0b3JcbiAgICAgICAgcmV0dXJuIGFic01heDxybWF4P2Fic01heDpybWF4O1xuICAgIH1cblxuICAgIF9zZXRCdWJibGVTY2FsZShyYW5nZT17bWF4OjEwLCBtaW46MH0pe1xuICAgICAgICByZXR1cm4gc2NhbGVTcXJ0KClcbiAgICAgICAgICAgIC5kb21haW4oWzMsIG1heCh0aGlzLmRhdGEubWFwKChkKT0+ZC5yKSldKSAvLyBzZXQgbWluIGF0IDIgZm9yIC1sb2coMC4wMSlcbiAgICAgICAgICAgIC5yYW5nZShbcmFuZ2UubWluLCByYW5nZS5tYXhdKTtcbiAgICB9XG5cbiAgICBfbG9nKHYpe1xuICAgICAgICBjb25zdCBhZGp1c3QgPSAxO1xuICAgICAgICByZXR1cm4gTWF0aC5sb2coTnVtYmVyKHYrYWRqdXN0KSkvTWF0aC5sb2codGhpcy5sb2dCYXNlKTtcbiAgICB9XG5cblxufVxuXG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSBcIi4vVG9vbHRpcFwiO1xuaW1wb3J0IHtkcmF3Q29sb3JMZWdlbmQsIHNldENvbG9yU2NhbGV9IGZyb20gXCIuL2NvbG9yc1wiO1xuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbCwgbW91c2UsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge25lc3R9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NjYWxlQmFuZCwgc2NhbGVMaW5lYXJ9IGZyb20gXCJkMy1zY2FsZVwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhhbGZNYXB7XG4gICAgLyoqXG4gICAgICogSGFsZk1hcCBpcyBhIHNwZWNpYWwgaGVhdG1hcCBkZXNpZ25lZCBmb3IgYSBzeW1tZXRyaWNhbCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gZGF0YSB7T2JqZWN0fSBUT0RPOiBkZXNjcmliZSB0aGUgZGF0YSBzdHJ1Y3R1cmVcbiAgICAgKiBAcGFyYW0gY3V0b2ZmXG4gICAgICogQHBhcmFtIHVzZUxvZ1xuICAgICAqIEBwYXJhbSBsb2dCYXNlXG4gICAgICogQHBhcmFtIGNvbG9yU2NoZW1lXG4gICAgICogQHBhcmFtIHRvb2x0aXBJZFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIGN1dG9mZiA9IDAuMCwgdXNlTG9nPXRydWUsIGxvZ0Jhc2U9MTAsIGNvbG9yU2NoZW1lPVwiR3JleXNcIiwgY29sb3JTY2FsZURvbWFpbj1bMCwxXSl7XG4gICAgICAgIHRoaXMuZGF0YT0gdGhpcy5fdW5pcXVlKGRhdGEpOyAvLyByZW1vdmUgcmVkdW5kYW5jeVxuICAgICAgICB0aGlzLmRhdGFEaWN0ID0ge307XG4gICAgICAgIHRoaXMuY3V0b2ZmID0gY3V0b2ZmO1xuICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YSA9IHRoaXMuX2ZpbHRlcih0aGlzLmRhdGEsIHRoaXMuY3V0b2ZmKTtcbiAgICAgICAgdGhpcy5kYXRhRGljdCA9IHRoaXMuX2dlbmVyYXRlRGF0YURpY3QodGhpcy5maWx0ZXJlZERhdGEpO1xuICAgICAgICB0aGlzLnVzZUxvZyA9IHVzZUxvZztcbiAgICAgICAgdGhpcy5sb2dCYXNlID0gbG9nQmFzZTtcbiAgICAgICAgdGhpcy5jb2xvclNjaGVtZSA9IGNvbG9yU2NoZW1lO1xuXG4gICAgICAgIC8vIGNvbG9yIHNjYWxlIG5vcm1hbGx5IGRvZXNuJ3QgY2hhbmdlIHdpdGggdGhlIHNhbWUgZGF0YSBzZXRcbiAgICAgICAgLy8gdGhlcmVmb3JlIGNhbiBiZSBkZWZpbmVkIGF0IGluc3RhbnRpYXRpb25cbiAgICAgICAgdGhpcy5jb2xvclNjYWxlID0gdGhpcy5fc2V0Q29sb3JTY2FsZShjb2xvclNjYWxlRG9tYWluKTtcblxuICAgICAgICAvLyB0aGUgZm9sbG93aW5nIHNjYWxlcyBjb3VsZCBjaGFuZ2UgZGVwZW5kaW5nIG9uIHRoZSB1c2VyIGRlZmluZWQgZGltZW5zaW9uc1xuICAgICAgICAvLyB0aGVyZWZvcmUgdGhleSBhcmUgdW5kZWZpbmVkIGF0IGluc3RhbnRpYXRpb25cbiAgICAgICAgdGhpcy54U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueVNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxhYmVsU2NhbGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gcGVyaXBoZXJhbCBmZWF0dXJlc1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgYWRkVG9vbHRpcChwYXJlbnRJZCl7XG4gICAgICAgIGxldCB0b29sdGlwSWQgPSBwYXJlbnRJZCArICctdG9vbHRpcCc7XG4gICAgICAgIGlmICgkKGAjJHt0b29sdGlwSWR9YCkubGVuZ3RoID09IDApICQoJzxkaXYvPicpLmF0dHIoJ2lkJywgdG9vbHRpcElkKS5hcHBlbmRUbygkKGAjJHtwYXJlbnRJZH1gKSk7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IG5ldyBUb29sdGlwKHRvb2x0aXBJZCwgZmFsc2UsIDQwLCAwKTtcbiAgICAgICAgc2VsZWN0KGAjJHt0b29sdGlwSWR9YCkuY2xhc3NlZCgnaGFsZi1tYXAtdG9vbHRpcCcsIHRydWUpO1xuICAgIH1cblxuICAgIGRyYXcoY2FudmFzLCBzdmcsIGRpbWVuc2lvbnM9e3c6NjAwLCB0b3A6MjAsIGxlZnQ6MjB9LCBjb2xvclNjYWxlRG9tYWluPVswLDFdLCBzaG93TGFiZWxzPXRydWUsIGxhYmVsQW5nbGU9OTAsIHhTY2FsZURvbWFpbj11bmRlZmluZWQsIHlTY2FsZURvbWFpbj11bmRlZmluZWQpe1xuICAgICAgICB0aGlzLl9kcmF3Q2FudmFzKGNhbnZhcywgZGltZW5zaW9ucywgY29sb3JTY2FsZURvbWFpbiwgeFNjYWxlRG9tYWluLCB5U2NhbGVEb21haW4pO1xuICAgICAgICBsZXQgZHJhd0NlbGxzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZHJhd1N2ZyhzdmcsIGRpbWVuc2lvbnMsIGRyYXdDZWxscywgc2hvd0xhYmVscywgbGFiZWxBbmdsZSwgY29sb3JTY2FsZURvbWFpbiwgeFNjYWxlRG9tYWluLCB5U2NhbGVEb21haW4pO1xuICAgIH1cblxuICAgIGRyYXdDb2xvckxlZ2VuZChkb20sIGxlZ2VuZENvbmZpZz17eDowLCB5OjB9LCB0aWNrcz01LCB1bml0PVwiXCIsIGNvbG9yU2NhbGVEb21haW49WzAsMV0pe1xuICAgICAgICBpZiAodGhpcy5jb2xvclNjYWxlID09PSB1bmRlZmluZWQpIHRoaXMuX3NldENvbG9yU2NhbGUoY29sb3JTY2FsZURvbWFpbik7XG4gICAgICAgIGRyYXdDb2xvckxlZ2VuZCh1bml0LCBkb20sIHRoaXMuY29sb3JTY2FsZSwgbGVnZW5kQ29uZmlnLCB0aGlzLnVzZUxvZywgdGlja3MsIHRoaXMubG9nQmFzZSwge2g6MjAsIHc6MTB9LCBcInZcIik7XG4gICAgfVxuXG4gICAgLy8gcHJpdmF0ZSBtZXRob2RzXG4gICAgX2xvZyh2KXtcbiAgICAgICAgY29uc3QgYWRqdXN0ID0gMTtcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nKE51bWJlcih2K2FkanVzdCkpL01hdGgubG9nKHRoaXMubG9nQmFzZSk7XG4gICAgfVxuICAgIF9kcmF3Q2FudmFzKGNhbnZhcywgZGltZW5zaW9ucz17dzo2MDAsIHRvcDoyMCwgbGVmdDoyMH0sIGNvbG9yU2NhbGVEb21haW49WzAsMV0sIHhTY2FsZURvbWFpbj11bmRlZmluZWQsIHlTY2FsZURvbWFpbj11bmRlZmluZWQpe1xuICAgICAgICB0aGlzLl9zZXRTY2FsZXMoZGltZW5zaW9ucywgY29sb3JTY2FsZURvbWFpbiwgeFNjYWxlRG9tYWluLCB5U2NhbGVEb21haW4pO1xuICAgICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5ub2RlKCkuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgICAvLyB0cmFuc2Zvcm0gdGhlIGNhbnZhc1xuICAgICAgICBjb250ZXh0LnNhdmUoKTtcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUoZGltZW5zaW9ucy5sZWZ0ICwgZGltZW5zaW9ucy50b3AgKyAodGhpcy54U2NhbGUuYmFuZHdpZHRoKCkqTWF0aC5zcXJ0KDIpLzIpKTsgLy8gc2hpZnQgdGhlIHJhZGl1cyBkaXN0YW5jZS4uLlxuICAgICAgICBjb250ZXh0LnJvdGF0ZShNYXRoLlBJKigtNDUvMTgwKSk7IC8vIHJvdGF0ZSBjb3VudGVyY2xvY2t3aXNlIChuZWdhdGl2ZSkgNDUgZGVncmVlc1xuICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgtZGltZW5zaW9ucy53LC1kaW1lbnNpb25zLncsZGltZW5zaW9ucy53KjIsIGRpbWVuc2lvbnMudyoyKTtcbiAgICAgICAgLy8gTEQgY2FudmFzIHJlbmRlcmluZyBmcm9tIEdFViBvbGQgY29kZVxuICAgICAgICB0aGlzLmZpbHRlcmVkRGF0YS5mb3JFYWNoKChkKT0+e1xuICAgICAgICAgICAgbGV0IHggPSB0aGlzLnhTY2FsZShkLngpO1xuICAgICAgICAgICAgbGV0IHkgPSB0aGlzLnlTY2FsZShkLnkpO1xuICAgICAgICAgICAgaWYgKHggPT09IHVuZGVmaW5lZCB8fCB5ID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgICAgIGQuY29sb3IgPSBkLnZhbHVlPT0wP1wiI2ZmZlwiOnRoaXMudXNlTG9nP3RoaXMuY29sb3JTY2FsZSh0aGlzLl9sb2coZC52YWx1ZSkpOnRoaXMuY29sb3JTY2FsZShkLnZhbHVlKTtcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5jb2xvclNjYWxlKGQudmFsdWUpO1xuICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdCh4LCB5LCB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSwgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgLy8gdW5jb21tZW50IHRoZSBmb2xsb3dpbmcgZm9yIGRlYnVnZ2luZ1xuICAgICAgICAgICAgLy8gY29udGV4dC50ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAvLyBjb250ZXh0LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgICAgICAvLyBjb250ZXh0LmZvbnQgPSAnMTBweCBPcGVuIFNhbnMnO1xuICAgICAgICAgICAgLy8gY29udGV4dC5maWxsVGV4dChkLngsIHgrMTAsIHkrMTApO1xuICAgICAgICAgICAgLy8gY29udGV4dC5maWxsVGV4dChkLnksIHgrMTAsIHkrMzApO1xuICAgICAgICB9KTtcbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgZHJhd1N2ZyhzdmcsIGRpbWVuc2lvbnMsIGRyYXdDZWxscz10cnVlLCBzaG93TGFiZWxzPXRydWUsIGxhYmVsQW5nbGU9OTAsIGNvbG9yU2NhbGVEb21haW49WzAsMV0sIHhTY2FsZURvbWFpbiwgeVNjYWxlRG9tYWluPXVuZGVmaW5lZCl7XG4gICAgICAgIGlmIChkcmF3Q2VsbHMpe1xuICAgICAgICAgICAgdGhpcy5fc2V0U2NhbGVzKGRpbWVuc2lvbnMsIGNvbG9yU2NhbGVEb21haW4sIHhTY2FsZURvbWFpbiwgeVNjYWxlRG9tYWluKTtcbiAgICAgICAgICAgIGxldCBtYXBHID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsaXAtcGF0aFwiLCBcInVybCgjY2xpcClcIik7XG4gICAgICAgICAgICBsZXQgY2VsbHMgPSBtYXBHLnNlbGVjdEFsbChcIi5oYWxmLW1hcC1jZWxsXCIpXG4gICAgICAgICAgICAgICAgLmRhdGEodGhpcy5maWx0ZXJlZERhdGEpO1xuXG4gICAgICAgICAgICAvLyBhZGQgbmV3IHJlY3RzXG4gICAgICAgICAgICBjZWxscy5lbnRlcigpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiaGFsZi1tYXAtY2VsbFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwicm93XCIsIChkKT0+YHkke3RoaXMueVNjYWxlLmRvbWFpbigpLmluZGV4T2YoZC55KX1gKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY29sdW1uXCIsIChkKT0+YHgke3RoaXMueFNjYWxlLmRvbWFpbigpLmluZGV4T2YoZC54KX1gKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkKT0+dGhpcy54U2NhbGUoZC54KSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgKGQpPT50aGlzLnlTY2FsZShkLnkpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGByb3RhdGUoLTQ1KWApXG4gICAgICAgICAgICAgICAgLm1lcmdlKGNlbGxzKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpPT5kLnZhbHVlPT0wP1wiI2ZmZlwiOnRoaXMudXNlTG9nP3RoaXMuY29sb3JTY2FsZSh0aGlzLl9sb2coZC52YWx1ZSkpOnRoaXMuY29sb3JTY2FsZShkLnZhbHVlKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHNob3dMYWJlbHMpe1xuICAgICAgICAgICAgdGhpcy5fc2V0TGFiZWxTY2FsZShkaW1lbnNpb25zKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoKS5kYXRhKHRoaXMubGFiZWxTY2FsZS5kb21haW4oKSlcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCwgaSkgPT4gYGhhbGYtbWFwLWxhYmVsIGwke2l9YClcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJub25lXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLmxhYmVsU2NhbGUoZCkgKyB0aGlzLmxhYmVsU2NhbGUuc3RlcCgpLzI7XG4gICAgICAgICAgICAgICAgICAgIGxldCB5ID0gLTU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHJvdGF0ZSgtJHtsYWJlbEFuZ2xlfSlgO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpPT5kKVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnNvciA9IHN2Zy5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2hhbGYtbWFwLWN1cnNvcicpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiI2QyMTExYlwiKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMXB4XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG5cbiAgICAgICAgc3ZnLm9uKCdtb3VzZW91dCcsICgpPT57XG4gICAgICAgICAgICBjdXJzb3Iuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKCcuaGFsZi1tYXAtbGFiZWwnKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGVjdChzdmcubm9kZSgpLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJub25lXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpXG4gICAgICAgICAgICAub24oJ21vdXNlbW92ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcG9zID0gbW91c2Uoc3ZnLm5vZGUoKSk7IC8vIHJldHJpZXZlIHRoZSBtb3VzZSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgU1ZHIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHBvc1swXTtcbiAgICAgICAgICAgICAgICBsZXQgeSA9IHBvc1sxXTtcblxuICAgICAgICAgICAgICAgIC8vIGZpbmQgdGhlIGNvbGxpZGluZyBjZWxsJ3MgY29vcmRpbmF0ZXMgKGJlZm9yZSB0cmFuc2Zvcm1hdGlvbilcbiAgICAgICAgICAgICAgICBsZXQgcmFkaWFuID0gTWF0aC5QSSooNDUvMTgwKTsgLy8gdGhlIHJhZGlhbiBhdCA0NSBkZWdyZWUgYW5nbGVcbiAgICAgICAgICAgICAgICBsZXQgeDIgPSB4Kk1hdGguY29zKHJhZGlhbikgLSB5Kk1hdGguc2luKHJhZGlhbikgKyB0aGlzLnhTY2FsZS5zdGVwKCkvMjtcbiAgICAgICAgICAgICAgICBsZXQgeTIgPSB4Kk1hdGguc2luKHJhZGlhbikgKyB5Kk1hdGguY29zKHJhZGlhbikgLSB0aGlzLnlTY2FsZS5zdGVwKCkvMjtcbiAgICAgICAgICAgICAgICBpZiAoeCA8IDAgfHwgeTwwIHx8IHgyIDwgMCB8fCB5MjwwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvci5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBpID0gTWF0aC5mbG9vcih4Mi90aGlzLnhTY2FsZS5zdGVwKCkpO1xuICAgICAgICAgICAgICAgIGxldCBqID0gTWF0aC5mbG9vcigoeTIpL3RoaXMueVNjYWxlLnN0ZXAoKSk7XG4gICAgICAgICAgICAgICAgLy8gc2hvdyB0b29sdGlwXG4gICAgICAgICAgICAgICAgbGV0IGNvbCA9IHRoaXMueFNjYWxlLmRvbWFpbigpW2ldO1xuICAgICAgICAgICAgICAgIGxldCByb3cgPSB0aGlzLnlTY2FsZS5kb21haW4oKVtqXTtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHRoaXMuZGF0YURpY3RbY29sK3Jvd107XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coW3gsIHksIHgyLCB5MiwgY29sLCByb3ddKTsgLy8gZGVidWdnaW5nXG4gICAgICAgICAgICAgICAgaWYgKGNlbGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3IuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3h9LCR7eX0pIHJvdGF0ZSgtNDUpYCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvci5zdHlsZShcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhgJHtjb2x9PGJyLz4gJHtyb3d9PGJyLz4gVmFsdWU6ICR7Y2VsbC5kaXNwbGF5VmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNob3dMYWJlbHMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbCgnLmhhbGYtbWFwLWxhYmVsJykuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCBmYWxzZSk7IC8vIGNsZWFyIHByZXZpb3VzIGhpZ2hsaWdodGVkIGxhYmVsc1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ZnLnNlbGVjdChgLmwke2l9YCkuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5zZWxlY3QoYC5sJHtqfWApLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3Iuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLy8gLm9uKCdtb3VzZW91dCcsICgpID0+IHtcbiAgICAgICAgICAgIC8vICAgICAvLyBjdXJzb3Iuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgIC8vICAgICAvLyB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgLy8gICAgIC8vIHN2Zy5zZWxlY3RBbGwoJy5oYWxmLW1hcC1sYWJlbCcpLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgLy8gfSlcbiAgICB9XG5cbiAgICBfdW5pcXVlKGRhdGEpe1xuICAgICAgICAvLyBmaXJzdCBzb3J0IHRoZSBkYXRhIGJhc2VkIG9uIHRoZSB4LCB5IGFscGhhYmV0aWNhbCBvcmRlclxuICAgICAgICBkYXRhLnNvcnQoKGEsIGIpPT57XG4gICAgICAgICAgICBpZihhLnggPCBiLngpIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChhLnggPiBiLngpIHJldHVybiAxO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGEueSA8IGIueSkgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIGlmIChhLnkgPiBiLnkpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgcGFpcnMgPSB7fTtcbiAgICAgICAgcmV0dXJuIGRhdGEuZmlsdGVyKChkKT0+e1xuICAgICAgICAgICAgLy8gY2hlY2sgcmVkdW5kYW50IGRhdGFcbiAgICAgICAgICAgIGxldCBwID0gZC54ICsgZC55O1xuICAgICAgICAgICAgbGV0IHAyID0gZC55ICsgZC54O1xuICAgICAgICAgICAgaWYgKHBhaXJzLmhhc093blByb3BlcnR5KHApIHx8IHBhaXJzLmhhc093blByb3BlcnR5KHAyKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcGFpcnNbcF0gPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgcmVkdW5kYW50IGRhdGEgaW4gYSBzeW1tZXRyaWNhbCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqIEBwYXJhbSBjdXRvZmYge051bWJlcn0gZmlsdGVyIGRhdGEgYnkgdGhpcyBtaW5pbXVtIHZhbHVlXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZmlsdGVyKGRhdGEsIGN1dG9mZil7XG4gICAgICAgIHJldHVybiBkYXRhLmZpbHRlcigoZCk9PntcbiAgICAgICAgICAgIGlmIChkLnZhbHVlIDwgY3V0b2ZmKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYSBkYXRhIGRpY3Rpb25hcnkgaW5kZXhlZCBieSB4IGFuZCB5LCBmb3IgZmFzdCBkYXRhIGxvb2sgdXBcbiAgICAgKiBAcGFyYW0gZGF0YSB7TGlzdH06IGEgbGlzdCBvZiBvYmplY3RzIHdpdGggYXR0cmlidXRlcyB4IGFuZCB5XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2VuZXJhdGVEYXRhRGljdChkYXRhKXtcbiAgICAgICAgbGV0IGRpY3QgPSB7fTtcbiAgICAgICAgZGF0YS5mb3JFYWNoKChkKT0+e1xuICAgICAgICAgICAgZGljdFtkLngrZC55XSA9IGQ7XG4gICAgICAgICAgICBkaWN0W2QueStkLnhdID0gZDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkaWN0O1xuICAgIH1cblxuICAgIF9zZXRTY2FsZXMoZGltZW5zaW9ucz17dzo2MDAsIHRvcDoyMCwgbGVmdDoyMH0sIGNvbG9yU2NhbGVEb21haW49WzAsMV0sIHhTY2FsZURvbWFpbiwgeVNjYWxlRG9tYWluKXtcbiAgICAgICAgaWYgKHhTY2FsZURvbWFpbiB8fCB0aGlzLnhTY2FsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLl9zZXRYU2NhbGUoZGltZW5zaW9ucywgeFNjYWxlRG9tYWluKTtcbiAgICAgICAgaWYgKHlTY2FsZURvbWFpbiB8fCB0aGlzLnlTY2FsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLl9zZXRZU2NhbGUoZGltZW5zaW9ucywgeVNjYWxlRG9tYWluKTtcbiAgICAgICAgaWYgKHRoaXMuY29sb3JTY2FsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLl9zZXRDb2xvclNjYWxlKGNvbG9yU2NhbGVEb21haW4pO1xuICAgIH1cblxuICAgIF9zZXRYU2NhbGUoZGltPXt3OjYwMH0sIHhMaXN0PXVuZGVmaW5lZCl7XG4gICAgICAgIGlmICh4TGlzdCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHhMaXN0ID0gbmVzdCgpXG4gICAgICAgICAgICAua2V5KChkKSA9PiBkLngpIC8vIGdyb3VwIHRoaXMuZGF0YSBieSBkLnhcbiAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSlcbiAgICAgICAgICAgIC5tYXAoKGQpID0+IGQua2V5KSAvLyB0aGVuIHJldHVybiB0aGUgdW5pcXVlIGxpc3Qgb2YgZC54XG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4ge3JldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMueFNjYWxlID0gc2NhbGVCYW5kKCkgLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtc2NhbGUjc2NhbGVCYW5kXG4gICAgICAgICAgICAuZG9tYWluKHhMaXN0KSAvLyBwZXJoYXBzIGl0IGlzbid0IG5lY2Vzc2FyeSB0byBzdG9yZSB4TGlzdCwgaXQgY291bGQgYmUgcmV0cmlldmVkIGJ5IHhTY2FsZS5kb21haW5cbiAgICAgICAgICAgIC8vIC5yYW5nZShbZGltLmxlZnQsIGRpbS5sZWZ0KyhkaW0udy9NYXRoLnNxcnQoMikpXSlcbiAgICAgICAgICAgIC5yYW5nZShbMCwgZGltLncvTWF0aC5zcXJ0KDIpXSlcbiAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7IC8vIHRlbXBvcmFyaWx5IGhhcmQtY29kZWQgdmFsdWVcbiAgICB9XG5cbiAgICBfc2V0WVNjYWxlKGRpbT17dzo2MDB9LCB5TGlzdCl7XG4gICAgICAgIC8vIHVzZSBkMyBuZXN0IGRhdGEgc3RydWN0dXJlIHRvIGZpbmQgdGhlIHVuaXF1ZSBsaXN0IG9mIHkgbGFiZWxzXG4gICAgICAgIC8vIHJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWNvbGxlY3Rpb24jbmVzdHNcbiAgICAgICAgaWYgKHlMaXN0ID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgeUxpc3QgPSBuZXN0KClcbiAgICAgICAgICAgIC5rZXkoKGQpID0+IGQueSkgLy8gZ3JvdXAgdGhpcy5kYXRhIGJ5IGQueFxuICAgICAgICAgICAgLmVudHJpZXModGhpcy5kYXRhKVxuICAgICAgICAgICAgLm1hcCgoZCkgPT4gZC5rZXkpIC8vIHRoZW4gcmV0dXJuIHRoZSB1bmlxdWUgbGlzdCBvZiBkLnhcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiB7cmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO30pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy55U2NhbGUgPSBzY2FsZUJhbmQoKSAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1zY2FsZSNzY2FsZUJhbmRcbiAgICAgICAgICAgIC5kb21haW4oeUxpc3QpIC8vIHBlcmhhcHMgaXQgaXNuJ3QgbmVjZXNzYXJ5IHRvIHN0b3JlIHhMaXN0LCBpdCBjb3VsZCBiZSByZXRyaWV2ZWQgYnkgeFNjYWxlLmRvbWFpblxuICAgICAgICAgICAgLy8gLnJhbmdlKFtkaW0udG9wLCBkaW0udG9wKyhkaW0udy9NYXRoLnNxcnQoMikpXSlcbiAgICAgICAgICAgIC5yYW5nZShbMCwgZGltLncvTWF0aC5zcXJ0KDIpXSlcbiAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7IC8vIHRlbXBvcmFyaWx5IGhhcmQtY29kZWQgdmFsdWVcbiAgICB9XG5cbiAgICBfc2V0TGFiZWxTY2FsZShkaW09e3c6NjAwfSl7XG4gICAgICAgIGlmICh0aGlzLnhTY2FsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLl9zZXRYU2NhbGUoKTtcbiAgICAgICAgbGV0IHhMaXN0ID0gdGhpcy54U2NhbGUuZG9tYWluKCk7IC8vIFRPRE86IHRoaXMgYXNzdW1lcyB0aGF0IHRoZSBoYWxmIG1hcCBpcyBzeW1tZXRyaWNhbFxuICAgICAgICB0aGlzLmxhYmVsU2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgLmRvbWFpbih4TGlzdClcbiAgICAgICAgICAgIC5yYW5nZShbMCwgZGltLnddKVxuICAgICAgICAgICAgLnBhZGRpbmcoLjA1KVxuICAgIH1cblxuICAgIF9zZXRDb2xvclNjYWxlKGRvbWFpbil7XG4gICAgICAgIGxldCB1c2VMb2cgPSB0aGlzLnVzZUxvZztcbiAgICAgICAgbGV0IGRhdGEgPSBkb21haW49PT11bmRlZmluZWQ/dGhpcy5kYXRhLm1hcCgoZCk9PnVzZUxvZz90aGlzLl9sb2coZC52YWx1ZSk6ZC52YWx1ZSk6ZG9tYWluO1xuICAgICAgICB0aGlzLmNvbG9yU2NhbGUgPSBzZXRDb2xvclNjYWxlKGRhdGEsIHRoaXMuY29sb3JTY2hlbWUpO1xuICAgIH1cbn0iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Ob3JtYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbU5vcm1hbChtdSwgc2lnbWEpIHtcbiAgICB2YXIgeCwgcjtcbiAgICBtdSA9IG11ID09IG51bGwgPyAwIDogK211O1xuICAgIHNpZ21hID0gc2lnbWEgPT0gbnVsbCA/IDEgOiArc2lnbWE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHk7XG5cbiAgICAgIC8vIElmIGF2YWlsYWJsZSwgdXNlIHRoZSBzZWNvbmQgcHJldmlvdXNseS1nZW5lcmF0ZWQgdW5pZm9ybSByYW5kb20uXG4gICAgICBpZiAoeCAhPSBudWxsKSB5ID0geCwgeCA9IG51bGw7XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgZ2VuZXJhdGUgYSBuZXcgeCBhbmQgeS5cbiAgICAgIGVsc2UgZG8ge1xuICAgICAgICB4ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgeSA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xuICAgICAgfSB3aGlsZSAoIXIgfHwgciA+IDEpO1xuXG4gICAgICByZXR1cm4gbXUgKyBzaWdtYSAqIHkgKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Ob3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Ob3JtYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qKlxuICogQ3JlYXRlIGEgdG9vbGJhclxuICogVGhpcyBjbGFzcyB1c2VzIGEgbG90IG9mIGpRdWVyeSBmb3IgZG9tIGVsZW1lbnQgbWFuaXB1bGF0aW9uXG4gKi9cblxuaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cGFyc2VDc3NTdHlsZXN9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgc2F2ZUFzIGZyb20gJ2ZpbGUtc2F2ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sYmFyIHtcbiAgICBjb25zdHJ1Y3Rvcihkb21JZCwgdG9vbHRpcD11bmRlZmluZWQsIHZlcnRpY2FsPWZhbHNlKXtcbiAgICAgICAgalF1ZXJ5KGAjJHtkb21JZH1gKS5zaG93KCk7IC8vIGlmIGhpZGRlblxuXG4gICAgICAgIC8vIGFkZCBhIG5ldyBiYXJncm91cCBkaXYgdG8gZG9tSUQgd2l0aCBib290c3RyYXAgYnV0dG9uIGNsYXNzZXNcbiAgICAgICAgY29uc3QgYnRuQ2xhc3NlcyA9IHZlcnRpY2FsPydidG4tZ3JvdXAtdmVydGljYWwgYnRuLWdyb3VwLXNtJzogJ2J0bi1ncm91cCBidG4tZ3JvdXAtc20nO1xuICAgICAgICB0aGlzLmJhciA9IGpRdWVyeSgnPGRpdi8+JykuYWRkQ2xhc3MoYnRuQ2xhc3NlcykuYXBwZW5kVG8oYCMke2RvbUlkfWApO1xuICAgICAgICB0aGlzLmJ1dHRvbnMgPSB7fTtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkb3dubG9hZCBidXR0b24gZm9yIFNWR1xuICAgICAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgYnV0dG9uIGRvbSBJRFxuICAgICAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfSB0aGUgU1ZHIGRvbSBJRCB0byBncmFiIGFuZCBkb3dubG9hZFxuICAgICAqIEBwYXJhbSBvdXRmaWxlTmFtZSB7U3RyaW5nfSB0aGUgZG93bmxvYWQgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIGNsb25lSWQge1N0cmluZ30gdGhlIGNsb25lZCBTVkcgZG9tIElEXG4gICAgICogQHBhcmFtIGljb24ge1N0cmluZ30gYSBmb250YXdlc29tZSdzIGljb24gY2xhc3MgbmFtZVxuICAgICAqL1xuICAgIGNyZWF0ZURvd25sb2FkU3ZnQnV0dG9uKGlkLCBzdmdJZCwgb3V0ZmlsZU5hbWUsIGNsb25lSWQsIGljb249J2ZhLWRvd25sb2FkJyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSB0aGlzLmNyZWF0ZUJ1dHRvbihpZCwgaWNvbik7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRTdmcoc3ZnSWQsIG91dGZpbGVOYW1lLCBjbG9uZUlkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXCJEb3dubG9hZFwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlUmVzZXRCdXR0b24oaWQsIGNhbGxiYWNrLCBpY29uPSdmYS1leHBhbmQtYXJyb3dzLWFsdCcpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b24oaWQsIGljb24pO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgY2FsbGJhY2spXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXCJSZXNldCB0aGUgc2NhbGVzXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBidXR0b24gdG8gdGhlIHRvb2xiYXJcbiAgICAgKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIGJ1dHRvbidzIGlkXG4gICAgICogQHBhcmFtIGljb24ge1N0cmluZ30gYSBmb250YXdlc29tZSBpY29uIGNsYXNzXG4gICAgICogRGVwZW5kZW5jaWVzOiBCb290c3RyYXAsIGpRdWVyeSwgRm9udGF3ZXNvbWVcbiAgICAgKi9cbiAgICBjcmVhdGVCdXR0b24oaWQsIGljb249J2ZhLWRvd25sb2FkJyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSBqUXVlcnkoJzxhLz4nKS5hdHRyKCdpZCcsIGlkKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdidG4gYnRuLWRlZmF1bHQnKS5hcHBlbmRUbyh0aGlzLmJhcik7XG4gICAgICAgIGpRdWVyeSgnPGkvPicpLmFkZENsYXNzKGBmYSAke2ljb259YCkuYXBwZW5kVG8oJGJ1dHRvbik7XG4gICAgICAgIHRoaXMuYnV0dG9uc1tpZF0gPSAkYnV0dG9uO1xuICAgICAgICByZXR1cm4gJGJ1dHRvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhdHRhY2ggYSB0b29sdGlwIGRvbSB3aXRoIHRoZSB0b29sYmFyXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICovXG4gICAgYXR0YWNoVG9vbHRpcCh0b29sdGlwKXtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZCBTVkcgb2JqXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHRoZSBTVkcgZG9tIElEXG4gICAgICogQHBhcmFtIGZpbGVOYW1lIHtTdHJpbmd9IHRoZSBvdXRwdXQgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIGNsb25lSWQge1N0cmluZ30gdGhlIHRlbXBvcmFyeSBkb20gSUQgdG8gY29weSB0aGUgU1ZHIHRvXG4gICAgICogRGVwZW5kZW5jaWVzOiBGaWxlU2F2ZXJcbiAgICAgKi9cbiAgICBkb3dubG9hZFN2ZyhzdmdJZCwgZmlsZU5hbWUsIGNsb25lSWQpe1xuICAgICAgICAvLyBsZXQgc3ZnT2JqID0galF1ZXJ5KGpRdWVyeShqUXVlcnkoYCR7XCIjXCIgK3N2Z0lkfSBzdmdgKSlbMF0pOyAvLyBjb21wbGljYXRlZCBqUXVlcnkgdG8gZ2V0IHRvIHRoZSBTVkcgb2JqZWN0XG4gICAgICAgIGxldCBzdmdPYmogPSBqUXVlcnkoalF1ZXJ5KGpRdWVyeShgJHtcIiNcIiArc3ZnSWR9YCkpWzBdKTtcbiAgICAgICAgbGV0ICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAgICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgICAgICAvLyBwYXJzZSBhbmQgYWRkIGFsbCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgICAgIGxldCBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICAgICAkc3ZnQ29weS5wcmVwZW5kKHN0eWxlcyk7XG5cbiAgICAgICAgalF1ZXJ5KFwiI1wiICsgY2xvbmVJZCkuaHRtbCgnJykuaGlkZSgpOyAvLyBtYWtlIHN1cmUgdGhlIGNvcHlJRCBpcyBpbnZpc2libGVcbiAgICAgICAgbGV0IHN2Z0h0bWwgPSBqUXVlcnkoYCMke2Nsb25lSWR9YCkuYXBwZW5kKCRzdmdDb3B5KS5odG1sKCk7XG5cbiAgICAgICAgbGV0IHN2Z0Jsb2IgPSBuZXcgQmxvYihbc3ZnSHRtbF0sIHt0eXBlOiBcImltYWdlL3N2Zyt4bWxcIn0pO1xuICAgICAgICBzYXZlQXMoc3ZnQmxvYiwgZmlsZU5hbWUpO1xuXG4gICAgICAgIC8vIGNsZWFyIHRoZSB0ZW1wIGRvd25sb2FkIGRpdlxuICAgICAgICBqUXVlcnkoYCMke2Nsb25lSWR9YCkuaHRtbCgnJykuaGlkZSgpO1xuICAgIH1cbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuXG52YXIgdG9wID0gMSxcbiAgICByaWdodCA9IDIsXG4gICAgYm90dG9tID0gMyxcbiAgICBsZWZ0ID0gNCxcbiAgICBlcHNpbG9uID0gMWUtNjtcblxuZnVuY3Rpb24gdHJhbnNsYXRlWCh4KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZShcIiArICh4ICsgMC41KSArIFwiLDApXCI7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVkoeSkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArICh5ICsgMC41KSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBudW1iZXIoc2NhbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gK3NjYWxlKGQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjZW50ZXIoc2NhbGUpIHtcbiAgdmFyIG9mZnNldCA9IE1hdGgubWF4KDAsIHNjYWxlLmJhbmR3aWR0aCgpIC0gMSkgLyAyOyAvLyBBZGp1c3QgZm9yIDAuNXB4IG9mZnNldC5cbiAgaWYgKHNjYWxlLnJvdW5kKCkpIG9mZnNldCA9IE1hdGgucm91bmQob2Zmc2V0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gK3NjYWxlKGQpICsgb2Zmc2V0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBlbnRlcmluZygpIHtcbiAgcmV0dXJuICF0aGlzLl9fYXhpcztcbn1cblxuZnVuY3Rpb24gYXhpcyhvcmllbnQsIHNjYWxlKSB7XG4gIHZhciB0aWNrQXJndW1lbnRzID0gW10sXG4gICAgICB0aWNrVmFsdWVzID0gbnVsbCxcbiAgICAgIHRpY2tGb3JtYXQgPSBudWxsLFxuICAgICAgdGlja1NpemVJbm5lciA9IDYsXG4gICAgICB0aWNrU2l6ZU91dGVyID0gNixcbiAgICAgIHRpY2tQYWRkaW5nID0gMyxcbiAgICAgIGsgPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGxlZnQgPyAtMSA6IDEsXG4gICAgICB4ID0gb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PT0gcmlnaHQgPyBcInhcIiA6IFwieVwiLFxuICAgICAgdHJhbnNmb3JtID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBib3R0b20gPyB0cmFuc2xhdGVYIDogdHJhbnNsYXRlWTtcblxuICBmdW5jdGlvbiBheGlzKGNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWVzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gKHNjYWxlLnRpY2tzID8gc2NhbGUudGlja3MuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogc2NhbGUuZG9tYWluKCkpIDogdGlja1ZhbHVlcyxcbiAgICAgICAgZm9ybWF0ID0gdGlja0Zvcm1hdCA9PSBudWxsID8gKHNjYWxlLnRpY2tGb3JtYXQgPyBzY2FsZS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IGlkZW50aXR5KSA6IHRpY2tGb3JtYXQsXG4gICAgICAgIHNwYWNpbmcgPSBNYXRoLm1heCh0aWNrU2l6ZUlubmVyLCAwKSArIHRpY2tQYWRkaW5nLFxuICAgICAgICByYW5nZSA9IHNjYWxlLnJhbmdlKCksXG4gICAgICAgIHJhbmdlMCA9ICtyYW5nZVswXSArIDAuNSxcbiAgICAgICAgcmFuZ2UxID0gK3JhbmdlW3JhbmdlLmxlbmd0aCAtIDFdICsgMC41LFxuICAgICAgICBwb3NpdGlvbiA9IChzY2FsZS5iYW5kd2lkdGggPyBjZW50ZXIgOiBudW1iZXIpKHNjYWxlLmNvcHkoKSksXG4gICAgICAgIHNlbGVjdGlvbiA9IGNvbnRleHQuc2VsZWN0aW9uID8gY29udGV4dC5zZWxlY3Rpb24oKSA6IGNvbnRleHQsXG4gICAgICAgIHBhdGggPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLmRvbWFpblwiKS5kYXRhKFtudWxsXSksXG4gICAgICAgIHRpY2sgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh2YWx1ZXMsIHNjYWxlKS5vcmRlcigpLFxuICAgICAgICB0aWNrRXhpdCA9IHRpY2suZXhpdCgpLFxuICAgICAgICB0aWNrRW50ZXIgPSB0aWNrLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLFxuICAgICAgICBsaW5lID0gdGljay5zZWxlY3QoXCJsaW5lXCIpLFxuICAgICAgICB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpO1xuXG4gICAgcGF0aCA9IHBhdGgubWVyZ2UocGF0aC5lbnRlcigpLmluc2VydChcInBhdGhcIiwgXCIudGlja1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiY3VycmVudENvbG9yXCIpKTtcblxuICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKSk7XG5cbiAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC5hdHRyKFwiZHlcIiwgb3JpZW50ID09PSB0b3AgPyBcIjBlbVwiIDogb3JpZW50ID09PSBib3R0b20gPyBcIjAuNzFlbVwiIDogXCIwLjMyZW1cIikpO1xuXG4gICAgaWYgKGNvbnRleHQgIT09IHNlbGVjdGlvbikge1xuICAgICAgcGF0aCA9IHBhdGgudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICBsaW5lID0gbGluZS50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGV4dCA9IHRleHQudHJhbnNpdGlvbihjb250ZXh0KTtcblxuICAgICAgdGlja0V4aXQgPSB0aWNrRXhpdC50cmFuc2l0aW9uKGNvbnRleHQpXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gaXNGaW5pdGUoZCA9IHBvc2l0aW9uKGQpKSA/IHRyYW5zZm9ybShkKSA6IHRoaXMuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpOyB9KTtcblxuICAgICAgdGlja0VudGVyXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyB2YXIgcCA9IHRoaXMucGFyZW50Tm9kZS5fX2F4aXM7IHJldHVybiB0cmFuc2Zvcm0ocCAmJiBpc0Zpbml0ZShwID0gcChkKSkgPyBwIDogcG9zaXRpb24oZCkpOyB9KTtcbiAgICB9XG5cbiAgICB0aWNrRXhpdC5yZW1vdmUoKTtcblxuICAgIHBhdGhcbiAgICAgICAgLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT0gcmlnaHRcbiAgICAgICAgICAgID8gKHRpY2tTaXplT3V0ZXIgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyIDogXCJNMC41LFwiICsgcmFuZ2UwICsgXCJWXCIgKyByYW5nZTEpXG4gICAgICAgICAgICA6ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTVwiICsgcmFuZ2UwICsgXCIsMC41SFwiICsgcmFuZ2UxKSk7XG5cbiAgICB0aWNrXG4gICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24oZCkpOyB9KTtcblxuICAgIGxpbmVcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICB0ZXh0XG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAudGV4dChmb3JtYXQpO1xuXG4gICAgc2VsZWN0aW9uLmZpbHRlcihlbnRlcmluZylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLl9fYXhpcyA9IHBvc2l0aW9uOyB9KTtcbiAgfVxuXG4gIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUgPSBfLCBheGlzKSA6IHNjYWxlO1xuICB9O1xuXG4gIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSwgYXhpcztcbiAgfTtcblxuICBheGlzLnRpY2tBcmd1bWVudHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrVmFsdWVzICYmIHRpY2tWYWx1ZXMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSB0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xuICB9O1xuXG4gIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1BhZGRpbmcgPSArXywgYXhpcykgOiB0aWNrUGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gYXhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNUb3Aoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXModG9wLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzUmlnaHQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzTGVmdChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhsZWZ0LCBzY2FsZSk7XG59XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3IsIGNjdyA9ICEhY2N3O1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhci5qc1wiO1xuaW1wb3J0IGxpbmUgZnJvbSBcIi4vbGluZS5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeDAgPSBwb2ludFgsXG4gICAgICB4MSA9IG51bGwsXG4gICAgICB5MCA9IGNvbnN0YW50KDApLFxuICAgICAgeTEgPSBwb2ludFksXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGFyZWEoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGQsXG4gICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgIGJ1ZmZlcixcbiAgICAgICAgeDB6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICB5MHogPSBuZXcgQXJyYXkobik7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSB7XG4gICAgICAgICAgaiA9IGk7XG4gICAgICAgICAgb3V0cHV0LmFyZWFTdGFydCgpO1xuICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgICBmb3IgKGsgPSBpIC0gMTsgayA+PSBqOyAtLWspIHtcbiAgICAgICAgICAgIG91dHB1dC5wb2ludCh4MHpba10sIHkweltrXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmFyZWFFbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRlZmluZWQwKSB7XG4gICAgICAgIHgweltpXSA9ICt4MChkLCBpLCBkYXRhKSwgeTB6W2ldID0gK3kwKGQsIGksIGRhdGEpO1xuICAgICAgICBvdXRwdXQucG9pbnQoeDEgPyAreDEoZCwgaSwgZGF0YSkgOiB4MHpbaV0sIHkxID8gK3kxKGQsIGksIGRhdGEpIDogeTB6W2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlYWxpbmUoKSB7XG4gICAgcmV0dXJuIGxpbmUoKS5kZWZpbmVkKGRlZmluZWQpLmN1cnZlKGN1cnZlKS5jb250ZXh0KGNvbnRleHQpO1xuICB9XG5cbiAgYXJlYS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHgxID0gbnVsbCwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB4MTtcbiAgfTtcblxuICBhcmVhLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgeTEgPSBudWxsLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHkxO1xuICB9O1xuXG4gIGFyZWEubGluZVgwID1cbiAgYXJlYS5saW5lWTAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmxpbmVZMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTEpO1xuICB9O1xuXG4gIGFyZWEubGluZVgxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MSkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGFyZWEpIDogZGVmaW5lZDtcbiAgfTtcblxuICBhcmVhLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGFyZWEpIDogY3VydmU7XG4gIH07XG5cbiAgYXJlYS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBhcmVhKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyZWE7XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXIuanNcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJmdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG4vLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuLy8gdGhlIGZvbGxvd2luZyBwYXBlcjogU3RlZmZlbiwgTS4gMTk5MC4gQSBTaW1wbGUgTWV0aG9kIGZvciBNb25vdG9uaWNcbi8vIEludGVycG9sYXRpb24gaW4gT25lIERpbWVuc2lvbi4gQXN0cm9ub215IGFuZCBBc3Ryb3BoeXNpY3MsIFZvbC4gMjM5LCBOTy5cbi8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbmZ1bmN0aW9uIHNsb3BlMyh0aGF0LCB4MiwgeTIpIHtcbiAgdmFyIGgwID0gdGhhdC5feDEgLSB0aGF0Ll94MCxcbiAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgIHMwID0gKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gKGgwIHx8IGgxIDwgMCAmJiAtMCksXG4gICAgICBzMSA9ICh5MiAtIHRoYXQuX3kxKSAvIChoMSB8fCBoMCA8IDAgJiYgLTApLFxuICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gIHJldHVybiAoc2lnbihzMCkgKyBzaWduKHMxKSkgKiBNYXRoLm1pbihNYXRoLmFicyhzMCksIE1hdGguYWJzKHMxKSwgMC41ICogTWF0aC5hYnMocCkpIHx8IDA7XG59XG5cbi8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbmZ1bmN0aW9uIHNsb3BlMih0aGF0LCB0KSB7XG4gIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xufVxuXG4vLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4vLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbi8vIHdpdGggcmVzcGVjdCB0byB0aGUgZm91ciB2YWx1ZXMgcDAsIHAwICsgbTAgLyAzLCBwMSAtIG0xIC8gMywgcDFcIi5cbmZ1bmN0aW9uIHBvaW50KHRoYXQsIHQwLCB0MSkge1xuICB2YXIgeDAgPSB0aGF0Ll94MCxcbiAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID1cbiAgICB0aGlzLl90MCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCBzbG9wZTIodGhpcywgdGhpcy5fdDApKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHQxID0gTmFOO1xuXG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHBvaW50KHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB0aGlzLl90MCwgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIHRoaXMuX3QwID0gdDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbn1cblxuKE1vbm90b25lWS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vbm90b25lWC5wcm90b3R5cGUpKS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xufTtcblxuZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUmVmbGVjdENvbnRleHQucHJvdG90eXBlID0ge1xuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7IHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7IH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTsgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVYKGNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVkoY29udGV4dCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5pbXBvcnQge21lYW4sIHF1YW50aWxlLCBkZXZpYXRpb259IGZyb20gXCJkMy1hcnJheVwiO1xuXG5cbi8vIHJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2VybmVsXyhzdGF0aXN0aWNzKVxuLy8gcmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9LZXJuZWxfZGVuc2l0eV9lc3RpbWF0aW9uXG5leHBvcnQgY29uc3Qga2VybmVsID0ge1xuICAgIGVwYW5lY2huaWtvdjogZnVuY3Rpb24odSl7cmV0dXJuIE1hdGguYWJzKHUpIDw9IDE/ICgzLzQpKigxLXUqdSk6MH0sXG4gICAgZ2F1c3NpYW46IGZ1bmN0aW9uKHUpe3JldHVybiAxL01hdGguc3FydCgyKk1hdGguUEkpKk1hdGguZXhwKC0uNSp1KnUpfVxufTtcblxuLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vamFzb25kYXZpZXMvc2NpZW5jZS5qcy9ibG9iL21hc3Rlci9zcmMvc3RhdHMvYmFuZHdpZHRoLmpzXG5leHBvcnQgY29uc3Qga2VybmVsQmFuZHdpZHRoID0ge1xuICAgIC8vIEJhbmR3aWR0aCBzZWxlY3RvcnMgZm9yIEdhdXNzaWFuIGtlcm5lbHMuXG4gICAgbnJkOiBmdW5jdGlvbih4KSB7XG4gICAgICAgIGxldCBpcXIgPSBxdWFudGlsZSh4LCAwLjc1KSAtIHF1YW50aWxlKHgsIDAuMjUpO1xuICAgICAgICBsZXQgaCA9IGlxciAvIDEuMzQ7XG4gICAgICAgIHJldHVybiAxLjA2ICogTWF0aC5taW4oZGV2aWF0aW9uKHgpLCBoKSAqIE1hdGgucG93KHgubGVuZ3RoLCAtMS81KTtcbiAgICB9XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ga2VybmVsOiB0aGUga2VybmVsIGZ1bmN0aW9uLCBzdWNoIGFzIGdhdXNzaWFuXG4gKiBAcGFyYW0gWDogbGlzdCBvZiBiaW5zXG4gKiBAcGFyYW0gaDogdGhlIGJhbmR3aWR0aCwgZWl0aGVyIGEgbnVtZXJpY2FsIHZhbHVlIGdpdmVuIGJ5IHRoZSB1c2VyIG9yIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIGZ1bmN0aW9uIGtlcm5lbEJhbmR3aWR0aFxuICogQHJldHVybnMge0Z1bmN0aW9ufTogdGhlIGtlcm5lbCBkZW5zaXR5IGVzdGltYXRvclxuICovXG5leHBvcnQgZnVuY3Rpb24ga2VybmVsRGVuc2l0eUVzdGltYXRvcihrZXJuZWwsIFgsIGgpe1xuICAgIHJldHVybiBmdW5jdGlvbihWKSB7XG4gICAgICAgIC8vIFggaXMgdGhlIGJpbnNcbiAgICAgICAgcmV0dXJuIFgubWFwKCh4KSA9PiBbeCwgbWVhbihWLCAodikgPT4ga2VybmVsKCh4LXYpL2gpKS9oXSk7XG4gICAgfVxufVxuXG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKlxuSW5wdXQgZGF0YSBzdHJ1Y3R1cmU6IGEgbGlzdCBvZiBkYXRhIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuW1xuICAgIHtcbiAgICAgICAgZ3JvdXA6IFwiZ3JvdXAxXCJcbiAgICAgICAgbGFiZWw6IFwiZGF0YXNldCAxXCIsXG4gICAgICAgIHZhbHVlczogW2EgbGlzdCBvZiBudW1lcmljYWwgdmFsdWVzXVxuICAgICB9LFxuICAgICB7XG4gICAgICAgIGdyb3VwOiBcImdyb3VwMVwiXG4gICAgICAgIGxhYmVsOiBcImRhdGFzZXQgMlwiLFxuICAgICAgICB2YWx1ZXM6IFthIGxpc3Qgb2YgbnVtZXJpY2FsIHZhbHVlc11cbiAgICAgfSxcbiAgICAge1xuICAgICAgICBncm91cDogXCJncm91cDJcIlxuICAgICAgICBsYWJlbDogXCJkYXRhc2V0IDNcIixcbiAgICAgICAgdmFsdWVzOiBbYSBsaXN0IG9mIG51bWVyaWNhbCB2YWx1ZXNdXG4gICAgIH1cbl1cbiovXG5cbmltcG9ydCBqUXVlcnkgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7ZXh0ZW50LCBtZWRpYW4sIGFzY2VuZGluZywgcXVhbnRpbGUsIG1heCwgbWlufSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7bmVzdH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7c2NhbGVCYW5kLCBzY2FsZUxpbmVhcn0gZnJvbSBcImQzLXNjYWxlXCI7XG5pbXBvcnQge2FyZWF9IGZyb20gXCJkMy1zaGFwZVwiO1xuaW1wb3J0IHtheGlzQm90dG9tLCBheGlzTGVmdH0gZnJvbSBcImQzLWF4aXNcIjtcbmltcG9ydCB7c2VsZWN0LCBldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHticnVzaH0gZnJvbSBcImQzLWJydXNoXCI7XG5pbXBvcnQge3JhbmRvbU5vcm1hbH0gZnJvbSBcImQzLXJhbmRvbVwiO1xuXG5pbXBvcnQge2tlcm5lbERlbnNpdHlFc3RpbWF0b3IsIGtlcm5lbCwga2VybmVsQmFuZHdpZHRofSBmcm9tIFwiLi9rZGVcIjtcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuL1Rvb2x0aXBcIjtcbmltcG9ydCBUb29sYmFyIGZyb20gXCIuL1Rvb2xiYXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JvdXBlZFZpb2xpbiB7XG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgZm9yIEdyb3VwZWRWaW9saW5cbiAgICAgKiBAcGFyYW0gZGF0YSB7TGlzdH06IGEgbGlzdCBvZiBvYmplY3RzIHdpdGggYXR0cmlidXRlczogZ3JvdXA6IHtTdHJpbmd9LCBsYWJlbDoge1N0cmluZ30sIHZhbHVlczoge0xpc3R9IG9mIG51bWVyaWNhbCB2YWx1ZXMsIHNpemU6IGludGVnZXIsIG9wdGlvbmFsXG4gICAgICogQHBhcmFtIGdyb3VwSW5mbyB7RGljdGlvbmFyeX06IG1ldGFkYXRhIG9mIHRoZSBncm91cCwgaW5kZXhlZCBieSBncm91cCBJRFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIGdyb3VwSW5mbyA9IHt9KXtcbiAgICAgICAgdGhpcy5fc2FuaXR5Q2hlY2soZGF0YSk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZ3JvdXBJbmZvID0gZ3JvdXBJbmZvO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb20ge0RPTX0gdGhlIFNWRyBkb20gb2JqZWN0IHRvIGFwcGVuZCB0aGUgdmlvbGluIHBsb3QgdG9cbiAgICAgKiBAcGFyYW0gd2lkdGgge0Zsb2F0fVxuICAgICAqIEBwYXJhbSBoZWlnaHQge0Zsb2F0fVxuICAgICAqIEBwYXJhbSB4UGFkZGluZyB7RmxvYXR9IHBhZGRpbmcgb2YgdGhlIHggYXhpc1xuICAgICAqIEBwYXJhbSB4RG9tYWluIHtMaXN0fSB0aGUgb3JkZXIgb2YgWCBncm91cHNcbiAgICAgKiBAcGFyYW0geURvbWFpbiAge0xpc3R9IHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgdGhlIHkgZG9tYWluLiBTZXQgdG8gZW1wdHkgYXJyYXkgb3IgdW5kZWZpbmVkIHRvIGF1dG8tY2FsY3VsYXRlLlxuICAgICAqIEBwYXJhbSB5TGFiZWwge1N0cmluZ31cbiAgICAgKiBAcGFyYW0gc2hvd1hcbiAgICAgKiBAcGFyYW0gc2hvd1N1YlhcbiAgICAgKiBAcGFyYW0gc3ViWEFuZ2xlXG4gICAgICogQHBhcmFtIHNob3dXaGlza2VyXG4gICAgICogQHBhcmFtIHNob3dEaXZpZGVyXG4gICAgICogQHBhcmFtIHNob3dMZWdlbmRcbiAgICAgKiBAcGFyYW0gc2hvd1NpemVcbiAgICAgKiBAcGFyYW0gc29ydFN1YlhcbiAgICAgKiBAcGFyYW0gc2hvd091dGxpZXJzXG4gICAgICogQHBhcmFtIG51bVBvaW50cyB7SW50ZWdlcn0gTnVtYmVyIG9mIHBvaW50cyByZXF1aXJlZCB0byByZW5kZXIgdmlvbGluIHBsb3QuIERpc3BsYXlzIHBvaW50cyBpZiBuIDwgbnVtUG9pbnRzLlxuICAgICAqL1xuXG4gICAgcmVuZGVyKGRvbSxcbiAgICAgICAgICAgd2lkdGg9NTAwLFxuICAgICAgICAgICBoZWlnaHQ9MzU3LFxuICAgICAgICAgICB4UGFkZGluZz0wLjA1LFxuICAgICAgICAgICB4RG9tYWluPXVuZGVmaW5lZCxcbiAgICAgICAgICAgeURvbWFpbj1bLTMsM10sXG4gICAgICAgICAgIHlMYWJlbD1cIlkgYXhpc1wiLFxuICAgICAgICAgICBzaG93WD10cnVlLFxuICAgICAgICAgICB4QW5nbGU9MzAsXG4gICAgICAgICAgIHNob3dTdWJYPXRydWUsXG4gICAgICAgICAgIHN1YlhBbmdsZT0wLFxuICAgICAgICAgICBzaG93V2hpc2tlcj1mYWxzZSxcbiAgICAgICAgICAgc2hvd0RpdmlkZXI9ZmFsc2UsXG4gICAgICAgICAgIHNob3dMZWdlbmQ9ZmFsc2UsXG4gICAgICAgICAgIHNob3dTaXplPWZhbHNlLFxuICAgICAgICAgICBzb3J0U3ViWD1mYWxzZSxcbiAgICAgICAgICAgc2hvd091dGxpZXJzPWZhbHNlLFxuICAgICAgICAgICBudW1Qb2ludHM9MCl7XG5cbiAgICAgICAgLy8gZGVmaW5lIHRoZSByZXNldCBmb3IgdGhpcyBwbG90XG4gICAgICAgIHRoaXMucmVzZXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKGRvbSwgd2lkdGgsIGhlaWdodCwgeFBhZGRpbmcsIHhEb21haW4sIHlEb21haW4sIHlMYWJlbCwgc2hvd1gsIHhBbmdsZSwgc2hvd1N1YlgsIHN1YlhBbmdsZSwgc2hvd1doaXNrZXIsIHNob3dEaXZpZGVyLCBzaG93TGVnZW5kLCBzaG93U2l6ZSwgc29ydFN1YlgsIHNob3dPdXRsaWVycyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy51cGRhdGVZU2NhbGUgPSBmdW5jdGlvbih5TGFiZWw9dW5kZWZpbmVkLCB5U2NhbGU9dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGlmICh5U2NhbGUgPT09IHVuZGVmaW5lZCkgeVNjYWxlID0gW107XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihkb20sIHdpZHRoLCBoZWlnaHQsIHhQYWRkaW5nLCB4RG9tYWluLCBbXSwgeUxhYmVsLCBzaG93WCwgeEFuZ2xlLCBzaG93U3ViWCwgc3ViWEFuZ2xlLCBzaG93V2hpc2tlciwgc2hvd0RpdmlkZXIsIHNob3dMZWdlbmQsIHNob3dTaXplLCBzb3J0U3ViWCwgc2hvd091dGxpZXJzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVhTY2FsZSA9IGZ1bmN0aW9uKHhEb21haW49dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoeERvbWFpbiA9PT0gdW5kZWZpbmVkKSBjb25zb2xlLmVycm9yKCd1cGRhdGVYU2NhbGUgY2FsbGVkIHdpdGhvdXQgbmV3IFggZG9tYWluJyk7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKGRvbSwgd2lkdGgsIGhlaWdodCwgeFBhZGRpbmcsIHhEb21haW4sIFtdLCB5TGFiZWwsIHNob3dYLCB4QW5nbGUsIHNob3dTdWJYLCBzdWJYQW5nbGUsIHNob3dXaGlza2VyLCBzaG93RGl2aWRlciwgc2hvd0xlZ2VuZCwgc2hvd1NpemUsIHNvcnRTdWJYLCBzaG93T3V0bGllcnMpO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZGVmaW5lcyB0aGUgWCwgc3ViWCwgWSwgWiBzY2FsZXNcbiAgICAgICAgaWYgKHlEb21haW49PT11bmRlZmluZWQgfHwgMCA9PSB5RG9tYWluLmxlbmd0aCl7XG4gICAgICAgICAgICBsZXQgYWxsViA9IFtdO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goKGQpID0+IGFsbFYgPSBhbGxWLmNvbmNhdChkLnZhbHVlcykpO1xuICAgICAgICAgICAgeURvbWFpbiA9IGV4dGVudChhbGxWKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlLW9yZ2FuaXplZCB0aGlzLmRhdGEgaW5kZXhlZCBieSBncm91cHNcbiAgICAgICAgdGhpcy5ncm91cHMgPSBuZXN0KClcbiAgICAgICAgICAgIC5rZXkoKGQpID0+IGQuZ3JvdXApXG4gICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpO1xuXG4gICAgICAgIHRoaXMuc2NhbGUgPSB7XG4gICAgICAgICAgICB4OiBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFswLCB3aWR0aF0pXG4gICAgICAgICAgICAgICAgLmRvbWFpbih4RG9tYWlufHx0aGlzLmdyb3Vwcy5tYXAoKGQpID0+IGQua2V5KSlcbiAgICAgICAgICAgICAgICAucGFkZGluZ0lubmVyKHhQYWRkaW5nKSxcbiAgICAgICAgICAgIHN1Yng6IHNjYWxlQmFuZCgpLFxuICAgICAgICAgICAgeTogc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFtoZWlnaHQsIDBdKVxuICAgICAgICAgICAgICAgIC5kb21haW4oeURvbWFpbiksXG4gICAgICAgICAgICB6OiBzY2FsZUxpbmVhcigpIC8vIHRoaXMgaXMgdGhlIHZpb2xpbiB3aWR0aCwgdGhlIGRvbWFpbiBhbmQgcmFuZ2UgYXJlIGRldGVybWluZWQgbGF0ZXIgaW5kaXZpZHVhbGx5IGZvciBlYWNoIHZpb2xpblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGZvciBlYWNoIGdyb3VwXG4gICAgICAgIHRoaXMuZ3JvdXBzLmZvckVhY2goKGcpID0+IHtcbiAgICAgICAgICAgIGxldCBncm91cCA9IGcua2V5O1xuICAgICAgICAgICAgbGV0IGVudHJpZXMgPSBnLnZhbHVlcztcbiAgICAgICAgICAgIGxldCBpbmZvID0gdGhpcy5ncm91cEluZm9bZ3JvdXBdOyAvLyBvcHRpb25hbFxuICAgICAgICAgICAgZy5pbmRleCA9IHRoaXMuc2NhbGUueC5kb21haW4oKS5pbmRleE9mKGdyb3VwKTtcblxuICAgICAgICAgICAgaWYgKGluZm8gIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgIC8vIHJlbmRlcnMgZ3JvdXAgaW5mbyBzdWNoIGFzIHAtdmFsdWUsIGdyb3VwIG5hbWVcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cEluZm9Eb20gPSBkb20uYXBwZW5kKFwiZ1wiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cExhYmVscyA9IGdyb3VwSW5mb0RvbS5zZWxlY3RBbGwoXCIudmlvbGluLWdyb3VwLWxhYmVsXCIpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKFsncHZhbHVlJ10pO1xuICAgICAgICAgICAgICAgIGdyb3VwTGFiZWxzLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKSAvLyBDb2RlIHJldmlldzogY29uc2lkZXIgbW92aW5nIHRoaXMgcGFydCB0byB0aGUgZVFUTCBkYXNoYm9hcmRcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLWdyb3VwLWxhYmVsXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJjZW50ZXJcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpbmZvWydwdmFsdWVUaHJlc2hvbGQnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZD09J3B2YWx1ZScmJnBhcnNlRmxvYXQoaW5mb1tkXSk8PXBhcnNlRmxvYXQoaW5mb1sncHZhbHVlVGhyZXNob2xkJ10pP1wib3JhbmdlcmVkXCI6XCJTbGF0ZUdyYXlcIlxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpLzI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IHRoaXMuc2NhbGUueSh5RG9tYWluWzBdKSArIDUwOyAvLyB0b2RvOiBhdm9pZCBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KChkKSA9PiBgJHtkfTogJHtwYXJzZUZsb2F0KHBhcnNlRmxvYXQoaW5mb1tkXSkudG9QcmVjaXNpb24oMykpLnRvRXhwb25lbnRpYWwoKX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZGVmaW5lcyB0aGUgdGhpcy5zY2FsZS5zdWJ4IGJhc2VkIG9uIHRoaXMuc2NhbGUueFxuICAgICAgICAgICAgaWYgKHNvcnRTdWJYKSB7XG4gICAgICAgICAgICAgICAgZW50cmllcy5zb3J0KChhLGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEubGFiZWwgPCBiLmxhYmVsKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGEubGFiZWwgPiBiLmxhYmVsKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2NhbGUuc3VieFxuICAgICAgICAgICAgICAgIC5kb21haW4oZW50cmllcy5tYXAoKGQpID0+IGQubGFiZWwpKVxuICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFt0aGlzLnNjYWxlLngoZ3JvdXApLCB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpXSk7XG5cbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcblxuICAgICAgICAgICAgICAgIGlmICgwID09IGVudHJ5LnZhbHVlcy5sZW5ndGgpIHJldHVybjsgLy8gbm8gZnVydGhlciByZW5kZXJpbmcgaWYgdGhpcyBncm91cCBoYXMgbm8gZW50cmllc1xuICAgICAgICAgICAgICAgIGVudHJ5LnZhbHVlcyA9IGVudHJ5LnZhbHVlcy5zb3J0KGFzY2VuZGluZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhd1Zpb2xpbihkb20sIGVudHJ5LCBzaG93V2hpc2tlciwgZy5pbmRleCwgc2hvd091dGxpZXJzLCBudW1Qb2ludHMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGFkZHMgdGhlIHN1Yi14IGF4aXMgaWYgdGhlcmUgYXJlIG1vcmUgdGhhbiBvbmUgZW50cmllc1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IDE4O1xuICAgICAgICAgICAgaWYgKHNob3dTaXplKXtcbiAgICAgICAgICAgICAgICAgY29uc3Qgc2l6ZVNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihlbnRyaWVzLm1hcCgoZCkgPT4ge3JldHVybiBkLnNpemU9PXVuZGVmaW5lZD8nKDApJzpgKCR7ZC5zaXplfHwwfSlgfSkpXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kKFt0aGlzLnNjYWxlLngoZ3JvdXApLCB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpXSk7XG4gICAgICAgICAgICAgICAgIGNvbnN0IHNpemV4RyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXNpemUtYXhpc1wiKVxuICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCArIGJ1ZmZlcn0pYClcbiAgICAgICAgICAgICAgICAgICAgIC5jYWxsKGF4aXNCb3R0b20oc2l6ZVNjYWxlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzaG93U3ViWCkge1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSA1O1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1YnhHID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1zdWItYXhpc1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDAsICR7aGVpZ2h0ICsgYnVmZmVyfSlgKVxuICAgICAgICAgICAgICAgICAgICAuY2FsbChheGlzQm90dG9tKHRoaXMuc2NhbGUuc3VieCkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN1YlhBbmdsZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VieEcuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgcm90YXRlKCR7c3ViWEFuZ2xlfSwgMiwgMTApYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVuZGVycyB0aGUgeCBheGlzXG4gICAgICAgIGxldCBidWZmZXIgPSBzaG93U3ViWD81NTowOyAvLyBDb2RlIHJldmlldzogaGFyZC1jb2RlZCB2YWx1ZXNcbiAgICAgICAgdGhpcy54QXhpcyA9IHNob3dYP2F4aXNCb3R0b20odGhpcy5zY2FsZS54KTpheGlzQm90dG9tKHRoaXMuc2NhbGUueCkudGlja0Zvcm1hdChcIlwiKTtcbiAgICAgICAgZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4teC1heGlzIGF4aXMtLXhcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgJHtoZWlnaHQgKyBidWZmZXJ9KWApXG4gICAgICAgICAgICAuY2FsbCh0aGlzLnhBeGlzKSAvLyBzZXQgdGlja0Zvcm1hdChcIlwiKSB0byBzaG93IHRpY2sgbWFya3Mgd2l0aG91dCB0ZXh0IGxhYmVsc1xuICAgICAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHJvdGF0ZSgke3hBbmdsZX0sIC0xMCwgMTApYCk7XG5cbiAgICAgICAgLy8gYWRkcyB0aGUgeSBBeGlzXG4gICAgICAgIGJ1ZmZlciA9IDU7XG4gICAgICAgIHRoaXMueUF4aXMgPSBheGlzTGVmdCh0aGlzLnNjYWxlLnkpXG4gICAgICAgICAgICAgICAgICAgIC50aWNrVmFsdWVzKHRoaXMuc2NhbGUueS50aWNrcyg1KSk7XG4gICAgICAgIGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXktYXhpcyBheGlzLS15XCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKC0ke2J1ZmZlcn0sIDApYClcbiAgICAgICAgICAgIC5jYWxsKHRoaXMueUF4aXMpO1xuXG4gICAgICAgIC8vIGFkZHMgdGhlIHRleHQgbGFiZWwgZm9yIHRoZSB5IGF4aXNcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tYXhpcy1sYWJlbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgtJHtidWZmZXIgKiAyICsgc2VsZWN0KCcudmlvbGluLXktYXhpcycpLm5vZGUoKS5nZXRCQm94KCkud2lkdGh9LCAke3RoaXMuc2NhbGUueS5yYW5nZSgpWzBdICsgKHRoaXMuc2NhbGUueS5yYW5nZSgpWzFdIC0gdGhpcy5zY2FsZS55LnJhbmdlKClbMF0pLzJ9KSByb3RhdGUoLTkwKWApXG4gICAgICAgICAgICAudGV4dCh5TGFiZWwpO1xuXG4gICAgICAgIC8vIHBsb3QgbW91c2UgZXZlbnRzXG4gICAgICAgIGRvbS5vbihcIm1vdXNlb3V0XCIsICgpPT57XG4gICAgICAgICAgICBpZih0aGlzLnRvb2x0aXAgIT09IHVuZGVmaW5lZCkgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIGdyb3VwIGRpdmlkZXJzXG4gICAgICAgIGlmKHNob3dEaXZpZGVyKXtcbiAgICAgICAgICAgIHRoaXMuX2FkZEdyb3VwRGl2aWRlcihkb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIGNvbG9yIGxlZ2VuZFxuICAgICAgICBpZiAoc2hvd0xlZ2VuZCkge1xuICAgICAgICAgICAgY29uc3QgbGVnZW5kRyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcInZpb2xpbkxlZ2VuZFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgMClgKTtcblxuICAgICAgICAgICAgbGVnZW5kRy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMzUpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA2MCoodGhpcy5ncm91cHNbMF0udmFsdWVzLmxlbmd0aCkgKyAxMClcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAyNClcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcInNpbHZlclwiKTtcblxuICAgICAgICAgICAgY29uc3QgbGVnZW5kcyA9IGxlZ2VuZEcuc2VsZWN0QWxsKFwiLnZpb2xpbi1sZWdlbmRcIikuZGF0YSh0aGlzLmdyb3Vwc1swXS52YWx1ZXMpO1xuXG5cbiAgICAgICAgICAgIGNvbnN0IGcgPSBsZWdlbmRzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKFwidmlvbGluLWxlZ2VuZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHcgPSAxMDtcbiAgICAgICAgICAgIGcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gNSArIDYwKihpKSAgKyB0aGlzLnNjYWxlLngucmFuZ2UoKVswXSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgLTI4KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdylcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB3KVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IGQuY29sb3IpO1xuXG4gICAgICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLWxlZ2VuZC10ZXh0XCIpXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpID0+IGQubGFiZWwpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiAxNyArIDYwKihpKSArIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMjApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkUGxvdFRpdGxlKGRvbSwgdGl0bGUpe1xuICAgICAgICBsZXQgeCA9ICh0aGlzLnNjYWxlLngucmFuZ2UoKVsxXS10aGlzLnNjYWxlLngucmFuZ2UoKVswXSArIDEpIC8yO1xuICAgICAgICBsZXQgeSA9ICh0aGlzLnNjYWxlLnkucmFuZ2UoKVsxXSAtIDEwKTtcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tdGl0bGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgKVxuICAgICAgICAgICAgLnRleHQodGl0bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbHRpcCBvYmplY3RcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2x0aXAncyBkb20gSURcbiAgICAgKiBAcmV0dXJucyB7VG9vbHRpcH1cbiAgICAgKi9cbiAgICBjcmVhdGVUb29sdGlwKGRvbUlkKXtcbiAgICAgICAgaWYgKGpRdWVyeShgIyR7ZG9tSWR9YCkubGVuZ3RoID09IDApIGpRdWVyeSgnPGRpdi8+JykuYXR0cignaWQnLCBkb21JZCkuYXBwZW5kVG8oalF1ZXJ5KCdib2R5JykpO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcChkb21JZCk7XG4gICAgICAgIHNlbGVjdChgIyR7ZG9tSWR9YCkuY2xhc3NlZCgndmlvbGluLXRvb2x0aXAnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICAvLyBpZiAodG9vbHRpcCA9PT0gdW5kZWZpbmVkKSB0b29sdGlwID0gdGhpcy5jcmVhdGVUb29sdGlwKGRvbUlkKTtcbiAgICAgICAgdGhpcy50b29sYmFyID0gbmV3IFRvb2xiYXIoZG9tSWQsIHRvb2x0aXApO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGJydXNoIHRvIHRoZSBwbG90XG4gICAgICogQHBhcmFtIGRvbSB7RDN9IERvbSBlbGVtZW50XG4gICAgICovXG4gICAgYWRkQnJ1c2goZG9tKXtcbiAgICAgICAgY29uc3QgdGhlQnJ1c2ggPSBicnVzaCgpO1xuICAgICAgICB0aGVCcnVzaC5vbihcImVuZFwiLCAoKT0+e3RoaXMuem9vbShkb20sIHRoZUJydXNoKX0pO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJydXNoXCIpXG4gICAgICAgICAgICAuY2FsbCh0aGVCcnVzaCk7XG4gICAgfVxuXG4gICAgem9vbShkb20sIHRoZUJydXNoKXtcbiAgICAgICAgbGV0IHMgPSBldmVudC5zZWxlY3Rpb24sXG4gICAgICAgICAgICBpZGVsVGltZW91dCxcbiAgICAgICAgICAgIGlkZWxEZWxheSA9IDM1MDtcbiAgICAgICAgaWYgKHRoZUJydXNoID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFzKSB7XG4gICAgICAgICAgICBpZiAoIWlkZWxUaW1lb3V0KSByZXR1cm4gaWRlbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZGVsVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB9LCBpZGVsRGVsYXkpO1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgY3VycmVudCBzY2FsZXMnIGRvbWFpbnMgYmFzZWQgb24gdGhlIGJydXNoZWQgd2luZG93XG4gICAgICAgICAgICB0aGlzLnNjYWxlLnguZG9tYWluKHRoaXMuc2NhbGUueC5kb21haW4oKS5maWx0ZXIoKGQsIGkpPT57XG4gICAgICAgICAgICAgICAgICBjb25zdCBsb3dCb3VuZCA9IE1hdGguZmxvb3Ioc1swXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdXBwZXJCb3VuZCA9IE1hdGguZmxvb3Ioc1sxXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPj0gbG93Qm91bmQgJiYgaSA8PXVwcGVyQm91bmQ7XG4gICAgICAgICAgICB9KSk7IC8vIFRPRE86IGFkZCBjb21tZW50c1xuXG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLmZsb29yKHRoaXMuc2NhbGUueS5pbnZlcnQoc1sxXVsxXSkpO1xuICAgICAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5mbG9vcih0aGlzLnNjYWxlLnkuaW52ZXJ0KHNbMF1bMV0pKTtcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueS5kb21haW4oW21pbiwgbWF4XSk7IC8vIHRvZG86IGRlYnVnXG5cbiAgICAgICAgICAgIGRvbS5zZWxlY3QoXCIuYnJ1c2hcIikuY2FsbCh0aGVCcnVzaC5tb3ZlLCBudWxsKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgIC8vIHpvb21cbiAgICAgICAgbGV0IHQgPSBkb20udHJhbnNpdGlvbigpLmR1cmF0aW9uKDc1MCk7XG4gICAgICAgIGRvbS5zZWxlY3QoXCIuYXhpcy0teFwiKS50cmFuc2l0aW9uKHQpLmNhbGwodGhpcy54QXhpcyk7XG4gICAgICAgIGRvbS5zZWxlY3QoXCIuYXhpcy0teVwiKS50cmFuc2l0aW9uKHQpLmNhbGwodGhpcy55QXhpcyk7XG5cbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZ2csIGkpPT4ge1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gZ2cua2V5O1xuICAgICAgICAgICAgbGV0IGVudHJpZXMgPSBnZy52YWx1ZXM7XG5cbiAgICAgICAgICAgIC8vIHJlLWRlZmluZSB0aGUgc3VieCdzIHJhbmdlXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnN1YnhcbiAgICAgICAgICAgICAgICAucmFuZ2VSb3VuZChbdGhpcy5zY2FsZS54KGdyb3VwKSwgdGhpcy5zY2FsZS54KGdyb3VwKSArIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKV0pO1xuXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgY29uc3QgZ0luZGV4ID0gdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG5cbiAgICAgICAgICAgICAgICAvLyByZS1kZWZpbmUgdGhlIHNjYWxlLnoncyByYW5nZVxuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGUuelxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCksIHRoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCkgKyB0aGlzLnNjYWxlLnN1YnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlciB0aGUgdmlvbGluXG4gICAgICAgICAgICAgICAgY29uc3QgZyA9IGRvbS5zZWxlY3QoYCN2aW9saW4ke2dnLmluZGV4fS0ke2VudHJ5LmxhYmVsfWApO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpblwiKVxuICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgYXJlYSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAueDAoKGQpID0+IHRoaXMuc2NhbGUueihkWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC54MSgoZCkgPT4gdGhpcy5zY2FsZS56KC1kWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC55KChkKSA9PiB0aGlzLnNjYWxlLnkoZFswXSkpXG4gICAgICAgICAgICAgICAgICAgICk7XG5cblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlciB0aGUgYm94IHBsb3RcbiAgICAgICAgICAgICAgICAvLyBpbnRlcnF1YXJ0aWxlIHJhbmdlXG4gICAgICAgICAgICAgICAgY29uc3QgcTEgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuMjUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHEzID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjc1KTtcbiAgICAgICAgICAgICAgICBjb25zdCB6ID0gMC4xO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpbi1pclwiKVxuICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHRoaXMuc2NhbGUueShxMykpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgTWF0aC5hYnModGhpcy5zY2FsZS56KC16KSAtIHRoaXMuc2NhbGUueih6KSkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIE1hdGguYWJzKHRoaXMuc2NhbGUueShxMykgLSB0aGlzLnNjYWxlLnkocTEpKSk7XG5cbiAgICAgICAgICAgICAgICAvLyB0aGUgbWVkaWFuIGxpbmVcbiAgICAgICAgICAgICAgICBjb25zdCBtZWQgPSBtZWRpYW4oZW50cnkudmFsdWVzKTtcbiAgICAgICAgICAgICAgICBnLnNlbGVjdChcIi52aW9saW4tbWVkaWFuXCIpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooeikpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW5kZXIgdGhlIHZpb2xpbiBhbmQgYm94IHBsb3RzXG4gICAgICogQHBhcmFtIGRvbSB7RDMgRE9NfVxuICAgICAqIEBwYXJhbSBlbnRyeSB7T2JqZWN0fSB3aXRoIGF0dHJzOiB2YWx1ZXMsIGxhYmVsXG4gICAgICogQHBhcmFtIHNob3dXaGlza2VyIHtCb29sZWFufVxuICAgICAqIEBwYXJhbSBnSW5kZXhcbiAgICAgKiBAcGFyYW0gc2hvd091dGxpZXJzIHtCb29sZWFufVxuICAgICAqIEBwYXJhbSBzaG93UG9pbnRzIHtCb29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RyYXdWaW9saW4oZG9tLCBlbnRyeSwgc2hvd1doaXNrZXIsIGdJbmRleCwgc2hvd091dGxpZXJzLCBudW1Qb2ludHMpe1xuXG4gICAgICAgIC8vIGdlbmVyYXRlIHRoZSB2ZXJ0aWNlcyBmb3IgdGhlIHZpb2xpbiBwYXRoIHVzZSBhIGtkZVxuICAgICAgICBsZXQga2RlID0ga2VybmVsRGVuc2l0eUVzdGltYXRvcihcbiAgICAgICAgICAgIGtlcm5lbC5nYXVzc2lhbixcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueS50aWNrcygxMDApLCAvLyB1c2UgdXAgdG8gMTAwIHZlcnRpY2VzIGFsb25nIHRoZSBZIGF4aXMgKHRvIGNyZWF0ZSB0aGUgdmlvbGluIHBhdGgpXG4gICAgICAgICAgICBrZXJuZWxCYW5kd2lkdGgubnJkKGVudHJ5LnZhbHVlcykgLy8gZXN0aW1hdGUgdGhlIGJhbmR3aWR0aCBiYXNlZCBvbiB0aGUgZGF0YVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBlRG9tYWluID0gZXh0ZW50KGVudHJ5LnZhbHVlcyk7IC8vIGdldCB0aGUgbWF4IGFuZCBtaW4gaW4gZW50cnkudmFsdWVzXG4gICAgICAgIGNvbnN0IHZlcnRpY2VzID0ga2RlKGVudHJ5LnZhbHVlcykuZmlsdGVyKChkKT0+ZFswXT49ZURvbWFpblswXSYmZFswXTw9ZURvbWFpblsxXSk7IC8vIGZpbHRlciB0aGUgdmVydGljZXMgdGhhdCBhcmVuJ3QgaW4gdGhlIGVudHJ5LnZhbHVlc1xuXG4gICAgICAgIGNvbnN0IHZpb2xpbkcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIGB2aW9saW4ke2dJbmRleH0tJHtlbnRyeS5sYWJlbH1gKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd2aW9saW4tZycpXG4gICAgICAgICAgICAgICAgLmRhdHVtKGVudHJ5KTtcblxuICAgICAgICAvLyB2aW9saW4gcGxvdCBhbmQgYm94IGNhbiBvbmx5IGJlIGRyYXduIHdoZW4gdmVydGljZXMgZXhpc3QgYW5kIHRoZXJlIGFyZSBubyBOYU4gcG9pbnRzXG4gICAgICAgIGlmIChlbnRyeS52YWx1ZXMubGVuZ3RoID49IG51bVBvaW50cyAmJiB2ZXJ0aWNlcy5sZW5ndGggJiYgdGhpcy5fdmFsaWRWZXJ0aWNlcyh2ZXJ0aWNlcykpIHtcbiAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgeiBzY2FsZSAtLSB0aGUgdmlvbGluIHdpZHRoXG4gICAgICAgICAgICBsZXQgek1heCA9IG1heCh2ZXJ0aWNlcywgKGQpPT5NYXRoLmFicyhkWzFdKSk7IC8vIGZpbmQgdGhlIGFicyh2YWx1ZSkgaW4gZW50cnkudmFsdWVzXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnpcbiAgICAgICAgICAgICAgICAuZG9tYWluKFstek1heCwgek1heF0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFt0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpLCB0aGlzLnNjYWxlLnN1YngoZW50cnkubGFiZWwpICsgdGhpcy5zY2FsZS5zdWJ4LmJhbmR3aWR0aCgpXSk7XG5cbiAgICAgICAgICAgIC8vIHZpc3VhbCByZW5kZXJpbmdcbiAgICAgICAgICAgIGxldCB2aW9saW4gPSBhcmVhKClcbiAgICAgICAgICAgICAgICAueDAoKGQpID0+IHRoaXMuc2NhbGUueihkWzFdKSlcbiAgICAgICAgICAgICAgICAueDEoKGQpID0+IHRoaXMuc2NhbGUueigtZFsxXSkpXG4gICAgICAgICAgICAgICAgLnkoKGQpID0+IHRoaXMuc2NhbGUueShkWzBdKSk7XG4gICAgICAgICAgICBjb25zdCB2UGF0aCA9IHZpb2xpbkcuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgIC5kYXR1bSh2ZXJ0aWNlcylcbiAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgdmlvbGluKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwidmlvbGluXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuY29sb3IgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGVudHJ5LmNvbG9yO1xuICAgICAgICAgICAgICAgICAgICAvLyBhbHRlcm5hdGUgdGhlIG9kZCBhbmQgZXZlbiBjb2xvcnMsIG1heWJlIHdlIGRvbid0IHdhbnQgdGhpcyBmZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgIGlmKGdJbmRleCUyID09IDApIHJldHVybiBcIiM5MGMxYzFcIjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiIzk0YThiOFwiO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBib3hwbG90XG4gICAgICAgICAgICBjb25zdCBxMSA9IHF1YW50aWxlKGVudHJ5LnZhbHVlcywgMC4yNSk7XG4gICAgICAgICAgICBjb25zdCBxMyA9IHF1YW50aWxlKGVudHJ5LnZhbHVlcywgMC43NSk7XG4gICAgICAgICAgICBjb25zdCB6ID0gdGhpcy5zY2FsZS56LmRvbWFpbigpWzFdLzM7XG5cbiAgICAgICAgICAgIGlmKHNob3dXaGlza2VyKXtcbiAgICAgICAgICAgICAgICAvLyB0aGUgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cyBvZiBlbnRyeS52YWx1ZXNcbiAgICAgICAgICAgICAgICBjb25zdCBpcXIgPSBNYXRoLmFicyhxMy1xMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBwZXIgPSBtYXgoZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ8PXEzKyhpcXIqMS41KSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvd2VyID0gbWluKGVudHJ5LnZhbHVlcy5maWx0ZXIoKGQpPT5kPj1xMS0oaXFyKjEuNSkpKTtcbiAgICAgICAgICAgICAgICBkb20uYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZChcIndoaXNrZXJcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCB0aGlzLnNjYWxlLnooMCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgdGhpcy5zY2FsZS56KDApKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIHRoaXMuc2NhbGUueSh1cHBlcikpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55KGxvd2VyKSlcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaW50ZXJxdWFydGlsZSByYW5nZVxuICAgICAgICAgICAgdmlvbGluRy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuc2NhbGUueigteikpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHRoaXMuc2NhbGUueShxMykpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBNYXRoLmFicyh0aGlzLnNjYWxlLnooLXopLXRoaXMuc2NhbGUueih6KSkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgTWF0aC5hYnModGhpcy5zY2FsZS55KHEzKSAtIHRoaXMuc2NhbGUueShxMSkpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4taXJcIik7XG5cbiAgICAgICAgICAgIC8vIG1lZGlhblxuICAgICAgICAgICAgY29uc3QgbWVkID0gbWVkaWFuKGVudHJ5LnZhbHVlcyk7XG4gICAgICAgICAgICB2aW9saW5HLmFwcGVuZChcImxpbmVcIikgLy8gdGhlIG1lZGlhbiBsaW5lXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCB0aGlzLnNjYWxlLnooLXopKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgdGhpcy5zY2FsZS56KHopKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLW1lZGlhblwiKTtcblxuICAgICAgICAgICAgLy8gb3V0bGllcnNcbiAgICAgICAgICAgICBpZiAoc2hvd091dGxpZXJzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGppdHRlciA9IHJhbmRvbU5vcm1hbCgwLCB6LzIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlxciA9IE1hdGguYWJzKHEzLXExKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cHBlciA9IG1heChlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZDw9cTMrKGlxcioxLjUpKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG93ZXIgPSBtaW4oZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ+PXExLShpcXIqMS41KSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG91dGxpZXJzID0gZW50cnkudmFsdWVzLmZpbHRlcigoZCk9PmQ8bG93ZXJ8fGQ+dXBwZXIpO1xuICAgICAgICAgICAgICAgIHZpb2xpbkcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLW91dGxpZXJzXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEob3V0bGllcnMpXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gLmF0dHIoXCJjeFwiLCAoKT0+dGhpcy5zY2FsZS56KDApKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN4XCIsICgpPT50aGlzLnNjYWxlLnooaml0dGVyKCkpKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKT0+dGhpcy5zY2FsZS55KGQpKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1vdXNlIGV2ZW50c1xuICAgICAgICAgICAgdmlvbGluRy5vbihcIm1vdXNlb3ZlclwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIHZQYXRoLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlbnRyeSk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy50b29sdGlwID09PSB1bmRlZmluZWQpIGNvbnNvbGUud2FybihcIkdyb3VwVmlvbGluIFdhcm5pbmc6IHRvb2x0aXAgbm90IGRlZmluZWRcIik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFxuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuZ3JvdXAgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkubGFiZWwgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJNZWRpYW46IFwiICsgbWVkLnRvUHJlY2lzaW9uKDQpICsgXCI8YnIvPlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZpb2xpbkcub24oXCJtb3VzZW91dFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIHZQYXRoLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChudW1Qb2ludHMpIHtcbiAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgeiBzY2FsZSAtLSB0aGUgdmlvbGluIHdpZHRoXG4gICAgICAgICAgICBsZXQgek1heCA9IG1heChlbnRyeS52YWx1ZXMsIChkKT0+TWF0aC5hYnMoZCkpOyAvLyBmaW5kIHRoZSBhYnModmFsdWUpIGluIGVudHJ5LnZhbHVlc1xuICAgICAgICAgICAgdGhpcy5zY2FsZS56XG4gICAgICAgICAgICAgICAgLmRvbWFpbihbLXpNYXgsIHpNYXhdKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbdGhpcy5zY2FsZS5zdWJ4KGVudHJ5LmxhYmVsKSwgdGhpcy5zY2FsZS5zdWJ4KGVudHJ5LmxhYmVsKSArIHRoaXMuc2NhbGUuc3VieC5iYW5kd2lkdGgoKV0pO1xuICAgICAgICAgICAgY29uc3QgeiA9IHRoaXMuc2NhbGUuei5kb21haW4oKVsxXS8zO1xuICAgICAgICAgICAgbGV0IGppdHRlciA9IHJhbmRvbU5vcm1hbCgwLCB6LzIpO1xuXG4gICAgICAgICAgICB2aW9saW5HLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLXBvaW50c1wiKVxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAuZGF0YShlbnRyeS52YWx1ZXMpXG4gICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoKT0+dGhpcy5zY2FsZS56KGppdHRlcigpKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKT0+dGhpcy5zY2FsZS55KGQpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgX3Nhbml0eUNoZWNrKGRhdGEpe1xuICAgICAgICBjb25zdCBhdHRyID0gW1wiZ3JvdXBcIiwgXCJsYWJlbFwiLCBcInZhbHVlc1wiXTtcblxuICAgICAgICBkYXRhLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgICAgIGF0dHIuZm9yRWFjaCgoYSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkW2FdID09PSB1bmRlZmluZWQpIHRocm93IFwiR3JvdXBlZFZpb2xpbjogaW5wdXQgZGF0YSBlcnJvci5cIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBpZiAoMCA9PSBkLnZhbHVlcy5sZW5ndGgpIHRocm93IFwiVmlvbGluOiBJbnB1dCBkYXRhIGVycm9yXCI7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9hZGRHcm91cERpdmlkZXIoZG9tKXtcbiAgICAgICAgY29uc3QgZ3JvdXBzID0gdGhpcy5zY2FsZS54LmRvbWFpbigpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gTWF0aC5hYnModGhpcy5zY2FsZS54KHRoaXMuc2NhbGUueC5kb21haW4oKVsxXSkgLSB0aGlzLnNjYWxlLngodGhpcy5zY2FsZS54LmRvbWFpbigpWzBdKSAtIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKSk7XG5cbiAgICAgICAgY29uc3QgZ2V0WCA9IChnLCBpKT0+IHtcbiAgICAgICAgICAgIGlmIChpICE9PSBncm91cHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYWxlLngoZykgKyArdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpICsgKHBhZGRpbmcvMilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIudmxpbmVcIikuZGF0YShncm91cHMpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5jbGFzc2VkKFwidmxpbmVcIiwgdHJ1ZSlcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgZ2V0WClcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgZ2V0WClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIHRoaXMuc2NhbGUueS5yYW5nZSgpWzFdKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIChnLCBpKT0+aSE9Z3JvdXBzLmxlbmd0aC0xPzE6MClcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcInJnYig4Niw5OCwxMDcpXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDAuNSlcblxuICAgIH1cblxuICAgIF92YWxpZFZlcnRpY2VzKHZlcnRpY2VzKSB7XG4gICAgICAgIGxldCB2YWxzID0gdmVydGljZXMucmVkdWNlKChhLCBiKT0+YS5jb25jYXQoYiksIFtdKTtcbiAgICAgICAgbGV0IGludmFsaWRWZXJ0aWNlcyA9IHZhbHMuZmlsdGVyKGQ9PmlzTmFOKGQpKTtcblxuICAgICAgICByZXR1cm4gIShpbnZhbGlkVmVydGljZXMubGVuZ3RoKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5cbi8qXG5UT0RPXG4xLiByZWZhY3RvcmluZ1xuICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQge2NyZWF0ZVN2ZywgZ2VuZXJhdGVSYW5kb21NYXRyaXgsIGNoZWNrRG9tSWQsIGNyZWF0ZUNhbnZhc30gZnJvbSBcIi4vbW9kdWxlcy91dGlsc1wiO1xuaW1wb3J0IHtyYW5nZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3JhbmRvbU5vcm1hbH0gZnJvbSBcImQzLXJhbmRvbVwiO1xuaW1wb3J0IEhlYXRtYXAgZnJvbSBcIi4vbW9kdWxlcy9IZWF0bWFwXCI7XG5pbXBvcnQgRGVuZHJvSGVhdG1hcENvbmZpZyBmcm9tIFwiLi9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWdcIjtcbmltcG9ydCBEZW5kcm9IZWF0bWFwIGZyb20gXCIuL21vZHVsZXMvRGVuZHJvSGVhdG1hcFwiO1xuaW1wb3J0IEdyb3VwZWRWaW9saW4gZnJvbSBcIi4vbW9kdWxlcy9Hcm91cGVkVmlvbGluXCI7XG5pbXBvcnQgSXNvZm9ybVRyYWNrVmlld2VyIGZyb20gXCIuL21vZHVsZXMvSXNvZm9ybVRyYWNrVmlld2VyXCI7XG5pbXBvcnQgQnViYmxlTWFwIGZyb20gXCIuL21vZHVsZXMvQnViYmxlTWFwXCI7XG5pbXBvcnQgSGFsZk1hcCBmcm9tIFwiLi9tb2R1bGVzL0hhbGZNYXBcIjtcbmltcG9ydCB7cmVuZGVyfSBmcm9tICcuL1RyYW5zY3JpcHRCcm93c2VyJztcblxuZXhwb3J0IGNvbnN0IGRlbW9EYXRhID0ge1xuICAgIGhlYXRtYXA6Z2VuZXJhdGVSYW5kb21NYXRyaXgoe3g6NTAsIHk6MTAsIHNjYWxlRmFjdG9yOjEwMDB9KSxcbiAgICBkZW5kcm9IZWF0bWFwOiB7XG4gICAgICAgIHJvd1RyZWU6IFwiKCgoVFA1MzowLjE3LFNMSzowLjE3KToxLjE4LE5EUkc0OjEuMzQpOjEuMzMsQUNUTjM6Mi42Nyk7XCIsXG4gICAgICAgIGNvbFRyZWU6IFwiKCgoQWRpcG9zZSBWaXNjZXJhbCBPbWVudHVtOjAuMDYsQWRpcG9zZSBTdWJjdXRhbmVvdXM6MC4wNik6MC4wMCxCbGFkZGVyOjAuMDYpOjAuMTYsQWRyZW5hbCBHbGFuZDowLjIyKTtcIixcbiAgICAgICAgaGVhdG1hcDogW1xuICAgIHtcbiAgICAgIFwieVwiOiBcIlNMS1wiLFxuICAgICAgXCJ2YWx1ZVwiOiAzNS41MDUsXG4gICAgICBcInhcIjogXCJBZGlwb3NlIFN1YmN1dGFuZW91c1wiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIlNMS1wiLFxuICAgICAgXCJ2YWx1ZVwiOiAyOS4yOCxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgVmlzY2VyYWwgT21lbnR1bVwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIlNMS1wiLFxuICAgICAgXCJ2YWx1ZVwiOiAxNy40MDUsXG4gICAgICBcInhcIjogXCJBZHJlbmFsIEdsYW5kXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiU0xLXCIsXG4gICAgICBcInZhbHVlXCI6IDUzLjI5LFxuICAgICAgXCJ4XCI6IFwiQmxhZGRlclwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIk5EUkc0XCIsXG4gICAgICBcInZhbHVlXCI6IDEyLjAzNSxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgU3ViY3V0YW5lb3VzXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiTkRSRzRcIixcbiAgICAgIFwidmFsdWVcIjogNi41MzEwMDAwMDAwMDAwMDEsXG4gICAgICBcInhcIjogXCJBZGlwb3NlIFZpc2NlcmFsIE9tZW50dW1cIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJORFJHNFwiLFxuICAgICAgXCJ2YWx1ZVwiOiAxMzQuOCxcbiAgICAgIFwieFwiOiBcIkFkcmVuYWwgR2xhbmRcIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJORFJHNFwiLFxuICAgICAgXCJ2YWx1ZVwiOiA3LjExNjAwMDAwMDAwMDAwMDUsXG4gICAgICBcInhcIjogXCJCbGFkZGVyXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ5XCI6IFwiVFA1M1wiLFxuICAgICAgXCJ2YWx1ZVwiOiAyOS45MzUsXG4gICAgICBcInhcIjogXCJBZGlwb3NlIFN1YmN1dGFuZW91c1wiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIlRQNTNcIixcbiAgICAgIFwidmFsdWVcIjogMjMuNTUsXG4gICAgICBcInhcIjogXCJBZGlwb3NlIFZpc2NlcmFsIE9tZW50dW1cIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJUUDUzXCIsXG4gICAgICBcInZhbHVlXCI6IDE4LjUxNSxcbiAgICAgIFwieFwiOiBcIkFkcmVuYWwgR2xhbmRcIixcbiAgICAgIFwidW5pdFwiOiBcIlRQTVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInlcIjogXCJUUDUzXCIsXG4gICAgICBcInZhbHVlXCI6IDQwLjUxLFxuICAgICAgXCJ4XCI6IFwiQmxhZGRlclwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIkFDVE4zXCIsXG4gICAgICBcInZhbHVlXCI6IDAuMzMxNDUsXG4gICAgICBcInhcIjogXCJBZGlwb3NlIFN1YmN1dGFuZW91c1wiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIkFDVE4zXCIsXG4gICAgICBcInZhbHVlXCI6IDAuMzMxNyxcbiAgICAgIFwieFwiOiBcIkFkaXBvc2UgVmlzY2VyYWwgT21lbnR1bVwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIkFDVE4zXCIsXG4gICAgICBcInZhbHVlXCI6IDAuMTAwMDA1LFxuICAgICAgXCJ4XCI6IFwiQWRyZW5hbCBHbGFuZFwiLFxuICAgICAgXCJ1bml0XCI6IFwiVFBNXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieVwiOiBcIkFDVE4zXCIsXG4gICAgICBcInZhbHVlXCI6IDAuNDgxMDAwMDAwMDAwMDAwMDQsXG4gICAgICBcInhcIjogXCJCbGFkZGVyXCIsXG4gICAgICBcInVuaXRcIjogXCJUUE1cIlxuICAgIH1cbiAgXVxuICAgIH0sXG4gICAgZ3JvdXBlZFZpb2xpblBsb3Q6IFtcbiAgICAgICAge1xuICAgICAgICAgICBncm91cDogXCJHcm91cCAxXCIsXG4gICAgICAgICAgIGxhYmVsOiBcIkdlbmUgMVwiLFxuICAgICAgICAgICB2YWx1ZXM6IHJhbmdlKDAsIDIwMDApLm1hcChyYW5kb21Ob3JtYWwoMiwgMSkpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdyb3VwOiBcIkdyb3VwIDFcIixcbiAgICAgICAgICAgIGxhYmVsOiBcIkdlbmUgMlwiLFxuICAgICAgICAgICAgdmFsdWVzOiByYW5nZSgwLCAyMDAwKS5tYXAocmFuZG9tTm9ybWFsKDUsIDEpKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBncm91cDogXCJHcm91cCAxXCIsXG4gICAgICAgICAgICBsYWJlbDogXCJHZW5lIDNcIixcbiAgICAgICAgICAgIHZhbHVlczogcmFuZ2UoMCwgMjAwMCkubWFwKHJhbmRvbU5vcm1hbCgxMCwgMSkpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgZ3JvdXA6IFwiR3JvdXAgMlwiLFxuICAgICAgICAgICBsYWJlbDogXCJHZW5lIDFcIixcbiAgICAgICAgICAgdmFsdWVzOiByYW5nZSgwLCAyMDAwKS5tYXAocmFuZG9tTm9ybWFsKDUsIDEpKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBncm91cDogXCJHcm91cCAyXCIsXG4gICAgICAgICAgICBsYWJlbDogXCJHZW5lIDJcIixcbiAgICAgICAgICAgIHZhbHVlczogcmFuZ2UoMCwgMjAwMCkubWFwKHJhbmRvbU5vcm1hbCgzLCAxKSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZ3JvdXA6IFwiR3JvdXAgMlwiLFxuICAgICAgICAgICAgbGFiZWw6IFwiR2VuZSAzXCIsXG4gICAgICAgICAgICB2YWx1ZXM6IHJhbmdlKDAsIDIwMDApLm1hcChyYW5kb21Ob3JtYWwoMSwgMSkpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgZ3JvdXA6IFwiR3JvdXAgM1wiLFxuICAgICAgICAgICBsYWJlbDogXCJHZW5lIDFcIixcbiAgICAgICAgICAgdmFsdWVzOiByYW5nZSgwLCAyMDAwKS5tYXAocmFuZG9tTm9ybWFsKDIsIDEpKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBncm91cDogXCJHcm91cCAzXCIsXG4gICAgICAgICAgICBsYWJlbDogXCJHZW5lIDJcIixcbiAgICAgICAgICAgIHZhbHVlczogcmFuZ2UoMCwgMjAwMCkubWFwKHJhbmRvbU5vcm1hbCgzLCAxKSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZ3JvdXA6IFwiR3JvdXAgM1wiLFxuICAgICAgICAgICAgbGFiZWw6IFwiR2VuZSAzXCIsXG4gICAgICAgICAgICB2YWx1ZXM6IHJhbmdlKDAsIDIwMDApLm1hcChyYW5kb21Ob3JtYWwoNSwgMSkpXG4gICAgICAgIH1cbiAgICBdLFxuICAgIHRyYW5zY3JpcHRUcmFja3M6IHtcbiAgICAgICAgXCJleG9uc1wiOiB7XG4gICAgICAgICAgICBcIkVOU1QwMDAwMDMxMTU5NS45XCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21cIjogXCIxN1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tRW5kXCI6IDc3MDcxMTcyLFxuICAgICAgICAgICAgICAgICAgICBcImV4b25JZFwiOiBcIkVOU0UwMDAwMjcxMzkzMy4xXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbk51bWJlclwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVN0YXJ0XCI6IDc3MDcxMTUxLFxuICAgICAgICAgICAgICAgICAgICBcInN0cmFuZFwiOiBcIitcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImNocm9tXCI6IFwiMTdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbUVuZFwiOiA3NzA3MzU3OSxcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uSWRcIjogXCJFTlNFMDAwMDM2NzI2MjguMVwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4b25OdW1iZXJcIjogXCIyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21TdGFydFwiOiA3NzA3MzUxMixcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJhbmRcIjogXCIrXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVwiOiBcIjE3XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21FbmRcIjogNzcwNzM5NDYsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbklkXCI6IFwiRU5TRTAwMDAzNDc1MjgxLjFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uTnVtYmVyXCI6IFwiM1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tU3RhcnRcIjogNzcwNzM3NDUsXG4gICAgICAgICAgICAgICAgICAgIFwic3RyYW5kXCI6IFwiK1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21cIjogXCIxN1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tRW5kXCI6IDc3MDc1NzE5LFxuICAgICAgICAgICAgICAgICAgICBcImV4b25JZFwiOiBcIkVOU0UwMDAwMTExMTcxMy4xXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbk51bWJlclwiOiBcIjRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVN0YXJ0XCI6IDc3MDc1NTcxLFxuICAgICAgICAgICAgICAgICAgICBcInN0cmFuZFwiOiBcIitcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImNocm9tXCI6IFwiMTdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbUVuZFwiOiA3NzA3NjQ0NixcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uSWRcIjogXCJFTlNFMDAwMDM2NTEyNTAuMVwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4b25OdW1iZXJcIjogXCI1XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21TdGFydFwiOiA3NzA3NjI4OSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJhbmRcIjogXCIrXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVwiOiBcIjE3XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21FbmRcIjogNzcwNzcxNTUsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbklkXCI6IFwiRU5TRTAwMDAzNjA3NzczLjFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleG9uTnVtYmVyXCI6IFwiNlwiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tU3RhcnRcIjogNzcwNzcwMDcsXG4gICAgICAgICAgICAgICAgICAgIFwic3RyYW5kXCI6IFwiK1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2hyb21cIjogXCIxN1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNocm9tRW5kXCI6IDc3MDc4NjEyLFxuICAgICAgICAgICAgICAgICAgICBcImV4b25JZFwiOiBcIkVOU0UwMDAwMjcyMDkyNC4xXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhvbk51bWJlclwiOiBcIjdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaHJvbVN0YXJ0XCI6IDc3MDc3OTgwLFxuICAgICAgICAgICAgICAgICAgICBcInN0cmFuZFwiOiBcIitcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0cmFuc2NyaXB0c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJjaHJvbW9zb21lXCI6IFwiMTdcIixcbiAgICAgICAgICAgICAgICBcImVuZFwiOiA3NzA3ODYxMixcbiAgICAgICAgICAgICAgICBcImdlbmNvZGVJZFwiOiBcIkVOU0cwMDAwMDE2NzI4MC4xMlwiLFxuICAgICAgICAgICAgICAgIFwiZ2VuZVN5bWJvbFwiOiBcIkVOR0FTRVwiLFxuICAgICAgICAgICAgICAgIFwic3RhcnRcIjogNzcwNzExNTEsXG4gICAgICAgICAgICAgICAgXCJzdHJhbmRcIjogXCIrXCIsXG4gICAgICAgICAgICAgICAgXCJ0cmFuc2NyaXB0SWRcIjogXCJFTlNUMDAwMDAzMTE1OTUuOVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIGJ1YmJsZU1hcDpnZW5lcmF0ZVJhbmRvbU1hdHJpeCh7eDo1MCwgeToxMCwgc2NhbGVGYWN0b3I6IDEsIGRpdmVyZ2luZzogdHJ1ZSwgYnViYmxlOiB0cnVlfSksXG4gICAgbGRQbG90OiBnZW5lcmF0ZVJhbmRvbU1hdHJpeCh7eDoyLCB5OjIsIHNjYWxlRmFjdG9yOiAxfSlcbn07XG5cbmNvbnN0IGxkUGxvdERlbW9Db25maWcgPSB7XG4gICAgaWQ6ICdndGV4Vml6TGRQbG90JyxcbiAgICBkYXRhOiBkZW1vRGF0YS5sZFBsb3QsXG4gICAgY3V0b2ZmOiAwLjAsXG4gICAgd2lkdGg6IDEwMDAsIC8vIG91dGVyIHdpZHRoXG4gICAgbWFyZ2luTGVmdDogMTAwLFxuICAgIG1hcmdpblJpZ2h0OiAyMDAsXG4gICAgbWFyZ2luVG9wOiAyMCxcbiAgICBtYXJnaW5Cb3R0b206IDEwMCxcbiAgICBjb2xvclNjaGVtZTogXCJHcmV5c1wiLFxuICAgIGxhYmVsSGVpZ2h0OiAyMCxcbiAgICBzaG93TGFiZWxzOiB0cnVlLFxuICAgIGxhYmVsQW5nbGU6IDMwLFxuICAgIGxlZ2VuZFNwYWNlOiA1MCxcbiAgICB1c2VMb2c6IGZhbHNlLFxuICAgIGxvZ0Jhc2U6IHVuZGVmaW5lZFxufTtcbmV4cG9ydCBmdW5jdGlvbiBsZFBsb3QocGFyPWxkUGxvdERlbW9Db25maWcpe1xuICAgIGxldCBtYXJnaW4gPSB7XG4gICAgICAgIGxlZnQ6IHBhci5tYXJnaW5MZWZ0LFxuICAgICAgICB0b3A6IHBhci5zaG93TGFiZWxzP3Bhci5tYXJnaW5Ub3ArcGFyLmxhYmVsSGVpZ2h0OnBhci5tYXJnaW5Ub3AsXG4gICAgICAgIHJpZ2h0OiBwYXIubWFyZ2luUmlnaHQsXG4gICAgICAgIGJvdHRvbTogcGFyLm1hcmdpbkJvdHRvbVxuICAgIH07XG4gICAgbGV0IGluV2lkdGggPSBwYXIud2lkdGggLSAocGFyLm1hcmdpbkxlZnQgKyBwYXIubWFyZ2luUmlnaHQpO1xuICAgIGxldCBpbkhlaWdodCA9IHBhci53aWR0aCAtIChwYXIubWFyZ2luVG9wICsgcGFyLm1hcmdpbkJvdHRvbSk7XG4gICAgaW5XaWR0aCA9IGluV2lkdGg+aW5IZWlnaHQ/aW5IZWlnaHQ6aW5XaWR0aDsgLy8gYWRqdXN0IHRoZSBkaW1lbnNpb25zIGJhc2VkIG9uIHRoZSBtaW5pbXVtIHJlcXVpcmVkIHNwYWNlXG4gICAgbGV0IGxkQ2FudmFzID0gbmV3IEhhbGZNYXAocGFyLmRhdGEsIHBhci5jdXRvZmYsIHBhci51c2VMb2csIHBhci5sb2dCYXNlLCBwYXIuY29sb3JTY2hlbWUpO1xuICAgIGxkQ2FudmFzLmFkZFRvb2x0aXAocGFyLmlkKTtcbiAgICBsZXQgY2FudmFzID0gY3JlYXRlQ2FudmFzKHBhci5pZCwgcGFyLndpZHRoLCBwYXIud2lkdGgsIG1hcmdpbik7XG4gICAgbGV0IHN2ZyA9IGNyZWF0ZVN2ZyhwYXIuaWQsIHBhci53aWR0aCwgcGFyLndpZHRoLCBtYXJnaW4sIHVuZGVmaW5lZCwgXCJhYnNvbHV0ZVwiKTtcbiAgICBsZENhbnZhcy5kcmF3KGNhbnZhcywgc3ZnLCB7dzppbldpZHRoLCB0b3A6IG1hcmdpbi50b3AsIGxlZnQ6IG1hcmdpbi5sZWZ0fSwgWzAsIDFdLCBwYXIuc2hvd0xhYmVscywgcGFyLmxhYmVsQW5nbGUpO1xuICAgIGxkQ2FudmFzLmRyYXdDb2xvckxlZ2VuZChzdmcsIHt4OiAwLCB5OiAxMDB9LCAxMCwgXCJWYWx1ZVwiKTtcbn1cblxuY29uc3QgdHJhbnNjcmlwdFRyYWNrc0NvbmZpZyA9IHtcbiAgICBpZDogJ2d0ZXhUcmFuc2NyaXB0VHJhY2tzJyxcbiAgICBkYXRhOiBkZW1vRGF0YS50cmFuc2NyaXB0VHJhY2tzLFxuICAgIHdpZHRoOiAxMjAwLFxuICAgIGhlaWdodDogODAsXG4gICAgbWFyZ2luTGVmdDogMTAwLFxuICAgIG1hcmdpblJpZ2h0OiAyMCxcbiAgICBtYXJnaW5Ub3A6IDAsXG4gICAgbWFyZ2luQm90dG9tOiAyMCxcbiAgICBsYWJlbFBvczogJ2xlZnQnXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zY3JpcHRUcmFja3MocGFyPXRyYW5zY3JpcHRUcmFja3NDb25maWcpe1xuICAgIGxldCBtYXJnaW4gPSB7XG4gICAgICAgIHRvcDogcGFyLm1hcmdpblRvcCxcbiAgICAgICAgcmlnaHQ6IHBhci5tYXJnaW5SaWdodCxcbiAgICAgICAgYm90dG9tOiBwYXIubWFyZ2luQm90dG9tLFxuICAgICAgICBsZWZ0OiBwYXIubWFyZ2luTGVmdFxuICAgIH07XG4gICAgbGV0IGluV2lkdGggPSBwYXIud2lkdGggLSAocGFyLm1hcmdpbkxlZnQgKyBwYXIubWFyZ2luUmlnaHQpO1xuICAgIGxldCBpbkhlaWdodCA9IHBhci5oZWlnaHQgLSAocGFyLm1hcmdpblRvcCArIHBhci5tYXJnaW5Cb3R0b20pO1xuXG4gICAgLy8gdGVzdCBpbnB1dCBwYXJhbXNcbiAgICBjaGVja0RvbUlkKHBhci5pZCk7XG5cbiAgICAvLyBjcmVhdGUgdGhlIFNWR1xuICAgICAgICBsZXQgc3ZnID0gY3JlYXRlU3ZnKHBhci5pZCwgcGFyLndpZHRoLCBwYXIuaGVpZ2h0LCBtYXJnaW4pO1xuXG4gICAgLy8gcmVuZGVyIHRoZSB0cmFuc2NyaXB0c1xuICAgIGxldCB0b29sdGlwSWQgPSBgJHtwYXIuaWR9VG9vbHRpcGA7XG4gICAgbGV0IGNvbmZpZyA9IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgdzogaW5XaWR0aCxcbiAgICAgICAgaDogaW5IZWlnaHQsXG4gICAgICAgIGxhYmVsT246IHBhci5sYWJlbFBvc1xuICAgIH07XG4gICAgbGV0IHZpZXdlciA9IG5ldyBJc29mb3JtVHJhY2tWaWV3ZXIocGFyLmRhdGEudHJhbnNjcmlwdHMsIHBhci5kYXRhLmV4b25zLCB1bmRlZmluZWQsIGNvbmZpZyk7XG4gICAgdmlld2VyLnJlbmRlcihmYWxzZSwgc3ZnLCBwYXIubGFiZWxQb3MpO1xuXG59XG5cbmNvbnN0IGJ1YmJsZW1hcERlbW9Db25maWcgPSB7XG4gICAgaWQ6ICdndGV4Vml6QnViYmxlbWFwJyxcbiAgICBkYXRhOiBkZW1vRGF0YS5idWJibGVNYXAsXG4gICAgd2lkdGg6IDEyMDAsIC8vd2luZG93LmlubmVyV2lkdGgqMC45LFxuICAgIGhlaWdodDogNDAwLCAvLyBUT0RPOiB1c2UgYSBkeW5hbWljIHdpZHRoIGJhc2VkIG9uIHRoZSBtYXRyaXggc2l6ZVxuICAgIG1hcmdpblRvcDogMTAwLFxuICAgIG1hcmdpblJpZ2h0OiAxMDAsXG4gICAgbWFyZ2luQm90dG9tOiAzMCxcbiAgICBtYXJnaW5MZWZ0OiAzMCxcbiAgICBsYWJlbHM6IHtcbiAgICAgICAgY29sdW1uOiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAsXG4gICAgICAgICAgICBhbmdsZTogOTAsXG4gICAgICAgICAgICBhZGp1c3Q6IDEwLFxuICAgICAgICAgICAgbG9jYXRpb246ICdib3R0b20nLFxuICAgICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICAgICAgfSxcbiAgICAgICAgcm93OiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgd2lkdGg6IDE1MCxcbiAgICAgICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICAgICAgYWRqdXN0OiAwLFxuICAgICAgICAgICAgbG9jYXRpb246ICdsZWZ0JyxcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ3JpZ2h0J1xuICAgICAgICB9XG4gICAgfSxcbiAgICB1c2VMb2c6IGZhbHNlLFxuICAgIGxvZ0Jhc2U6IDEwLFxuICAgIGNvbG9yU2NoZW1lOiBcIlJkQnVcIiwgLy8gYSBkaXZlcmdpbmcgY29sb3Igc2NoZW1lXG4gICAgY29sb3JTY2FsZURvbWFpbjogWy0wLjc1LCAwLjc1XSxcbiAgICB1c2VDYW52YXM6IGZhbHNlXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGJ1YmJsZW1hcChwYXI9YnViYmxlbWFwRGVtb0NvbmZpZyl7XG4gICAgbGV0IG1hcmdpbiA9IHtcbiAgICAgICAgbGVmdDogcGFyLnNob3dMYWJlbHM/cGFyLm1hcmdpbkxlZnQgKyBwYXIucm93TGFiZWxXaWR0aDogcGFyLm1hcmdpbkxlZnQsXG4gICAgICAgIHRvcDogcGFyLm1hcmdpblRvcCxcbiAgICAgICAgcmlnaHQ6IHBhci5tYXJnaW5SaWdodCxcbiAgICAgICAgYm90dG9tOiBwYXIuc2hvd0xhYmVscz9wYXIubWFyZ2luQm90dG9tICsgcGFyLmNvbHVtbkxhYmVsSGVpZ2h0OnBhci5tYXJnaW5Cb3R0b21cbiAgICB9O1xuICAgIGxldCBpbldpZHRoID0gcGFyLndpZHRoIC0gKHBhci5sYWJlbHMucm93LndpZHRoICsgcGFyLm1hcmdpbkxlZnQgKyBwYXIubWFyZ2luUmlnaHQpO1xuICAgIGxldCBpbkhlaWdodCA9IHBhci5oZWlnaHQgLSAocGFyLmxhYmVscy5jb2x1bW4uaGVpZ2h0ICsgcGFyLm1hcmdpblRvcCArIHBhci5tYXJnaW5Cb3R0b20pO1xuICAgIGlmKHBhci51c2VDYW52YXMpIHtcbiAgICAgICAgbGV0IGJtYXBDYW52YXMgPSBuZXcgQnViYmxlTWFwKHBhci5kYXRhLCBwYXIudXNlTG9nLCBwYXIubG9nQmFzZSwgcGFyLmNvbG9yU2NoZW1lKTtcbiAgICAgICAgYm1hcENhbnZhcy5hZGRUb29sdGlwKGNhbnZhc0lkKTtcbiAgICAgICAgbGV0IGNhbnZhcyA9IGNyZWF0ZUNhbnZhcyhwYXIuaWQsIHBhci53aWR0aCwgcGFyLmhlaWdodCwgbWFyZ2luKTtcbiAgICAgICAgYm1hcENhbnZhcy5kcmF3Q2FudmFzKFxuICAgICAgICAgICAgY2FudmFzLFxuICAgICAgICAgICAge3c6aW5XaWR0aCwgaDppbkhlaWdodCwgdG9wOiBtYXJnaW4udG9wLCBsZWZ0OiBtYXJnaW4ubGVmdH0sXG4gICAgICAgICAgICBwYXIuY29sb3JTY2FsZURvbWFpbixcbiAgICAgICAgICAgIHBhci5sYWJlbHNcbiAgICAgICAgKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGJtYXAgPSBuZXcgQnViYmxlTWFwKHBhci5kYXRhLCBwYXIudXNlTG9nLCBwYXIubG9nQmFzZSwgcGFyLmNvbG9yU2NoZW1lKTtcbiAgICAgICAgYm1hcC5hZGRUb29sdGlwKHBhci5pZCk7XG4gICAgICAgIGxldCBzdmcgPSBjcmVhdGVTdmcocGFyLmlkLCBwYXIud2lkdGgsIHBhci5oZWlnaHQsIG1hcmdpbik7XG4gICAgICAgIGJtYXAuZHJhd1N2ZyhzdmcsIHt3OmluV2lkdGgsIGg6aW5IZWlnaHQsIHRvcDowLCBsZWZ0OjB9LCBwYXIuY29sb3JTY2FsZURvbWFpbiwgMCwgcGFyLmxhYmVscyk7XG4gICAgICAgIGJtYXAuZHJhd0NvbG9yTGVnZW5kKHN2Zywge3g6IDAsIHk6IC00MH0sIDMsIFwiTkVTXCIpO1xuICAgICAgICBibWFwLmRyYXdCdWJibGVMZWdlbmQoc3ZnLCB7eDogNTAwLCB5Oi00MCwgdGl0bGU6IFwiLWxvZzEwKHAtdmFsdWUpXCJ9LCA1LCBcIi1sb2cxMChwLXZhbHVlKVwiKTtcbiAgICB9XG59XG5cbmNvbnN0IGhlYXRtYXBEZW1vQ29uZmlnID0ge1xuICAgIGlkOiAnZ3RleFZpekhlYXRtYXAnLFxuICAgIGRhdGE6IGRlbW9EYXRhLmhlYXRtYXAsXG4gICAgd2lkdGg6IDEyMDAsIC8vIG91dGVyIHdpZHRoXG4gICAgaGVpZ2h0OiAzMDAsIC8vIG91dGVyIGhlaWdodFxuICAgIG1hcmdpbkxlZnQ6IDIwLFxuICAgIG1hcmdpblJpZ2h0OiA0MCxcbiAgICBtYXJnaW5Ub3A6IDUwLFxuICAgIG1hcmdpbkJvdHRvbTogNTAsXG4gICAgY29sb3JTY2hlbWU6IFwiWWxHbkJ1XCIsXG4gICAgY29ybmVyUmFkaXVzOiAyLFxuICAgIGNvbHVtbkxhYmVsSGVpZ2h0OiAyMCxcbiAgICBjb2x1bW5MYWJlbEFuZ2xlOiA2MCxcbiAgICBjb2x1bW5MYWJlbFBvc0FkanVzdDogMTAsXG4gICAgcm93TGFiZWxXaWR0aDogMTAwLFxuICAgIGxlZ2VuZFNwYWNlOiA1MCxcbiAgICB1c2VMb2c6IHRydWUsXG4gICAgbG9nQmFzZTogMTBcbn07XG4vKipcbiAqIFJlbmRlciBhIDJEIEhlYXRtYXBcbiAqIEBwYXJhbSBwYXJhbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhlYXRtYXAocGFyPWhlYXRtYXBEZW1vQ29uZmlnKXtcbiAgICBsZXQgbWFyZ2luID0ge1xuICAgICAgICB0b3A6IHBhci5tYXJnaW5Ub3AsXG4gICAgICAgIHJpZ2h0OiBwYXIubWFyZ2luUmlnaHQsXG4gICAgICAgIGJvdHRvbTogcGFyLm1hcmdpbkJvdHRvbSxcbiAgICAgICAgbGVmdDogcGFyLm1hcmdpbkxlZnRcbiAgICB9O1xuICAgIGxldCBpbldpZHRoID0gcGFyLndpZHRoIC0gKHBhci5tYXJnaW5MZWZ0ICsgcGFyLm1hcmdpblJpZ2h0ICsgcGFyLnJvd0xhYmVsV2lkdGgpO1xuICAgIGxldCBpbkhlaWdodCA9IHBhci5oZWlnaHQgLSAocGFyLm1hcmdpblRvcCArIHBhci5tYXJnaW5Cb3R0b20gKyBwYXIuY29sdW1uTGFiZWxIZWlnaHQpO1xuXG4gICAgLy8gdGVzdCBpbnB1dCBwYXJhbXNcbiAgICBjaGVja0RvbUlkKHBhci5pZCk7XG5cbiAgICAvLyBjcmVhdGUgdGhlIFNWR1xuICAgIGxldCBzdmcgPSBjcmVhdGVTdmcocGFyLmlkLCBwYXIud2lkdGgsIHBhci5oZWlnaHQsIG1hcmdpbik7XG5cbiAgICAvLyByZW5kZXIgdGhlIGhlYXRtYXBcbiAgICBsZXQgdG9vbHRpcElkID0gYCR7cGFyLmlkfVRvb2x0aXBgO1xuICAgIGxldCBoID0gbmV3IEhlYXRtYXAocGFyLmRhdGEsIHBhci51c2VMb2csIHBhci5sb2dCYXNlLCBwYXIuY29sb3JTY2hlbWUsIHBhci5jb3JuZXJSYWRpdXMsIHRvb2x0aXBJZCk7XG4gICAgaC5kcmF3KHN2Zywge3c6aW5XaWR0aCwgaDppbkhlaWdodH0sIHBhci5jb2x1bW5MYWJlbEFuZ2xlLCBmYWxzZSwgcGFyLmNvbHVtbkxhYmVsUG9zQWRqdXN0KTtcbiAgICBoLmRyYXdDb2xvckxlZ2VuZChzdmcsIHt4OjIwLCB5OiAtMjB9LCAxMCk7XG59XG5cbmNvbnN0IGRlbmRyb0hlYXRtYXBEZW1vQ29uZmlnID0ge1xuICAgIGlkOiAnZ3RleFZpekRlbmRyb0hlYXRtYXAnLFxuICAgIGRhdGE6IGRlbW9EYXRhLmRlbmRyb0hlYXRtYXAsXG4gICAgdXNlTG9nOiB0cnVlLFxuICAgIGxvZ0Jhc2U6IDEwLFxuICAgIHdpZHRoOiA2MDAsIC8vIG91dGVyIHdpZHRoXG4gICAgaGVpZ2h0OiAzMDAsIC8vIG91dGVyIGhlaWdodFxuICAgIG1hcmdpbkxlZnQ6IDIwLFxuICAgIG1hcmdpblJpZ2h0OiA0MCxcbiAgICBtYXJnaW5Ub3A6IDUwLFxuICAgIG1hcmdpbkJvdHRvbTogNTAsXG4gICAgcm93VHJlZVBhbmVsV2lkdGg6IDEwMCxcbiAgICBjb2xUcmVlUGFuZWxIZWlnaHQ6IDEwMCxcbiAgICBjb2xvclNjaGVtZTogXCJCbHVlc1wiLFxuICAgIGNvcm5lclJhZGl1czogMixcbiAgICBjb2x1bW5MYWJlbEhlaWdodDogMjAwLFxuICAgIGNvbHVtbkxhYmVsQW5nbGU6IDYwLFxuICAgIGNvbHVtbkxhYmVsUG9zQWRqdXN0OiAxMCxcbiAgICByb3dMYWJlbFdpZHRoOiAyMDAsXG4gICAgbGVnZW5kU3BhY2U6IDUwXG59O1xuLyoqXG4gKiBSZW5kZXIgYSBEZW5kcm9IZWF0bWFwXG4gKiBAcGFyYW0gcGFyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZW5kcm9IZWF0bWFwKHBhcj1kZW5kcm9IZWF0bWFwRGVtb0NvbmZpZyl7XG4gICAgbGV0IG1hcmdpbiA9IHtcbiAgICAgICAgdG9wOiBwYXIubWFyZ2luVG9wLFxuICAgICAgICByaWdodDogcGFyLm1hcmdpblJpZ2h0ICsgcGFyLnJvd0xhYmVsV2lkdGgsXG4gICAgICAgIGJvdHRvbTogcGFyLm1hcmdpbkJvdHRvbSArIHBhci5jb2x1bW5MYWJlbEhlaWdodCxcbiAgICAgICAgbGVmdDogcGFyLm1hcmdpbkxlZnRcbiAgICB9O1xuXG4gICAgLy8gdGVzdCBpbnB1dCBwYXJhbXNcbiAgICBjaGVja0RvbUlkKHBhci5pZCk7XG5cbiAgICBsZXQgaW5XaWR0aCA9IHBhci53aWR0aCAtIChwYXIubWFyZ2luTGVmdCArIHBhci5tYXJnaW5SaWdodCArIHBhci5yb3dMYWJlbFdpZHRoKTtcbiAgICBsZXQgaW5IZWlnaHQgPSBwYXIuaGVpZ2h0IC0gKHBhci5tYXJnaW5Ub3AgKyBwYXIubWFyZ2luQm90dG9tICsgcGFyLmNvbHVtbkxhYmVsSGVpZ2h0KTtcblxuICAgIGxldCBzdmdJZCA9IGAke3Bhci5pZH1TdmdgO1xuICAgIGxldCB0b29sdGlwSWQgPSBgJHtwYXIuaWR9VG9vbHRpcGA7XG4gICAgbGV0IGRtYXBDb25maWcgPSBuZXcgRGVuZHJvSGVhdG1hcENvbmZpZyhwYXIud2lkdGgsIHBhci5yb3dUcmVlUGFuZWxXaWR0aCwgcGFyLmNvbFRyZWVQYW5lbEhlaWdodCwgbWFyZ2luKTtcbiAgICBsZXQgZG1hcCA9IG5ldyBEZW5kcm9IZWF0bWFwKHBhci5kYXRhLmNvbFRyZWUsIHBhci5kYXRhLnJvd1RyZWUsIHBhci5kYXRhLmhlYXRtYXAsIHBhci5jb2xvclNjaGVtZSwgcGFyLmNvcm5lclJhZGl1cywgZG1hcENvbmZpZywgdG9vbHRpcElkLCBwYXIudXNlTG9nLCBwYXIubG9nQmFzZSlcbiAgICBsZXQgc2hvd0NvbFRyZWUgPSBwYXIuZGF0YS5jb2xUcmVlICE9PSB1bmRlZmluZWQ7XG4gICAgbGV0IHNob3dSb3dUcmVlID0gcGFyLmRhdGEucm93VHJlZSAhPT0gdW5kZWZpbmVkO1xuICAgIGRtYXAucmVuZGVyKHBhci5pZCwgc3ZnSWQsIHNob3dDb2xUcmVlLCBzaG93Um93VHJlZSwgXCJ0b3BcIiwgOCk7XG59XG5cbmNvbnN0IHZpb2xpbkRlbW9Db25maWcgPSB7XG4gICAgaWQ6ICdndGV4R3JvdXBlZFZpb2xpblBsb3QnLFxuICAgIGRhdGE6IGRlbW9EYXRhLmdyb3VwZWRWaW9saW5QbG90LFxuICAgIHdpZHRoOiA1MDAsXG4gICAgaGVpZ2h0OiAzMDAsXG4gICAgbWFyZ2luTGVmdDogMTAwLFxuICAgIG1hcmdpblJpZ2h0OiAyMCxcbiAgICBtYXJnaW5Ub3A6IDUwLFxuICAgIG1hcmdpbkJvdHRvbTogMTAwLFxuICAgIHNob3dEaXZpZGVyOiB0cnVlLFxuICAgIHhQYWRkaW5nOiAwLjMsXG4gICAgeUxhYmVsOiBcIlJhbmRvbSBWYWx1ZVwiLFxuICAgIHNob3dTdWJYOiB0cnVlLFxuICAgIHNob3dYOiB0cnVlLFxuICAgIHhBbmdsZTogMCxcbiAgICBzdWJYQW5nbGU6IDAsXG4gICAgc2hvd1doaXNrZXI6IGZhbHNlLFxuICAgIHNob3dMZWdlbmQ6IGZhbHNlLFxuICAgIHNob3dTYW1wbGVTaXplOiB0cnVlXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwZWRWaW9saW5QbG90KHBhcj12aW9saW5EZW1vQ29uZmlnKXtcbiAgICBjb25zb2xlLmxvZyhwYXIuZGF0YSk7XG4gICAgbGV0IG1hcmdpbiA9IHtcbiAgICAgICAgdG9wOiBwYXIubWFyZ2luVG9wLFxuICAgICAgICByaWdodDogcGFyLm1hcmdpblJpZ2h0LFxuICAgICAgICBib3R0b206IHBhci5tYXJnaW5Cb3R0b20sXG4gICAgICAgIGxlZnQ6IHBhci5tYXJnaW5MZWZ0XG4gICAgfTtcbiAgICAvLyB0ZXN0IGlucHV0IHBhcmFtc1xuICAgIGNoZWNrRG9tSWQocGFyLmlkKTtcblxuICAgIGxldCBpbldpZHRoID0gcGFyLndpZHRoIC0gKHBhci5tYXJnaW5MZWZ0ICsgcGFyLm1hcmdpblJpZ2h0KTtcbiAgICBsZXQgaW5IZWlnaHQgPSBwYXIuaGVpZ2h0IC0gKHBhci5tYXJnaW5Ub3AgKyBwYXIubWFyZ2luQm90dG9tKTtcblxuICAgIGxldCBzdmdJZCA9IGAke3Bhci5pZH1TdmdgO1xuICAgIGxldCB0b29sdGlwSWQgPSBgJHtwYXIuaWR9VG9vbHRpcGA7XG5cbiAgICAvLyBjcmVhdGUgdGhlIFNWR1xuICAgIGxldCBzdmcgPSBjcmVhdGVTdmcocGFyLmlkLCBwYXIud2lkdGgsIHBhci5oZWlnaHQsIG1hcmdpbik7XG5cbiAgICBjb25zdCBnVmlvbGluID0gbmV3IEdyb3VwZWRWaW9saW4ocGFyLmRhdGEpO1xuICAgIGdWaW9saW4ucmVuZGVyKFxuICAgICAgICBzdmcsXG4gICAgICAgIGluV2lkdGgsXG4gICAgICAgIGluSGVpZ2h0LFxuICAgICAgICBwYXIueFBhZGRpbmcsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgW10sXG4gICAgICAgIHBhci55TGFiZWwsXG4gICAgICAgIHBhci5zaG93WCxcbiAgICAgICAgcGFyLnhBbmdsZSxcbiAgICAgICAgcGFyLnNob3dTdWJYLFxuICAgICAgICBwYXIuc3ViWEFuZ2xlLFxuICAgICAgICBwYXIuc2hvd1doaXNrZXIsXG4gICAgICAgIHBhci5zaG93RGl2aWRlcixcbiAgICAgICAgcGFyLnNob3dMZWdlbmQsXG4gICAgICAgIHBhci5zaG93U2FtcGxlU2l6ZSxcbiAgICAgICAgcGFyLnNvcnRTdWJYLFxuICAgICAgICBwYXIuc2hvd091dGxpZXJzLFxuICAgICAgICBwYXIubnVtUG9pbnRzKTtcbiAgICBzdmcuc2VsZWN0QWxsKFwiLnZpb2xpbi1zaXplLWF4aXNcIikuY2xhc3NlZChcInZpb2xpbi1zaXplLWF4aXMtaGlkZVwiLCB0cnVlKS5jbGFzc2VkKFwidmlvbGluLXNpemUtYXhpc1wiLCBmYWxzZSk7XG5cbiAgICBnVmlvbGluLmNyZWF0ZVRvb2x0aXAodG9vbHRpcElkKTtcbiAgICByZXR1cm4gc3ZnO1xuXG59XG5cbmV4cG9ydCB2YXIgR1RFeFZpeiA9IHtcbiAgICBkZW1vRGF0YTogZGVtb0RhdGEsXG4gICAgbGRQbG90OiBsZFBsb3QsXG4gICAgdHJhbnNjcmlwdFRyYWNrczogdHJhbnNjcmlwdFRyYWNrcyxcbiAgICBidWJibGVtYXA6IGJ1YmJsZW1hcCxcbiAgICBoZWF0bWFwOiBoZWF0bWFwLFxuICAgIGRlbmRyb0hlYXRtYXA6IGRlbmRyb0hlYXRtYXAsXG4gICAgZ3JvdXBlZFZpb2xpblBsb3Q6IGdyb3VwZWRWaW9saW5QbG90XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7anNvbn0gZnJvbSBcImQzLWZldGNoXCI7XG5pbXBvcnQge2NoZWNrRG9tSWR9IGZyb20gXCIuL21vZHVsZXMvdXRpbHNcIjtcbmltcG9ydCB7XG4gICAgZ2V0R3RleFVybHMsXG4gICAgcGFyc2VEeW5FcXRsXG59IGZyb20gXCIuL21vZHVsZXMvZ3RleERhdGFQYXJzZXJcIjtcbmltcG9ydCB7Z3JvdXBlZFZpb2xpblBsb3R9IGZyb20gXCIuL0dURXhWaXpcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihwYXIsIGdlbmNvZGVJZCwgdmFyaWFudElkLCB0aXNzdWVJZCwgZ3JvdXBOYW1lPXVuZGVmaW5lZCwgdXJscz1nZXRHdGV4VXJscygpKXtcbiAgICBqc29uKHVybHNbJ2R5bmVxdGwnXSArIGA/dmFyaWFudElkPSR7dmFyaWFudElkfSZnZW5jb2RlSWQ9JHtnZW5jb2RlSWR9JnRpc3N1ZVNpdGVEZXRhaWxJZD0ke3Rpc3N1ZUlkfWAsIHtjcmVkZW50aWFsczonaW5jbHVkZSd9KVxuICAgICAgICAudGhlbihmdW5jdGlvbihqc29uKXtcbiAgICAgICAgICAgIGxldCBkYXRhID0gcGFyc2VEeW5FcXRsKGpzb24pO1xuICAgICAgICAgICAgLy8gY29uc3RydWN0IHRoZSBkeW5FcXRsIGRhdGEgZm9yIHRoZSB0aHJlZSBnZW5vdHlwZXM6IHJlZiwgaGV0LCBhbHRcbiAgICAgICAgICAgIHBhci5kYXRhID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwTmFtZXx8ZGF0YS50aXNzdWVTaXRlRGV0YWlsSWQsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBkYXRhLnJlZi5sZW5ndGg+Mj9cInJlZlwiOmRhdGEucmVmLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBkYXRhLmhvbW9SZWZFeHAubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IGRhdGEuaG9tb1JlZkV4cFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBncm91cDogZ3JvdXBOYW1lfHxkYXRhLnRpc3N1ZVNpdGVEZXRhaWxJZCxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGRhdGEuaGV0Lmxlbmd0aD4yP1wiaGV0XCI6ZGF0YS5oZXQsXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IGRhdGEuaGV0ZXJvRXhwLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBkYXRhLmhldGVyb0V4cFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBncm91cDogZ3JvdXBOYW1lfHxkYXRhLnRpc3N1ZVNpdGVEZXRhaWxJZCxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGRhdGEuYWx0Lmxlbmd0aD4yP1wiYWx0XCI6ZGF0YS5hbHQsXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IGRhdGEuaG9tb0FsdEV4cC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogZGF0YS5ob21vQWx0RXhwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHBhci5udW1Qb2ludHMgPSAxMDtcbiAgICAgICAgICAgIGdyb3VwZWRWaW9saW5QbG90KHBhcik7XG4gICAgICAgIH0pXG5cbn1cblxuZXhwb3J0IHZhciBFcXRsVmlvbGluUGxvdCA9IHtcbiAgICByZW5kZXI6IHJlbmRlclxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8vIFRPRE86IGNvbnNpZGVyIGNyZWF0aW5nIGEgR0VWIGNsYXNzIHRoYXQgc3RvcmVzIGJtYXAgYW5kIExEIG9iamVjdHMuLi5cblwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHtqc29ufSBmcm9tIFwiZDMtZmV0Y2hcIjtcbmltcG9ydCB7YnJ1c2hYfSBmcm9tIFwiZDMtYnJ1c2hcIjtcbmltcG9ydCB7c2VsZWN0LCBzZWxlY3RBbGwsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2V4dGVudCwgbWF4LCBtaW59IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtuZXN0fSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzY2FsZVRocmVzaG9sZH0gZnJvbSBcImQzLXNjYWxlXCI7XG5cbmltcG9ydCB7Y2hlY2tEb21JZH0gZnJvbSBcIi4vbW9kdWxlcy91dGlsc1wiO1xuaW1wb3J0IHtcbiAgICBnZXRHdGV4VXJscyxcbiAgICBwYXJzZUdlbmVzLFxuICAgIHBhcnNlU2luZ2xlVGlzc3VlRXF0bHMsXG4gICAgcGFyc2VMRCxcbiAgICBwYXJzZUV4b25zVG9MaXN0LFxuICAgIHBhcnNlVGlzc3VlU2FtcGxlQ291bnRzLFxuICAgIHBhcnNlVGlzc3VlRGljdCxcbiAgICBwYXJzZUR5bkVxdGxcbn0gZnJvbSBcIi4vbW9kdWxlcy9ndGV4RGF0YVBhcnNlclwiO1xuaW1wb3J0IEJ1YmJsZU1hcCBmcm9tIFwiLi9tb2R1bGVzL0J1YmJsZU1hcFwiO1xuaW1wb3J0IEhhbGZNYXAgZnJvbSBcIi4vbW9kdWxlcy9IYWxmTWFwXCI7XG5pbXBvcnQge3JlbmRlciBhcyBlcXRsVmlvbGluUGxvdFJlbmRlcn0gZnJvbSBcIi4vRXF0bFZpb2xpblBsb3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihwYXIsIGdlbmVJZCwgdXJscyA9IGdldEd0ZXhVcmxzKCkpe1xuICAgICQoYCMke3Bhci5kaXZTcGlubmVyfWApLnNob3coKTtcblxuICAgIGpzb24odXJscy5nZW5lSWQgKyBnZW5lSWQsIHtjcmVkZW50aWFsczogJ2luY2x1ZGUnfSkgLy8gcXVlcnkgdGhlIGdlbmUgYnkgZ2VuZUlkIHdoaWNoIGNvdWxkIGJlIGdlbmUgbmFtZSBvciBnZW5jb2RlIElEIHdpdGggb3Igd2l0aG91ciB2ZXJzaW9uaW5nXG4gICAgICAgIC50aGVuKChkYXRhKT0+IHtcbiAgICAgICAgICAgIGxldCBnZW5lID0gcGFyc2VHZW5lcyhkYXRhLCB0cnVlLCBnZW5lSWQpO1xuICAgICAgICAgICAgLy8gcmVwb3J0IHRoZSBnZW5lIGluZm9cbiAgICAgICAgICAgICQoYCMke3Bhci5kaXZHZW5lSW5mb31gKS5lbXB0eSgpO1xuICAgICAgICAgICAgJChcIjxzcGFuLz5cIilcbiAgICAgICAgICAgICAgICAuaHRtbChgPHNwYW4+JHtnZW5lLmdlbmVTeW1ib2x9ICgke2dlbmUuZ2VuY29kZUlkfSksICR7Z2VuZS5jaHJvbW9zb21lfToke2dlbmUuc3RhcnR9IC0gJHtnZW5lLmVuZH0gKCR7Z2VuZS5zdHJhbmR9KSwgJHtnZW5lLmRlc2NyaXB0aW9ufWApXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKCQoYCMke3Bhci5kaXZHZW5lSW5mb31gKSk7XG5cbiAgICAgICAgICAgIGxldCBwcm9taXNlcyA9IFtcbiAgICAgICAgICAgICAgICBqc29uKHVybHMudGlzc3VlLCB7Y3JlZGVudGlhbHM6ICdpbmNsdWRlJ30pLFxuICAgICAgICAgICAgICAgIGpzb24odXJscy5leG9uICsgZ2VuZS5nZW5jb2RlSWQsIHtjcmVkZW50aWFsczogJ2luY2x1ZGUnfSksXG4gICAgICAgICAgICAgICAganNvbih1cmxzLnNpbmdsZVRpc3N1ZUVxdGwgKyBnZW5lLmdlbmNvZGVJZCwge2NyZWRlbnRpYWxzOiAnaW5jbHVkZSd9KVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGlzc3VlcyA9IHBhcnNlVGlzc3VlU2FtcGxlQ291bnRzKHJlc3VsdHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGlzc3VlU2l0ZVRhYmxlID0gcGFyc2VUaXNzdWVEaWN0KHJlc3VsdHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXhvbnMgPSBwYXJzZUV4b25zVG9MaXN0KHJlc3VsdHNbMV0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXF0bHMgPSBwYXJzZVNpbmdsZVRpc3N1ZUVxdGxzKHJlc3VsdHNbMl0sIHRpc3N1ZVNpdGVUYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIHBhci5kYXRhID0gZXF0bHM7XG4gICAgICAgICAgICAgICAgICAgIHBhciA9IHNldERpbWVuc2lvbnMocGFyKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJtYXAgPSByZW5kZXJCdWJibGVNYXAocGFyLCBnZW5lLCB0aXNzdWVzLCBleG9ucywgdGlzc3VlU2l0ZVRhYmxlLCB1cmxzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmV0Y2ggTEQgZGF0YSwgdGhpcyBxdWVyeSBpcyBzbG93LCBzbyBpdCdzIG5vdCBpbmNsdWRlZCBpbiB0aGUgcHJvbWlzZXMuXG4gICAgICAgICAgICAgICAgICAgIGpzb24odXJscy5sZCArIGdlbmUuZ2VuY29kZUlkLCB7Y3JlZGVudGlhbHM6ICdpbmNsdWRlJ30pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigobGRKc29uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxkID0gcGFyc2VMRChsZEpzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhci5sZERhdGEgPSBsZC5maWx0ZXIoKGQpPT5kLnZhbHVlPj1wYXIubGRDdXRvZmYpOyAvLyBmaWx0ZXIgdW51c2VkIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJMZE1hcChwYXIsIGJtYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYCMke3Bhci5kaXZTcGlubmVyfWApLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgdGlzc3VlIGZpbHRlcmluZyBldmVudCBvbiB0aXNzdWUgbWVudSB3aW5kb3cgY2xvc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiB0aGUgdGlzc3VlIG1lbnUgY29udGVudCBpbiB0aGUgbW9kYWwgaXMgYnVpbHQgYnkgcmVuZGVyQm1hcEZpbHRlcnMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaVkgPSBibWFwLnlTY2FsZS5kb21haW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlYID0gYm1hcC54U2NhbGUuZG9tYWluKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBleGVjdXRlIHRoZSB0aXNzdWUgZmlsdGVyaW5nIHdoZW4gdGhlIG1vZGFsIHdpbmRvdyBjbG9zZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGAjJHtwYXIuZGl2TW9kYWx9YCkub24oJ2hpZGRlbi5icy5tb2RhbCcsIChlKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGAjJHtwYXIuZGl2TW9kYWx9YCkuZmluZChcIjppbnB1dFwiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkKHRoaXMpLnByb3AoXCJjaGVja2VkXCIpKSBjaGVja2VkLnB1c2goJCh0aGlzKS52YWwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoY2hlY2tlZC5sZW5ndGggPT0gb3JpWS5sZW5ndGgpIHJldHVybjsgLy8gbm8gY2hhbmdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbHRlciBlUVRMIGRhdGEgYmFzZWQgb24gc2VsZWN0ZWQgdGlzc3Vlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXIuZGF0YSA9IGVxdGxzLmZpbHRlcigoZCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGVja2VkLmluZGV4T2YoZC55KSA+PSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1ggPSBuZXN0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5rZXkoKGQpID0+IGQueCkgLy8gZ3JvdXAgdGhpcy5kYXRhIGJ5IGQueFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudHJpZXMocGFyLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChkKSA9PiBkLmtleSkgLy8gdGhlbiByZXR1cm4gdGhlIHVuaXF1ZSBsaXN0IG9mIGQueFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IHtyZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47fSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJtYXAgPSByZW5kZXJCdWJibGVNYXAocGFyLCBnZW5lLCB0aXNzdWVzLCBleG9ucywgdGlzc3VlU2l0ZVRhYmxlLCB1cmxzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyTGRNYXAocGFyLCBibWFwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHBhbmVsc1xuICogQHBhcmFtIHBhclxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIHNldERpbWVuc2lvbnMocGFyKXtcbiAgICAgcGFyLm1hcmdpbiA9IHtcbiAgICAgICAgbGVmdDogcGFyLm1hcmdpbkxlZnQgKyBwYXIuZm9jdXNQYW5lbExhYmVscy5yb3cud2lkdGggKyBwYXIuZm9jdXNQYW5lbExhYmVscy5yb3cuYWRqdXN0LFxuICAgICAgICB0b3A6IHBhci5tYXJnaW5Ub3AsXG4gICAgICAgIHJpZ2h0OiBwYXIubWFyZ2luUmlnaHQsXG4gICAgICAgIGJvdHRvbTogcGFyLm1hcmdpbkJvdHRvbSArIHBhci5mb2N1c1BhbmVsTGFiZWxzLmNvbHVtbi5oZWlnaHRcbiAgICB9O1xuXG4gICAgIC8vIGF1dG8tYWRqdXN0IHRoZSBoZWlnaHQgd2hlbiB0aGVyZSBpcyBub3QgZW5vdWdoIHNwYWNlIHRvIHJlbmRlciB0aGUgZVFUTCB0aXNzdWVzIG9yIHdoZW4gdGhlcmUncyB0b28gbXVjaCBzcGFjZVxuXG4gICAgbGV0IHlMaXN0ID0gbmVzdCgpXG4gICAgICAgICAgICAua2V5KChkKSA9PiBkLnkpIC8vIGdyb3VwIHRoaXMuZGF0YSBieSBkLnhcbiAgICAgICAgICAgIC5lbnRyaWVzKHBhci5kYXRhKVxuICAgICAgICAgICAgLm1hcCgoZCkgPT4gZC5rZXkpIC8vIHRoZW4gcmV0dXJuIHRoZSB1bmlxdWUgbGlzdCBvZiBkLnhcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiB7cmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO30pO1xuICAgIGxldCBoID0gKHBhci5oZWlnaHQtKHBhci5tYXJnaW4udG9wICsgcGFyLm1hcmdpbi5ib3R0b20gKyBwYXIubWluaVBhbmVsSGVpZ2h0ICsgcGFyLmxlZ2VuZEhlaWdodCkpL3lMaXN0Lmxlbmd0aDtcbiAgICBsZXQgaE1heCA9IDE4O1xuICAgIGxldCBoTWluID0gMTA7XG4gICAgaWYgKGggPCBoTWluKSBwYXIuaGVpZ2h0ID0gaE1pbip5TGlzdC5sZW5ndGggKyBwYXIubWFyZ2luLnRvcCArIHBhci5tYXJnaW4uYm90dG9tICsgcGFyLm1pbmlQYW5lbEhlaWdodCArIHBhci5sZWdlbmRIZWlnaHQ7XG4gICAgZWxzZSBpZiAoaCA+IGhNYXgpIHBhci5oZWlnaHQgPSBoTWF4KnlMaXN0Lmxlbmd0aCArIHBhci5tYXJnaW4udG9wICsgcGFyLm1hcmdpbi5ib3R0b20gKyBwYXIubWluaVBhbmVsSGVpZ2h0ICsgcGFyLmxlZ2VuZEhlaWdodDtcbiAgICBwYXIuaW5XaWR0aCA9IHBhci53aWR0aCAtIChwYXIubWFyZ2luLmxlZnQgKyBwYXIubWFyZ2luLnJpZ2h0KTtcbiAgICBwYXIuaW5IZWlnaHQgPSBwYXIuaGVpZ2h0IC0gKHBhci5tYXJnaW4udG9wICsgcGFyLm1hcmdpbi5ib3R0b20pO1xuXG4gICAgcGFyLmZvY3VzUGFuZWxIZWlnaHQgPSBwYXIuaW5IZWlnaHQgLSAocGFyLmxlZ2VuZEhlaWdodCArIHBhci5taW5pUGFuZWxIZWlnaHQpO1xuICAgIGlmIChwYXIuZm9jdXNQYW5lbEhlaWdodCA8IDApIHRocm93IFwiQ29uZmlnIGVycm9yOiBmb2N1cyBwYW5lbCBoZWlnaHQgaXMgbmVnYXRpdmUuXCI7XG4gICAgcGFyLmZvY3VzUGFuZWxNYXJnaW4gPSB7XG4gICAgICAgIGxlZnQ6IHBhci5tYXJnaW4ubGVmdCxcbiAgICAgICAgdG9wOiBwYXIubWFyZ2luLnRvcCArIHBhci5taW5pUGFuZWxIZWlnaHQgKyBwYXIubGVnZW5kSGVpZ2h0XG4gICAgfTtcbiAgICBwYXIubGRQYW5lbE1hcmdpbiA9IHtcbiAgICAgICAgbGVmdDogcGFyLm1hcmdpbi5sZWZ0LFxuICAgICAgICB0b3A6IDBcbiAgICB9O1xuICAgIHJldHVybiBwYXI7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIFNWR1xuICogQHBhcmFtIHJvb3RJZCB7U3RyaW5nfSBhIERJViBkb20gSURcbiAqIEBwYXJhbSB3aWR0aCB7SW50ZWdlcn1cbiAqIEBwYXJhbSBoZWlnaHQge0ludGVnZXJ9XG4gKiBAcGFyYW0gc3ZnSWQge1N0cmluZ30gc3BlY2lmeSB0aGUgc3ZnIElEIChvcHRpb25hbClcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBjcmVhdGVTdmcocm9vdElkLCB3aWR0aCwgaGVpZ2h0LCBzdmdJZD11bmRlZmluZWQpe1xuICAgIGNoZWNrRG9tSWQocm9vdElkKTtcbiAgICBpZiAoc3ZnSWQ9PT11bmRlZmluZWQpIHN2Z0lkPWAke3Jvb3RJZH0tc3ZnYDtcblxuICAgIHNlbGVjdChgIyR7c3ZnSWR9YCkucmVtb3ZlKCk7IC8vIHJlbW92ZSBwcmV2aW91c2x5IHJlbmRlcmVkIHN2ZyBpZiBmb3VuZFxuXG4gICAgbGV0IHN2ZyA9IHNlbGVjdChcIiNcIityb290SWQpLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgc3ZnSWQpO1xuXG4gICAgc3ZnLmFwcGVuZChcImRlZnNcIikuYXBwZW5kKFwiY2xpcFBhdGhcIilcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImNsaXBcIilcbiAgICAgICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KTtcblxuICAgIHJldHVybiBzdmc7XG59XG5cbi8qKlxuICogUmVuZGVyIHRoZSBMRCBoZWF0IG1hcFxuICogQHBhcmFtIHBhciB7T2JqZWN0fSB0aGUgbWFwJ3MgY29uZmlnIG9iamVjdFxuICogQHBhcmFtIGJtYXAge0J1YmJsZU1hcH0gb2JqZWN0IG9mIHRoZSBidWJibGUgbWFwIGJlY2F1c2UgdGhlIExEIHJlbmRlcmluZyBkb21haW4gaXMgYmFzZWQgb24gdGhlIGJ1YmJsZSBtYXAncyBmb2N1cyBkb21haW4uXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxkTWFwKHBhciwgYm1hcCl7XG4gICAgbGV0IGxkTWFwID0gbmV3IEhhbGZNYXAocGFyLmxkRGF0YSwgcGFyLmxkQ3V0b2ZmLCBmYWxzZSwgdW5kZWZpbmVkLCBwYXIubGRDb2xvclNjaGVtZSwgWzAsMV0pO1xuICAgICQoYCMke3Bhci5sZElkfWApLmVtcHR5KCk7IC8vIGpRdWVyeSBzeW50YXguLi5cbiAgICBsZE1hcC5hZGRUb29sdGlwKHBhci5sZElkKTtcbiAgICBsZXQgbGRDYW52YXMgPSBzZWxlY3QoYCMke3Bhci5sZElkfWApLmFwcGVuZChcImNhbnZhc1wiKVxuICAgICAgICAuYXR0cihcImlkXCIsIHBhci5sZElkICsgXCItbGQtY2FudmFzXCIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcGFyLndpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBwYXIud2lkdGgpXG4gICAgICAgIC5zdHlsZShcInBvc2l0aW9uXCIsIFwiYWJzb2x1dGVcIik7XG4gICAgbGV0IGxkU3ZnID0gY3JlYXRlU3ZnKHBhci5sZElkLCBwYXIud2lkdGgsIHBhci53aWR0aCwgdW5kZWZpbmVkKTtcbiAgICBsZXQgbGRHID0gbGRTdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwibGRcIilcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImxkR1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7cGFyLmxkUGFuZWxNYXJnaW4ubGVmdH0sICR7cGFyLmxkUGFuZWxNYXJnaW4udG9wfSlgKTtcbiAgICBsZE1hcC5kcmF3Q29sb3JMZWdlbmQobGRTdmcsIHt4OiBwYXIubGRQYW5lbE1hcmdpbi5sZWZ0LCB5OiAxMDB9LCAxMCwgXCJMRFwiKTtcbiAgICBsZEcuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTsgLy8gY2xlYXIgYWxsIGNoaWxkIG5vZGVzIGluIGxkRyBiZWZvcmUgcmVuZGVyaW5nXG4gICAgbGV0IGxkQ29uZmlnID0ge3c6cGFyLmluV2lkdGgsIHRvcDpwYXIubGRQYW5lbE1hcmdpbi50b3AsIGxlZnQ6cGFyLmxkUGFuZWxNYXJnaW4ubGVmdH07XG4gICAgbGRNYXAuZHJhdyhsZENhbnZhcywgbGRHLCBsZENvbmZpZywgWzAsMV0sIGZhbHNlLCB1bmRlZmluZWQsIGJtYXAueFNjYWxlLmRvbWFpbigpLCBibWFwLnhTY2FsZS5kb21haW4oKSk7XG5cbiAgICAvLyB1cGRhdGUgdGhlIGJydXNoIGV2ZW50IG9uIHRoZSBtaW5pIGJ1YmJsZSBtYXAgYWZ0ZXIgTEQgbWFwIGlzIHJlbmRlcmVkXG4gICAgLy8gdGhlIGJydXNoIG5lZWRzIHRvIGNvbnRyb2wgb2YgdGhlIExEIG1hcCB2aWV3IHJhbmdlIGFzIHdlbGwuXG4gICAgYm1hcC5icnVzaC5vbihcImJydXNoXCIsICgpPT57XG4gICAgICAgIGJtYXAuYnJ1c2hFdmVudCgpO1xuICAgICAgICBsZEcuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTsgLy8gY2xlYXIgYWxsIGNoaWxkIG5vZGVzIGluIGxkRyBiZWZvcmUgcmVuZGVyaW5nXG4gICAgICAgIGxkTWFwLmRyYXcobGRDYW52YXMsIGxkRywgbGRDb25maWcsIFswLDFdLCBmYWxzZSwgdW5kZWZpbmVkLCBibWFwLnhTY2FsZS5kb21haW4oKSwgYm1hcC54U2NhbGUuZG9tYWluKCkpO1xuICAgIH0pO1xuXG4gICAgLy8gTEQgZmlsdGVyc1xuICAgIHJlbmRlckxERmlsdGVycyhwYXIuZGl2RGFzaGJvYXJkLCBsZE1hcCwgbGRDYW52YXMsIGxkRywgbGRDb25maWcpO1xufVxuXG4vKipcbiAqIFJlbmRlciB0aGUgYnViYmxlIGhlYXRtYXBcbiAqIEBwYXJhbSBwYXIge09iamVjdH0gY29uZmlndXJlIHRoZSB2aXN1YWxpemF0aW9uc1xuICogVE9ETzogY2hlY2sgcmVxdWlyZWQgYXR0cmlidXRlcyBpbiBwYXJcbiAqIEBwYXJhbSBnZW5lIHtPYmplY3R9IGNvbnRhaW5pbmcgYXR0cjogZ2VuY29kZUlkXG4gKiBAcGFyYW0gdGlzc3VlcyBbTGlzdF0gb2YgdGlzc3N1ZXMgd2l0aCBzYW1wbGUgY291bnRzLCBnZW5lcmF0ZWQgYnkgcGFyc2VUaXNzdWVTYW1wbGVDb3VudHMoKVxuICogQHBhcmFtIGV4b25zIHtMaXN0fSBvZiBleG9ucyBmcm9tIHBhcnNlRXhvbnNUb0xpc3QoKVxuICogQHBhcmFtIHRpc3N1ZVNpdGVUYWJsZSB7RGljdGlvbmFyeX0gb2YgdGlzc3VlIG9iamVjdHMgaW5kZXhlZCBieSB0aXNzdWVTaXRlRGV0YWlsSWRcbiAqIEBwYXJhbSB1cmxzIHtEaWN0aW9uYXJ5fSBvZiB0aGUgR1RFeCB3ZWIgc2VydmljZSBVUkxzIGZyb20gZ2V0R3RleFVybHMoKSwgbXVzdCBoYXZlIHRoZSBhdHRyaWJ1dGUgZHluZXF0bFxuICogQHJldHVybnMge0J1YmJsZU1hcH1cbiAqL1xuZnVuY3Rpb24gcmVuZGVyQnViYmxlTWFwKHBhciwgZ2VuZSwgdGlzc3VlcywgZXhvbnMsIHRpc3N1ZVNpdGVUYWJsZSwgdXJscywgdXBkYXRlPWZhbHNlKXtcbiAgICBsZXQgYm1hcCA9IG5ldyBCdWJibGVNYXAocGFyLmRhdGEsIHBhci51c2VMb2csIHBhci5sb2dCYXNlLCBwYXIuY29sb3JTY2hlbWUpO1xuICAgIGJtYXAuYWRkVG9vbHRpcChwYXIuaWQpO1xuXG4gICAgLy8vLy8vIEN1c3RvbSBhdHRyaWJ1dGVzIGFkZGVkIHRvIGJtYXAgLy8vLy8vXG4gICAgYm1hcC51cmxzID0gdXJsczsgLy8gVE9ETzogZmluZCBhIGJldHRlciB3YXkgdG8gc3RvcmUgYWRkaXRpb25hbCBhdHRyaWJ1dGVzXG4gICAgYm1hcC52YXJpYW50c0luRXhvbnMgPSB7fTtcbiAgICBibWFwLnJzTG9va1VwID0ge307XG4gICAgYm1hcC52YXJMb29rVXAgPSB7fTtcblxuICAgIGxldCBibWFwU3ZnID0gY3JlYXRlU3ZnKHBhci5pZCwgcGFyLndpZHRoLCBwYXIuaGVpZ2h0LCB1bmRlZmluZWQpO1xuXG4gICAgbGV0IG1pbmlHID0gYm1hcFN2Zy5hcHBlbmQoXCJnXCIpIC8vIGdsb2JhbCBidWJibGUgbWFwIDxnPlxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29udGV4dFwiKVxuICAgICAgICAuYXR0cihcImlkXCIsIFwibWluaUdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3Bhci5tYXJnaW4ubGVmdH0sICR7cGFyLm1hcmdpbi50b3B9KWApO1xuXG4gICAgbGV0IGZvY3VzRyA9IGJtYXBTdmcuYXBwZW5kKFwiZ1wiKSAvLyB6b29tZWQgYnViYmxlIG1hcCA8Zz5cbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcImZvY3VzR1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZm9jdXNcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3Bhci5mb2N1c1BhbmVsTWFyZ2luLmxlZnR9LCAke3Bhci5mb2N1c1BhbmVsTWFyZ2luLnRvcH0pYCk7XG5cbiAgICBibWFwLmRyYXdDb21ibyhcbiAgICAgICAgbWluaUcsXG4gICAgICAgIGZvY3VzRyxcbiAgICAgICAge3c6cGFyLmluV2lkdGgsIGg6cGFyLm1pbmlQYW5lbEhlaWdodCwgdG9wOjUsIGxlZnQ6MCwgaDI6IHBhci5mb2N1c1BhbmVsSGVpZ2h0fSxcbiAgICAgICAgcGFyLmNvbG9yU2NhbGVEb21haW4sXG4gICAgICAgIGZhbHNlLCAvLyBkbyBub3QgdXNlIHRoZSBkZWZhdWx0IGJydXNoLCB1c2UgYSBjdXN0b20gYnJ1c2ggZGVmaW5lZCBiZWxvd1xuICAgICAgICBwYXIuZm9jdXNQYW5lbExhYmVsc1xuICAgICk7XG5cbiAgICAkKGAjJHtwYXIuZGl2SW5mb31gKS50ZXh0KCdUb3RhbCBlUVRMIGNvdW50czogJyArIHBhci5kYXRhLmxlbmd0aClcblxuXG4gICAgLy8vLy8gQmVsb3cgYXJlIGN1c3RvbSBmZWF0dXJlcyBhbmQgZnVuY3Rpb25hbGl0eVxuXG4gICAgLy8tLSBvdmVycmlkZSBidWJibGUgbW91c2VvdmVyIHRvb2x0aXBcbiAgICBmb2N1c0cuc2VsZWN0QWxsKFwiLmJ1YmJsZS1tYXAtY2VsbFwiKVxuICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTtcbiAgICAgICAgICAgICAgICBsZXQgcm93Q2xhc3MgPSBzZWxlY3RlZC5hdHRyKFwicm93XCIpO1xuICAgICAgICAgICAgICAgIGxldCBjb2xDbGFzcyA9IHNlbGVjdGVkLmF0dHIoXCJjb2xcIik7XG4gICAgICAgICAgICAgICAgZm9jdXNHLnNlbGVjdEFsbChcIi5idWJibGUtbWFwLXhsYWJlbFwiKS5maWx0ZXIoYC4ke3Jvd0NsYXNzfWApXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIGZvY3VzRy5zZWxlY3RBbGwoXCIuYnViYmxlLW1hcC15bGFiZWxcIikuZmlsdGVyKGAuJHtjb2xDbGFzc31gKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIGxldCBkaXNwbGF5VmFsdWUgPSBkLmRpc3BsYXlWYWx1ZSA9PT0gdW5kZWZpbmVkP3BhcnNlRmxvYXQoZC52YWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDQpOmQuZGlzcGxheVZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBkaXNwbGF5U2l6ZSA9IGQuckRpc3BsYXlWYWx1ZSA9PT0gdW5kZWZpbmVkPyBkLnIudG9QcmVjaXNpb24oNCk6ZC5yRGlzcGxheVZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBkaXNwbGF5WCA9IGQuZGlzcGxheVggPT09IHVuZGVmaW5lZD8gZC54OmQuZGlzcGxheVg7XG4gICAgICAgICAgICAgICAgbGV0IGRpc3BsYXlZID0gZC5kaXNwbGF5WSA9PT0gdW5kZWZpbmVkPyBkLnk6ZC5kaXNwbGF5WTtcbiAgICAgICAgICAgICAgICBibWFwLnRvb2x0aXAuc2hvdyhgQ29sdW1uOiAke2Rpc3BsYXlYfSA8YnIvPiBSb3c6ICR7ZGlzcGxheVl9PGJyLz4gTkVTOiAke2Rpc3BsYXlWYWx1ZX08YnIvPiBwLXZhbHVlOiAke2Rpc3BsYXlTaXplfWApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAvLy0tIGZpbHRlcnMgZm9yIHAtdmFsdWUsIG5lc1xuICAgIHJlbmRlckJtYXBGaWx0ZXJzKHBhci5kaXZEYXNoYm9hcmQsIHBhci5kaXZJbmZvLCBwYXIuZGl2TW9kYWwsIGJtYXAsIGJtYXBTdmcsIHRpc3N1ZVNpdGVUYWJsZSk7XG5cbiAgICAvLyB2YXJpYW50IHJlbGF0ZWQgZGF0YSBwYXJzaW5nXG4gICAgLy8gVmFyaWFudCBsb2NhdG9yXG4gICAgYnVpbGRWYXJpYW50TG9va3VwVGFibGVzKGJtYXApO1xuXG4gICAgLy8tLSBpZGVudGlmeSB2YXJpYW50cyB0aGF0IGFyZSBpbiB0aGUgZXhvbiByZWdpb25zXG4gICAgYm1hcC52YXJpYW50c0luRXhvbnMgPSBmaW5kVmFyaWFudHNJbkV4b25SZWdpb25zKGJtYXAueFNjYWxlLmRvbWFpbigpLCBleG9ucyk7XG5cbiAgICAvLy0tIHRpc3N1ZSBiYWRnZXMsIHdoaWNoIHJlcG9ydCB0aGUgdGlzc3VlIHNhbXBsZSBjb3VudHMgbmV4dCB0byB0aGUgdGlzc3VlIHJvdyBsYWJlbHNcbiAgICByZW5kZXJUaXNzdWVCYWRnZXModGlzc3VlcywgYm1hcCwgYm1hcFN2Zyk7XG5cbiAgICAgLy8tLSBUU1MgYW5kIFRFUyBtYXJrZXJzXG4gICAgZmluZFZhcmlhbnRzTmVhckdlbmVTdGFydEVuZChnZW5lLCBibWFwKTtcbiAgICByZW5kZXJHZW5lU3RhcnRFbmRNYXJrZXJzKGJtYXAsIGJtYXBTdmcsIHRydWUpOyAvLyByZW5kZXIgdGhlIG1hcmtlcnMgb24gdGhlIG1pbmkgbWFwXG5cbiAgICAvLy0tIFRTUyBkaXN0YW5jZSB0cmFja1xuICAgIC8vLS0gSXQncyBhIDFEIGhlYXRtYXAgc2hvd2luZyB0aGUgZGlzdGFuY2Ugb2YgZWFjaCB2YXJpYW50IHRvIHRoZSBUU1Mgc2l0ZS5cbiAgICByZW5kZXJUc3NEaXN0YW5jZVRyYWNrKGdlbmUsIGJtYXAsIGJtYXBTdmcpO1xuXG4gICAgLy8tLSBBZGQgdGhlIGNsaWNrIGV2ZW50IGZvciB0aGUgYnViYmxlczogcG9wIGEgZGlhbG9nIHdpbmRvdyBhbmQgcmVuZGVyIHRoZSBlUVRMIHZpb2xpbiBwbG90XG4gICAgYWRkQnViYmxlQ2xpY2tFdmVudChibWFwLCBibWFwU3ZnLCBwYXIpO1xuXG4gICAgLy8tLSBhZGQgdGhlIGZvY3VzIHZpZXcgYnJ1c2ggYW5kIGRlZmludCB0aGUgYnJ1c2ggZXZlbnRcbiAgICBibWFwLmJydXNoRXZlbnQgPSAoKT0+e1xuICAgICAgICAvLyB1cGRhdGUgYWxsIHRoZSB2YXJpYW50IHJlbGF0ZWQgdmlzdWFsIGZlYXR1cmVzXG5cbiAgICAgICAgLy8gLS0gZm9jdXMgdmlldyBvZiB0aGUgaGVhdCBtYXBcbiAgICAgICAgbGV0IGZvY3VzRG9tYWluID0gdXBkYXRlRm9jdXNWaWV3KHBhciwgYm1hcCwgYm1hcFN2Zyk7XG5cbiAgICAgICAgLy8gLS0gZ2VuZSBUU1MgYW5kIFRFUyBtYXJrZXJzXG4gICAgICAgIGlmKCAoYm1hcC50c3MgJiYgYm1hcC54U2NhbGUoYm1hcC50c3MpKSB8fCAoYm1hcC50ZXMgJiYgYm1hcC54U2NhbGUoYm1hcC50ZXMpKSApIHJlbmRlckdlbmVTdGFydEVuZE1hcmtlcnMoYm1hcCwgYm1hcFN2ZywgZmFsc2UpO1xuXG4gICAgICAgIC8vIC0tIFRTUyBkaXN0YW5jZSB0cmFja1xuICAgICAgICByZW5kZXJUc3NEaXN0YW5jZVRyYWNrKGdlbmUsIGJtYXAsIGJtYXBTdmcpO1xuICAgICAgICByZXR1cm4gZm9jdXNEb21haW47XG4gICAgfTtcbiAgICBibWFwLmJydXNoID0gYnJ1c2hYKClcbiAgICAgICAgLmV4dGVudChbXG4gICAgICAgICAgICBbMCwwXSxcbiAgICAgICAgICAgIFtwYXIuaW5XaWR0aCwgcGFyLm1pbmlQYW5lbEhlaWdodCArIDVdXG4gICAgICAgIF0pXG4gICAgICAgIC5vbihcImJydXNoXCIsIGJtYXAuYnJ1c2hFdmVudCk7XG5cbiAgICBibWFwLmRyYXdDb2xvckxlZ2VuZChibWFwU3ZnLCB7eDogcGFyLmZvY3VzUGFuZWxNYXJnaW4ubGVmdCwgeTogcGFyLmZvY3VzUGFuZWxNYXJnaW4udG9wLTUwfSwgNCwgXCJORVNcIik7XG5cbiAgICBtaW5pRy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJicnVzaFwiKVxuICAgICAgICAuY2FsbChibWFwLmJydXNoKVxuICAgICAgICAuY2FsbChibWFwLmJydXNoLm1vdmUsIFswLCBibWFwLnhTY2FsZU1pbmkuYmFuZHdpZHRoKCkqODBdKTsgLy8gc2V0IHRoZSBicnVzaCBzaXplIHRvIDYwIGNvbHVtbnNcblxuICAgIC8vIGhpZGUgdGhlIG1pbmkgbWFwIHdoZW4gdGhlIGZvY3VzIG1hcCBpbmNsdWRlcyBhbGwgZVFUTHNcbiAgICBpZiAoYm1hcC54U2NhbGVNaW5pLmRvbWFpbigpLmxlbmd0aCA9PSBibWFwLnhTY2FsZS5kb21haW4oKS5sZW5ndGgpIG1pbmlHLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG5cbiAgICByZXR1cm4gYm1hcDtcbn1cblxuLyoqXG4gKiBVcGRhdGUgdGhlIGZvY3VzIGJ1YmJsZSBtYXBcbiAqIEBwYXJhbSBwYXIge09iamVjdH0gb2YgdGhlIHBsb3QncyBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0gYm1hcCB7QnViYmxlTWFwfVxuICogQHBhcmFtIGJtYXBTdmcge0QzfSB0aGUgU1ZHIG9mIHRoZSBidWJibGUgbWFwLlxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZUZvY3VzVmlldyhwYXIsIGJtYXAsIGJtYXBTdmcpe1xuICAgIGxldCBzZWxlY3Rpb24gPSBldmVudC5zZWxlY3Rpb247XG4gICAgbGV0IGJydXNoTGVmdCA9IE1hdGgucm91bmQoc2VsZWN0aW9uWzBdIC8gYm1hcC54U2NhbGVNaW5pLnN0ZXAoKSk7XG4gICAgbGV0IGJydXNoUmlnaHQgPSBNYXRoLnJvdW5kKHNlbGVjdGlvblsxXSAvIGJtYXAueFNjYWxlTWluaS5zdGVwKCkpO1xuXG4gICAgLy8gdXBkYXRlIHNjYWxlc1xuICAgIGxldCBmb2N1c0RvbWFpbiA9IGJtYXAueFNjYWxlTWluaS5kb21haW4oKS5zbGljZShicnVzaExlZnQsIGJydXNoUmlnaHQpO1xuICAgIGJtYXAueFNjYWxlLmRvbWFpbihmb2N1c0RvbWFpbik7IC8vIHJlc2V0IHRoZSB4U2NhbGUgZG9tYWluXG4gICAgbGV0IGJ1YmJsZU1heCA9IGJtYXAuX3NldEJ1YmJsZU1heCgpO1xuICAgIGJtYXAuYnViYmxlU2NhbGUucmFuZ2UoWzIsIGJ1YmJsZU1heF0pOyAvLyBUT0RPOiBjaGFuZ2UgaGFyZC1jb2RlZCBtaW4gcmFkaXVzXG5cbiAgICBibWFwLmRyYXdCdWJibGVMZWdlbmQoYm1hcFN2Zywge3g6IHBhci53aWR0aC8yICogMS4xLCB5OnBhci5mb2N1c1BhbmVsTWFyZ2luLnRvcC01MCwgdGl0bGU6IFwiLWxvZzEwKHAtdmFsdWUpXCJ9LCA1LCBcIi1sb2cxMChwLXZhbHVlKVwiKTtcblxuICAgIC8vIHVwZGF0ZSB0aGUgZm9jdXMgYnViYmxlc1xuICAgIGJtYXBTdmcuc2VsZWN0KFwiI2ZvY3VzR1wiKS5zZWxlY3RBbGwoXCIuYnViYmxlLW1hcC1jZWxsXCIpXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IHtcbiAgICAgICAgICAgIGxldCB4ID0gYm1hcC54U2NhbGUoZC54KTtcbiAgICAgICAgICAgIHJldHVybiB4ID09PSB1bmRlZmluZWQgPyBibWFwLnhTY2FsZS5iYW5kd2lkdGgoKSAvIDIgOiB4ICsgYm1hcC54U2NhbGUuYmFuZHdpZHRoKCkgLyAyO1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiclwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgbGV0IHggPSBibWFwLnhTY2FsZShkLngpO1xuICAgICAgICAgICAgcmV0dXJuIHggPT09IHVuZGVmaW5lZCA/IDAgOiBibWFwLmJ1YmJsZVNjYWxlKGQucik7IC8vIHNldCB0aGUgciB0byB6ZXJvIHdoZW4geCBpcyBub3QgaW4gdGhlIHpvb20gdmlldy5cbiAgICAgICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgdGhlIGNvbHVtbiBsYWJlbHNcbiAgICBsZXQgY2wgPSBwYXIuZm9jdXNQYW5lbExhYmVscy5jb2x1bW47XG4gICAgYm1hcFN2Zy5zZWxlY3QoXCIjZm9jdXNHXCIpLnNlbGVjdEFsbChcIi5idWJibGUtbWFwLXhsYWJlbFwiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgbGV0IHggPSBibWFwLnhTY2FsZShkKSArIGJtYXAueFNjYWxlLmJhbmR3aWR0aCgpLzMgfHwgMDsgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVcbiAgICAgICAgICAgIGxldCB5ID0gYm1hcC55U2NhbGUucmFuZ2UoKVsxXSArIGNsLmFkanVzdDtcbiAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHJvdGF0ZSgke2NsLmFuZ2xlfSlgO1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgc2l6ZSA9IE1hdGguZmxvb3IoYm1hcC54U2NhbGUuYmFuZHdpZHRoKCkvIDIpPjEwPzEwOk1hdGguZmxvb3IoYm1hcC54U2NhbGUuYmFuZHdpZHRoKCkvIDIpO1xuICAgICAgICAgICAgcmV0dXJuIGAke3NpemV9cHhgXG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgKGQpID0+IHtcbiAgICAgICAgICAgIGxldCB4ID0gYm1hcC54U2NhbGUoZCk7XG4gICAgICAgICAgICByZXR1cm4geCA9PT0gdW5kZWZpbmVkID8gXCJub25lXCIgOiBcImJsb2NrXCI7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBmb2N1c0RvbWFpbjtcbn1cblxuLyoqXG4gKiBSZW5kZXIgdGlzc3VlIGJhZGdlcyB0aGF0IHJlcG9ydCB0aGUgbnVtYmVyIG9mIHNhbXBsZXMgd2l0aCBnZW5vdHlwZVxuICogQHBhcmFtIHRpc3N1ZXMge0xpc3R9IG9mIHRpc3N1ZSBvYmplY3RzXG4gKiBAcGFyYW0gYm1hcCB7QnViYmxlTWFwfVxuICogQHBhcmFtIGJtYXBTdmcge0QzfSBTVkcgb2JqZWN0IG9mIHRoZSBidWJibGUgbWFwXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRpc3N1ZUJhZGdlcyh0aXNzdWVzLCBibWFwLCBibWFwU3ZnKXtcbiAgICBsZXQgYmFkZ2VzID0gYm1hcFN2Zy5zZWxlY3QoJyNmb2N1c0cnKS5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignaWQnLCAndGlzc3VlQmFkZ2VHJylcbiAgICAgICAgLnNlbGVjdEFsbCgnLnRpc3N1ZS1iYWRnZScpXG4gICAgICAgIC5kYXRhKHRpc3N1ZXMuZmlsdGVyKChkKT0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBibWFwLnlTY2FsZShkLnRpc3N1ZVNpdGVEZXRhaWxJZCkgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pKTtcblxuICAgIGxldCBnID0gYmFkZ2VzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKCd0aXNzdWUtYmFkZ2UnLCB0cnVlKTtcblxuICAgIGcuYXBwZW5kKCdlbGxpcHNlJylcbiAgICAgICAgLmF0dHIoJ2N4JywgYm1hcC54U2NhbGUucmFuZ2UoKVswXSAtIGJtYXAueFNjYWxlLmJhbmR3aWR0aCgpLzItMTApXG4gICAgICAgIC5hdHRyKCdjeScsIChkKT0+Ym1hcC55U2NhbGUoZC50aXNzdWVTaXRlRGV0YWlsSWQpICsgYm1hcC55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgLmF0dHIoJ3J4JywgMTEpIC8vIFdhcm5pbmc6IGhhcmQtY29kZWQgdmFsdWVcbiAgICAgICAgLmF0dHIoJ3J5JywgYm1hcC55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnIzc0ODc5NycpO1xuXG4gICAgZy5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAudGV4dCgoZCk9PmQucm5hU2VxQW5kR2Vub3R5cGVTYW1wbGVDb3VudClcbiAgICAgICAgLmF0dHIoJ3gnLCBibWFwLnhTY2FsZS5yYW5nZSgpWzBdIC0gYm1hcC54U2NhbGUuYmFuZHdpZHRoKCkvMiAtIDE3KVxuICAgICAgICAuYXR0cigneScsIChkKT0+Ym1hcC55U2NhbGUoZC50aXNzdWVTaXRlRGV0YWlsSWQpICsgYm1hcC55U2NhbGUuYmFuZHdpZHRoKCkvMiszKVxuICAgICAgICAuYXR0cignZmlsbCcsICcjZmZmZmZmJylcbiAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBcIjhweFwiKVxuICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnY2VudGVyJylcblxufVxuXG4vKipcbiAqIEZpbmQgdGhlIGNsb3Nlc3QgbGVmdC1zaWRlIHZhcmlhbnQgb2YgdGhlIGdlbmUgc3RhcnQgYW5kIGVuZCBzaXRlcyAodHNzIGFuZCB0ZXMpXG4gKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgdHdvIG5ldyBhdHRyaWJ1dGVzLCB0c3MgYW5kIHRlcywgZm9yIGJtYXBcbiAqIEBwYXJhbSBnZW5lIHtPYmplY3R9IHRoYXQgaGFzIGF0dHJpYnV0ZXMgc3RhcnQgYW5kIGVuZFxuICogQHBhcmFtIGJtYXAge0J1YmJsZU1hcH1cbiAqL1xuZnVuY3Rpb24gZmluZFZhcmlhbnRzTmVhckdlbmVTdGFydEVuZChnZW5lLCBibWFwKSB7XG4gICAgbGV0IHRzcyA9IGdlbmUuc3RyYW5kID09ICcrJyA/IGdlbmUuc3RhcnQgOiBnZW5lLmVuZDtcbiAgICBsZXQgdGVzID0gZ2VuZS5zdHJhbmQgPT0gJysnID8gZ2VuZS5lbmQgOiBnZW5lLnN0YXJ0O1xuICAgIGxldCB2YXJpYW50cyA9IGJtYXAueFNjYWxlTWluaS5kb21haW4oKTtcbiAgICBjb25zdCBmaW5kTGVmdFNpZGVOZWFyZXN0TmVpZ2hib3JWYXJpYW50ID0gKHNpdGUpID0+IHtcbiAgICAgICAgcmV0dXJuIHZhcmlhbnRzLmZpbHRlcigoZCwgaSkgPT4ge1xuICAgICAgICAgICAgLy8gaWYgdGhlIHZhcmlhbnQgcG9zaXRpb24gaXMgdGhlIHNpdGUgcG9zaXRpb25cbiAgICAgICAgICAgIGxldCBwb3MgPSBwYXJzZUZsb2F0KGQuc3BsaXQoJ18nKVsxXSk7IC8vIGFzc3VtcHRpb246IHRoZSB2YXJpYW50IElEIGhhcyB0aGUgZ2Vub21pYyBsb2NhdGlvblxuICAgICAgICAgICAgaWYgKHBvcyA9PT0gc2l0ZSkgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgIC8vIGVsc2UgZmluZCB3aGVyZSB0aGUgc2l0ZSBpcyBsb2NhdGVkXG4gICAgICAgICAgICAvLyBmaXJzdCwgZ2V0IHRoZSBuZWlnaGJvciB2YXJpYW50XG4gICAgICAgICAgICBpZiAodmFyaWFudHNbaSArIDFdID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gcGFyc2VGbG9hdCh2YXJpYW50c1tpICsgMV0uc3BsaXQoJ18nKVsxXSkgfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIChwb3MgLSBzaXRlKSAqIChuZXh0IC0gc2l0ZSkgPCAwOyAvLyByYXRpb25hbGU6IHRoZSB2YWx1ZSB3b3VsZCBiZSA8IDAgd2hlbiB0aGUgc2l0ZSBpcyBsb2NhdGVkIGJldHdlZW4gdHdvIHZhcmlhbnRzLlxuICAgICAgICB9KVxuICAgIH07XG5cbiAgICBsZXQgdHNzVmFyaWFudCA9IGZpbmRMZWZ0U2lkZU5lYXJlc3ROZWlnaGJvclZhcmlhbnQodHNzKTtcbiAgICBsZXQgdGVzVmFyaWFudCA9IGZpbmRMZWZ0U2lkZU5lYXJlc3ROZWlnaGJvclZhcmlhbnQodGVzKTtcbiAgICBibWFwLnRzcyA9IHRzc1ZhcmlhbnRbMF07IC8vIGJtYXAudHNzIHN0b3JlcyB0aGUgY2xvc2VzdCBsZWZ0LXNpZGUgdmFyaWFudCBvZiB0aGUgc3RhcnQgc2l0ZVxuICAgIGJtYXAudGVzID0gdGVzVmFyaWFudFswXTsgLy8gYm1hcC50ZXMgc3RvcmVzIHRoZSBjbG9zZXN0IGxlZnQtc2lkZSB2YXJpYW50IG9mIHRoZSBlbmQgc2l0ZVxufVxuXG4vKipcbiAqIFJlbmRlciB0aGUgVFNTIGFuZCBURVMgb2YgdGhlIEdlbmUgaWYgYXBwbGljYWJsZVxuICogQHBhcmFtIGJtYXAge0J1YmJsZU1hcH1cbiAqIEBwYXJhbSBibWFwU3ZnIHtEM30gdGhlIFNWRyBvYmplY3Qgb2YgdGhlIGJ1YmJsZSBtYXBcbiAqIEBwYXJhbSBtaW5pIHtCb29sZWFufSByZW5kZXIgdGhlIG1hcmtlcnMgb24gdGhlIG1pbmkgbWFwP1xuICovXG5mdW5jdGlvbiByZW5kZXJHZW5lU3RhcnRFbmRNYXJrZXJzKGJtYXAsIGJtYXBTdmcsIG1pbmk9ZmFsc2Upe1xuICAgIC8vIHJlbmRlcmluZyBUU1NcbiAgICBpZiAobWluaSl7XG4gICAgICAgIGxldCBnID0gYm1hcFN2Zy5zZWxlY3QoJyNtaW5pRycpLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdpZCcsICdtaW5pU2l0ZU1hcmtlcnMnKTtcbiAgICAgICAgZy5hcHBlbmQoJ2xpbmUnKVxuICAgICAgICAuYXR0cigneDEnLCBibWFwLnhTY2FsZU1pbmkoYm1hcC50c3MpICsgYm1hcC54U2NhbGVNaW5pLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cigneDInLCBibWFwLnhTY2FsZU1pbmkoYm1hcC50c3MpICsgYm1hcC54U2NhbGVNaW5pLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cigneTEnLCAwKVxuICAgICAgICAuYXR0cigneTInLCBibWFwLnlTY2FsZU1pbmkucmFuZ2UoKVsxXSlcbiAgICAgICAgLnN0eWxlKCdzdHJva2UnLCAnIzk0YThiOCcpXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgMik7XG5cbiAgICAgICAgZy5hcHBlbmQoJ2xpbmUnKVxuICAgICAgICAuYXR0cigneDEnLCBibWFwLnhTY2FsZU1pbmkoYm1hcC50ZXMpICsgYm1hcC54U2NhbGVNaW5pLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cigneDInLCBibWFwLnhTY2FsZU1pbmkoYm1hcC50ZXMpICsgYm1hcC54U2NhbGVNaW5pLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cigneTEnLCAwKVxuICAgICAgICAuYXR0cigneTInLCBibWFwLnlTY2FsZU1pbmkucmFuZ2UoKVsxXSlcbiAgICAgICAgLnN0eWxlKCdzdHJva2UnLCAnIzc0ODc5NycpXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgMik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYm1hcFN2Zy5zZWxlY3QoJyNzaXRlTWFya2VycycpLnJlbW92ZSgpOyAvLyBjbGVhciBwcmV2aW91c2x5IHJlbmRlcmVkIG1hcmtlcnNcbiAgICAgICAgbGV0IGcgPSBibWFwU3ZnLnNlbGVjdCgnI2ZvY3VzRycpLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdpZCcsICdzaXRlTWFya2VycycpO1xuICAgICAgICBpZiAoYm1hcC50c3MgJiYgYm1hcC54U2NhbGUoYm1hcC50c3MpKXtcbiAgICAgICAgICAgICBnLmFwcGVuZCgnbGluZScpXG4gICAgICAgICAgICAuYXR0cigneDEnLCBibWFwLnhTY2FsZShibWFwLnRzcykgKyBibWFwLnhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKCd4MicsIGJtYXAueFNjYWxlKGJtYXAudHNzKSArIGJtYXAueFNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLmF0dHIoJ3kxJywgMClcbiAgICAgICAgICAgIC5hdHRyKCd5MicsIGJtYXAueVNjYWxlLnJhbmdlKClbMV0pXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsICcjOTRhOGI4JylcbiAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgMik7XG4gICAgICAgICAgICAgZy5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgICAudGV4dCgnVFNTJylcbiAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCBibWFwLnhTY2FsZShibWFwLnRzcykpXG4gICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgLTUpXG4gICAgICAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdjZW50ZXInKVxuICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIFwiMTJweFwiKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJtYXAudGVzICYmIGJtYXAueFNjYWxlKGJtYXAudGVzKSl7XG4gICAgICAgICAgICBnLmFwcGVuZCgnbGluZScpXG4gICAgICAgICAgICAuYXR0cigneDEnLCBibWFwLnhTY2FsZShibWFwLnRlcykgKyBibWFwLnhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKCd4MicsIGJtYXAueFNjYWxlKGJtYXAudGVzKSArIGJtYXAueFNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLmF0dHIoJ3kxJywgMClcbiAgICAgICAgICAgIC5hdHRyKCd5MicsIGJtYXAueVNjYWxlLnJhbmdlKClbMV0pXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsICcjNzQ4Nzk3JylcbiAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgMik7XG4gICAgICAgICAgICBnLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAgICAgIC50ZXh0KCdURVMnKVxuICAgICAgICAgICAgICAgICAuYXR0cigneCcsIGJtYXAueFNjYWxlKGJtYXAudGVzKSlcbiAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCAtNSlcbiAgICAgICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ2NlbnRlcicpXG4gICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgXCIxMnB4XCIpXG4gICAgICAgIH1cblxuICAgIH1cblxufVxuXG4vKipcbiAqIEJ1aWxkIHR3byBsb29rdXAgdGFibGVzXG4gKiByc0xvb2t1cCBhIGxvb2t1cCB0YWJsZSBmb3IgcmV0cmlldmluZyBycyBJRCBieSB2YXJpYW50IElEXG4gKiB2YXJMb29rdXAgaXMgYSBsb29rdXAgdGFibGUgZm9yIHJldHJpZXZpbmcgc2hvcnRoYW5kIHZhcmlhbnRJRCBieSB2YXJpYW50IElEXG4gKiB0aGlzIGZ1bmN0aW9uIGNyZWF0ZXMgdHdvIG5ldyBhdHRyaWJ1dGVzLCByc0xvb2t1cCBhbmQgdmFyTG9va1VwIGZvciBibWFwXG4gKiBAcGFyYW0gYm1hcFxuICovXG5mdW5jdGlvbiBidWlsZFZhcmlhbnRMb29rdXBUYWJsZXMoYm1hcCl7XG4gICAgYm1hcC5yc0xvb2tVcCA9IHt9O1xuICAgIGJtYXAudmFyTG9va1VwID0ge307XG4gICAgbmVzdCgpXG4gICAgICAgIC5rZXkoKGQpPT5kLngpXG4gICAgICAgIC5lbnRyaWVzKGJtYXAuZGF0YSlcbiAgICAgICAgLmZvckVhY2goKGQpPT4ge1xuICAgICAgICAgICAgbGV0IHYgPSBkLnZhbHVlc1swXTtcbiAgICAgICAgICAgIGlmKHYuaGFzT3duUHJvcGVydHkoJ3NucElkJykgPT09IHVuZGVmaW5lZCkgdGhyb3cgJ0lucHV0IEVycm9yOiBSUyBJRCBsb29rdXAgdGFibGUgaXMgbm90IGJ1aWx0Lic7XG4gICAgICAgICAgICBpZih2Lmhhc093blByb3BlcnR5KCdkaXNwbGF5WCcpID09PSB1bmRlZmluZWQpIHRocm93ICdJbnB1dCBFcnJvcjogZGlzcGxheSBsYWJlbCBsb29rdXAgdGFibGUgaXMgbm90IGJ1aWx0Lic7XG5cbiAgICAgICAgICAgIGJtYXAucnNMb29rVXBbZC5rZXldID0gZC52YWx1ZXNbMF0uc25wSWQ7XG4gICAgICAgICAgICBibWFwLnZhckxvb2tVcFtkLmtleV0gPSBkLnZhbHVlc1swXS5kaXNwbGF5WDtcbiAgICAgICAgfSk7XG59XG5cbi8qKlxuICogSWRlbnRpZnkgdmFyaWFudHMgdGhhdCBhcmUgaW4gdGhlIGV4b24gcmVnaW9uc1xuICogQHBhcmFtIHZhcmlhbnRzXG4gKiBAcGFyYW0gZXhvbnNcbiAqXG4gKi9cbmZ1bmN0aW9uIGZpbmRWYXJpYW50c0luRXhvblJlZ2lvbnModmFyaWFudHMsIGV4b25zKXtcbiAgICBsZXQgZXhvblZhcmlhbnRzID0ge30gLy8gaW5kZXhlZCBieSB2YXJpYW50IElEXG4gICAgdmFyaWFudHMuZm9yRWFjaCgodik9PntcbiAgICAgICAgbGV0IHBvcyA9IHBhcnNlRmxvYXQodi5zcGxpdCgnXycpWzFdKTtcbiAgICAgICAgbGV0IGZpbHRlcmVkID0gZXhvbnMuZmlsdGVyKChleCk9PntcbiAgICAgICAgICAgIHJldHVybiBleC5zdGFydDw9cG9zICYmIGV4LmVuZD49cG9zO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYoZmlsdGVyZWQubGVuZ3RoID4gMCkgZXhvblZhcmlhbnRzW3ZdID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gZXhvblZhcmlhbnRzO1xufVxuXG5cbi8qKlxuICogUmVuZGVyIHRoZSB2YXJpYW50IFRTUyBkaXN0YW5jZSB0cmFja1xuICogQHBhcmFtIGdlbmUge09iamVjdH0gb2YgdGhlIGdlbmUgd2l0aCBhdHRyIHN0YXJ0LCBlbmQgYW5kIHN0cmFuZFxuICogQHBhcmFtIGJtYXAge0J1YmJsZU1hcH1cbiAqIEBwYXJhbSBibWFwU3ZnIHtEM30gdGhlIFNWRyBEMyBvYmplY3Qgb2YgdGhlIGJ1YmJsZSBtYXBcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVHNzRGlzdGFuY2VUcmFjayhnZW5lLCBibWFwLCBibWFwU3ZnKXtcbiAgICBsZXQgdHNzID0gZ2VuZS5zdHJhbmQgPT0gJysnP2dlbmUuc3RhcnQ6Z2VuZS5lbmQ7XG5cbiAgICAvLyBjb2xvciBzY2FsZSBmb3IgdGhlIFRTUyBEaXN0YW5jZVxuICAgIGxldCByYW5nZSA9IFsnIzAwMCcsICcjMjUyNTI1JywgJyM1MjUyNTInLCAnIzczNzM3MycsICcjOTY5Njk2JywgJyNmMGYwZjAnLCcjZmZmJ107XG4gICAgY29uc3QgdW5pdCA9IDFlNTsgLy8gMTAwMDAwIGJwXG4gICAgbGV0IGRvbWFpbiA9IFswLjAwMDAwMSwwLjAwNSwgMC4wMSwwLjEsMC41LDIsMyw0LDVdLm1hcChmdW5jdGlvbihkKXtyZXR1cm4gZCp1bml0fSk7XG5cbiAgICAvLyBzY2FsZVRocmVzaG9sZCBtYXAgYXJiaXRyYXJ5IHN1YnNldHMgKHRocmVzaG9sZHMpIG9mIHRoZSBkb21haW4gdG8gZGlzY3JldGUgdmFsdWVzIGluIHRoZSByYW5nZS5cbiAgICAvLyB0aGUgaW5wdXQgZG9tYWluIGlzIHN0aWxsIGNvbnRpbnVvdXMgYW5kIGRpdmlkZWQgaW50byBzbGljZXMgYmFzZWQgb24gdGhlIHNldCBvZiB0aHJlc2hvbGQgdmFsdWVzLlxuICAgIGxldCBjb2xvclNjYWxlID0gc2NhbGVUaHJlc2hvbGQoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKTtcblxuICAgIGJtYXBTdmcuc2VsZWN0KCcjdHNzRGlzdEcnKS5yZW1vdmUoKTsgLy8gY2xlYXIgYW55IHByZXZpb3VzbHkgcmVuZGVyZWQgU1ZHIERPTSBvYmplY3RzLlxuICAgIGxldCBnID0gYm1hcFN2Zy5zZWxlY3QoJyNmb2N1c0cnKS5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignaWQnLCAndHNzRGlzdEcnKTtcbiAgICBnLnNlbGVjdEFsbCgnLnRyYWNrJylcbiAgICAgICAgLmRhdGEoYm1hcC54U2NhbGUuZG9tYWluKCkpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuY2xhc3NlZCgndHJhY2snLCB0cnVlKVxuICAgICAgICAuYXR0cigneCcsIChkKT0+Ym1hcC54U2NhbGUoZCkpXG4gICAgICAgIC5hdHRyKCd5JywgYm1hcC55U2NhbGUucmFuZ2UoKVsxXSlcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgYm1hcC54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBibWFwLnlTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCAoZCk9PntcbiAgICAgICAgICAgIGxldCBkaXN0ID0gTWF0aC5hYnMocGFyc2VGbG9hdChkLnNwbGl0KCdfJylbMV0pIC0gdHNzKTtcbiAgICAgICAgICAgIHJldHVybiBjb2xvclNjYWxlKGRpc3QpO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgKGQpPT5ibWFwLnZhcmlhbnRzSW5FeG9uc1tkXT8nIzIzOWRiOCc6JyNjYWNhY2EnKVxuICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgKGQpPT5ibWFwLnZhcmlhbnRzSW5FeG9uc1tkXT8nMnB4JzonMXB4JylcbiAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIGxldCBkaXN0ID0gTWF0aC5hYnMocGFyc2VGbG9hdChkLnNwbGl0KCdfJylbMV0pIC0gdHNzKTtcbiAgICAgICAgICAgIGxldCB0dENvbnRlbnQgPSBgJHtkfTxici8+JHtibWFwLnJzTG9va1VwW2RdfTxici8+VFNTIERpc3RhbmNlOiAke2Rpc3R9IGJwPC9icj5gO1xuICAgICAgICAgICAgdHRDb250ZW50ID0gYm1hcC52YXJpYW50c0luRXhvbnNbZF0/dHRDb250ZW50ICsgXCJFeG9uIFJlZ2lvblwiOiB0dENvbnRlbnQ7XG4gICAgICAgICAgICBibWFwLnRvb2x0aXAuc2hvdyh0dENvbnRlbnQpO1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIGJtYXAudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICBzZWxlY3RBbGwoJy50cmFjaycpLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAudGV4dChcIlRTUyBQcm94aW1pdHlcIilcbiAgICAgICAgLmF0dHIoXCJ4XCIsIGJtYXAueFNjYWxlLnJhbmdlKClbMF0pXG4gICAgICAgIC5hdHRyKFwieVwiLCBibWFwLnlTY2FsZS5yYW5nZSgpWzFdICsgYm1hcC55U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiOHB4XCIpXG5cbn1cblxuLyoqXG4gKiBSZW5kZXIgYnViYmxlIG1hcCByZWxhdGVkIGZpbHRlcnNcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSBhIDxkaXY+IElEIHdoZXJlIHRoZSBmaWx0ZXJzIHNob3VsZCBiZSByZW5kZXJlZC5cbiAqIEBwYXJhbSBpbmZvSWQge1N0cmluZ30gYSA8ZGl2PiBJRCB3aGVyZSB0aGUgZmlsdGVyaW5nIHN0YXR1cyBzaG91bGQgYmUgcmVwb3J0ZWQgdG8uXG4gKiBAcGFyYW0gYm1hcCB7QnViYmxlTWFwfSBvZiB0aGUgYnViYmxlIG1hcFxuICogQHBhcmFtIGJtYXBTdmcge0QzfSBvZiB0aGUgYnViYmxlIG1hcCdzIFNWR1xuICogQHBhcmFtIHRpc3N1ZVNpdGVUYWJsZSB7RGljdGlvbmFyeX0gYSBoYXNoIG9mIHRpc3N1ZSBvYmplY3RzICh3aXRoIHRoZSBhdHRyIHRpc3N1ZVNpdGVEZXRhaWwpIGluZGV4ZWQgYnkgdGlzc3VlU2l0ZURldGFpbElkLCB1c2VkIHRvIG1hcCB0aXNzdWVTaXRlRGV0YWlsSUQ9PnRpc3N1ZVNpdGVEZXRhaWxcbiAqL1xuZnVuY3Rpb24gcmVuZGVyQm1hcEZpbHRlcnMoaWQsIGluZm9JZCwgbW9kYWxJZCwgYm1hcCwgYm1hcFN2ZywgdGlzc3VlU2l0ZVRhYmxlKXtcbiAgICBjaGVja0RvbUlkKGlkKTtcbiAgICAkKGAjJHtpZH1gKS5lbXB0eSgpO1xuICAgIGxldCBwYW5lbHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAncHZhbHVlUGFuZWwnLFxuICAgICAgICAgICAgY2xhc3M6ICdjb2wteHMtMTIgY29sLXNtLTYgY29sLWxnLTInLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICAgICAgICAgIHNlYXJjaDoge1xuICAgICAgICAgICAgICAgIGlkOiAncHZhbHVlTGltaXQnLFxuICAgICAgICAgICAgICAgIHNpemU6IDMsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICctbG9nPHN1Yj4xMDwvc3ViPihwVmFsdWUpPj0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2xpZGVyOiB7XG4gICAgICAgICAgICAgICAgaWQ6ICdwdmFsdWVTbGlkZXInLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdyYW5nZScsXG4gICAgICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgICAgIG1heDogMjAsXG4gICAgICAgICAgICAgICAgc3RlcDogMSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICduZXNQYW5lbCcsXG4gICAgICAgICAgICBjbGFzczogJ2NvbC14cy0xMiBjb2wtc20tNiBjb2wtbGctMicsXG4gICAgICAgICAgICBmb250U2l6ZTogJzExcHgnLFxuICAgICAgICAgICAgc2VhcmNoOiAge1xuICAgICAgICAgICAgICAgIGlkOiAnbmVzTGltaXQnLFxuICAgICAgICAgICAgICAgIHNpemU6IDMsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdhYnMoTkVTKT49J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNsaWRlcjoge1xuICAgICAgICAgICAgICAgIGlkOiAnbmVzU2xpZGVyJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFuZ2UnLFxuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDEsXG4gICAgICAgICAgICAgICAgc3RlcDogMC4xLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3ZhcmlhbnRQYW5lbCcsXG4gICAgICAgICAgICBmb250U2l6ZTogJzExcHgnLFxuICAgICAgICAgICAgY2xhc3M6ICdjb2wteHMtMTIgY29sLXNtLTYgY29sLWxnLTInLFxuICAgICAgICAgICAgc2VhcmNoOiB7XG4gICAgICAgICAgICAgICAgaWQ6ICd2YXJMb2NhdG9yJyxcbiAgICAgICAgICAgICAgICBzaXplOiAyMCxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1ZhcmlhbnQgbG9jYXRvcicsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICcgIFZhcmlhbnQgb3IgUlMgSUQuLi4gJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgIF07XG4gICAgIC8vIGNyZWF0ZSBlYWNoIHNlYXJjaCBzZWN0aW9uXG4gICAgLy8vLy8vIEFkZCBjdXN0b20gRE9NcyB0aGF0IGFyZSBub3QgZGVmaW5lZCBpbiB0aGUgcGFuZWxzOlxuXG4gICAgLy8gLS0gYWRkIHRoZSBsaW5rIHRvIHRoZSB0aXNzdWUgZmlsdGVyIG1lbnUgaGVyZVxuICAgIGxldCB0aURpdiA9ICQoJzxkaXYvPicpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdjb2wteHMtMTIgY29sLXNtLTYgY29sLWxnLTEnKVxuICAgICAgICAgLmNzcygncGFkZGluZy10b3AnLCAnNHB4JylcbiAgICAgICAgLmNzcygnbWFyZ2luJywgJzFweCcpXG4gICAgICAgIC5jc3MoJ2ZvbnQtc2l6ZScsICcxMnB4JylcbiAgICAgICAgLmFwcGVuZFRvKCQoYCMke2lkfWApKTtcblxuICAgICQoJzxzcGFuLz4nKVxuICAgICAgICAuYXR0cignZGF0YS10b2dnbGUnLCAnbW9kYWwnKVxuICAgICAgICAuYXR0cignZGF0YS10YXJnZXQnLCBgIyR7bW9kYWxJZH1gKSAvLyBiTWFwLW1vZGFsIG11c3QgYmUgZGVmaW5lZCBvbiB0aGUgaHRtbFxuICAgICAgICAuY3NzKCdtYXJnaW4tbGVmdCcsICcycHgnKVxuICAgICAgICAuY3NzKCdwYWRkaW5nLXRvcCcsICcycHgnKVxuICAgICAgICAuY3NzKCdjb2xvcicsICcjMDg2OGFjJylcbiAgICAgICAgLmNzcygnY3Vyc29yJywgJ3BvaW50ZXInKVxuICAgICAgICAuaHRtbCgnPGkgY2xhc3M9XCJmYXMgZmEtZmlsdGVyXCI+PC9pPkZpbHRlciBUaXNzdWVzPGJyLz4nKVxuICAgICAgICAuYXBwZW5kVG8odGlEaXYpO1xuXG4gICAgLy8vLy8vIGVuZCBhZGRpbmcgY3VzdG9tIERPTXNcblxuICAgIC8vIGJ1aWxkIHRoZSB0aXNzdWUgbWVudVxuICAgIGxldCBtb2RhbEJvZHkgPSAgJChgIyR7bW9kYWxJZH1gKS5maW5kKCcubW9kYWwtYm9keScpO1xuICAgIGlmKCQoYCMke21vZGFsSWR9YCkuZmluZChcIjppbnB1dFwiKS5sZW5ndGggPT0gMCl7XG4gICAgICAgIC8vIGlmIHRoZSBtZW51IGlzIGVtcHR5XG4gICAgICAgIGJtYXAueVNjYWxlLmRvbWFpbigpLmZvckVhY2goKHkpPT57IC8vIGNyZWF0ZSBhIG1lbnUgaXRlbSBmb3IgZWFjaCB0aXNzdWVcbiAgICAgICAgICAgIGxldCB4ID0gJCgnPGxhYmVsLz4nKTtcbiAgICAgICAgICAgICQoJzxpbnB1dC8+JylcbiAgICAgICAgICAgICAgICAuYXR0cigndmFsdWUnLCB5KVxuICAgICAgICAgICAgICAgIC5hdHRyKCd0eXBlJywgJ2NoZWNrYm94JylcbiAgICAgICAgICAgICAgICAucHJvcCgnY2hlY2tlZCcsIHRydWUpXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKHgpO1xuICAgICAgICAgICAgJCgnPHNwYW4vPicpXG4gICAgICAgICAgICAgICAgLmNzcygnZm9udC1zaXplJywgJzEycHgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ21hcmdpbi1sZWZ0JywgJzJweCcpXG4gICAgICAgICAgICAgICAgLmh0bWwodGlzc3VlU2l0ZVRhYmxlW3ldLnRpc3N1ZVNpdGVEZXRhaWwpXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKHgpO1xuICAgICAgICAgICAgeC5hcHBlbmRUbyhtb2RhbEJvZHkpO1xuICAgICAgICAgICAgJCgnPGJyLz4nKS5hcHBlbmRUbyhtb2RhbEJvZHkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8vIEFkZCBhbGwgb3RoZXIgZVFUTCBmaWx0ZXIgcGFuZWxzXG4gICAgcGFuZWxCdWlsZGVyKHBhbmVscywgaWQpO1xuXG4gICAgLy8gLS0gYWRkIHRoZSBSUyBJRCBvcHRpb24gaGVyZVxuICAgIGxldCByc0RpdiA9ICQoJzxkaXYvPicpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdjb2wteHMtMTIgY29sLXNtLTYgY29sLWxnLTEnKVxuICAgICAgICAuY3NzKCdwYWRkaW5nLXRvcCcsICcycHgnKVxuICAgICAgICAuY3NzKCdtYXJnaW4nLCAnMXB4JylcbiAgICAgICAgLmNzcygnZm9udC1zaXplJywgJzEycHgnKVxuICAgICAgICAuYXBwZW5kVG8oJChgIyR7aWR9YCkpO1xuICAgIGxldCByYWRpb0J1dHRvbiA9ICQoJzxpbnB1dC8+JylcbiAgICAgICAgLmF0dHIoJ2lkJywgJ3JzU3dpdGNoJylcbiAgICAgICAgLmF0dHIoJ3R5cGUnLCAnY2hlY2tib3gnKVxuICAgICAgICAuY3NzKCdtYXJnaW4tbGVmdCcsICcxMHB4JylcbiAgICAgICAgLmFwcGVuZFRvKHJzRGl2KTtcbiAgICAkKCc8bGFiZWwvPicpXG4gICAgICAgIC5jc3MoJ21hcmdpbi1sZWZ0JywgJzJweCcpXG4gICAgICAgIC5jc3MoJ3BhZGRpbmctdG9wJywgJzJweCcpXG4gICAgICAgIC5jc3MoJ2ZvbnQtc2l6ZScsICcxMXB4JylcbiAgICAgICAgLmh0bWwoJ1VzZSBSUyBJRCcpXG4gICAgICAgIC5hcHBlbmRUbyhyc0Rpdik7XG5cbiAgICAvLy8vLy8gZGVmaW5lIHRoZSBmaWx0ZXIgZXZlbnRzXG4gICAgbGV0IG1pblAgPSAwO1xuICAgIGxldCBtaW5OZXMgPSAwO1xuICAgIGxldCBtaW5MZCA9IDA7XG4gICAgbGV0IGZvY3VzRyA9IGJtYXBTdmcuc2VsZWN0KFwiI2ZvY3VzR1wiKTtcbiAgICBsZXQgbWluaUcgPSBibWFwU3ZnLnNlbGVjdChcIiNtaW5pR1wiKTtcbiAgICBjb25zdCB1cGRhdGVCdWJibGVzID0gKCk9PntcbiAgICAgICAgZm9jdXNHLnNlbGVjdEFsbCgnLmJ1YmJsZS1tYXAtY2VsbCcpXG4gICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAoZCk9PntcbiAgICAgICAgICAgICAgICBpZiAoZC5yIDwgbWluUCkgcmV0dXJuIFwiI2ZmZlwiO1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhkLnZhbHVlKSA8IG1pbk5lcykgcmV0dXJuIFwiI2ZmZlwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBibWFwLmNvbG9yU2NhbGUoZC52YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbGV0IGNvdW50cyA9IDA7XG4gICAgICAgIG1pbmlHLnNlbGVjdEFsbCgnLm1pbmktbWFwLWNlbGwnKVxuICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgKGQpPT57XG4gICAgICAgICAgICAgICAgaWYgKGQuciA8IG1pblApIHJldHVybiBcIiNmZmZcIjtcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZC52YWx1ZSkgPCBtaW5OZXMpIHJldHVybiBcIiNmZmZcIjtcbiAgICAgICAgICAgICAgICBjb3VudHMgKz0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYm1hcC5jb2xvclNjYWxlKGQudmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICQoYCMke2luZm9JZH1gKS50ZXh0KGBUb3RhbCBlUVRMIGNvdW50czogJHtjb3VudHN9YClcbiAgICB9O1xuXG4gICAgLy8tLS0tIHAtdmFsdWUgZmlsdGVyIGV2ZW50c1xuICAgICQoJyNwdmFsdWVMaW1pdCcpLmtleWRvd24oKGUpPT57XG4gICAgICAgIGlmKGUua2V5Q29kZSA9PSAxMyl7XG4gICAgICAgICAgICBtaW5QID0gcGFyc2VGbG9hdCgkKCcjcHZhbHVlTGltaXQnKS52YWwoKSk7XG4gICAgICAgICAgICB1cGRhdGVCdWJibGVzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoJyNwdmFsdWVTbGlkZXInKS5vbignY2hhbmdlIG1vdXNlbW92ZScsICgpPT57XG4gICAgICAgIGxldCB2ID0gJCgnI3B2YWx1ZVNsaWRlcicpLnZhbCgpO1xuICAgICAgICAkKCcjcHZhbHVlTGltaXQnKS52YWwodik7XG4gICAgICAgIG1pblAgPSB2O1xuICAgICAgICB1cGRhdGVCdWJibGVzKCk7XG4gICAgfSk7XG5cbiAgICAvLy0tLS0gbmVzIGZpbHRlciBldmVudHNcbiAgICAkKCcjbmVzTGltaXQnKS5rZXlkb3duKChlKT0+e1xuICAgICAgICBpZihlLmtleUNvZGUgPT0gMTMpe1xuICAgICAgICAgICAgbWluTmVzID0gcGFyc2VGbG9hdCgkKCcjbmVzTGltaXQnKS52YWwoKSk7XG4gICAgICAgICAgICB1cGRhdGVCdWJibGVzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoJyNuZXNTbGlkZXInKS5vbignY2hhbmdlIG1vdXNlbW92ZScsICgpPT57XG4gICAgICAgIGxldCB2ID0gJCgnI25lc1NsaWRlcicpLnZhbCgpO1xuICAgICAgICAkKCcjbmVzTGltaXQnKS52YWwodik7XG4gICAgICAgIG1pbk5lcyA9IHY7XG4gICAgICAgIHVwZGF0ZUJ1YmJsZXMoKTtcbiAgICB9KTtcblxuICAgIG1pbmlHLnNlbGVjdEFsbCgnLm1pbmktbWFya2VyJylcbiAgICAgICAgLmRhdGEoYm1hcC54U2NhbGVNaW5pLmRvbWFpbigpKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLmNsYXNzZWQoJ21pbmktbWFya2VyJywgdHJ1ZSlcbiAgICAgICAgLmF0dHIoJ3gnLCAoZCk9PmJtYXAueFNjYWxlTWluaShkKSlcbiAgICAgICAgLmF0dHIoJ3knLCBibWFwLnlTY2FsZU1pbmkucmFuZ2UoKVsxXSlcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgYm1hcC54U2NhbGVNaW5pLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgYm1hcC55U2NhbGVNaW5pLmJhbmR3aWR0aCgpKTtcblxuICAgICQoJyN2YXJMb2NhdG9yJykua2V5dXAoKGUpPT57XG4gICAgICAgIGxldCB2ID0gJCgnI3ZhckxvY2F0b3InKS52YWwoKTtcbiAgICAgICAgaWYgKHYubGVuZ3RoID4zKXtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCh2KTtcbiAgICAgICAgICAgIGZvY3VzRy5zZWxlY3RBbGwoJy5idWJibGUtbWFwLXhsYWJlbCcpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ3F1ZXJ5JywgKGQpPT57XG4gICAgICAgICAgICAgICAgICAgIHZhciBib29sID0gcmVnZXgudGVzdChkKXx8cmVnZXgudGVzdChibWFwLnJzTG9va1VwW2RdKXx8cmVnZXgudGVzdChibWFwLnZhckxvb2tVcFtkXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBib29sO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtaW5pRy5zZWxlY3RBbGwoJy5taW5pLW1hcmtlcicpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgKGQpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdleC50ZXN0KGQpfHxyZWdleC50ZXN0KGJtYXAucnNMb29rVXBbZF0pfHxyZWdleC50ZXN0KGJtYXAudmFyTG9va1VwW2RdKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9jdXNHLnNlbGVjdEFsbCgnLmJ1YmJsZS1tYXAteGxhYmVsJylcbiAgICAgICAgICAgICAgICAuY2xhc3NlZCgncXVlcnknLCBmYWxzZSk7XG4gICAgICAgICAgICBtaW5pRy5zZWxlY3RBbGwoJy5taW5pLW1hcmtlcicpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIC8vIHJzSWRcbiAgICAkKCcjcnNTd2l0Y2gnKS5jaGFuZ2UoKCk9PntcbiAgICAgICAgaWYgKCAkKCcjcnNTd2l0Y2gnKS5pcygnOmNoZWNrZWQnKSApIHtcbiAgICAgICAgICAgIGZvY3VzRy5zZWxlY3RBbGwoJy5idWJibGUtbWFwLXhsYWJlbCcpXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpPT5ibWFwLnJzTG9va1VwW2RdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvY3VzRy5zZWxlY3RBbGwoJy5idWJibGUtbWFwLXhsYWJlbCcpXG4gICAgICAgICAgICAgICAgLnRleHQoKGQpPT5ibWFwLnZhckxvb2tVcFtkXSk7XG4gICAgICAgIH1cblxuICAgIH0pO1xufVxuXG4vKipcbiAqIFJlbmRlciB0aGUgTEQgcmVsYXRlZCBmaWx0ZXJzXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIDxkaXY+IElEIGZvciByZW5kZXJpbmcgdGhlIGZpbHRlcnNcbiAqIEBwYXJhbSBsZE1hcCB7SGFsZk1hcH0gb2YgdGhlIExEXG4gKiBAcGFyYW0gbGRDYW52YXMge0QzfSBjYW52YXMgb2JqZWN0IG9mIHRoZSBMRFxuICogQHBhcmFtIGxkRyB7RDN9IHRoZSA8Zz4gb2YgdGhlIExEXG4gKiBAcGFyYW0gbGRDb25maWcge09iamVjdH0gb2YgdGhlIGxkIGNvbmZpZ1xuICovXG5mdW5jdGlvbiByZW5kZXJMREZpbHRlcnMoaWQsIGxkTWFwLCBsZENhbnZhcywgbGRHLCBsZENvbmZpZyl7XG4gICAgY2hlY2tEb21JZChpZCk7XG4gICAgbGV0IHBhbmVscyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdsZFBhbmVsJyxcbiAgICAgICAgICAgIGNsYXNzOiAnY29sLXhzLTEyIGNvbC1zbS02IGNvbC1sZy0yJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgICAgICBzZWFyY2g6ICB7XG4gICAgICAgICAgICAgICAgaWQ6ICdsZExpbWl0JyxcbiAgICAgICAgICAgICAgICBzaXplOiAzLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnTEQgY3V0b2ZmIFI8c3VwPjI8L3N1cD4+PSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbGlkZXI6IHtcbiAgICAgICAgICAgICAgICBpZDogJ2xkU2xpZGVyJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFuZ2UnLFxuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBtYXg6IDEsXG4gICAgICAgICAgICAgICAgc3RlcDogMC4xLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgXTtcbiAgICBwYW5lbEJ1aWxkZXIocGFuZWxzLCBpZCk7XG5cbiAgICAvLyBkZWZpbmUgdGhlIGZpbHRlciBldmVudHM6XG4gICAgbGV0IG1pbkxkID0gMDtcblxuICAgIGNvbnN0IHVwZGF0ZUxEID0gKCk9PntcbiAgICAgICAgbGRNYXAuZmlsdGVyZWREYXRhID0gbGRNYXAuX2ZpbHRlcihsZE1hcC5kYXRhLCBtaW5MZCk7XG4gICAgICAgIGxkRy5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICBsZE1hcC5kcmF3KGxkQ2FudmFzLCBsZEcsIGxkQ29uZmlnLCBbMCwxXSwgZmFsc2UsIHVuZGVmaW5lZClcbiAgICB9O1xuICAgICAvLy0tLS0gTEQgZmlsdGVyIGV2ZW50c1xuICAgICQoJyNsZExpbWl0Jykua2V5ZG93bigoZSk9PntcbiAgICAgICAgaWYoZS5rZXlDb2RlID09IDEzKSB7XG4gICAgICAgICAgICBsZXQgdiA9IHBhcnNlRmxvYXQoJCgnI2xkTGltaXQnKS52YWwoKSk7XG4gICAgICAgICAgICBtaW5MZCA9IHY7XG4gICAgICAgICAgICB1cGRhdGVMRCgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKCcjbGRTbGlkZXInKS5vbignY2hhbmdlIG1vdXNlbW92ZScsICgpPT57XG4gICAgICAgIGxldCB2ID0gJCgnI2xkU2xpZGVyJykudmFsKCk7XG4gICAgICAgICQoJyNsZExpbWl0JykudmFsKHYpO1xuICAgICAgICBtaW5MZCA9IHY7XG4gICAgICAgIHVwZGF0ZUxEKCk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogQnVpbGQgdGhlIGh0bWwgZmlsdGVyIHBhbmVsc1xuICogQHBhcmFtIHBhbmVscyB7TGlzdH0gb2YgcGFuZWxzXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gb2YgdGhlIDxkaXY+IHRvIHJlbmRlciB0aGUgcGFuZWxzXG4gKi9cbmZ1bmN0aW9uIHBhbmVsQnVpbGRlcihwYW5lbHMsIGlkKXtcblxuICAgIHBhbmVscy5mb3JFYWNoKChwLCBpKT0+e1xuICAgICAgICBpZiAoJChgIyR7cC5pZH1gKS5sZW5ndGggPT0gMCkgeyAvLyBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3QgaW4gSFRNTCBkb2N1bWVudCwgdGhlbiBjcmVhdGUgaXRcbiAgICAgICAgICAgIGxldCBkaXYgPSAkKCc8ZGl2Lz4nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIHAuaWQpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgcC5jbGFzcylcbiAgICAgICAgICAgICAgICAuY3NzKCdmb250LXNpemUnLCBwLmZvbnRTaXplKVxuICAgICAgICAgICAgICAgIC5jc3MoJ21hcmdpbicsICcxcHgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ3BhZGRpbmctdG9wJywgJzJweCcpXG4gICAgICAgICAgICAgICAgLy8gLmNzcyhcIndoaXRlLXNwYWNlXCIsIFwibm93cmFwXCIpXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKCQoYCMke2lkfWApKTtcbiAgICAgICAgICAgIGRpdi5hZGRDbGFzcyhwLmNsYXNzKTtcblxuICAgICAgICAgICAgLy8gYWRkIHRoZSBzZWFyY2ggYm94XG4gICAgICAgICAgICAkKCc8bGFiZWwvPicpXG4gICAgICAgICAgICAgICAgLmNzcygnZm9udC13ZWlnaHQnLCAnbm9ybWFsJylcbiAgICAgICAgICAgICAgICAuaHRtbChwLnNlYXJjaC5sYWJlbClcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oZGl2KTtcblxuICAgICAgICAgICAgbGV0IGlucHV0ID0gJCgnPGlucHV0Lz4nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsIHAuc2VhcmNoLmlkKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd2YWx1ZScsIHAuc2VhcmNoLnZhbHVlKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplJywgcC5zZWFyY2guc2l6ZSlcbiAgICAgICAgICAgICAgICAuYXR0cigncGxhY2Vob2xkZXInLCBwLnNlYXJjaC5wbGFjZWhvbGRlcilcbiAgICAgICAgICAgICAgICAuY3NzKCdtYXJnaW4tbGVmdCcsICcycHgnKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhkaXYpO1xuXG4gICAgICAgICAgICAvLyBhZGQgdGhlIHNsaWRlciBpZiBkZWZpbmVkXG4gICAgICAgICAgICBpZiAocC5zbGlkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICQoJzxpbnB1dC8+JylcbiAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBwLnNsaWRlci5pZClcbiAgICAgICAgICAgICAgICAuYXR0cigndmFsdWUnLCBwLnNsaWRlci52YWx1ZSlcbiAgICAgICAgICAgICAgICAuYXR0cigndHlwZScsIHAuc2xpZGVyLnR5cGUpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ21pbicsIHAuc2xpZGVyLm1pbilcbiAgICAgICAgICAgICAgICAuYXR0cignbWF4JywgcC5zbGlkZXIubWF4KVxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdGVwJywgcC5zbGlkZXIuc3RlcClcbiAgICAgICAgICAgICAgICAuY3NzKCdtYXJnaW4tbGVmdCcsICcwcHgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgJzEwMHB4JylcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oZGl2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBhZGQgdGhlIG5ldyBlbGVtZW50IHRvIHRoZSBkYXNoYm9hcmRcbiAgICB9KTtcbn1cblxuIC8vIHRvZG8gcmVwb3J0IHAtdmFsdWVcbmZ1bmN0aW9uIGFkZEJ1YmJsZUNsaWNrRXZlbnQoYm1hcCwgYm1hcFN2ZywgcGFyKSB7XG4gICAgbGV0IGRpYWxvZ0RpdklkID0gcGFyLmlkICsgXCJ2aW9saW4tZGlhbG9nXCI7XG4gICAgY3JlYXRlRGlhbG9nKHBhci5kaXZEYXNoYm9hcmQsIHBhci5pZCArIFwidmlvbGluLWRpYWxvZ1wiLCBcImVRVEwgVmlvbGluIFBsb3QgRGlhbG9nXCIpO1xuICAgIGJtYXBTdmcuc2VsZWN0QWxsKCcuYnViYmxlLW1hcC1jZWxsJylcbiAgICAgICAgLm9uKFwiY2xpY2tcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICQoYCMke2RpYWxvZ0RpdklkfWApLmRpYWxvZygnb3BlbicpO1xuICAgICAgICAgICAgbGV0IHBsb3QgPSAkKCc8ZGl2Lz4nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdiTWFwLWRpYWxvZycpXG4gICAgICAgICAgICAgICAgLmNzcygnZmxvYXQnLCAnbGVmdCcpXG4gICAgICAgICAgICAgICAgLmNzcygnbWFyZ2luJywgJzIwcHgnKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbygkKGAjYk1hcC1jb250ZW50YCkpO1xuXG4gICAgICAgICAgICAvLyBhZGQgYSBoZWFkZXIgc2VjdGlvblxuICAgICAgICAgICAgbGV0IGhlYWQgPSAkKCc8ZGl2Lz4nKS5hcHBlbmRUbyhwbG90KTtcbiAgICAgICAgICAgIC8vIGFkZCBhIHdpbmRvdy1jbG9zZSBpY29uXG4gICAgICAgICAgICAkKCc8aS8+JykuYXR0cignY2xhc3MnLCAnZmEgZmEtd2luZG93LWNsb3NlJylcbiAgICAgICAgICAgICAgICAuY3NzKCdtYXJnaW4tcmlnaHQnLCAnMnB4JylcbiAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBwbG90LnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oaGVhZCk7XG5cbiAgICAgICAgICAgICQoJzxzcGFuLz4nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0aXRsZScpXG4gICAgICAgICAgICAgICAgLmh0bWwoYCR7ZC5kaXNwbGF5WH08YnIvPiR7ZC5kaXNwbGF5WX1gKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhoZWFkKTtcblxuICAgICAgICAgICAgLy8gYWRkIHRoZSB2aW9saW4gcGxvdFxuICAgICAgICAgICAgbGV0IGlkID0gXCJkRXF0bFwiICsgRGF0ZS5ub3coKS50b1N0cmluZygpOyAvLyByYW5kb20gSUQgZ2VuZXJhdG9yXG4gICAgICAgICAgICAkKCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIGlkKS5hcHBlbmRUbyhwbG90KTtcblxuICAgICAgICAgICAgbGV0IHZDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZCwgLy8gdGhpcyB3b3VsZCBiZSBhc3NpZ25lZCBieSB0aGUgZXF0bCB2aW9saW4gZnVuY3Rpb25cbiAgICAgICAgICAgICAgICB3aWR0aDogMjUwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjAwLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDUwLFxuICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAyMCxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IDIwLFxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogNTAsXG4gICAgICAgICAgICAgICAgc2hvd0RpdmlkZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHhQYWRkaW5nOiAwLjMsXG4gICAgICAgICAgICAgICAgeUxhYmVsOiBcIk5vcm0uIEV4cHJlc3Npb25cIixcbiAgICAgICAgICAgICAgICBzaG93U3ViWDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93WDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc3ViWEFuZ2xlOiAwLFxuICAgICAgICAgICAgICAgIHhBbmdsZTogMCxcbiAgICAgICAgICAgICAgICBzaG93V2hpc2tlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0xlZ2VuZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1NhbXBsZVNpemU6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBlcXRsVmlvbGluUGxvdFJlbmRlcih2Q29uZmlnLCBkLmdlbmNvZGVJZCwgZC52YXJpYW50SWQsIGQudGlzc3VlU2l0ZURldGFpbElkLCBkLmRpc3BsYXlZLCBibWFwLnVybHMpXG5cbiAgICAgICAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGlhbG9nIHBvcHVwIHdpbmRvdyBmb3IgdGhlIGVRVEwgdmlvbGluIHBsb3RzXG4gKiBAcGFyYW0gcGFyZW50RGl2SWQge1N0cmluZ30gd2hlcmUgdG8gY3JlYXRlIHRoZSBkaWFsb2dcbiAqIEBwYXJhbSBkaWFsb2dEaXZJZCB7U3RyaW5nfVxuICogQHBhcmFtIHRpdGxlIHtTdHJpbmd9IHRoZSB0aXRsZSBvZiB0aGUgZGlhbG9nIHdpbmRvd1xuICovXG5mdW5jdGlvbiAgY3JlYXRlRGlhbG9nKHBhcmVudERpdklkLCBkaWFsb2dEaXZJZCwgdGl0bGUpe1xuICAgICAvLyBqcXVlcnkgVUkgZGlhbG9nXG4gICAgY2hlY2tEb21JZChwYXJlbnREaXZJZCk7XG4gICAgbGV0IHBhcmVudCA9ICQoYCMke3BhcmVudERpdklkfWApO1xuICAgIGxldCBkaWFsb2cgPSAkKCc8ZGl2Lz4nKVxuICAgICAgICAuYXR0cignaWQnLCBkaWFsb2dEaXZJZClcbiAgICAgICAgLmF0dHIoJ3RpdGxlJywgdGl0bGUpXG4gICAgICAgIC5hcHBlbmRUbyhwYXJlbnQpO1xuICAgIGxldCBjbGVhckRpdiA9ICQoJzxkaXYvPicpXG4gICAgICAgIC8vIC5hdHRyKCdjbGFzcycsICdiTWFwLWNsZWFyJylcbiAgICAgICAgLmh0bWwoXCJDbGVhciBBbGxcIilcbiAgICAgICAgLmFwcGVuZFRvKGRpYWxvZyk7XG4gICAgbGV0IGNvbnRlbnREaXYgPSAkKCc8ZGl2Lz4nKVxuICAgICAgICAuYXR0cignaWQnLCAnYk1hcC1jb250ZW50JylcbiAgICAgICAgLy8gLmF0dHIoJ2NsYXNzJywgJ2JNYXAtY29udGVudCcpXG4gICAgICAgIC5hcHBlbmRUbyhkaWFsb2cpO1xuICAgIGRpYWxvZy5kaWFsb2coe1xuICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgIGF1dG9PcGVuOiBmYWxzZVxuICAgIH0pO1xuICAgIGNsZWFyRGl2LmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnRlbnREaXYuZW1wdHkoKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHZhciBHZW5lRXF0bFZpc3VhbGl6ZXIgPSB7XG4gICAgcmVuZGVyOiByZW5kZXJcbn07XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyZXNob2xkKCkge1xuICB2YXIgZG9tYWluID0gWzAuNV0sXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHVua25vd24sXG4gICAgICBuID0gMTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPD0geCA/IHJhbmdlW2Jpc2VjdChkb21haW4sIHgsIDAsIG4pXSA6IHVua25vd247XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gc2xpY2UuY2FsbChfKSwgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCAtIDEpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhyZXNob2xkKClcbiAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtzZWxlY3RvciA9PSBudWxsID8gW10gOiBzZWxlY3Rvcl0sIHJvb3QpO1xufVxuIl0sIm5hbWVzIjpbIkVPTCIsIkVPRiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIm1hcCIsIm5hbWUiLCJpIiwiSlNPTiIsInN0cmluZ2lmeSIsImpvaW4iLCJpbmZlckNvbHVtbnMiLCJyb3dzIiwiY29sdW1uU2V0IiwiT2JqZWN0IiwiY3JlYXRlIiwiZm9yRWFjaCIsInJvdyIsImNvbHVtbiIsInB1c2giLCJwYWQiLCJ2YWx1ZSIsIndpZHRoIiwicyIsImxlbmd0aCIsIkFycmF5IiwiZm9ybWF0RGF0ZSIsImRhdGUiLCJob3VycyIsImdldFVUQ0hvdXJzIiwibWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJzZWNvbmRzIiwiZ2V0VVRDU2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImlzTmFOIiwieWVhciIsImZvcm1hdFllYXIiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImRlbGltaXRlciIsInJlRm9ybWF0IiwiUmVnRXhwIiwiREVMSU1JVEVSIiwiY2hhckNvZGVBdCIsInBhcnNlUm93cyIsInRleHQiLCJmIiwidCIsIk4iLCJJIiwibiIsImVvZiIsImVvbCIsInRva2VuIiwiYyIsImoiLCJzbGljZSIsInJlcGxhY2UiLCJwcmVmb3JtYXRCb2R5IiwiZm9ybWF0VmFsdWUiLCJmb3JtYXRSb3ciLCJEYXRlIiwidGVzdCIsInBhcnNlIiwiY29udmVydCIsIm9iamVjdCIsImN1c3RvbUNvbnZlcnRlciIsImZvcm1hdCIsImNvbmNhdCIsImZvcm1hdEJvZHkiLCJmb3JtYXRSb3dzIiwiZHN2IiwiZ2V0SG91cnMiLCJyZXNwb25zZUpzb24iLCJyZXNwb25zZSIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwianNvbiIsImlucHV0IiwiaW5pdCIsImZldGNoIiwidGhlbiIsIm5vb3AiLCJkaXNwYXRjaCIsImFyZ3VtZW50cyIsIl8iLCJEaXNwYXRjaCIsInRoaXMiLCJwYXJzZVR5cGVuYW1lcyIsInR5cGVuYW1lcyIsInR5cGVzIiwidHJpbSIsInNwbGl0IiwiaW5kZXhPZiIsImhhc093blByb3BlcnR5IiwidHlwZSIsImdldCIsInNldCIsImNhbGxiYWNrIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJvbiIsInR5cGVuYW1lIiwiVCIsImNvcHkiLCJjYWxsIiwidGhhdCIsImFyZ3MiLCJhcHBseSIsInhodG1sIiwic3ZnIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsInByZWZpeCIsIm5hbWVzcGFjZXMiLCJzcGFjZSIsImxvY2FsIiwiY3JlYXRvckluaGVyaXQiLCJkb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJ1cmkiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRvckZpeGVkIiwiZnVsbG5hbWUiLCJuYW1lc3BhY2UiLCJub25lIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiZW1wdHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWF0Y2hlcyIsInVwZGF0ZSIsIkVudGVyTm9kZSIsInBhcmVudCIsImRhdHVtIiwiX25leHQiLCJfcGFyZW50IiwiX19kYXRhX18iLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsImJpbmRJbmRleCIsImdyb3VwIiwiZW50ZXIiLCJleGl0IiwiZGF0YSIsIm5vZGUiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsImtleVZhbHVlcyIsImFzY2VuZGluZyIsImEiLCJiIiwiTmFOIiwiYXR0clJlbW92ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImF0dHJSZW1vdmVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYXR0ckNvbnN0YW50Iiwic2V0QXR0cmlidXRlIiwiYXR0ckNvbnN0YW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImF0dHJGdW5jdGlvbiIsInYiLCJhdHRyRnVuY3Rpb25OUyIsImRlZmF1bHRWaWV3Iiwic3R5bGVSZW1vdmUiLCJzdHlsZSIsInJlbW92ZVByb3BlcnR5Iiwic3R5bGVDb25zdGFudCIsInByaW9yaXR5Iiwic2V0UHJvcGVydHkiLCJzdHlsZUZ1bmN0aW9uIiwic3R5bGVWYWx1ZSIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRDb21wdXRlZFN0eWxlIiwicHJvcGVydHlSZW1vdmUiLCJwcm9wZXJ0eUNvbnN0YW50IiwicHJvcGVydHlGdW5jdGlvbiIsImNsYXNzQXJyYXkiLCJzdHJpbmciLCJjbGFzc0xpc3QiLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsImdldEF0dHJpYnV0ZSIsImNsYXNzZWRBZGQiLCJuYW1lcyIsImxpc3QiLCJhZGQiLCJjbGFzc2VkUmVtb3ZlIiwicmVtb3ZlIiwiY2xhc3NlZFRydWUiLCJjbGFzc2VkRmFsc2UiLCJjbGFzc2VkRnVuY3Rpb24iLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnRlbnQiLCJ0ZXh0Q29uc3RhbnQiLCJ0ZXh0RnVuY3Rpb24iLCJodG1sUmVtb3ZlIiwiaW5uZXJIVE1MIiwiaHRtbENvbnN0YW50IiwiaHRtbEZ1bmN0aW9uIiwicmFpc2UiLCJuZXh0U2libGluZyIsInBhcmVudE5vZGUiLCJsb3dlciIsInByZXZpb3VzU2libGluZyIsImZpcnN0Q2hpbGQiLCJjb25zdGFudE51bGwiLCJyZW1vdmVDaGlsZCIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZSIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJzcGxpY2UiLCJjb250YWlucyIsImZpbHRlckV2ZW50cyIsImV2ZW50IiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiY29udGV4dExpc3RlbmVyIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwiX19vbiIsIm8iLCJtIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhcHR1cmUiLCJvbkFkZCIsIndyYXAiLCJkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJwYXJhbXMiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJkaXNwYXRjaENvbnN0YW50IiwiZGlzcGF0Y2hGdW5jdGlvbiIsInJvb3QiLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0aW9uIiwic291cmNlIiwiY3VycmVudCIsInNvdXJjZUV2ZW50Iiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJwb2ludCIsIngiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJtYXRyaXhUcmFuc2Zvcm0iLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJjbGllbnRMZWZ0IiwidG9wIiwiY2xpZW50VG9wIiwiY2hhbmdlZFRvdWNoZXMiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInZpZXciLCJzZWxlY3QiLCJub2V2ZW50IiwiX19ub3NlbGVjdCIsIk1velVzZXJTZWxlY3QiLCJ5ZXNkcmFnIiwibm9jbGljayIsInNldFRpbWVvdXQiLCJmYWN0b3J5IiwiZXh0ZW5kIiwiZGVmaW5pdGlvbiIsIkNvbG9yIiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwic2VsZWN0QWxsIiwic2VsZWN0b3JBbGwiLCJmaWx0ZXIiLCJtYXRjaCIsIm1hdGNoZXIiLCJzaXplIiwiZWFjaCIsImJpbmQiLCJjb25zdGFudCIsImVudGVyR3JvdXAiLCJ1cGRhdGVHcm91cCIsInByZXZpb3VzIiwiaTAiLCJpMSIsIl9lbnRlciIsIl9leGl0Iiwic3BhcnNlIiwib25lbnRlciIsIm9udXBkYXRlIiwib25leGl0IiwiYXBwZW5kIiwibWVyZ2UiLCJvcmRlciIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtMSIsIk1hdGgiLCJtaW4iLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJzb3J0IiwiY29tcGFyZSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsIm5vZGVzIiwiYXR0ciIsImdldEF0dHJpYnV0ZU5TIiwicHJvcGVydHkiLCJjbGFzc2VkIiwiaHRtbCIsImNyZWF0b3IiLCJpbnNlcnQiLCJiZWZvcmUiLCJkZWVwIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgiLCJyZVJnYkludGVnZXIiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3JfZm9ybWF0SGV4IiwicmdiIiwiZm9ybWF0SGV4IiwiY29sb3JfZm9ybWF0UmdiIiwiZm9ybWF0UmdiIiwiY29sb3IiLCJsIiwidG9Mb3dlckNhc2UiLCJleGVjIiwicGFyc2VJbnQiLCJyZ2JuIiwiUmdiIiwicmdiYSIsImhzbGEiLCJyIiwiZyIsInJnYkNvbnZlcnQiLCJvcGFjaXR5IiwicmdiX2Zvcm1hdEhleCIsImhleCIsInJnYl9mb3JtYXRSZ2IiLCJtYXgiLCJyb3VuZCIsInRvU3RyaW5nIiwiaCIsIkhzbCIsImhzbENvbnZlcnQiLCJoc2wycmdiIiwibTIiLCJkZWZpbmUiLCJjaGFubmVscyIsImFzc2lnbiIsImRpc3BsYXlhYmxlIiwiZm9ybWF0SHNsIiwiYnJpZ2h0ZXIiLCJrIiwicG93IiwiZGFya2VyIiwiZGVnMnJhZCIsIlBJIiwicmFkMmRlZyIsInQxIiwidDIiLCJsYWJDb252ZXJ0IiwiTGFiIiwiSGNsIiwiaGNsMmxhYiIsInoiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJoY2xDb252ZXJ0IiwiYXRhbjIiLCJzcXJ0IiwiY29zIiwic2luIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJFRCIsIkVCIiwiQkNfREEiLCJjdWJlaGVsaXhDb252ZXJ0IiwiQ3ViZWhlbGl4IiwiYmwiLCJjdWJlaGVsaXgiLCJsaW5lYXIiLCJnYW1tYSIsIm5vZ2FtbWEiLCJleHBvbmVudGlhbCIsImNvc2giLCJzaW5oIiwicmdiR2FtbWEiLCJzdGFydCIsImVuZCIsImNvbG9yUmdiIiwic3BsaW5lIiwicmdiQmFzaXMiLCJ2YWx1ZXMiLCJmbG9vciIsInYxIiwidjIiLCJ2MCIsInYzIiwidDMiLCJiYXNpcyIsImNvbG9ycyIsImdlbmVyaWNBcnJheSIsIm5iIiwibmEiLCJzZXRUaW1lIiwicmVBIiwicmVCIiwiYW0iLCJibSIsImJzIiwiYmkiLCJsYXN0SW5kZXgiLCJxIiwibnVtYmVyIiwib25lIiwiemVybyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiRGF0YVZpZXciLCJpc051bWJlckFycmF5IiwibnVtYmVyQXJyYXkiLCJpc0FycmF5IiwidmFsdWVPZiIsImNzc05vZGUiLCJjc3NSb290IiwiY3NzVmlldyIsInN2Z05vZGUiLCJkZWdyZWVzIiwiaWRlbnRpdHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZSIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsInNjYWxlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MiLCJ0cmFuc2Zvcm0iLCJkZWNvbXBvc2UiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsImh1ZSIsImN1YmVoZWxpeEdhbW1hIiwiY29sb3JDdWJlaGVsaXgiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiY3ViZWhlbGl4TG9uZyIsImZyYW1lIiwidGltZW91dCIsImludGVydmFsIiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93Iiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJ0aW1lIiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwidDAiLCJJbmZpbml0eSIsInNsZWVwIiwibmFwIiwicG9rZSIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImVsYXBzZWQiLCJzdG9wIiwiVHlwZUVycm9yIiwiZW1wdHlPbiIsImVtcHR5VHdlZW4iLCJpZCIsInRpbWluZyIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsInNlbGYiLCJ0d2VlbiIsInN0YXRlIiwidGljayIsImR1cmF0aW9uIiwiZWFzZSIsInNjaGVkdWxlIiwiYWN0aXZlIiwidHdlZW5SZW1vdmUiLCJ0d2VlbjAiLCJ0d2VlbjEiLCJ0d2VlbkZ1bmN0aW9uIiwidHdlZW5WYWx1ZSIsInRyYW5zaXRpb24iLCJfaWQiLCJpbnRlcnBvbGF0ZU51bWJlciIsImludGVycG9sYXRlUmdiIiwiaW50ZXJwb2xhdGVTdHJpbmciLCJpbnRlcnBvbGF0ZSIsInZhbHVlMSIsInN0cmluZzAwIiwiaW50ZXJwb2xhdGUwIiwic3RyaW5nMSIsInN0cmluZzAiLCJzdHJpbmcxMCIsImF0dHJJbnRlcnBvbGF0ZSIsImF0dHJJbnRlcnBvbGF0ZU5TIiwiYXR0clR3ZWVuTlMiLCJfdmFsdWUiLCJhdHRyVHdlZW4iLCJkZWxheUZ1bmN0aW9uIiwiZGVsYXlDb25zdGFudCIsImR1cmF0aW9uRnVuY3Rpb24iLCJkdXJhdGlvbkNvbnN0YW50IiwiZWFzZUNvbnN0YW50Iiwib25GdW5jdGlvbiIsIm9uMCIsIm9uMSIsInNpdCIsImV2ZXJ5Iiwic3R5bGVJbnRlcnBvbGF0ZSIsInN0eWxlVHdlZW4iLCJ0ZXh0SW50ZXJwb2xhdGUiLCJ0ZXh0VHdlZW4iLCJUcmFuc2l0aW9uIiwiX25hbWUiLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJjaGlsZHJlbiIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJzdHlsZU51bGwiLCJsaXN0ZW5lcjAiLCJ1bmRlZmluZWQiLCJzdHlsZU1heWJlUmVtb3ZlIiwicmVtb3ZlRnVuY3Rpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNhbmNlbCIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJ0YXJnZXQiLCJub3Byb3BhZ2F0aW9uIiwiTU9ERV9EUkFHIiwiTU9ERV9TUEFDRSIsIk1PREVfSEFORExFIiwiTU9ERV9DRU5URVIiLCJudW1iZXIxIiwibnVtYmVyMiIsInRvdWNoZXIiLCJpZGVudGlmaWVyIiwidG91Y2hlcyIsInRvdWNoIiwiWCIsImhhbmRsZXMiLCJvdXRwdXQiLCJ4eSIsIlkiLCJYWSIsImN1cnNvcnMiLCJvdmVybGF5IiwidyIsIm53IiwibmUiLCJzZSIsInN3IiwiZmxpcFgiLCJmbGlwWSIsInNpZ25zWCIsInNpZ25zWSIsImRlZmF1bHRGaWx0ZXIiLCJjdHJsS2V5IiwiYnV0dG9uIiwiZGVmYXVsdEV4dGVudCIsImhhc0F0dHJpYnV0ZSIsInZpZXdCb3giLCJoZWlnaHQiLCJkZWZhdWx0VG91Y2hhYmxlIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJfX2JydXNoIiwiZXh0ZW50IiwiYnJ1c2hYIiwiYnJ1c2giLCJkaW0iLCJ0b3VjaGVuZGluZyIsInRvdWNoYWJsZSIsImtleXMiLCJsaXN0ZW5lcnMiLCJoYW5kbGVTaXplIiwiaW5pdGlhbGl6ZSIsImhhbmRsZSIsInJlZHJhdyIsInN0YXJ0ZWQiLCJ0b3VjaG1vdmVkIiwidG91Y2hlbmRlZCIsImVtaXR0ZXIiLCJjbGVhbiIsIkVtaXR0ZXIiLCJ3MCIsIncxIiwibjAiLCJuMSIsImUwIiwiZTEiLCJzMCIsInMxIiwibW92aW5nIiwibG9ja1giLCJsb2NrWSIsIm1vZGUiLCJtZXRhS2V5IiwiYWx0S2V5Iiwic2lnblgiLCJzaWduWSIsIlciLCJTIiwiZHgiLCJkeSIsInNoaWZ0aW5nIiwic2hpZnRLZXkiLCJwb2ludGVyIiwibW91c2UiLCJwb2ludDAiLCJlbWl0IiwiYmVmb3Jlc3RhcnQiLCJtb3ZlZCIsImVuZGVkIiwia2V5ZG93bmVkIiwia2V5dXBwZWQiLCJkcmFnRGlzYWJsZSIsInBvaW50MSIsImFicyIsIm1vdmUiLCJkcmFnRW5hYmxlIiwia2V5Q29kZSIsInNlbGVjdGlvbjAiLCJzZWxlY3Rpb24xIiwiY2xlYXIiLCJzdGFydGluZyIsImN1c3RvbUV2ZW50IiwiQnJ1c2hFdmVudCIsImtleU1vZGlmaWVycyIsImJpc2VjdFJpZ2h0IiwibG8iLCJoaSIsIm1pZCIsInJpZ2h0IiwiYXJyYXkiLCJ2YWx1ZW9mIiwiZGVsdGEiLCJtZWFuIiwic3VtIiwidmFyaWFuY2UiLCJzdGVwIiwiY2VpbCIsInJhbmdlIiwiZTEwIiwiZTUiLCJlMiIsInRpY2tJbmNyZW1lbnQiLCJjb3VudCIsInBvd2VyIiwibG9nIiwiTE4xMCIsImVycm9yIiwicCIsInZhbHVlMCIsIm51bWJlcnMiLCJxdWFudGlsZSIsIk1hcCIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJuZXN0Iiwic29ydEtleXMiLCJkZXB0aCIsImNyZWF0ZVJlc3VsdCIsInNldFJlc3VsdCIsInZhbHVlc0J5S2V5IiwicmVzdWx0IiwiY3JlYXRlT2JqZWN0Iiwic2V0T2JqZWN0IiwiY3JlYXRlTWFwIiwic2V0TWFwIiwiZW50cmllcyIsInNvcnRLZXkiLCJTZXQiLCJoYXMiLCJwcm90byIsImluaXRSYW5nZSIsImRvbWFpbiIsImluaXRJbnRlcnBvbGF0b3IiLCJpbnRlcnBvbGF0b3IiLCJpbXBsaWNpdCIsIm9yZGluYWwiLCJ1bmtub3duIiwiYmFuZCIsImJhbmR3aWR0aCIsIm9yZGluYWxSYW5nZSIsInBhZGRpbmdJbm5lciIsInBhZGRpbmdPdXRlciIsImFsaWduIiwicmVzY2FsZSIsInJldmVyc2UiLCJzZXF1ZW5jZSIsInJhbmdlUm91bmQiLCJwYWRkaW5nIiwidW5pdCIsIm5vcm1hbGl6ZSIsImNsYW1wZXIiLCJiaW1hcCIsImQwIiwiZDEiLCJyMCIsInIxIiwicG9seW1hcCIsImJpc2VjdCIsImNsYW1wIiwidHJhbnNmb3JtZXIiLCJ1bnRyYW5zZm9ybSIsInBpZWNld2lzZSIsImludGVycG9sYXRlVmFsdWUiLCJpbnZlcnQiLCJpbnRlcnBvbGF0ZVJvdW5kIiwidSIsImNvbnRpbnVvdXMiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJmb3JtYXREZWNpbWFsIiwicHJlZml4RXhwb25lbnQiLCJyZSIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIkZvcm1hdFNwZWNpZmllciIsImZpbGwiLCJzaWduIiwic3ltYm9sIiwiY29tbWEiLCJwcmVjaXNpb24iLCJleHBvbmVudCIsIiUiLCJ0b0ZpeGVkIiwidG9QcmVjaXNpb24iLCJmb3JtYXRSb3VuZGVkIiwidG9VcHBlckNhc2UiLCJsb2NhbGUiLCJmb3JtYXRQcmVmaXgiLCJwcmVmaXhlcyIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwiY3VycmVuY3lQcmVmaXgiLCJjdXJyZW5jeSIsImN1cnJlbmN5U3VmZml4IiwiZGVjaW1hbCIsIm51bWVyYWxzIiwiZm9ybWF0TnVtZXJhbHMiLCJTdHJpbmciLCJwZXJjZW50IiwibWludXMiLCJuYW4iLCJuZXdGb3JtYXQiLCJmb3JtYXRUeXBlcyIsInN1ZmZpeCIsImZvcm1hdFR5cGUiLCJtYXliZVN1ZmZpeCIsInZhbHVlUHJlZml4IiwidmFsdWVTdWZmaXgiLCJ2YWx1ZU5lZ2F0aXZlIiwib3V0IiwiZm9ybWF0VHJpbSIsInN0ZXAwIiwic3RlcDEiLCJ0aWNrU3RlcCIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJsaW5lYXJpc2giLCJ0aWNrcyIsImlzRmluaXRlIiwidGlja0Zvcm1hdCIsIm5pY2UiLCJ0cmFuc2Zvcm1Qb3ciLCJ0cmFuc2Zvcm1TcXJ0IiwidHJhbnNmb3JtU3F1YXJlIiwicG93aXNoIiwiZm9ybWF0TG9jYWxlIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJvZmZzZXQiLCJtaWxsaXNlY29uZCIsImdldE1pbGxpc2Vjb25kcyIsImdldFNlY29uZHMiLCJnZXRNaW51dGVzIiwiZGF5Iiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0Iiwid2Vla2RheSIsImdldERheSIsInN1bmRheSIsIm1vbmRheSIsInRodXJzZGF5Iiwic2V0TW9udGgiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJzZXRVVENTZWNvbmRzIiwic2V0VVRDTWludXRlcyIsInV0Y0RheSIsInNldFVUQ0hvdXJzIiwic2V0VVRDRGF0ZSIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUaHVyc2RheSIsInV0Y1llYXIiLCJzZXRVVENNb250aCIsInNldFVUQ0Z1bGxZZWFyIiwibG9jYWxEYXRlIiwiSCIsIk0iLCJMIiwidXRjRGF0ZSIsIlVUQyIsIm5ld0RhdGUiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsInBhZHMiLCItIiwiMCIsIm51bWJlclJlIiwicGVyY2VudFJlIiwicmVxdW90ZVJlIiwicmVxdW90ZSIsImZvcm1hdFJlIiwiZm9ybWF0TG9va3VwIiwicGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwicGFyc2VXZWVrTnVtYmVyU3VuZGF5IiwiVSIsInBhcnNlV2Vla051bWJlcklTTyIsIlYiLCJwYXJzZVdlZWtOdW1iZXJNb25kYXkiLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2VZZWFyIiwicGFyc2Vab25lIiwiWiIsInBhcnNlUXVhcnRlciIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZURheU9mWWVhciIsInBhcnNlSG91cjI0IiwicGFyc2VNaW51dGVzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJRIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJ0aW1lRGF5IiwidGltZVllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJ0aW1lU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsInRpbWVUaHVyc2RheSIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwidGltZU1vbmRheSIsImZvcm1hdEZ1bGxZZWFyIiwiZm9ybWF0Wm9uZSIsImZvcm1hdFVUQ0RheU9mTW9udGgiLCJmb3JtYXRVVENIb3VyMjQiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImZvcm1hdFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImRvdyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVySVNPIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENZZWFyIiwiZm9ybWF0VVRDRnVsbFllYXIiLCJmb3JtYXRVVENab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJmb3JtYXRVbml4VGltZXN0YW1wIiwiZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMiLCJsb2NhbGVfZGF0ZVRpbWUiLCJkYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJsb2NhbGVfcGVyaW9kcyIsInBlcmlvZHMiLCJsb2NhbGVfd2Vla2RheXMiLCJkYXlzIiwibG9jYWxlX3Nob3J0V2Vla2RheXMiLCJzaG9ydERheXMiLCJsb2NhbGVfbW9udGhzIiwibW9udGhzIiwibG9jYWxlX3Nob3J0TW9udGhzIiwic2hvcnRNb250aHMiLCJwZXJpb2RSZSIsInBlcmlvZExvb2t1cCIsIndlZWtkYXlSZSIsIndlZWtkYXlMb29rdXAiLCJzaG9ydFdlZWtkYXlSZSIsInNob3J0V2Vla2RheUxvb2t1cCIsIm1vbnRoUmUiLCJtb250aExvb2t1cCIsInNob3J0TW9udGhSZSIsInNob3J0TW9udGhMb29rdXAiLCJmb3JtYXRzIiwidXRjRm9ybWF0cyIsInBhcnNlcyIsInBhcnNlU3BlY2lmaWVyIiwiY2hhckF0IiwibmV3UGFyc2UiLCJ3ZWVrIiwidG9JU09TdHJpbmciLCJrMTAiLCJ4MCIsIngxIiwiY2hlY2tEb21JZCIsImpRdWVyeSIsImNvbnNvbGUiLCJ3YXJuIiwiZ2VuZXJhdGVSYW5kb21NYXRyaXgiLCJwYXIiLCJzY2FsZUZhY3RvciIsImRpdmVyZ2luZyIsImJ1YmJsZSIsInJhbmRvbSIsImRpc3BsYXlWYWx1ZSIsInBhcnNlRmxvYXQiLCJnZXRHdGV4VXJscyIsImhvc3QiLCJzaW5nbGVUaXNzdWVFcXRsIiwibGQiLCJkeW5lcXRsIiwic25wIiwidmFyaWFudElkIiwiZXhvbkV4cCIsInRyYW5zY3JpcHRFeHAiLCJqdW5jdGlvbkV4cCIsInRyYW5zY3JpcHQiLCJleG9uIiwiZ2VuZU1vZGVsIiwiZ2VuZU1vZGVsVW5maWx0ZXJlZCIsImdlbmVFeHAiLCJtZWRHZW5lRXhwIiwiZ2VuZUV4cEJveHBsb3QiLCJ0b3BJblRpc3N1ZUZpbHRlcmVkIiwidG9wSW5UaXNzdWUiLCJnZW5lSWQiLCJ0aXNzdWUiLCJzYW1wbGUiLCJybmFzZXFDcmFtIiwid2dzQ3JhbSIsImZjQmlsbGluZyIsImZjV29ya1NwYWNlIiwiZmNQb3J0YWxXb3JrU3BhY2UiLCJnZW5lcmF0ZVNob3J0VmFyaWFudElkIiwidGVtcCIsIlRvb2x0aXAiLCJ2ZXJib3NlIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJzaG93IiwiaW5mbyIsImVkaXQiLCJoaWRlIiwicGFnZVgiLCJwYWdlWSIsInNjaGVtZSIsImludGVycG9sYXRlUmdiQmFzaXMiLCJyYW1wIiwiaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nIiwic2V0Q29sb3JTY2FsZSIsImRtaW4iLCJkbWF4Iiwic2VxdWVudGlhbCIsInNjYWxlU2VxdWVudGlhbCIsImludGVycG9sYXRvcnMiLCJCdUduIiwiZDNDaHJvbWF0aWMiLCJPclJkIiwiUHVCdSIsIllsR25CdSIsIkJsdWVzIiwiT3JhbmdlcyIsIkdyZWVucyIsIlB1cnBsZXMiLCJSZWRzIiwiR3JleXMiLCJHcmF5cyIsIlJkQnUiLCJSZEd5IiwiUGlZRyIsIlB1T3IiLCJSZFlsQnUiLCJlcnIiLCJhbGVydCIsImdldENvbG9ySW50ZXJwb2xhdG9yIiwiZHJhd0NvbG9yTGVnZW5kIiwidGl0bGUiLCJkb20iLCJjb25maWciLCJ1c2VMb2ciLCJiYXNlIiwiY2VsbCIsIm9yaWVudGF0aW9uIiwiQnViYmxlTWFwIiwibG9nQmFzZSIsImNvbG9yU2NoZW1lIiwieFNjYWxlIiwieVNjYWxlIiwiY29sb3JTY2FsZSIsImJ1YmJsZVNjYWxlIiwidG9vbGJhciIsInRvb2x0aXAiLCJhZGRUb29sdGlwIiwicGFyZW50SWQiLCJ0b29sdGlwSWQiLCJhcHBlbmRUbyIsImRyYXdDYW52YXMiLCJjYW52YXMiLCJkaW1lbnNpb25zIiwiY29sb3JTY2FsZURvbWFpbiIsImxhYmVsQ29uZmlnIiwiYW5nbGUiLCJhZGp1c3QiLCJsb2NhdGlvbiIsInRleHRBbGlnbiIsIl9zZXRTY2FsZXMiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImZpbGxTdHlsZSIsImJlZ2luUGF0aCIsImFyYyIsImNsb3NlUGF0aCIsImNsIiwicmwiLCJzYXZlIiwiZm9udCIsImZpbGxUZXh0IiwicmVzdG9yZSIsImRyYXdDb21ibyIsIm1pbmlEb20iLCJmb2N1c0RvbSIsImFkZEJydXNoIiwic3ZnRGltIiwiaDIiLCJkcmF3U3ZnIiwiX3NldE1pbmlTY2FsZXMiLCJ4U2NhbGVNaW5pIiwieVNjYWxlTWluaSIsImJ1YmJsZVNjYWxlTWluaSIsIl9icnVzaGVkIiwiYnJ1c2hTaXplIiwic2VsZWN0ZWQiLCJyb3dDbGFzcyIsImNvbENsYXNzIiwiZGlzcGxheVNpemUiLCJyRGlzcGxheVZhbHVlIiwiZGlzcGxheVgiLCJkaXNwbGF5WSIsImxvb2t1cCIsImxlZ2VuZENvbmZpZyIsImRyYXdCdWJibGVMZWdlbmQiLCJsZWdlbmRHIiwiYnJ1c2hMZWZ0IiwiYnJ1c2hSaWdodCIsImJ1YmJsZU1heCIsIl9zZXRCdWJibGVNYXgiLCJfc2V0QnViYmxlU2NhbGUiLCJjRG9tYWluIiwiX3NldFhTY2FsZU1pbmkiLCJfc2V0WVNjYWxlTWluaSIsIl9zZXRDb2xvclNjYWxlIiwiX3NldFhTY2FsZSIsIl9zZXRZU2NhbGUiLCJfcGFyc2VYTGlzdCIsIl9wYXJzZVlMaXN0IiwieExpc3QiLCJzY2FsZUJhbmQiLCJ5TGlzdCIsIl9sb2ciLCJtaW5pIiwiYWJzTWF4Iiwicm1heCIsInNjYWxlU3FydCIsIkhhbGZNYXAiLCJjdXRvZmYiLCJfdW5pcXVlIiwiZGF0YURpY3QiLCJmaWx0ZXJlZERhdGEiLCJfZmlsdGVyIiwiX2dlbmVyYXRlRGF0YURpY3QiLCJsYWJlbFNjYWxlIiwiJCIsImRyYXciLCJzaG93TGFiZWxzIiwibGFiZWxBbmdsZSIsInhTY2FsZURvbWFpbiIsInlTY2FsZURvbWFpbiIsIl9kcmF3Q2FudmFzIiwiY2xlYXJSZWN0IiwiZmlsbFJlY3QiLCJkcmF3Q2VsbHMiLCJjZWxscyIsIl9zZXRMYWJlbFNjYWxlIiwiY3Vyc29yIiwicG9zIiwicmFkaWFuIiwieDIiLCJ5MiIsImNvbCIsInBhaXJzIiwicDIiLCJkaWN0Iiwic291cmNlUmFuZG9tTm9ybWFsIiwicmFuZG9tTm9ybWFsIiwibXUiLCJzaWdtYSIsIlRvb2xiYXIiLCJkb21JZCIsInZlcnRpY2FsIiwiYnRuQ2xhc3NlcyIsImJhciIsImFkZENsYXNzIiwiYnV0dG9ucyIsImNyZWF0ZURvd25sb2FkU3ZnQnV0dG9uIiwic3ZnSWQiLCJvdXRmaWxlTmFtZSIsImNsb25lSWQiLCJpY29uIiwiY3JlYXRlQnV0dG9uIiwiZG93bmxvYWRTdmciLCJjcmVhdGVSZXNldEJ1dHRvbiIsIiRidXR0b24iLCJhdHRhY2hUb29sdGlwIiwiZmlsZU5hbWUiLCJzdmdPYmoiLCIkc3ZnQ29weSIsInN0eWxlcyIsInVzZWQiLCJzaGVldHMiLCJzdHlsZVNoZWV0cyIsImNzc1J1bGVzIiwicnVsZXMiLCJydWxlIiwiZWxlbXMiLCJzZWxlY3RvclRleHQiLCJmaW5kIiwiY3NzVGV4dCIsInBhcnNlQ3NzU3R5bGVzIiwicHJlcGVuZCIsInN2Z0h0bWwiLCJzdmdCbG9iIiwiQmxvYiIsInNhdmVBcyIsImNlbnRlciIsImVudGVyaW5nIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsInNwYWNpbmciLCJyYW5nZTAiLCJyYW5nZTEiLCJwb3NpdGlvbiIsInBhdGgiLCJ0aWNrRXhpdCIsInRpY2tFbnRlciIsImxpbmUiLCJ0aWNrU2l6ZSIsImF4aXNCb3R0b20iLCJwaSIsInRhdSIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwiTGluZWFyIiwiX2NvbnRleHQiLCJwb2ludFgiLCJ5MCIsInkxIiwicG9pbnRZIiwiZGVmaW5lZCIsImN1cnZlIiwiY3VydmVMaW5lYXIiLCJhcmVhIiwiYnVmZmVyIiwiZGVmaW5lZDAiLCJ4MHoiLCJ5MHoiLCJhcmVhU3RhcnQiLCJsaW5lU3RhcnQiLCJsaW5lRW5kIiwiYXJlYUVuZCIsImFyZWFsaW5lIiwibGluZVgwIiwibGluZVkwIiwibGluZVkxIiwibGluZVgxIiwic2xvcGUzIiwiaDAiLCJoMSIsInNsb3BlMiIsImJlemllckN1cnZlVG8iLCJNb25vdG9uZVgiLCJSZWZsZWN0Q29udGV4dCIsIm1vdmVUbyIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJhcmNUbyIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhMCIsImExIiwiY2N3IiwiY3ciLCJkYSIsIl9saW5lIiwiX3BvaW50IiwiX3QwIiwia2VybmVsIiwiZXhwIiwia2VybmVsQmFuZHdpZHRoIiwiZGV2aWF0aW9uIiwiR3JvdXBlZFZpb2xpbiIsImdyb3VwSW5mbyIsIl9zYW5pdHlDaGVjayIsInJlbmRlciIsInhQYWRkaW5nIiwieERvbWFpbiIsInlEb21haW4iLCJ5TGFiZWwiLCJzaG93WCIsInhBbmdsZSIsInNob3dTdWJYIiwic3ViWEFuZ2xlIiwic2hvd1doaXNrZXIiLCJzaG93RGl2aWRlciIsInNob3dMZWdlbmQiLCJzaG93U2l6ZSIsInNvcnRTdWJYIiwic2hvd091dGxpZXJzIiwibnVtUG9pbnRzIiwicmVzZXQiLCJ1cGRhdGVZU2NhbGUiLCJ1cGRhdGVYU2NhbGUiLCJhbGxWIiwic3VieCIsInNjYWxlTGluZWFyIiwibGFiZWwiLCJlbnRyeSIsIl9kcmF3VmlvbGluIiwic2l6ZVNjYWxlIiwic3VieEciLCJ4QXhpcyIsInlBeGlzIiwiZ2V0QkJveCIsIl9hZGRHcm91cERpdmlkZXIiLCJhZGRQbG90VGl0bGUiLCJjcmVhdGVUb29sdGlwIiwiY3JlYXRlVG9vbGJhciIsInRoZUJydXNoIiwiem9vbSIsImlkZWxUaW1lb3V0IiwibG93Qm91bmQiLCJ1cHBlckJvdW5kIiwiZ2ciLCJxMSIsInEzIiwibWVkIiwibWVkaWFuIiwiZ0luZGV4Iiwia2RlIiwia2VybmVsRGVuc2l0eUVzdGltYXRvciIsImVEb21haW4iLCJ2ZXJ0aWNlcyIsInZpb2xpbkciLCJfdmFsaWRWZXJ0aWNlcyIsInpNYXgiLCJ2aW9saW4iLCJ2UGF0aCIsImlxciIsInVwcGVyIiwiaml0dGVyIiwib3V0bGllcnMiLCJnZXRYIiwicmVkdWNlIiwidmlvbGluRGVtb0NvbmZpZyIsImhlYXRtYXAiLCJkZW5kcm9IZWF0bWFwIiwicm93VHJlZSIsImNvbFRyZWUiLCJncm91cGVkVmlvbGluUGxvdCIsInRyYW5zY3JpcHRUcmFja3MiLCJidWJibGVNYXAiLCJsZFBsb3QiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJzaG93U2FtcGxlU2l6ZSIsIm1hcmdpbiIsImJvdHRvbSIsImluV2lkdGgiLCJpbkhlaWdodCIsImNyZWF0ZVN2ZyIsImdWaW9saW4iLCJnZW5jb2RlSWQiLCJ0aXNzdWVJZCIsImdyb3VwTmFtZSIsInVybHMiLCJjcmVkZW50aWFscyIsImV4cHJlc3Npb25fdmFsdWVzIiwiZ2Vub3R5cGVzIiwiaG9tb1JlZkV4cCIsImhvbW9BbHRFeHAiLCJoZXRlcm9FeHAiLCJyZWYiLCJhbHQiLCJoZXQiLCJwYXJzZUR5bkVxdGwiLCJ0aXNzdWVTaXRlRGV0YWlsSWQiLCJkaXZTcGlubmVyIiwiZ2VuZSIsInNpbmdsZSIsImZpbHRlcmVkIiwiZ2VuZVN5bWJvbFVwcGVyIiwicGFyc2VHZW5lcyIsImRpdkdlbmVJbmZvIiwiZ2VuZVN5bWJvbCIsImNocm9tb3NvbWUiLCJzdHJhbmQiLCJkZXNjcmlwdGlvbiIsInByb21pc2VzIiwiYWxsIiwicmVzdWx0cyIsInRpc3N1ZXMiLCJwYXJzZVRpc3N1ZVNhbXBsZUNvdW50cyIsInRpc3N1ZVNpdGVUYWJsZSIsImFyciIsInBhcnNlVGlzc3VlRGljdCIsImV4b25zIiwicGFyc2VFeG9uc1RvTGlzdCIsImVxdGxzIiwidGlzc3VlU2l0ZURldGFpbCIsIm5lcyIsImxvZzEwIiwicFZhbHVlIiwicGFyc2VTaW5nbGVUaXNzdWVFcXRscyIsImJtYXAiLCJyZW5kZXJCdWJibGVNYXAiLCJmb2N1c1BhbmVsTGFiZWxzIiwibWluaVBhbmVsSGVpZ2h0IiwibGVnZW5kSGVpZ2h0IiwiZm9jdXNQYW5lbEhlaWdodCIsImZvY3VzUGFuZWxNYXJnaW4iLCJsZFBhbmVsTWFyZ2luIiwic2V0RGltZW5zaW9ucyIsImxkSnNvbiIsInBhcnNlZCIsInVuaXF1ZSIsImxhYmVscyIsInBhcnNlTEQiLCJsZERhdGEiLCJsZEN1dG9mZiIsInJlbmRlckxkTWFwIiwiZGl2TW9kYWwiLCJjaGVja2VkIiwicHJvcCIsInZhbCIsInJvb3RJZCIsImxkTWFwIiwibGRDb2xvclNjaGVtZSIsImxkSWQiLCJsZENhbnZhcyIsImxkU3ZnIiwibGRHIiwibGRDb25maWciLCJicnVzaEV2ZW50IiwicGFuZWxCdWlsZGVyIiwiY2xhc3MiLCJmb250U2l6ZSIsInNlYXJjaCIsInNsaWRlciIsIm1pbkxkIiwidXBkYXRlTEQiLCJrZXlkb3duIiwicmVuZGVyTERGaWx0ZXJzIiwiZGl2RGFzaGJvYXJkIiwidmFyaWFudHNJbkV4b25zIiwicnNMb29rVXAiLCJ2YXJMb29rVXAiLCJibWFwU3ZnIiwibWluaUciLCJmb2N1c0ciLCJkaXZJbmZvIiwiaW5mb0lkIiwibW9kYWxJZCIsInRpRGl2IiwiY3NzIiwibW9kYWxCb2R5IiwicGxhY2Vob2xkZXIiLCJyc0RpdiIsIm1pblAiLCJtaW5OZXMiLCJ1cGRhdGVCdWJibGVzIiwiY291bnRzIiwia2V5dXAiLCJyZWdleCIsImNoYW5nZSIsImlzIiwicmVuZGVyQm1hcEZpbHRlcnMiLCJzbnBJZCIsImJ1aWxkVmFyaWFudExvb2t1cFRhYmxlcyIsInZhcmlhbnRzIiwiZXhvblZhcmlhbnRzIiwiZXgiLCJmaW5kVmFyaWFudHNJbkV4b25SZWdpb25zIiwicm5hU2VxQW5kR2Vub3R5cGVTYW1wbGVDb3VudCIsInJlbmRlclRpc3N1ZUJhZGdlcyIsInRzcyIsInRlcyIsImZpbmRMZWZ0U2lkZU5lYXJlc3ROZWlnaGJvclZhcmlhbnQiLCJzaXRlIiwidHNzVmFyaWFudCIsInRlc1ZhcmlhbnQiLCJmaW5kVmFyaWFudHNOZWFyR2VuZVN0YXJ0RW5kIiwicmVuZGVyR2VuZVN0YXJ0RW5kTWFya2VycyIsInJlbmRlclRzc0Rpc3RhbmNlVHJhY2siLCJkaWFsb2dEaXZJZCIsInBhcmVudERpdklkIiwiZGlhbG9nIiwiY2xlYXJEaXYiLCJjb250ZW50RGl2IiwiYXV0b09wZW4iLCJjbGljayIsImNyZWF0ZURpYWxvZyIsInBsb3QiLCJoZWFkIiwiZXF0bFZpb2xpblBsb3RSZW5kZXIiLCJhZGRCdWJibGVDbGlja0V2ZW50IiwiZm9jdXNEb21haW4iLCJ1cGRhdGVGb2N1c1ZpZXciLCJ0aHJlc2hvbGQiLCJpbnZlcnRFeHRlbnQiLCJzY2FsZVRocmVzaG9sZCIsImRpc3QiLCJ0dENvbnRlbnQiLCJwYW5lbHMiLCJkaXYiLCJHZW5lRXF0bFZpc3VhbGl6ZXIiXSwibWFwcGluZ3MiOiJxYUFBQSxJQUFJQSxFQUFNLEdBQ05DLEVBQU0sR0FLVixTQUFTQyxFQUFnQkMsR0FDdkIsT0FBTyxJQUFJQyxTQUFTLElBQUssV0FBYUQsRUFBUUUsS0FBSSxTQUFTQyxFQUFNQyxHQUMvRCxPQUFPQyxLQUFLQyxVQUFVSCxHQUFRLE9BQVNDLEVBQUksYUFDMUNHLEtBQUssS0FBTyxLQVdqQixTQUFTQyxFQUFhQyxHQUNwQixJQUFJQyxFQUFZQyxPQUFPQyxPQUFPLE1BQzFCWixFQUFVLEdBVWQsT0FSQVMsRUFBS0ksU0FBUSxTQUFTQyxHQUNwQixJQUFLLElBQUlDLEtBQVVELEVBQ1hDLEtBQVVMLEdBQ2RWLEVBQVFnQixLQUFL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
