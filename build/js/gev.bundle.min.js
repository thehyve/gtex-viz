!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery"),require("file-saver")):"function"==typeof define&&define.amd?define(["exports","jquery","file-saver"],e):e((t=t||self).GeneEqtlVisualizer={},t.$,t.saveAs)}(this,function(t,e,n){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n;var a={},r={},i=34,o=10,l=13;function c(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}function s(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var a in t)a in e||n.push(e[a]=a)}),n}function f(t,e){var n=t+"",a=n.length;return a<e?new Array(e-a+1).join(0)+n:n}function u(t){var e,n=t.getUTCHours(),a=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+f(-e,6):e>9999?"+"+f(e,6):f(e,4))+"-"+f(t.getUTCMonth()+1,2)+"-"+f(t.getUTCDate(),2)+(i?"T"+f(n,2)+":"+f(a,2)+":"+f(r,2)+"."+f(i,3)+"Z":r?"T"+f(n,2)+":"+f(a,2)+":"+f(r,2)+"Z":a||n?"T"+f(n,2)+":"+f(a,2)+"Z":"")}function d(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function f(t,e){var c,s=[],f=t.length,u=0,d=0,h=f<=0,p=!1;function b(){if(h)return r;if(p)return p=!1,a;var e,c,s=u;if(t.charCodeAt(s)===i){for(;u++<f&&t.charCodeAt(u)!==i||t.charCodeAt(++u)===i;);return(e=u)>=f?h=!0:(c=t.charCodeAt(u++))===o?p=!0:c===l&&(p=!0,t.charCodeAt(u)===o&&++u),t.slice(s+1,e-1).replace(/""/g,'"')}for(;u<f;){if((c=t.charCodeAt(e=u++))===o)p=!0;else if(c===l)p=!0,t.charCodeAt(u)===o&&++u;else if(c!==n)continue;return t.slice(s,e)}return h=!0,t.slice(s,f)}for(t.charCodeAt(f-1)===o&&--f,t.charCodeAt(f-1)===l&&--f;(c=b())!==r;){for(var g=[];c!==a&&c!==r;)g.push(c),c=b();e&&null==(g=e(g,d++))||s.push(g)}return s}function d(e,n){return e.map(function(e){return n.map(function(t){return p(e[t])}).join(t)})}function h(e){return e.map(p).join(t)}function p(t){return null==t?"":t instanceof Date?u(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,r=f(t,function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=c(t);return function(a,r){return e(n(a),r,t)}}(t,e):c(t)});return r.columns=a||[],r},parseRows:f,format:function(e,n){return null==n&&(n=s(e)),[n.map(p).join(t)].concat(d(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=s(t)),d(t,e).join("\n")},formatRows:function(t){return t.map(h).join("\n")}}}d(","),d("\t");function h(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function p(t,e){return fetch(t,e).then(h)}var b={value:function(){}};function g(){for(var t,e=0,n=arguments.length,a={};e<n;++e){if(!(t=arguments[e]+"")||t in a)throw new Error("illegal type: "+t);a[t]=[]}return new m(a)}function m(t){this._=t}function y(t,e){for(var n,a=0,r=t.length;a<r;++a)if((n=t[a]).name===e)return n.value}function v(t,e,n){for(var a=0,r=t.length;a<r;++a)if(t[a].name===e){t[a]=b,t=t.slice(0,a).concat(t.slice(a+1));break}return null!=n&&t.push({name:e,value:n}),t}m.prototype=g.prototype={constructor:m,on:function(t,e){var n,a,r=this._,i=(a=r,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!a.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,l=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<l;)if(n=(t=i[o]).type)r[n]=v(r[n],t.name,e);else if(null==e)for(n in r)r[n]=v(r[n],t.name,null);return this}for(;++o<l;)if((n=(t=i[o]).type)&&(n=y(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new m(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,a,r=new Array(n),i=0;i<n;++i)r[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(a=this._[t]).length;i<n;++i)a[i].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var a=this._[t],r=0,i=a.length;r<i;++r)a[r].value.apply(e,n)}};var x="http://www.w3.org/1999/xhtml",w={svg:"http://www.w3.org/2000/svg",xhtml:x,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function _(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),w.hasOwnProperty(e)?{space:w[e],local:t}:t}function S(t){var e=_(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===x&&e.documentElement.namespaceURI===x?e.createElement(t):e.createElementNS(n,t)}})(e)}function M(){}function A(t){return null==t?M:function(){return this.querySelector(t)}}function T(){return[]}function k(t){return null==t?T:function(){return this.querySelectorAll(t)}}function E(t){return function(){return this.matches(t)}}function N(t){return new Array(t.length)}function P(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}P.prototype={constructor:P,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var C="$";function D(t,e,n,a,r,i){for(var o,l=0,c=e.length,s=i.length;l<s;++l)(o=e[l])?(o.__data__=i[l],a[l]=o):n[l]=new P(t,i[l]);for(;l<c;++l)(o=e[l])&&(r[l]=o)}function I(t,e,n,a,r,i,o){var l,c,s,f={},u=e.length,d=i.length,h=new Array(u);for(l=0;l<u;++l)(c=e[l])&&(h[l]=s=C+o.call(c,c.__data__,l,e),s in f?r[l]=c:f[s]=c);for(l=0;l<d;++l)(c=f[s=C+o.call(t,i[l],l,i)])?(a[l]=c,c.__data__=i[l],f[s]=null):n[l]=new P(t,i[l]);for(l=0;l<u;++l)(c=e[l])&&f[h[l]]===c&&(r[l]=c)}function L(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function z(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function U(t,e){return t.style.getPropertyValue(e)||z(t).getComputedStyle(t,null).getPropertyValue(e)}function F(t){return t.trim().split(/^|\s+/)}function G(t){return t.classList||new Y(t)}function Y(t){this._node=t,this._names=F(t.getAttribute("class")||"")}function O(t,e){for(var n=G(t),a=-1,r=e.length;++a<r;)n.add(e[a])}function V(t,e){for(var n=G(t),a=-1,r=e.length;++a<r;)n.remove(e[a])}function q(){this.textContent=""}function j(){this.innerHTML=""}function X(){this.nextSibling&&this.parentNode.appendChild(this)}function B(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function H(){return null}function R(){var t=this.parentNode;t&&t.removeChild(this)}function W(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Z(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}Y.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Q={},K=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Q={mouseenter:"mouseover",mouseleave:"mouseout"}));function J(t,e,n){return t=tt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function tt(t,e,n){return function(a){var r=K;K=a;try{t.call(this,this.__data__,e,n)}finally{K=r}}}function et(t){return function(){var e=this.__on;if(e){for(var n,a=0,r=-1,i=e.length;a<i;++a)n=e[a],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function nt(t,e,n){var a=Q.hasOwnProperty(t.type)?J:tt;return function(r,i,o){var l,c=this.__on,s=a(e,i,o);if(c)for(var f=0,u=c.length;f<u;++f)if((l=c[f]).type===t.type&&l.name===t.name)return this.removeEventListener(l.type,l.listener,l.capture),this.addEventListener(l.type,l.listener=s,l.capture=n),void(l.value=e);this.addEventListener(t.type,s,n),l={type:t.type,name:t.name,value:e,listener:s,capture:n},c?c.push(l):this.__on=[l]}}function at(t,e,n){var a=z(t),r=a.CustomEvent;"function"==typeof r?r=new r(e,n):(r=a.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}var rt=[null];function it(t,e){this._groups=t,this._parents=e}function ot(){return new it([[document.documentElement]],rt)}function lt(t){return"string"==typeof t?new it([[document.querySelector(t)]],[document.documentElement]):new it([[t]],rt)}function ct(){for(var t,e=K;t=e.sourceEvent;)e=t;return e}function st(t){var e=ct();return e.changedTouches&&(e=e.changedTouches[0]),function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=e.clientX,a.y=e.clientY,[(a=a.matrixTransform(t.getScreenCTM().inverse())).x,a.y]}var r=t.getBoundingClientRect();return[e.clientX-r.left-t.clientLeft,e.clientY-r.top-t.clientTop]}(t,e)}function ft(){K.preventDefault(),K.stopImmediatePropagation()}function ut(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function dt(t,e){var n=Object.create(t.prototype);for(var a in e)n[a]=e[a];return n}function ht(){}it.prototype=ot.prototype={constructor:it,select:function(t){"function"!=typeof t&&(t=A(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o,l=e[r],c=l.length,s=a[r]=new Array(c),f=0;f<c;++f)(i=l[f])&&(o=t.call(i,i.__data__,f,l))&&("__data__"in i&&(o.__data__=i.__data__),s[f]=o);return new it(a,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=k(t));for(var e=this._groups,n=e.length,a=[],r=[],i=0;i<n;++i)for(var o,l=e[i],c=l.length,s=0;s<c;++s)(o=l[s])&&(a.push(t.call(o,o.__data__,s,l)),r.push(o));return new it(a,r)},filter:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],l=o.length,c=a[r]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&c.push(i);return new it(a,this._parents)},data:function(t,e){if(!t)return p=new Array(this.size()),f=-1,this.each(function(t){p[++f]=t}),p;var n,a=e?I:D,r=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=i.length,l=new Array(o),c=new Array(o),s=new Array(o),f=0;f<o;++f){var u=r[f],d=i[f],h=d.length,p=t.call(u,u&&u.__data__,f,r),b=p.length,g=c[f]=new Array(b),m=l[f]=new Array(b);a(u,d,g,m,s[f]=new Array(h),p,e);for(var y,v,x=0,w=0;x<b;++x)if(y=g[x]){for(x>=w&&(w=x+1);!(v=m[w])&&++w<b;);y._next=v||null}}return(l=new it(l,r))._enter=c,l._exit=s,l},enter:function(){return new it(this._enter||this._groups.map(N),this._parents)},exit:function(){return new it(this._exit||this._groups.map(N),this._parents)},join:function(t,e,n){var a=this.enter(),r=this,i=this.exit();return a="function"==typeof t?t(a):a.append(t+""),null!=e&&(r=e(r)),null==n?i.remove():n(i),a&&r?a.merge(r).order():r},merge:function(t){for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),l=0;l<i;++l)for(var c,s=e[l],f=n[l],u=s.length,d=o[l]=new Array(u),h=0;h<u;++h)(c=s[h]||f[h])&&(d[h]=c);for(;l<a;++l)o[l]=e[l];return new it(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var a,r=t[e],i=r.length-1,o=r[i];--i>=0;)(a=r[i])&&(o&&4^a.compareDocumentPosition(o)&&o.parentNode.insertBefore(a,o),o=a);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=L);for(var n=this._groups,a=n.length,r=new Array(a),i=0;i<a;++i){for(var o,l=n[i],c=l.length,s=r[i]=new Array(c),f=0;f<c;++f)(o=l[f])&&(s[f]=o);s.sort(e)}return new it(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var a=t[e],r=0,i=a.length;r<i;++r){var o=a[r];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,a=e.length;n<a;++n)for(var r,i=e[n],o=0,l=i.length;o<l;++o)(r=i[o])&&t.call(r,r.__data__,o,i);return this},attr:function(t,e){var n=_(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var a=e.apply(this,arguments);null==a?this.style.removeProperty(t):this.style.setProperty(t,a,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):U(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=F(t+"");if(arguments.length<2){for(var a=G(this.node()),r=-1,i=n.length;++r<i;)if(!a.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?O:V)(this,t)}}:e?function(t){return function(){O(this,t)}}:function(t){return function(){V(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?q:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?j:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(X)},lower:function(){return this.each(B)},append:function(t){var e="function"==typeof t?t:S(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:S(t),a=null==e?H:"function"==typeof e?e:A(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),a.apply(this,arguments)||null)})},remove:function(){return this.each(R)},clone:function(t){return this.select(t?Z:W)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var a,r,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=i.length;if(!(arguments.length<2)){for(l=e?nt:et,null==n&&(n=!1),a=0;a<o;++a)this.each(l(i[a],e,n));return this}var l=this.node().__on;if(l)for(var c,s=0,f=l.length;s<f;++s)for(a=0,c=l[s];a<o;++a)if((r=i[a]).type===c.type&&r.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return at(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return at(this,t,e)}})(t,e))}};var pt="\\s*([+-]?\\d+)\\s*",bt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",mt=/^#([0-9a-f]{3})$/,yt=/^#([0-9a-f]{6})$/,vt=new RegExp("^rgb\\("+[pt,pt,pt]+"\\)$"),xt=new RegExp("^rgb\\("+[gt,gt,gt]+"\\)$"),wt=new RegExp("^rgba\\("+[pt,pt,pt,bt]+"\\)$"),_t=new RegExp("^rgba\\("+[gt,gt,gt,bt]+"\\)$"),St=new RegExp("^hsl\\("+[bt,gt,gt]+"\\)$"),Mt=new RegExp("^hsla\\("+[bt,gt,gt,bt]+"\\)$"),At={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Tt(t){var e;return t=(t+"").trim().toLowerCase(),(e=mt.exec(t))?new Pt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=yt.exec(t))?kt(parseInt(e[1],16)):(e=vt.exec(t))?new Pt(e[1],e[2],e[3],1):(e=xt.exec(t))?new Pt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=wt.exec(t))?$t(e[1],e[2],e[3],e[4]):(e=_t.exec(t))?$t(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=St.exec(t))?Dt(e[1],e[2]/100,e[3]/100,1):(e=Mt.exec(t))?Dt(e[1],e[2]/100,e[3]/100,e[4]):At.hasOwnProperty(t)?kt(At[t]):"transparent"===t?new Pt(NaN,NaN,NaN,0):null}function kt(t){return new Pt(t>>16&255,t>>8&255,255&t,1)}function $t(t,e,n,a){return a<=0&&(t=e=n=NaN),new Pt(t,e,n,a)}function Et(t){return t instanceof ht||(t=Tt(t)),t?new Pt((t=t.rgb()).r,t.g,t.b,t.opacity):new Pt}function Nt(t,e,n,a){return 1===arguments.length?Et(t):new Pt(t,e,n,null==a?1:a)}function Pt(t,e,n,a){this.r=+t,this.g=+e,this.b=+n,this.opacity=+a}function Ct(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Dt(t,e,n,a){return a<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new It(t,e,n,a)}function It(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function Lt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}ut(ht,Tt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),ut(Pt,Nt,dt(ht,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Pt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Pt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Ct(this.r)+Ct(this.g)+Ct(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),ut(It,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof It)return new It(t.h,t.s,t.l,t.opacity);if(t instanceof ht||(t=Tt(t)),!t)return new It;if(t instanceof It)return t;var e=(t=t.rgb()).r/255,n=t.g/255,a=t.b/255,r=Math.min(e,n,a),i=Math.max(e,n,a),o=NaN,l=i-r,c=(i+r)/2;return l?(o=e===i?(n-a)/l+6*(n<a):n===i?(a-e)/l+2:(e-n)/l+4,l/=c<.5?i+r:2-i-r,o*=60):l=c>0&&c<1?0:o,new It(o,l,c,t.opacity)}(t):new It(t,e,n,null==a?1:a)},dt(ht,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new It(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new It(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,a=n+(n<.5?n:1-n)*e,r=2*n-a;return new Pt(Lt(t>=240?t-240:t+120,r,a),Lt(t,r,a),Lt(t<120?t+240:t-120,r,a),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var zt=Math.PI/180,Ut=180/Math.PI,Ft=.96422,Gt=1,Yt=.82521,Ot=4/29,Vt=6/29,qt=3*Vt*Vt,jt=Vt*Vt*Vt;function Xt(t){if(t instanceof Bt)return new Bt(t.l,t.a,t.b,t.opacity);if(t instanceof Qt){if(isNaN(t.h))return new Bt(t.l,0,0,t.opacity);var e=t.h*zt;return new Bt(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof Pt||(t=Et(t));var n,a,r=Zt(t.r),i=Zt(t.g),o=Zt(t.b),l=Ht((.2225045*r+.7168786*i+.0606169*o)/Gt);return r===i&&i===o?n=a=l:(n=Ht((.4360747*r+.3850649*i+.1430804*o)/Ft),a=Ht((.0139322*r+.0971045*i+.7141733*o)/Yt)),new Bt(116*l-16,500*(n-l),200*(l-a),t.opacity)}function Bt(t,e,n,a){this.l=+t,this.a=+e,this.b=+n,this.opacity=+a}function Ht(t){return t>jt?Math.pow(t,1/3):t/qt+Ot}function Rt(t){return t>Vt?t*t*t:qt*(t-Ot)}function Wt(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Zt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Qt(t,e,n,a){this.h=+t,this.c=+e,this.l=+n,this.opacity=+a}ut(Bt,function(t,e,n,a){return 1===arguments.length?Xt(t):new Bt(t,e,n,null==a?1:a)},dt(ht,{brighter:function(t){return new Bt(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Bt(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Pt(Wt(3.1338561*(e=Ft*Rt(e))-1.6168667*(t=Gt*Rt(t))-.4906146*(n=Yt*Rt(n))),Wt(-.9787684*e+1.9161415*t+.033454*n),Wt(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),ut(Qt,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof Qt)return new Qt(t.h,t.c,t.l,t.opacity);if(t instanceof Bt||(t=Xt(t)),0===t.a&&0===t.b)return new Qt(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Ut;return new Qt(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new Qt(t,e,n,null==a?1:a)},dt(ht,{brighter:function(t){return new Qt(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Qt(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Xt(this).rgb()}}));var Kt=-.14861,Jt=1.78277,te=-.29227,ee=-.90649,ne=1.97294,ae=ne*ee,re=ne*Jt,ie=Jt*te-ee*Kt;function oe(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof le)return new le(t.h,t.s,t.l,t.opacity);t instanceof Pt||(t=Et(t));var e=t.r/255,n=t.g/255,a=t.b/255,r=(ie*a+ae*e-re*n)/(ie+ae-re),i=a-r,o=(ne*(n-r)-te*i)/ee,l=Math.sqrt(o*o+i*i)/(ne*r*(1-r)),c=l?Math.atan2(o,i)*Ut-120:NaN;return new le(c<0?c+360:c,l,r,t.opacity)}(t):new le(t,e,n,null==a?1:a)}function le(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function ce(t){return function(){return t}}function se(t,e){return function(n){return t+n*e}}function fe(t){return 1==(t=+t)?ue:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(a){return Math.pow(t+a*e,n)}}(e,n,t):ce(isNaN(e)?n:e)}}function ue(t,e){var n=e-t;return n?se(t,n):ce(isNaN(t)?e:t)}ut(le,oe,dt(ht,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new le(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new le(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*zt,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),a=Math.cos(t),r=Math.sin(t);return new Pt(255*(e+n*(Kt*a+Jt*r)),255*(e+n*(te*a+ee*r)),255*(e+n*(ne*a)),this.opacity)}}));var de=function t(e){var n=fe(e);function a(t,e){var a=n((t=Nt(t)).r,(e=Nt(e)).r),r=n(t.g,e.g),i=n(t.b,e.b),o=ue(t.opacity,e.opacity);return function(e){return t.r=a(e),t.g=r(e),t.b=i(e),t.opacity=o(e),t+""}}return a.gamma=t,a}(1);var he,pe=(he=function(t){var e=t.length-1;return function(n){var a=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[a],i=t[a+1],o=a>0?t[a-1]:2*r-i,l=a<e-1?t[a+2]:2*i-r;return function(t,e,n,a,r){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*a+o*r)/6}((n-a/e)*e,o,r,i,l)}},function(t){var e,n,a=t.length,r=new Array(a),i=new Array(a),o=new Array(a);for(e=0;e<a;++e)n=Nt(t[e]),r[e]=n.r||0,i[e]=n.g||0,o[e]=n.b||0;return r=he(r),i=he(i),o=he(o),n.opacity=1,function(t){return n.r=r(t),n.g=i(t),n.b=o(t),n+""}});function be(t,e){return e-=t=+t,function(n){return t+e*n}}var ge=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,me=new RegExp(ge.source,"g");function ye(t,e){var n,a,r,i=ge.lastIndex=me.lastIndex=0,o=-1,l=[],c=[];for(t+="",e+="";(n=ge.exec(t))&&(a=me.exec(e));)(r=a.index)>i&&(r=e.slice(i,r),l[o]?l[o]+=r:l[++o]=r),(n=n[0])===(a=a[0])?l[o]?l[o]+=a:l[++o]=a:(l[++o]=null,c.push({i:o,x:be(n,a)})),i=me.lastIndex;return i<e.length&&(r=e.slice(i),l[o]?l[o]+=r:l[++o]=r),l.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,a=0;a<e;++a)l[(n=c[a]).i]=n.x(t);return l.join("")})}function ve(t,e){var n,a=typeof e;return null==e||"boolean"===a?ce(e):("number"===a?be:"string"===a?(n=Tt(e))?(e=n,de):ye:e instanceof Tt?de:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(a){return n.setTime(t+e*a),n}}:Array.isArray(e)?function(t,e){var n,a=e?e.length:0,r=t?Math.min(a,t.length):0,i=new Array(r),o=new Array(a);for(n=0;n<r;++n)i[n]=ve(t[n],e[n]);for(;n<a;++n)o[n]=e[n];return function(t){for(n=0;n<r;++n)o[n]=i[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,a={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?a[n]=ve(t[n],e[n]):r[n]=e[n];return function(t){for(n in a)r[n]=a[n](t);return r}}:be)(t,e)}function xe(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}}var we,_e,Se,Me,Ae=180/Math.PI,Te={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function ke(t,e,n,a,r,i){var o,l,c;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(c=t*n+e*a)&&(n-=t*c,a-=e*c),(l=Math.sqrt(n*n+a*a))&&(n/=l,a/=l,c/=l),t*a<e*n&&(t=-t,e=-e,c=-c,o=-o),{translateX:r,translateY:i,rotate:Math.atan2(e,t)*Ae,skewX:Math.atan(c)*Ae,scaleX:o,scaleY:l}}function $e(t,e,n,a){function r(t){return t.length?t.pop()+" ":""}return function(i,o){var l=[],c=[];return i=t(i),o=t(o),function(t,a,r,i,o,l){if(t!==r||a!==i){var c=o.push("translate(",null,e,null,n);l.push({i:c-4,x:be(t,r)},{i:c-2,x:be(a,i)})}else(r||i)&&o.push("translate("+r+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,l,c),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(r(n)+"rotate(",null,a)-2,x:be(t,e)})):e&&n.push(r(n)+"rotate("+e+a)}(i.rotate,o.rotate,l,c),function(t,e,n,i){t!==e?i.push({i:n.push(r(n)+"skewX(",null,a)-2,x:be(t,e)}):e&&n.push(r(n)+"skewX("+e+a)}(i.skewX,o.skewX,l,c),function(t,e,n,a,i,o){if(t!==n||e!==a){var l=i.push(r(i)+"scale(",null,",",null,")");o.push({i:l-4,x:be(t,n)},{i:l-2,x:be(e,a)})}else 1===n&&1===a||i.push(r(i)+"scale("+n+","+a+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,l,c),i=o=null,function(t){for(var e,n=-1,a=c.length;++n<a;)l[(e=c[n]).i]=e.x(t);return l.join("")}}}var Ee=$e(function(t){return"none"===t?Te:(we||(we=document.createElement("DIV"),_e=document.documentElement,Se=document.defaultView),we.style.transform=t,t=Se.getComputedStyle(_e.appendChild(we),null).getPropertyValue("transform"),_e.removeChild(we),ke(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Ne=$e(function(t){return null==t?Te:(Me||(Me=document.createElementNS("http://www.w3.org/2000/svg","g")),Me.setAttribute("transform",t),(t=Me.transform.baseVal.consolidate())?ke((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Te)},", ",")",")");Math.SQRT2;function Pe(t){return function e(n){function a(e,a){var r=t((e=oe(e)).h,(a=oe(a)).h),i=ue(e.s,a.s),o=ue(e.l,a.l),l=ue(e.opacity,a.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=l(t),e+""}}return n=+n,a.gamma=e,a}(1)}Pe(function(t,e){var n=e-t;return n?se(t,n>180||n<-180?n-360*Math.round(n/360):n):ce(isNaN(t)?e:t)});var Ce,De,Ie=Pe(ue),Le=0,ze=0,Ue=0,Fe=1e3,Ge=0,Ye=0,Oe=0,Ve="object"==typeof performance&&performance.now?performance:Date,qe="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function je(){return Ye||(qe(Xe),Ye=Ve.now()+Oe)}function Xe(){Ye=0}function Be(){this._call=this._time=this._next=null}function He(t,e,n){var a=new Be;return a.restart(t,e,n),a}function Re(){Ye=(Ge=Ve.now())+Oe,Le=ze=0;try{!function(){je(),++Le;for(var t,e=Ce;e;)(t=Ye-e._time)>=0&&e._call.call(null,t),e=e._next;--Le}()}finally{Le=0,function(){var t,e,n=Ce,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ce=e);De=t,Ze(a)}(),Ye=0}}function We(){var t=Ve.now(),e=t-Ge;e>Fe&&(Oe-=e,Ge=t)}function Ze(t){Le||(ze&&(ze=clearTimeout(ze)),t-Ye>24?(t<1/0&&(ze=setTimeout(Re,t-Ve.now()-Oe)),Ue&&(Ue=clearInterval(Ue))):(Ue||(Ge=Ve.now(),Ue=setInterval(We,Fe)),Le=1,qe(Re)))}function Qe(t,e,n){var a=new Be;return e=null==e?0:+e,a.restart(function(n){a.stop(),t(n+e)},e,n),a}Be.prototype=He.prototype={constructor:Be,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?je():+n)+(null==e?0:+e),this._next||De===this||(De?De._next=this:Ce=this,De=this),this._call=t,this._time=n,Ze()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ze())}};var Ke=g("start","end","cancel","interrupt"),Je=[],tn=0,en=1,nn=2,an=3,rn=4,on=5,ln=6;function cn(t,e,n,a,r,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var a,r=t.__transition;function i(c){var s,f,u,d;if(n.state!==en)return l();for(s in r)if((d=r[s]).name===n.name){if(d.state===an)return Qe(i);d.state===rn?(d.state=ln,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete r[s]):+s<e&&(d.state=ln,d.timer.stop(),d.on.call("cancel",t,t.__data__,d.index,d.group),delete r[s])}if(Qe(function(){n.state===an&&(n.state=rn,n.timer.restart(o,n.delay,n.time),o(c))}),n.state=nn,n.on.call("start",t,t.__data__,n.index,n.group),n.state===nn){for(n.state=an,a=new Array(u=n.tween.length),s=0,f=-1;s<u;++s)(d=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(a[++f]=d);a.length=f+1}}function o(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(l),n.state=on,1),i=-1,o=a.length;++i<o;)a[i].call(t,r);n.state===on&&(n.on.call("end",t,t.__data__,n.index,n.group),l())}function l(){for(var a in n.state=ln,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=He(function(t){n.state=en,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:a,group:r,on:Ke,tween:Je,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:tn})}function sn(t,e){var n=un(t,e);if(n.state>tn)throw new Error("too late; already scheduled");return n}function fn(t,e){var n=un(t,e);if(n.state>an)throw new Error("too late; already running");return n}function un(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function dn(t,e){var n,a,r,i=t.__transition,o=!0;if(i){for(r in e=null==e?null:e+"",i)(n=i[r]).name===e?(a=n.state>nn&&n.state<on,n.state=ln,n.timer.stop(),n.on.call(a?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[r]):o=!1;o&&delete t.__transition}}function hn(t,e,n){var a=t._id;return t.each(function(){var t=fn(this,a);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return un(t,a).value[e]}}function pn(t,e){var n;return("number"==typeof e?be:e instanceof Tt?de:(n=Tt(e))?(e=n,de):ye)(t,e)}var bn=ot.prototype.constructor;function gn(t){return function(){this.style.removeProperty(t)}}var mn=0;function yn(t,e,n,a){this._groups=t,this._parents=e,this._name=n,this._id=a}function vn(){return++mn}var xn=ot.prototype;yn.prototype=function(t){return ot().transition(t)}.prototype={constructor:yn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=A(t));for(var a=this._groups,r=a.length,i=new Array(r),o=0;o<r;++o)for(var l,c,s=a[o],f=s.length,u=i[o]=new Array(f),d=0;d<f;++d)(l=s[d])&&(c=t.call(l,l.__data__,d,s))&&("__data__"in l&&(c.__data__=l.__data__),u[d]=c,cn(u[d],e,n,d,u,un(l,n)));return new yn(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=k(t));for(var a=this._groups,r=a.length,i=[],o=[],l=0;l<r;++l)for(var c,s=a[l],f=s.length,u=0;u<f;++u)if(c=s[u]){for(var d,h=t.call(c,c.__data__,u,s),p=un(c,n),b=0,g=h.length;b<g;++b)(d=h[b])&&cn(d,e,n,b,h,p);i.push(h),o.push(c)}return new yn(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],l=o.length,c=a[r]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&c.push(i);return new yn(a,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),l=0;l<i;++l)for(var c,s=e[l],f=n[l],u=s.length,d=o[l]=new Array(u),h=0;h<u;++h)(c=s[h]||f[h])&&(d[h]=c);for(;l<a;++l)o[l]=e[l];return new yn(o,this._parents,this._name,this._id)},selection:function(){return new bn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=vn(),a=this._groups,r=a.length,i=0;i<r;++i)for(var o,l=a[i],c=l.length,s=0;s<c;++s)if(o=l[s]){var f=un(o,e);cn(o,t,n,s,l,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new yn(a,this._parents,t,n)},call:xn.call,nodes:xn.nodes,node:xn.node,size:xn.size,empty:xn.empty,each:xn.each,on:function(t,e){var n=this._id;return arguments.length<2?un(this.node(),n).on.on(t):this.each(function(t,e,n){var a,r,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?sn:fn;return function(){var o=i(this,t),l=o.on;l!==a&&(r=(a=l).copy()).on(e,n),o.on=r}}(n,t,e))},attr:function(t,e){var n=_(t),a="transform"===n?Ne:pn;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var a,r,i;return function(){var o,l,c=n(this);if(null!=c)return(o=this.getAttributeNS(t.space,t.local))===(l=c+"")?null:o===a&&l===r?i:(r=l,i=e(a=o,c));this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var a,r,i;return function(){var o,l,c=n(this);if(null!=c)return(o=this.getAttribute(t))===(l=c+"")?null:o===a&&l===r?i:(r=l,i=e(a=o,c));this.removeAttribute(t)}})(n,a,hn(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var a,r,i=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===i?null:o===a?r:r=e(a=o,n)}}:function(t,e,n){var a,r,i=n+"";return function(){var o=this.getAttribute(t);return o===i?null:o===a?r:r=e(a=o,n)}})(n,a,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=_(t);return this.tween(n,(a.local?function(t,e){var n,a;function r(){var r=e.apply(this,arguments);return r!==a&&(n=(a=r)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,r)),n}return r._value=e,r}:function(t,e){var n,a;function r(){var r=e.apply(this,arguments);return r!==a&&(n=(a=r)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,r)),n}return r._value=e,r})(a,e))},style:function(t,e,n){var a="transform"==(t+="")?Ee:pn;return null==e?this.styleTween(t,function(t,e){var n,a,r;return function(){var i=U(this,t),o=(this.style.removeProperty(t),U(this,t));return i===o?null:i===n&&o===a?r:r=e(n=i,a=o)}}(t,a)).on("end.style."+t,gn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var a,r,i;return function(){var o=U(this,t),l=n(this),c=l+"";return null==l&&(this.style.removeProperty(t),c=l=U(this,t)),o===c?null:o===a&&c===r?i:(r=c,i=e(a=o,l))}}(t,a,hn(this,"style."+t,e))).each(function(t,e){var n,a,r,i,o="style."+e,l="end."+o;return function(){var c=fn(this,t),s=c.on,f=null==c.value[o]?i||(i=gn(e)):void 0;s===n&&r===f||(a=(n=s).copy()).on(l,r=f),c.on=a}}(this._id,t)):this.styleTween(t,function(t,e,n){var a,r,i=n+"";return function(){var o=U(this,t);return o===i?null:o===a?r:r=e(a=o,n)}}(t,a,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var a="style."+(t+="");if(arguments.length<2)return(a=this.tween(a))&&a._value;if(null==e)return this.tween(a,null);if("function"!=typeof e)throw new Error;return this.tween(a,function(t,e,n){var a,r;function i(){var i=e.apply(this,arguments);return i!==r&&(a=(r=i)&&function(t,e,n){return function(a){this.style.setProperty(t,e(a),n)}}(t,i,n)),a}return i._value=e,i}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(hn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var a,r=un(this.node(),n).tween,i=0,o=r.length;i<o;++i)if((a=r[i]).name===t)return a.value;return null}return this.each((null==e?function(t,e){var n,a;return function(){var r=fn(this,t),i=r.tween;if(i!==n)for(var o=0,l=(a=n=i).length;o<l;++o)if(a[o].name===e){(a=a.slice()).splice(o,1);break}r.tween=a}}:function(t,e,n){var a,r;if("function"!=typeof n)throw new Error;return function(){var i=fn(this,t),o=i.tween;if(o!==a){r=(a=o).slice();for(var l={name:e,value:n},c=0,s=r.length;c<s;++c)if(r[c].name===e){r[c]=l;break}c===s&&r.push(l)}i.tween=r}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){sn(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){sn(this,t).delay=e}})(e,t)):un(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){fn(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){fn(this,t).duration=e}})(e,t)):un(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){fn(this,t).ease=e}}(e,t)):un(this.node(),e).ease},end:function(){var t,e,n=this,a=n._id,r=n.size();return new Promise(function(i,o){var l={value:o},c={value:function(){0==--r&&i()}};n.each(function(){var n=fn(this,a),r=n.on;r!==t&&((e=(t=r).copy())._.cancel.push(l),e._.interrupt.push(l),e._.end.push(c)),n.on=e})})}};Math.PI,Math.PI;var wn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function _n(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return wn.time=je(),wn;return n}function Sn(t){return function(){return t}}function Mn(t,e,n){this.target=t,this.type=e,this.selection=n}function An(){K.stopImmediatePropagation()}function Tn(){K.preventDefault(),K.stopImmediatePropagation()}ot.prototype.interrupt=function(t){return this.each(function(){dn(this,t)})},ot.prototype.transition=function(t){var e,n;t instanceof yn?(e=t._id,t=t._name):(e=vn(),(n=wn).time=je(),t=null==t?null:t+"");for(var a=this._groups,r=a.length,i=0;i<r;++i)for(var o,l=a[i],c=l.length,s=0;s<c;++s)(o=l[s])&&cn(o,t,e,s,l,n||_n(o,e));return new yn(a,this._parents,t,e)};var kn={name:"drag"},$n={name:"space"},En={name:"handle"},Nn={name:"center"},Pn={name:"x",handles:["e","w"].map(Gn),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Cn={name:"y",handles:["n","s"].map(Gn),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Dn={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Gn),input:function(t){return t},output:function(t){return t}},In={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ln={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},zn={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Un={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Fn={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Gn(t){return{type:t}}function Yn(){return!K.button}function On(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Vn(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function qn(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function jn(){return Xn(Pn)}function Xn(t){var e,n=On,a=Yn,r=g(o,"start","brush","end"),i=6;function o(e){var n=e.property("__brush",u).selectAll(".overlay").data([Gn("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",In.overlay).merge(n).each(function(){var t=Vn(this).extent;lt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([Gn("selection")]).enter().append("rect").attr("class","selection").attr("cursor",In.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=e.selectAll(".handle").data(t.handles,function(t){return t.type});a.exit().remove(),a.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return In[t.type]}),e.each(l).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",f)}function l(){var t=lt(this),e=Vn(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-i/2:e[0][0]-i/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-i/2:e[0][1]-i/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+i:i}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+i:i})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,e){return t.__brush.emitter||new s(t,e)}function s(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function f(){if(K.touches){if(K.changedTouches.length<K.touches.length)return Tn()}else if(e)return;if(a.apply(this,arguments)){var n,r,i,o,s,f,u,d,h,p,b,g,m,y=this,v=K.target.__data__.type,x="selection"===(K.metaKey?v="overlay":v)?kn:K.altKey?Nn:En,w=t===Cn?null:Un[v],_=t===Pn?null:Fn[v],S=Vn(y),M=S.extent,A=S.selection,T=M[0][0],k=M[0][1],$=M[1][0],E=M[1][1],N=w&&_&&K.shiftKey,P=st(y),C=P,D=c(y,arguments).beforestart();"overlay"===v?S.selection=A=[[n=t===Cn?T:P[0],i=t===Pn?k:P[1]],[s=t===Cn?$:n,u=t===Pn?E:i]]:(n=A[0][0],i=A[0][1],s=A[1][0],u=A[1][1]),r=n,o=i,f=s,d=u;var I=lt(y).attr("pointer-events","none"),L=I.selectAll(".overlay").attr("cursor",In[v]);if(K.touches)I.on("touchmove.brush",U,!0).on("touchend.brush touchcancel.brush",G,!0);else{var z=lt(K.view).on("keydown.brush",function(){switch(K.keyCode){case 16:N=w&&_;break;case 18:x===En&&(w&&(s=f-h*w,n=r+h*w),_&&(u=d-p*_,i=o+p*_),x=Nn,F());break;case 32:x!==En&&x!==Nn||(w<0?s=f-h:w>0&&(n=r-h),_<0?u=d-p:_>0&&(i=o-p),x=$n,L.attr("cursor",In.selection),F());break;default:return}Tn()},!0).on("keyup.brush",function(){switch(K.keyCode){case 16:N&&(g=m=N=!1,F());break;case 18:x===Nn&&(w<0?s=f:w>0&&(n=r),_<0?u=d:_>0&&(i=o),x=En,F());break;case 32:x===$n&&(K.altKey?(w&&(s=f-h*w,n=r+h*w),_&&(u=d-p*_,i=o+p*_),x=Nn):(w<0?s=f:w>0&&(n=r),_<0?u=d:_>0&&(i=o),x=En),L.attr("cursor",In[v]),F());break;default:return}Tn()},!0).on("mousemove.brush",U,!0).on("mouseup.brush",G,!0);!function(t){var e=t.document.documentElement,n=lt(t).on("dragstart.drag",ft,!0);"onselectstart"in e?n.on("selectstart.drag",ft,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(K.view)}An(),dn(y),l.call(y),D.start()}function U(){var t=st(y);!N||g||m||(Math.abs(t[0]-C[0])>Math.abs(t[1]-C[1])?m=!0:g=!0),C=t,b=!0,Tn(),F()}function F(){var t;switch(h=C[0]-P[0],p=C[1]-P[1],x){case $n:case kn:w&&(h=Math.max(T-n,Math.min($-s,h)),r=n+h,f=s+h),_&&(p=Math.max(k-i,Math.min(E-u,p)),o=i+p,d=u+p);break;case En:w<0?(h=Math.max(T-n,Math.min($-n,h)),r=n+h,f=s):w>0&&(h=Math.max(T-s,Math.min($-s,h)),r=n,f=s+h),_<0?(p=Math.max(k-i,Math.min(E-i,p)),o=i+p,d=u):_>0&&(p=Math.max(k-u,Math.min(E-u,p)),o=i,d=u+p);break;case Nn:w&&(r=Math.max(T,Math.min($,n-h*w)),f=Math.max(T,Math.min($,s+h*w))),_&&(o=Math.max(k,Math.min(E,i-p*_)),d=Math.max(k,Math.min(E,u+p*_)))}f<r&&(w*=-1,t=n,n=s,s=t,t=r,r=f,f=t,v in Ln&&L.attr("cursor",In[v=Ln[v]])),d<o&&(_*=-1,t=i,i=u,u=t,t=o,o=d,d=t,v in zn&&L.attr("cursor",In[v=zn[v]])),S.selection&&(A=S.selection),g&&(r=A[0][0],f=A[1][0]),m&&(o=A[0][1],d=A[1][1]),A[0][0]===r&&A[0][1]===o&&A[1][0]===f&&A[1][1]===d||(S.selection=[[r,o],[f,d]],l.call(y),D.brush())}function G(){if(An(),K.touches){if(K.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),I.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,e){var n=t.document.documentElement,a=lt(t).on("dragstart.drag",null);e&&(a.on("click.drag",ft,!0),setTimeout(function(){a.on("click.drag",null)},0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(K.view,b),z.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);I.attr("pointer-events","all"),L.attr("cursor",In.overlay),S.selection&&(A=S.selection),qn(A)&&(S.selection=null,l.call(y)),D.end()}}function u(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return o.move=function(e,n){e.selection?e.on("start.brush",function(){c(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){c(this,arguments).end()}).tween("brush",function(){var e=this,a=e.__brush,r=c(e,arguments),i=a.selection,o=t.input("function"==typeof n?n.apply(this,arguments):n,a.extent),s=ve(i,o);function f(t){a.selection=1===t&&qn(o)?null:s(t),l.call(e),r.brush()}return i&&o?f:f(1)}):e.each(function(){var e=arguments,a=this.__brush,r=t.input("function"==typeof n?n.apply(this,e):n,a.extent),i=c(this,e).beforestart();dn(this),a.selection=null==r||qn(r)?null:r,l.call(this),i.start().brush().end()})},s.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,a){var r=K;t.sourceEvent=K,K=t;try{e.apply(n,a)}finally{K=r}}(new Mn(o,e,t.output(this.state.selection)),r.apply,r,[e,this.that,this.args])}},o.extent=function(t){return arguments.length?(n="function"==typeof t?t:Sn([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),o):n},o.filter=function(t){return arguments.length?(a="function"==typeof t?t:Sn(!!t),o):a},o.handleSize=function(t){return arguments.length?(i=+t,o):i},o.on=function(){var t=r.on.apply(r,arguments);return t===r?o:t},o}function Bn(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var Hn,Rn,Wn=(1===(Hn=Bn).length&&(Rn=Hn,Hn=function(t,e){return Bn(Rn(t),e)}),{left:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;Hn(t[r],e)<0?n=r+1:a=r}return n},right:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;Hn(t[r],e)>0?a=r:n=r+1}return n}}).right;function Zn(t){return null===t?NaN:+t}function Qn(t,e){var n=function(t,e){var n,a,r=t.length,i=0,o=-1,l=0,c=0;if(null==e)for(;++o<r;)isNaN(n=Zn(t[o]))||(c+=(a=n-l)*(n-(l+=a/++i)));else for(;++o<r;)isNaN(n=Zn(e(t[o],o,t)))||(c+=(a=n-l)*(n-(l+=a/++i)));if(i>1)return c/(i-1)}(t,e);return n?Math.sqrt(n):n}function Kn(t,e){var n,a,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(a=r=n;++o<i;)null!=(n=t[o])&&(a>n&&(a=n),r<n&&(r=n))}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(a=r=n;++o<i;)null!=(n=e(t[o],o,t))&&(a>n&&(a=n),r<n&&(r=n));return[a,r]}function Jn(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var a=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(r);++a<r;)i[a]=t+a*n;return i}var ta=Math.sqrt(50),ea=Math.sqrt(10),na=Math.sqrt(2);function aa(t,e,n){var a=(e-t)/Math.max(0,n),r=Math.floor(Math.log(a)/Math.LN10),i=a/Math.pow(10,r);return r>=0?(i>=ta?10:i>=ea?5:i>=na?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(i>=ta?10:i>=ea?5:i>=na?2:1)}function ra(t,e,n){if(null==n&&(n=Zn),a=t.length){if((e=+e)<=0||a<2)return+n(t[0],0,t);if(e>=1)return+n(t[a-1],a-1,t);var a,r=(a-1)*e,i=Math.floor(r),o=+n(t[i],i,t);return o+(+n(t[i+1],i+1,t)-o)*(r-i)}}function ia(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&n>a&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&n>a&&(a=n);return a}function oa(t,e){var n,a=t.length,r=a,i=-1,o=0;if(null==e)for(;++i<a;)isNaN(n=Zn(t[i]))?--r:o+=n;else for(;++i<a;)isNaN(n=Zn(e(t[i],i,t)))?--r:o+=n;if(r)return o/r}function la(t,e){var n,a=t.length,r=-1,i=[];if(null==e)for(;++r<a;)isNaN(n=Zn(t[r]))||i.push(n);else for(;++r<a;)isNaN(n=Zn(e(t[r],r,t)))||i.push(n);return ra(i.sort(Bn),.5)}function ca(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&a>n&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&a>n&&(a=n);return a}function sa(){}function fa(t,e){var n=new sa;if(t instanceof sa)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var a,r=-1,i=t.length;if(null==e)for(;++r<i;)n.set(r,t[r]);else for(;++r<i;)n.set(e(a=t[r],r,t),a)}else if(t)for(var o in t)n.set(o,t[o]);return n}function ua(){var t,e,n,a=[],r=[];function i(n,r,o,l){if(r>=a.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var c,s,f,u=-1,d=n.length,h=a[r++],p=fa(),b=o();++u<d;)(f=p.get(c=h(s=n[u])+""))?f.push(s):p.set(c,[s]);return p.each(function(t,e){l(b,e,i(t,r,o,l))}),b}return n={object:function(t){return i(t,0,da,ha)},map:function(t){return i(t,0,pa,ba)},entries:function(t){return function t(n,i){if(++i>a.length)return n;var o,l=r[i-1];return null!=e&&i>=a.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,i)})})),null!=l?o.sort(function(t,e){return l(t.key,e.key)}):o}(i(t,0,pa,ba),0)},key:function(t){return a.push(t),n},sortKeys:function(t){return r[a.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function da(){return{}}function ha(t,e,n){t[e]=n}function pa(){return fa()}function ba(t,e,n){t.set(e,n)}function ga(){}sa.prototype=fa.prototype={constructor:sa,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var ma=fa.prototype;function ya(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}ga.prototype=function(t,e){var n=new ga;if(t instanceof ga)t.each(function(t){n.add(t)});else if(t){var a=-1,r=t.length;if(null==e)for(;++a<r;)n.add(t[a]);else for(;++a<r;)n.add(e(t[a],a,t))}return n}.prototype={constructor:ga,has:ma.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ma.remove,clear:ma.clear,values:ma.keys,size:ma.size,empty:ma.empty,each:ma.each};var va=Array.prototype,xa=va.map,wa=va.slice,_a={name:"implicit"};function Sa(){var t,e,n=function t(){var e=fa(),n=[],a=[],r=_a;function i(t){var i=t+"",o=e.get(i);if(!o){if(r!==_a)return r;e.set(i,o=n.push(t))}return a[(o-1)%a.length]}return i.domain=function(t){if(!arguments.length)return n.slice();n=[],e=fa();for(var a,r,o=-1,l=t.length;++o<l;)e.has(r=(a=t[o])+"")||e.set(r,n.push(a));return i},i.range=function(t){return arguments.length?(a=wa.call(t),i):a.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return t(n,a).unknown(r)},ya.apply(i,arguments),i}().unknown(void 0),a=n.domain,r=n.range,i=[0,1],o=!1,l=0,c=0,s=.5;function f(){var n=a().length,f=i[1]<i[0],u=i[f-0],d=i[1-f];t=(d-u)/Math.max(1,n-l+2*c),o&&(t=Math.floor(t)),u+=(d-u-t*(n-l))*s,e=t*(1-l),o&&(u=Math.round(u),e=Math.round(e));var h=Jn(n).map(function(e){return u+t*e});return r(f?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(a(t),f()):a()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],f()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,f()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,f()):o},n.padding=function(t){return arguments.length?(l=Math.min(1,c=+t),f()):l},n.paddingInner=function(t){return arguments.length?(l=Math.min(1,t),f()):l},n.paddingOuter=function(t){return arguments.length?(c=+t,f()):c},n.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),f()):s},n.copy=function(){return Sa(a(),i).round(o).paddingInner(l).paddingOuter(c).align(s)},ya.apply(f(),arguments)}function Ma(t){return+t}var Aa=[0,1];function Ta(t){return t}function ka(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function $a(t){var e,n=t[0],a=t[t.length-1];return n>a&&(e=n,n=a,a=e),function(t){return Math.max(n,Math.min(a,t))}}function Ea(t,e,n){var a=t[0],r=t[1],i=e[0],o=e[1];return r<a?(a=ka(r,a),i=n(o,i)):(a=ka(a,r),i=n(i,o)),function(t){return i(a(t))}}function Na(t,e,n){var a=Math.min(t.length,e.length)-1,r=new Array(a),i=new Array(a),o=-1;for(t[a]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<a;)r[o]=ka(t[o],t[o+1]),i[o]=n(e[o],e[o+1]);return function(e){var n=Wn(t,e,1,a)-1;return i[n](r[n](e))}}function Pa(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Ca(){var t,e,n,a,r,i,o=Aa,l=Aa,c=ve,s=Ta;function f(){return a=Math.min(o.length,l.length)>2?Na:Ea,r=i=null,u}function u(e){return isNaN(e=+e)?n:(r||(r=a(o.map(t),l,c)))(t(s(e)))}return u.invert=function(n){return s(e((i||(i=a(l,o.map(t),be)))(n)))},u.domain=function(t){return arguments.length?(o=xa.call(t,Ma),s===Ta||(s=$a(o)),f()):o.slice()},u.range=function(t){return arguments.length?(l=wa.call(t),f()):l.slice()},u.rangeRound=function(t){return l=wa.call(t),c=xe,f()},u.clamp=function(t){return arguments.length?(s=t?$a(o):Ta,u):s!==Ta},u.interpolate=function(t){return arguments.length?(c=t,f()):c},u.unknown=function(t){return arguments.length?(n=t,u):n},function(n,a){return t=n,e=a,f()}}function Da(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,a=t.slice(0,n);return[a.length>1?a[0]+a.slice(2):a,+t.slice(n+1)]}function Ia(t){return(t=Da(Math.abs(t)))?t[1]:NaN}var La,za=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ua(t){return new Fa(t)}function Fa(t){if(!(e=za.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}function Ga(t,e){var n=Da(t,e);if(!n)return t+"";var a=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+a:a.length>r+1?a.slice(0,r+1)+"."+a.slice(r+1):a+new Array(r-a.length+2).join("0")}Ua.prototype=Fa.prototype,Fa.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ya={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Ga(100*t,e)},r:Ga,s:function(t,e){var n=Da(t,e);if(!n)return t+"";var a=n[0],r=n[1],i=r-(La=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,o=a.length;return i===o?a:i>o?a+new Array(i-o+1).join("0"):i>0?a.slice(0,i)+"."+a.slice(i):"0."+new Array(1-i).join("0")+Da(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Oa(t){return t}var Va,qa,ja,Xa=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Ba(t){var e,n,a=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,a){for(var r=t.length,i=[],o=0,l=e[0],c=0;r>0&&l>0&&(c+l+1>a&&(l=Math.max(1,a-c)),i.push(t.substring(r-=l,r+l)),!((c+=l+1)>a));)l=e[o=(o+1)%e.length];return i.reverse().join(n)}):Oa,r=t.currency,i=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):Oa,l=t.percent||"%";function c(t){var e=(t=Ua(t)).fill,n=t.align,c=t.sign,s=t.symbol,f=t.zero,u=t.width,d=t.comma,h=t.precision,p=t.trim,b=t.type;"n"===b?(d=!0,b="g"):Ya[b]||(null==h&&(h=12),p=!0,b="g"),(f||"0"===e&&"="===n)&&(f=!0,e="0",n="=");var g="$"===s?r[0]:"#"===s&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",m="$"===s?r[1]:/[%p]/.test(b)?l:"",y=Ya[b],v=/[defgprs%]/.test(b);function x(t){var r,l,s,x=g,w=m;if("c"===b)w=y(t)+w,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),h),p&&(t=function(t){t:for(var e,n=t.length,a=1,r=-1;a<n;++a)switch(t[a]){case".":r=e=a;break;case"0":0===r&&(r=a),e=a;break;default:if(r>0){if(!+t[a])break t;r=0}}return r>0?t.slice(0,r)+t.slice(e+1):t}(t)),_&&0==+t&&(_=!1),x=(_?"("===c?c:"-":"-"===c||"("===c?"":c)+x,w=("s"===b?Xa[8+La/3]:"")+w+(_&&"("===c?")":""),v)for(r=-1,l=t.length;++r<l;)if(48>(s=t.charCodeAt(r))||s>57){w=(46===s?i+t.slice(r+1):t.slice(r))+w,t=t.slice(0,r);break}}d&&!f&&(t=a(t,1/0));var S=x.length+t.length+w.length,M=S<u?new Array(u-S+1).join(e):"";switch(d&&f&&(t=a(M+t,M.length?u-w.length:1/0),M=""),n){case"<":t=x+t+w+M;break;case"=":t=x+M+t+w;break;case"^":t=M.slice(0,S=M.length>>1)+x+t+w+M.slice(S);break;default:t=M+x+t+w}return o(t)}return h=null==h?6:/[gprs]/.test(b)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,e){var n=c(((t=Ua(t)).type="f",t)),a=3*Math.max(-8,Math.min(8,Math.floor(Ia(e)/3))),r=Math.pow(10,-a),i=Xa[8+a/3];return function(t){return n(r*t)+i}}}}function Ha(t,e,n,a){var r,i=function(t,e,n){var a=Math.abs(e-t)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),i=a/r;return i>=ta?r*=10:i>=ea?r*=5:i>=na&&(r*=2),e<t?-r:r}(t,e,n);switch((a=Ua(null==a?",f":a)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=a.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ia(e)/3)))-Ia(Math.abs(t)))}(i,o))||(a.precision=r),ja(a,o);case"":case"e":case"g":case"p":case"r":null!=a.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Ia(e)-Ia(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(a.precision=r-("e"===a.type));break;case"f":case"%":null!=a.precision||isNaN(r=function(t){return Math.max(0,-Ia(Math.abs(t)))}(i))||(a.precision=r-2*("%"===a.type))}return qa(a)}function Ra(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var a,r,i,o,l=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((a=e<t)&&(r=t,t=e,e=r),0===(o=aa(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(r=Math.ceil(e-t+1));++l<r;)i[l]=(t+l)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(r=Math.ceil(t-e+1));++l<r;)i[l]=(t-l)/o;return a&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var a=e();return Ha(a[0],a[a.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var a,r=e(),i=0,o=r.length-1,l=r[i],c=r[o];return c<l&&(a=l,l=c,c=a,a=i,i=o,o=a),(a=aa(l,c,n))>0?a=aa(l=Math.floor(l/a)*a,c=Math.ceil(c/a)*a,n):a<0&&(a=aa(l=Math.ceil(l*a)/a,c=Math.floor(c*a)/a,n)),a>0?(r[i]=Math.floor(l/a)*a,r[o]=Math.ceil(c/a)*a,e(r)):a<0&&(r[i]=Math.ceil(l*a)/a,r[o]=Math.floor(c*a)/a,e(r)),t},t}function Wa(){var t,e,n=(t=Ta,e=Ta,Ca()(t,e));return n.copy=function(){return Pa(n,Wa())},ya.apply(n,arguments),Ra(n)}function Za(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function Qa(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Ka(t){return t<0?-t*t:t*t}function Ja(t){var e=t(Ta,Ta),n=1;return e.exponent=function(e){return arguments.length?1===(n=+e)?t(Ta,Ta):.5===n?t(Qa,Ka):t(Za(n),Za(1/n)):n},Ra(e)}function tr(){return function t(){var e=Ja(Ca());return e.copy=function(){return Pa(e,t()).exponent(e.exponent())},ya.apply(e,arguments),e}.apply(null,arguments).exponent(.5)}Va=Ba({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),qa=Va.format,ja=Va.formatPrefix;var er=new Date,nr=new Date;function ar(t,e,n,a){function r(e){return t(e=new Date(+e)),e}return r.floor=r,r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,a,i){var o,l=[];if(n=r.ceil(n),i=null==i?1:Math.floor(i),!(n<a&&i>0))return l;do{l.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<a);return l},r.filter=function(n){return ar(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,a){if(t>=t)if(a<0)for(;++a<=0;)for(;e(t,-1),!n(t););else for(;--a>=0;)for(;e(t,1),!n(t););})},n&&(r.count=function(e,a){return er.setTime(+e),nr.setTime(+a),t(er),t(nr),Math.floor(n(er,nr))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(a?function(e){return a(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var rr=ar(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});rr.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ar(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):rr:null};var ir=6e4,or=6048e5,lr=(ar(function(t){t.setTime(t-t.getMilliseconds())},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),ar(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,e){t.setTime(+t+e*ir)},function(t,e){return(e-t)/ir},function(t){return t.getMinutes()}),ar(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*ir)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),ar(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*ir)/864e5},function(t){return t.getDate()-1}));function cr(t){return ar(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*ir)/or})}var sr=cr(0),fr=cr(1),ur=(cr(2),cr(3),cr(4)),dr=(cr(5),cr(6),ar(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),ar(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));dr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ar(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};ar(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*ir)},function(t,e){return(e-t)/ir},function(t){return t.getUTCMinutes()}),ar(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var hr=ar(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function pr(t){return ar(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/or})}var br=pr(0),gr=pr(1),mr=(pr(2),pr(3),pr(4)),yr=(pr(5),pr(6),ar(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),ar(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function vr(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function xr(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function wr(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}yr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ar(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var _r,Sr,Mr,Ar={"-":"",_:" ",0:"0"},Tr=/^\s*\d+/,kr=/^%/,$r=/[\\^$*+?|[\]().{}]/g;function Er(t,e,n){var a=t<0?"-":"",r=(a?-t:t)+"",i=r.length;return a+(i<n?new Array(n-i+1).join(e)+r:r)}function Nr(t){return t.replace($r,"\\$&")}function Pr(t){return new RegExp("^(?:"+t.map(Nr).join("|")+")","i")}function Cr(t){for(var e={},n=-1,a=t.length;++n<a;)e[t[n].toLowerCase()]=n;return e}function Dr(t,e,n){var a=Tr.exec(e.slice(n,n+1));return a?(t.w=+a[0],n+a[0].length):-1}function Ir(t,e,n){var a=Tr.exec(e.slice(n,n+1));return a?(t.u=+a[0],n+a[0].length):-1}function Lr(t,e,n){var a=Tr.exec(e.slice(n,n+2));return a?(t.U=+a[0],n+a[0].length):-1}function zr(t,e,n){var a=Tr.exec(e.slice(n,n+2));return a?(t.V=+a[0],n+a[0].length):-1}function Ur(t,e,n){var a=Tr.exec(e.slice(n,n+2));return a?(t.W=+a[0],n+a[0].length):-1}function Fr(t,e,n){var a=Tr.exec(e.slice(n,n+4));return a?(t.y=+a[0],n+a[0].length):-1}function Gr(t,e,n){var a=Tr.exec(e.slice(n,n+2));return a?(t.y=+a[0]+(+a[0]>68?1900:2e3),n+a[0].length):-1}function Yr(t,e,n){var a=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return a?(t.Z=a[1]?0:-(a[2]+(a[3]||"00")),n+a[0].length):-1}function Or(t,e,n){var a=Tr.exec(e.slice(n,n+2));return a?(t.m=a[0]-1,n+a[0].length):-1}function Vr(t,e,n){var a=Tr.exec(e.slice(n,n+2));return a?(t.d=+a[0],n+a[0].length):-1}function qr(t,e,n){var a=Tr.exec(e.slice(n,n+3));return a?(t.m=0,t.d=+a[0],n+a[0].length):-1}function jr(t,e,n){var a=Tr.exec(e.slice(n,n+2));return a?(t.H=+a[0],n+a[0].length):-1}function Xr(t,e,n){var a=Tr.exec(e.slice(n,n+2));return a?(t.M=+a[0],n+a[0].length):-1}function Br(t,e,n){var a=Tr.exec(e.slice(n,n+2));return a?(t.S=+a[0],n+a[0].length):-1}function Hr(t,e,n){var a=Tr.exec(e.slice(n,n+3));return a?(t.L=+a[0],n+a[0].length):-1}function Rr(t,e,n){var a=Tr.exec(e.slice(n,n+6));return a?(t.L=Math.floor(a[0]/1e3),n+a[0].length):-1}function Wr(t,e,n){var a=kr.exec(e.slice(n,n+1));return a?n+a[0].length:-1}function Zr(t,e,n){var a=Tr.exec(e.slice(n));return a?(t.Q=+a[0],n+a[0].length):-1}function Qr(t,e,n){var a=Tr.exec(e.slice(n));return a?(t.Q=1e3*+a[0],n+a[0].length):-1}function Kr(t,e){return Er(t.getDate(),e,2)}function Jr(t,e){return Er(t.getHours(),e,2)}function ti(t,e){return Er(t.getHours()%12||12,e,2)}function ei(t,e){return Er(1+lr.count(dr(t),t),e,3)}function ni(t,e){return Er(t.getMilliseconds(),e,3)}function ai(t,e){return ni(t,e)+"000"}function ri(t,e){return Er(t.getMonth()+1,e,2)}function ii(t,e){return Er(t.getMinutes(),e,2)}function oi(t,e){return Er(t.getSeconds(),e,2)}function li(t){var e=t.getDay();return 0===e?7:e}function ci(t,e){return Er(sr.count(dr(t),t),e,2)}function si(t,e){var n=t.getDay();return t=n>=4||0===n?ur(t):ur.ceil(t),Er(ur.count(dr(t),t)+(4===dr(t).getDay()),e,2)}function fi(t){return t.getDay()}function ui(t,e){return Er(fr.count(dr(t),t),e,2)}function di(t,e){return Er(t.getFullYear()%100,e,2)}function hi(t,e){return Er(t.getFullYear()%1e4,e,4)}function pi(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Er(e/60|0,"0",2)+Er(e%60,"0",2)}function bi(t,e){return Er(t.getUTCDate(),e,2)}function gi(t,e){return Er(t.getUTCHours(),e,2)}function mi(t,e){return Er(t.getUTCHours()%12||12,e,2)}function yi(t,e){return Er(1+hr.count(yr(t),t),e,3)}function vi(t,e){return Er(t.getUTCMilliseconds(),e,3)}function xi(t,e){return vi(t,e)+"000"}function wi(t,e){return Er(t.getUTCMonth()+1,e,2)}function _i(t,e){return Er(t.getUTCMinutes(),e,2)}function Si(t,e){return Er(t.getUTCSeconds(),e,2)}function Mi(t){var e=t.getUTCDay();return 0===e?7:e}function Ai(t,e){return Er(br.count(yr(t),t),e,2)}function Ti(t,e){var n=t.getUTCDay();return t=n>=4||0===n?mr(t):mr.ceil(t),Er(mr.count(yr(t),t)+(4===yr(t).getUTCDay()),e,2)}function ki(t){return t.getUTCDay()}function $i(t,e){return Er(gr.count(yr(t),t),e,2)}function Ei(t,e){return Er(t.getUTCFullYear()%100,e,2)}function Ni(t,e){return Er(t.getUTCFullYear()%1e4,e,4)}function Pi(){return"+0000"}function Ci(){return"%"}function Di(t){return+t}function Ii(t){return Math.floor(+t/1e3)}!function(t){_r=function(t){var e=t.dateTime,n=t.date,a=t.time,r=t.periods,i=t.days,o=t.shortDays,l=t.months,c=t.shortMonths,s=Pr(r),f=Cr(r),u=Pr(i),d=Cr(i),h=Pr(o),p=Cr(o),b=Pr(l),g=Cr(l),m=Pr(c),y=Cr(c),v={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:null,d:Kr,e:Kr,f:ai,H:Jr,I:ti,j:ei,L:ni,m:ri,M:ii,p:function(t){return r[+(t.getHours()>=12)]},Q:Di,s:Ii,S:oi,u:li,U:ci,V:si,w:fi,W:ui,x:null,X:null,y:di,Y:hi,Z:pi,"%":Ci},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return l[t.getUTCMonth()]},c:null,d:bi,e:bi,f:xi,H:gi,I:mi,j:yi,L:vi,m:wi,M:_i,p:function(t){return r[+(t.getUTCHours()>=12)]},Q:Di,s:Ii,S:Si,u:Mi,U:Ai,V:Ti,w:ki,W:$i,x:null,X:null,y:Ei,Y:Ni,Z:Pi,"%":Ci},w={a:function(t,e,n){var a=h.exec(e.slice(n));return a?(t.w=p[a[0].toLowerCase()],n+a[0].length):-1},A:function(t,e,n){var a=u.exec(e.slice(n));return a?(t.w=d[a[0].toLowerCase()],n+a[0].length):-1},b:function(t,e,n){var a=m.exec(e.slice(n));return a?(t.m=y[a[0].toLowerCase()],n+a[0].length):-1},B:function(t,e,n){var a=b.exec(e.slice(n));return a?(t.m=g[a[0].toLowerCase()],n+a[0].length):-1},c:function(t,n,a){return M(t,e,n,a)},d:Vr,e:Vr,f:Rr,H:jr,I:jr,j:qr,L:Hr,m:Or,M:Xr,p:function(t,e,n){var a=s.exec(e.slice(n));return a?(t.p=f[a[0].toLowerCase()],n+a[0].length):-1},Q:Zr,s:Qr,S:Br,u:Ir,U:Lr,V:zr,w:Dr,W:Ur,x:function(t,e,a){return M(t,n,e,a)},X:function(t,e,n){return M(t,a,e,n)},y:Gr,Y:Fr,Z:Yr,"%":Wr};function _(t,e){return function(n){var a,r,i,o=[],l=-1,c=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++l<s;)37===t.charCodeAt(l)&&(o.push(t.slice(c,l)),null!=(r=Ar[a=t.charAt(++l)])?a=t.charAt(++l):r="e"===a?" ":"0",(i=e[a])&&(a=i(n,r)),o.push(a),c=l+1);return o.push(t.slice(c,l)),o.join("")}}function S(t,e){return function(n){var a,r,i=wr(1900);if(M(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(a=xr(wr(i.y))).getUTCDay(),a=r>4||0===r?gr.ceil(a):gr(a),a=hr.offset(a,7*(i.V-1)),i.y=a.getUTCFullYear(),i.m=a.getUTCMonth(),i.d=a.getUTCDate()+(i.w+6)%7):(r=(a=e(wr(i.y))).getDay(),a=r>4||0===r?fr.ceil(a):fr(a),a=lr.offset(a,7*(i.V-1)),i.y=a.getFullYear(),i.m=a.getMonth(),i.d=a.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),r="Z"in i?xr(wr(i.y)).getUTCDay():e(wr(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(r+5)%7:i.w+7*i.U-(r+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,xr(i)):e(i)}}function M(t,e,n,a){for(var r,i,o=0,l=e.length,c=n.length;o<l;){if(a>=c)return-1;if(37===(r=e.charCodeAt(o++))){if(r=e.charAt(o++),!(i=w[r in Ar?e.charAt(o++):r])||(a=i(t,n,a))<0)return-1}else if(r!=n.charCodeAt(a++))return-1}return a}return v.x=_(n,v),v.X=_(a,v),v.c=_(e,v),x.x=_(n,x),x.X=_(a,x),x.c=_(e,x),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",vr);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t,xr);return e.toString=function(){return t},e}}}(t),_r.format,_r.parse,Sr=_r.utcFormat,Mr=_r.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Sr("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Mr("%Y-%m-%dT%H:%M:%S.%LZ");function Li(){var t=Ra(function(){var t,e,n,a,r,i=0,o=1,l=Ta,c=!1;function s(e){return isNaN(e=+e)?r:l(0===n?.5:(e=(a(e)-t)*n,c?Math.max(0,Math.min(1,e)):e))}return s.domain=function(r){return arguments.length?(t=a(i=+r[0]),e=a(o=+r[1]),n=t===e?0:1/(e-t),s):[i,o]},s.clamp=function(t){return arguments.length?(c=!!t,s):c},s.interpolator=function(t){return arguments.length?(l=t,s):l},s.unknown=function(t){return arguments.length?(r=t,s):r},function(r){return a=r,t=r(i),e=r(o),n=t===e?0:1/(e-t),s}}()(Ta));return t.copy=function(){return e=t,Li().domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown());var e},function(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}.apply(t,arguments)}function zi(t){if(0==e(`#${t}`).length){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}function Ui(t={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let e=Jn(1,t.x+1),n=Jn(1,t.y+1),a=[];return e.forEach(e=>{e="x"+e.toString(),n.forEach(n=>{n="y"+n.toString();let r=Math.random()*t.scaleFactor;r=t.diverging&&Math.random()<.5?-r:r,a.push({x:e,y:n,value:r,displayValue:parseFloat(r.toExponential()).toPrecision(3),r:t.bubble?30*Math.random():void 0})})}),a}function Fi(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v7",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}function Gi(t){let e=t.split("_");return 1===e[2].length&&1===e[3].length?t:(e[2].length>e[3].length?(e[2]="del",e.splice(3,1)):e[3].length>e[2].length?(e[3]="ins",e.splice(2,1)):(e[3]="sub",e.splice(2,1)),e.join("_"))}class Yi{constructor(t,e=!1,n=30,a=-40,r=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=a,this.duration=r}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),lt("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){lt("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=K.pageX,e=K.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;lt("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){lt("#"+this.id).html(t)}}function Oi(t){for(var e=t.length/6|0,n=new Array(e),a=0;a<e;)n[a]="#"+t.slice(6*a,6*++a);return n}function Vi(t){return pe(t[t.length-1])}Oi("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Oi("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Oi("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Oi("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Oi("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Oi("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Oi("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Oi("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Oi("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Vi(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Oi)),Vi(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Oi));var qi=Vi(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Oi)),ji=Vi(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Oi)),Xi=Vi(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Oi)),Bi=Vi(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Oi)),Hi=Vi(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Oi));Vi(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Oi)),Vi(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Oi));var Ri=Vi(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Oi));Vi(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Oi)),Vi(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Oi));var Wi=Vi(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Oi));Vi(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Oi));var Zi=Vi(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Oi));Vi(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Oi)),Vi(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Oi));var Qi=Vi(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Oi));Vi(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Oi)),Vi(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Oi)),Vi(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Oi));var Ki=Vi(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Oi)),Ji=Vi(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Oi)),to=Vi(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Oi)),eo=Vi(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Oi)),no=Vi(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Oi)),ao=Vi(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Oi));Ie(oe(300,.5,0),oe(-240,.5,1));Ie(oe(-100,.75,.35),oe(80,1.5,.8)),Ie(oe(260,.75,.35),oe(80,1.5,.8)),oe(),Nt(),Math.PI,Math.PI;function ro(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}ro(Oi("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));ro(Oi("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),ro(Oi("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),ro(Oi("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function io(t,e="YlGnBu",n,a,r=!1){a=void 0===a?ia(t):a,n=void 0===n?ca(t):n;const i=Li(function(t){const e={BuGn:Ri,OrRd:Wi,PuBu:Zi,YlGnBu:Qi,Blues:Ki,Oranges:ao,Greens:Ji,Purples:eo,Reds:no,Greys:to,Grays:to,RdBu:Xi,RdGy:Bi,PiYG:qi,PuOr:ji,RdYlBu:Hi};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return r?i.domain([a,n]):i.domain([n,a]),i}function oo(t,e,n,a,r,i=10,o=10,l={h:10,w:40},c="h",s=!1){let f=[];if(s){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=(f=t.map(t=>t*e)).concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${a.x}, ${a.y})`).selectAll(".legend").data(f).enter().append("g").classed("legend",!0);"h"===c?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",l.h).attr("transform",`translate(${a.x}, ${a.y})`),u.append("rect").attr("x",(t,e)=>l.w*e).attr("y",5).attr("width",l.w).attr("height",l.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>l.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${a.x}, ${a.y+l.h*f.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>l.h*e).attr("width",l.w).attr("height",l.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>l.h*e+l.h/2))}class lo{constructor(t,e=!0,n=10,a="Reds"){this.data=t,this.useLog=e,this.logBase=n,this.colorScheme=a,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.bubbleScale=void 0,this.toolbar=void 0,this.tooltip=void 0}addTooltip(t){let n=e(`#${t}`),a=t+"-tooltip";0==e(`#${a}`).length&&e("<div/>").attr("id",a).appendTo(n),this.tooltip=new Yi(a),lt(`#${a}`).classed("bubblemap-tooltip",!0)}drawCanvas(t,e={w:1e3,h:600,top:20,left:20},n,a={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(e,n);let r=t.node().getContext("2d");r.fillStyle="#ffffff",r.rect(0,0,t.attr("width"),t.attr("height")),r.fill(),this.data.forEach(t=>{r.beginPath(),r.fillStyle=this.colorScale(t.value),r.arc(this.xScale(t.x)+this.xScale.bandwidth()/2,this.yScale(t.y),this.bubbleScale(t.r),0,2*Math.PI),r.fill(),r.closePath()});let i=a.column,o=a.row;o.show&&(r.save(),r.textAlign=i.textAlign,r.fillStyle="black",r.font="10px Open Sans",this.yScale.domain().forEach(t=>{r.fillText(t,this.xScale.range()[0]-o.adjust,this.yScale(t)+2)}),r.restore()),i.show&&this.xScale.domain().forEach(t=>{r.save(),r.fillStyle="black",r.font="10px Open Sans",r.textAlign=i.textAlign,r.translate(this.xScale(t)+this.xScale.bandwidth()/2-3,this.yScale.range()[1]+i.adjust),r.rotate(0==i.angle?0:Math.PI/(180/i.angle)),r.fillText(t,0,0),r.restore()})}drawCombo(t,e,n={w:1e3,h:600,top:0,left:0},a,r=!0,i={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){let o={w:n.w,h:n.h2,top:n.top,left:n.left};this.drawSvg(e,o,a,50,i);let l=t.append("g").attr("clip-path","url(#clip)");if(this._setMiniScales(n,a),l.selectAll(".mini-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","mini-map-cell").attr("row",t=>`x${this.xScaleMini.domain().indexOf(t.x)}`).attr("col",t=>`y${this.yScaleMini.domain().indexOf(t.y)}`).attr("cx",t=>this.xScaleMini(t.x)+this.xScaleMini.bandwidth()/2).attr("cy",t=>this.yScaleMini(t.y)).attr("r",t=>this.bubbleScaleMini(t.r)).style("fill",t=>this.colorScale(t.value)),r){let a=jn().extent([[0,0],[n.w,n.h]]).on("brush",()=>{this._brushed(e,i)});t.append("g").attr("class","brush").call(a).call(a.move,[0,50*this.xScaleMini.bandwidth()])}}drawSvg(t,e={w:1e3,h:600,top:0,left:0},n,a=50,r={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(e,n,a);let i=this.tooltip;t.append("g").attr("clip-path","url(#clip)").selectAll(".bubble-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","bubble-map-cell").attr("row",t=>`x${this.xScale.domain().indexOf(t.x)}`).attr("col",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("cx",t=>this.xScale(t.x)+this.xScale.bandwidth()/2).attr("cy",t=>this.yScale(t.y)+this.yScale.bandwidth()/2).attr("r",t=>this.bubbleScale(t.r)).style("fill",t=>this.colorScale(t.value)).on("mouseover",function(e){let n=lt(this),a=n.attr("row"),r=n.attr("col");t.selectAll(".bubble-map-xlabel").filter(`.${a}`).classed("highlighted",!0),t.selectAll(".bubble-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);let o=void 0===e.displayValue?parseFloat(e.value.toExponential()).toPrecision(4):e.displayValue,l=void 0===e.rDisplayValue?e.r.toPrecision(4):e.rDisplayValue,c=void 0===e.displayX?e.x:e.displayX,s=void 0===e.displayY?e.y:e.displayY;i.show(`Column: ${c} <br/> Row: ${s}<br/> Value: ${o}<br/> Size: ${l}`)}).on("mouseout",function(){t.selectAll("*").classed("highlighted",!1),i.hide()});let o=r.column,l=r.row;if(o.show){let e={};ua().key(t=>t.x).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayX});t.selectAll(".bubble-map-xlabel").data(this.xScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-xlabel x${e}`).attr("x",0).attr("y",0).attr("text-anchor","left"==o.textAlign?"start":"end").style("cursor","default").style("font-size",()=>{return`${Math.floor(this.xScale.bandwidth()/2)>12?12:Math.floor(this.xScale.bandwidth()/2)}px`}).attr("transform",t=>{return`translate(${this.xScale(t)+this.xScale.bandwidth()/3}, ${this.yScale.range()[1]+o.adjust}) rotate(${o.angle})`}).text(t=>e[t]||t)}if(l.show){let e={};ua().key(t=>t.y).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayY});t.selectAll(".bubble-map-ylabel").data(this.yScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-ylabel y${e}`).attr("x",0).attr("y",0).attr("text-anchor","left"==l.textAlign?"start":"end").style("cursor","default").style("font-size",()=>{return`${Math.floor(this.yScale.bandwidth()/1.5)>14?14:Math.floor(this.yScale.bandwidth()/1.5)<10?10:Math.floor(this.yScale.bandwidth()/1.5)}px`}).attr("transform",t=>{return`translate(${this.xScale.range()[0]-l.adjust}, ${this.yScale(t)+this.yScale.bandwidth()/1.5}) rotate(${l.angle})`}).text(t=>e[t]||t)}}drawColorLegend(t,e={x:0,y:0},n=5,a=""){oo(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:10,w:40},"h",!0)}drawBubbleLegend(t,e={x:0,y:0,title:"Bubble legend"},n=5,a=""){t.selectAll(".bmap-bubble-legend").remove();let r=[...Array(n+1).keys()],i=(this.bubbleScale.domain()[1]-this.bubbleScale.domain()[0])/n,o=r.map(t=>this.bubbleScale.domain()[0]+t*i),l=t.append("g").attr("class","bmap-bubble-legend").attr("transform",`translate(${e.x}, ${e.y})`);l.append("text").attr("class","color-legend").text(e.title).attr("x",-10).attr("text-anchor","end").attr("y",10);let c=l.selectAll(".legend").data(o).enter().append("g").classed("legend",!0);c.append("circle").attr("cx",(t,e)=>40*e).attr("cy",10).attr("r",t=>this.bubbleScale(t)).style("fill","black"),c.append("text").attr("class","color-legend").text(t=>this.useLog?Math.pow(base,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>40*e-5).attr("y",0)}_brushed(t,e){let n=K.selection,a=Math.round(n[0]/this.xScaleMini.step()),r=Math.round(n[1]/this.xScaleMini.step());this.xScale.domain(this.xScaleMini.domain().slice(a,r));let i=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:i,min:2}),t.selectAll(".bubble-map-cell").attr("cx",t=>{let e=this.xScale(t.x);return void 0===e?this.xScale.bandwidth()/2:e+this.xScale.bandwidth()/2}).attr("r",t=>{return void 0===this.xScale(t.x)?0:this.bubbleScale(t.r)}),t.selectAll(".bubble-map-xlabel").attr("transform",t=>{return`translate(${this.xScale(t)+5||0}, ${this.yScale.range()[1]+e.column.adjust}) rotate(${e.column.angle})`}).style("display",t=>{return void 0===this.xScale(t)?"none":"block"})}_setMiniScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScaleMini&&(this.xScaleMini=this._setXScaleMini(t)),void 0===this.yScaleMini&&(this.yScaleMini=this._setYScaleMini(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScaleMini){let t=this._setBubbleMax(!0);this.bubbleScaleMini=this._setBubbleScale({max:t,min:1})}}_setScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScale&&(this.xScale=this._setXScale(t)),void 0===this.yScale&&(this.yScale=this._setYScale(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScale){let t=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:t,min:2})}}_parseXList(){return ua().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_parseYList(){return ua().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_setXScaleMini(t={w:1e3,left:20}){let e=this._parseXList();return this._setXScale(t,e)}_setXScale(t={w:1e3,left:20},e){return e=void 0===e?this._parseXList():e,Sa().domain(e).range([t.left,t.left+t.w]).padding(.05)}_setYScaleMini(t={h:600,top:20}){let e=this._parseYList();return this._setYScale(t,e)}_setYScale(t={h:600,top:20},e){return e=void 0===e?this._parseYList():e,Sa().domain(e).range([t.top,t.top+t.h]).padding(.05)}_setColorScale(t){let e=this.useLog;return io(void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t,this.colorScheme,void 0,void 0,!0)}_setBubbleMax(t=!1,e=2,n=10){let a=t?this.xScaleMini:this.xScale,r=t?this.yScaleMini:this.yScale,i=ia([a.bandwidth(),r.bandwidth()])/e;return n<i?n:i}_setBubbleScale(t={max:10,min:0}){return tr().domain([3,ia(this.data.map(t=>t.r))]).range([t.min,t.max])}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class co{constructor(t,e=0,n=!0,a=10,r="Greys",i=[0,1]){this.data=this._unique(t),this.dataDict={},this.cutoff=e,this.filteredData=this._filter(this.data,this.cutoff),this.dataDict=this._generateDataDict(this.filteredData),this.useLog=n,this.logBase=a,this.colorScheme=r,this.colorScale=this._setColorScale(i),this.xScale=void 0,this.yScale=void 0,this.labelScale=void 0,this.tooltip=void 0}addTooltip(t){let e=t+"-tooltip";0==$(`#${e}`).length&&$("<div/>").attr("id",e).appendTo($(`#${t}`)),this.tooltip=new Yi(e,!1,40,0),lt(`#${e}`).classed("half-map-tooltip",!0)}draw(t,e,n={w:600,top:20,left:20},a=[0,1],r=!0,i=90,o,l){this._drawCanvas(t,n,a,o,l);this.drawSvg(e,n,!1,r,i,a,o,l)}drawColorLegend(t,e={x:0,y:0},n=5,a="",r=[0,1]){void 0===this.colorScale&&this._setColorScale(r),oo(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:20,w:10},"v")}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}_drawCanvas(t,e={w:600,top:20,left:20},n=[0,1],a,r){this._setScales(e,n,a,r);let i=t.node().getContext("2d");i.save(),i.translate(e.left,e.top+this.xScale.bandwidth()*Math.sqrt(2)/2),i.rotate(-.25*Math.PI),i.clearRect(-e.w,-e.w,2*e.w,2*e.w),this.filteredData.forEach(t=>{let e=this.xScale(t.x),n=this.yScale(t.y);void 0!==e&&void 0!==n&&(t.color=0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value),i.fillStyle=this.colorScale(t.value),i.fillRect(e,n,this.xScale.bandwidth(),this.yScale.bandwidth()))}),i.restore()}drawSvg(t,e,n=!0,a=!0,r=90,i=[0,1],o,l){if(n){this._setScales(e,i,o,l);let n=t.append("g").attr("clip-path","url(#clip)").selectAll(".half-map-cell").data(this.filteredData);n.enter().append("rect").attr("class","half-map-cell").attr("row",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("column",t=>`x${this.xScale.domain().indexOf(t.x)}`).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("transform","rotate(-45)").merge(n).style("fill",t=>0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value))}a&&(this._setLabelScale(e),t.selectAll().data(this.labelScale.domain()).enter().append("text").attr("class",(t,e)=>`half-map-label l${e}`).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","none").attr("transform",t=>{return`translate(${this.labelScale(t)+this.labelScale.step()/2}, -5) rotate(-${r})`}).text(t=>t));let c=t.append("rect").attr("class","half-map-cursor").attr("x",0).attr("y",0).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("stroke","#d2111b").style("stroke-width","1px").style("fill","none").style("display","none");t.on("mouseout",()=>{c.style("display","none"),this.tooltip.hide(),t.selectAll(".half-map-label").classed("highlighted",!1)}),lt(t.node().parentNode).style("cursor","none").style("position","absolute").on("mousemove",()=>{let e=st(t.node()),n=e[0],r=e[1],i=.25*Math.PI,o=n*Math.cos(i)-r*Math.sin(i)+this.xScale.step()/2,l=n*Math.sin(i)+r*Math.cos(i)-this.yScale.step()/2;if(n<0||r<0||o<0||l<0)return this.tooltip.hide(),void c.style("display","none");let s=Math.floor(o/this.xScale.step()),f=Math.floor(l/this.yScale.step()),u=this.xScale.domain()[s],d=this.yScale.domain()[f],h=this.dataDict[u+d];void 0!==h?(c.attr("transform",`translate(${n},${r}) rotate(-45)`),c.style("display","block"),this.tooltip.show(`${u}<br/> ${d}<br/> Value: ${h.displayValue}`),a&&(t.selectAll(".half-map-label").classed("highlighted",!1),t.select(`.l${s}`).classed("highlighted",!0),t.select(`.l${f}`).classed("highlighted",!0))):(this.tooltip.hide(),c.style("display","none"))})}_unique(t){t.sort((t,e)=>t.x<e.x?-1:t.x>e.x?1:t.y<e.y?-1:t.y>e.y?1:0);let e={};return t.filter(t=>{let n=t.x+t.y,a=t.y+t.x;return!e.hasOwnProperty(n)&&!e.hasOwnProperty(a)&&(e[n]=!0,!0)})}_filter(t,e){return t.filter(t=>!(t.value<e))}_generateDataDict(t){let e={};return t.forEach(t=>{e[t.x+t.y]=t,e[t.y+t.x]=t}),e}_setScales(t={w:600,top:20,left:20},e=[0,1],n,a){(n||void 0===this.xScale)&&this._setXScale(t,n),(a||void 0===this.yScale)&&this._setYScale(t,a),void 0===this.colorScale&&this._setColorScale(e)}_setXScale(t={w:600},e){void 0===e&&(e=ua().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.xScale=Sa().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setYScale(t={w:600},e){void 0===e&&(e=ua().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.yScale=Sa().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setLabelScale(t={w:600}){void 0===this.xScale&&this._setXScale();let e=this.xScale.domain();this.labelScale=Sa().domain(e).range([0,t.w]).padding(.05)}_setColorScale(t){let e=this.useLog,n=void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t;this.colorScale=io(n,this.colorScheme)}}var so=function t(e){function n(t,n){var a,r;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=a)i=a,a=null;else do{a=2*e()-1,i=2*e()-1,r=a*a+i*i}while(!r||r>1);return t+n*i*Math.sqrt(-2*Math.log(r)/r)}}return n.source=t,n}(function(){return Math.random()});class fo{constructor(t,n,a=!1){e(`#${t}`).show();const r=a?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=e("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=n}createDownloadSvgButton(t,e,n,a,r="fa-download"){this.createButton(t,r);lt(`#${t}`).on("click",()=>{this.downloadSvg(e,n,a)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);lt(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,n="fa-download"){const a=e("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return e("<i/>").addClass(`fa ${n}`).appendTo(a),this.buttons[t]=a,a}attachTooltip(t){this.tooltip=t}downloadSvg(t,a,r){let i=e(e(e(`${"#"+t}`))[0]),o=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),l=function(t){for(var n="",a=document.styleSheets,r=0;r<a.length;r++)try{if(null==a[r].cssRules)continue;for(var i=a[r].cssRules,o=0;o<i.length;o++){var l=i[o];if(void 0!==l.style){var c,s=void 0===l.selectorText?l.selectorText:l.selectorText.replace(`#${t[0].id} `,"");try{c=e(t).find(s)}catch(t){c=[]}c.length>0&&(n+=l.selectorText+" { "+l.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var f=document.createElement("style");return f.setAttribute("type","text/css"),f.innerHTML="<![CDATA[\n"+n+"\n]]>",f}(i.get());o.prepend(l),e("#"+r).html("").hide();let c=e(`#${r}`).append(o).html(),s=new Blob([c],{type:"image/svg+xml"});n(s,a),e(`#${r}`).html("").hide()}}var uo=Array.prototype.slice;function ho(t){return t}var po=1,bo=2,go=3,mo=4,yo=1e-6;function vo(t){return"translate("+(t+.5)+",0)"}function xo(t){return"translate(0,"+(t+.5)+")"}function wo(){return!this.__axis}function _o(t,e){var n=[],a=null,r=null,i=6,o=6,l=3,c=t===po||t===mo?-1:1,s=t===mo||t===bo?"x":"y",f=t===po||t===go?vo:xo;function u(u){var d=null==a?e.ticks?e.ticks.apply(e,n):e.domain():a,h=null==r?e.tickFormat?e.tickFormat.apply(e,n):ho:r,p=Math.max(i,0)+l,b=e.range(),g=+b[0]+.5,m=+b[b.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=u.selection?u.selection():u,x=v.selectAll(".domain").data([null]),w=v.selectAll(".tick").data(d,e).order(),_=w.exit(),S=w.enter().append("g").attr("class","tick"),M=w.select("line"),A=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(s+"2",c*i)),A=A.merge(S.append("text").attr("fill","currentColor").attr(s,c*p).attr("dy",t===po?"0em":t===go?"0.71em":"0.32em")),u!==v&&(x=x.transition(u),w=w.transition(u),M=M.transition(u),A=A.transition(u),_=_.transition(u).attr("opacity",yo).attr("transform",function(t){return isFinite(t=y(t))?f(t):this.getAttribute("transform")}),S.attr("opacity",yo).attr("transform",function(t){var e=this.parentNode.__axis;return f(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),x.attr("d",t===mo||t==bo?o?"M"+c*o+","+g+"H0.5V"+m+"H"+c*o:"M0.5,"+g+"V"+m:o?"M"+g+","+c*o+"V0.5H"+m+"V"+c*o:"M"+g+",0.5H"+m),w.attr("opacity",1).attr("transform",function(t){return f(y(t))}),M.attr(s+"2",c*i),A.attr(s,c*p).text(h),v.filter(wo).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===bo?"start":t===mo?"end":"middle"),v.each(function(){this.__axis=y})}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=uo.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:uo.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(a=null==t?null:uo.call(t),u):a&&a.slice()},u.tickFormat=function(t){return arguments.length?(r=t,u):r},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(l=+t,u):l},u}function So(t){return _o(go,t)}var Mo=Math.PI,Ao=2*Mo,To=Ao-1e-6;function ko(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function $o(){return new ko}function Eo(t){return function(){return t}}ko.prototype=$o.prototype={constructor:ko,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,a){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+a)},bezierCurveTo:function(t,e,n,a,r,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +a+","+(this._x1=+r)+","+(this._y1=+i)},arcTo:function(t,e,n,a,r){t=+t,e=+e,n=+n,a=+a,r=+r;var i=this._x1,o=this._y1,l=n-t,c=a-e,s=i-t,f=o-e,u=s*s+f*f;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(f*l-c*s)>1e-6&&r){var d=n-i,h=a-o,p=l*l+c*c,b=d*d+h*h,g=Math.sqrt(p),m=Math.sqrt(u),y=r*Math.tan((Mo-Math.acos((p+u-b)/(2*g*m)))/2),v=y/m,x=y/g;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*s)+","+(e+v*f)),this._+="A"+r+","+r+",0,0,"+ +(f*d>s*h)+","+(this._x1=t+x*l)+","+(this._y1=e+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,a,r,i){t=+t,e=+e;var o=(n=+n)*Math.cos(a),l=n*Math.sin(a),c=t+o,s=e+l,f=1^i,u=i?a-r:r-a;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+c+","+s),n&&(u<0&&(u=u%Ao+Ao),u>To?this._+="A"+n+","+n+",0,1,"+f+","+(t-o)+","+(e-l)+"A"+n+","+n+",0,1,"+f+","+(this._x1=c)+","+(this._y1=s):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=Mo)+","+f+","+(this._x1=t+n*Math.cos(r))+","+(this._y1=e+n*Math.sin(r))))},rect:function(t,e,n,a){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +a+"h"+-n+"Z"},toString:function(){return this._}};Math.PI;function No(t){this._context=t}function Po(t){return new No(t)}function Co(t){return t[0]}function Do(t){return t[1]}function Io(){var t=Co,e=null,n=Eo(0),a=Do,r=Eo(!0),i=null,o=Po,l=null;function c(c){var s,f,u,d,h,p=c.length,b=!1,g=new Array(p),m=new Array(p);for(null==i&&(l=o(h=$o())),s=0;s<=p;++s){if(!(s<p&&r(d=c[s],s,c))===b)if(b=!b)f=s,l.areaStart(),l.lineStart();else{for(l.lineEnd(),l.lineStart(),u=s-1;u>=f;--u)l.point(g[u],m[u]);l.lineEnd(),l.areaEnd()}b&&(g[s]=+t(d,s,c),m[s]=+n(d,s,c),l.point(e?+e(d,s,c):g[s],a?+a(d,s,c):m[s]))}if(h)return l=null,h+""||null}function s(){return function(){var t=Co,e=Do,n=Eo(!0),a=null,r=Po,i=null;function o(o){var l,c,s,f=o.length,u=!1;for(null==a&&(i=r(s=$o())),l=0;l<=f;++l)!(l<f&&n(c=o[l],l,o))===u&&((u=!u)?i.lineStart():i.lineEnd()),u&&i.point(+t(c,l,o),+e(c,l,o));if(s)return i=null,s+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:Eo(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Eo(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Eo(!!t),o):n},o.curve=function(t){return arguments.length?(r=t,null!=a&&(i=r(a)),o):r},o.context=function(t){return arguments.length?(null==t?a=i=null:i=r(a=t),o):a},o}().defined(r).curve(o).context(i)}return c.x=function(n){return arguments.length?(t="function"==typeof n?n:Eo(+n),e=null,c):t},c.x0=function(e){return arguments.length?(t="function"==typeof e?e:Eo(+e),c):t},c.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:Eo(+t),c):e},c.y=function(t){return arguments.length?(n="function"==typeof t?t:Eo(+t),a=null,c):n},c.y0=function(t){return arguments.length?(n="function"==typeof t?t:Eo(+t),c):n},c.y1=function(t){return arguments.length?(a=null==t?null:"function"==typeof t?t:Eo(+t),c):a},c.lineX0=c.lineY0=function(){return s().x(t).y(n)},c.lineY1=function(){return s().x(t).y(a)},c.lineX1=function(){return s().x(e).y(n)},c.defined=function(t){return arguments.length?(r="function"==typeof t?t:Eo(!!t),c):r},c.curve=function(t){return arguments.length?(o=t,null!=i&&(l=o(i)),c):o},c.context=function(t){return arguments.length?(null==t?i=l=null:l=o(i=t),c):i},c}function Lo(t){return t<0?-1:1}function zo(t,e,n){var a=t._x1-t._x0,r=e-t._x1,i=(t._y1-t._y0)/(a||r<0&&-0),o=(n-t._y1)/(r||a<0&&-0),l=(i*r+o*a)/(a+r);return(Lo(i)+Lo(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(l))||0}function Uo(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Fo(t,e,n){var a=t._x0,r=t._y0,i=t._x1,o=t._y1,l=(i-a)/3;t._context.bezierCurveTo(a+l,r+l*e,i-l,o-l*n,i,o)}function Go(t){this._context=t}function Yo(t){this._context=t}No.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},Go.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Fo(this,this._t0,Uo(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Fo(this,Uo(this,n=zo(this,t,e)),n);break;default:Fo(this,this._t0,n=zo(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new Yo(t)}.prototype=Object.create(Go.prototype)).point=function(t,e){Go.prototype.point.call(this,e,t)},Yo.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,a,r,i){this._context.bezierCurveTo(e,t,a,n,i,r)}};const Oo={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},Vo={nrd:function(t){let e=(ra(t,.75)-ra(t,.25))/1.34;return 1.06*Math.min(Qn(t),e)*Math.pow(t.length,-.2)}};class qo{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0}render(t,e=500,n=357,a=.05,r,i=[-3,3],o="Y axis",l=!0,c=30,s=!0,f=0,u=!1,d=!1,h=!1,p=!1,b=!1,g=!1,m=0){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,e,n,a,r,i,o,l,c,s,f,u,d,h,p,b,g)}),this.updateYScale=function(i,o){t.selectAll("*").remove(),void 0===o&&(o=[]),this.render(t,e,n,a,r,[],i,l,c,s,f,u,d,h,p,b,g)},this.updateXScale=function(r){void 0===r&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,e,n,a,r,[],o,l,c,s,f,u,d,h,p,b,g)},void 0===i||0==i.length){let t=[];this.data.forEach(e=>t=t.concat(e.values)),i=Kn(t)}this.groups=ua().key(t=>t.group).entries(this.data),this.scale={x:Sa().rangeRound([0,e]).domain(r||this.groups.map(t=>t.key)).paddingInner(a),subx:Sa(),y:Wa().rangeRound([n,0]).domain(i),z:Wa()},this.groups.forEach(e=>{let a=e.key,r=e.values,o=this.groupInfo[a];if(e.index=this.scale.x.domain().indexOf(a),void 0!==o){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(o[t])<=parseFloat(o.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,e)=>{return`translate(${this.scale.x(a)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`}).text(t=>`${t}: ${parseFloat(parseFloat(o[t]).toPrecision(3)).toExponential()}`)}b&&r.sort((t,e)=>t.label<e.label?-1:t.label>e.label?1:0),this.scale.subx.domain(r.map(t=>t.label)).rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]),r.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(Bn),this._drawViolin(t,n,u,e.index,g,m))});var l=18;if(p){const e=Sa().domain(r.map(t=>null==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+l})`).call(So(e))}if(s){l=5;const e=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+l})`).call(So(this.scale.subx));f>0&&e.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${f}, 2, 10)`)}});let y=s?55:0;var v;if(this.xAxis=l?So(this.scale.x):So(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+y})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${c}, -10, 10)`),y=5,this.yAxis=(v=this.scale.y,_o(mo,v)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${y}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*y+lt(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(o),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),d&&this._addGroupDivider(t),h){const e=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");e.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=e.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),a=10;n.append("rect").attr("x",(t,e)=>5+60*e+this.scale.x.range()[0]).attr("y",-28).attr("width",a).attr("height",a).style("fill",t=>t.color),n.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,e)=>17+60*e+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,a=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${a})`).text(e)}createTooltip(t){return 0==e(`#${t}`).length&&e("<div/>").attr("id",t).appendTo(e("body")),this.tooltip=new Yi(t),lt(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return this.toolbar=new fo(t,e),this.toolbar}addBrush(t){const e=Xn(Dn);e.on("end",()=>{this.zoom(t,e)}),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,a=K.selection;if(void 0===e)this.reset();else if(a){this.scale.x.domain(this.scale.x.domain().filter((t,e)=>{const n=Math.floor(a[0][0]/this.scale.x.bandwidth()),r=Math.floor(a[1][0]/this.scale.x.bandwidth());return e>=n&&e<=r}));const n=Math.floor(this.scale.y.invert(a[1][1])),r=Math.floor(this.scale.y.invert(a[0][1]));this.scale.y.domain([n,r]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout(function(){n=null},350);this.reset()}let r=t.transition().duration(750);t.select(".axis--x").transition(r).call(this.xAxis),t.select(".axis--y").transition(r).call(this.yAxis),this.groups.forEach((e,n)=>{let a=e.key,i=e.values;this.scale.subx.rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(a);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=t.select(`#violin${e.index}-${n.label}`);i.select(".violin").transition(r).attr("d",Io().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const o=ra(n.values,.25),l=ra(n.values,.75);i.select(".violin-ir").transition(r).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(l)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(l)-this.scale.y(o)));const c=la(n.values);i.select(".violin-median").transition(r).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(c)).attr("y2",this.scale.y(c))})})}_drawViolin(t,e,n,a,r,i){let o=function(t,e,n){return function(a){return e.map(e=>[e,oa(a,a=>t((e-a)/n))/n])}}(Oo.gaussian,this.scale.y.ticks(100),Vo.nrd(e.values));const l=Kn(e.values),c=o(e.values).filter(t=>t[0]>=l[0]&&t[0]<=l[1]),s=t.append("g").attr("id",`violin${a}-${e.label}`).attr("class","violin-g").datum(e);if(e.values.length>=i&&c.length&&this._validVertices(c)){let i=ia(c,t=>Math.abs(t[1]));this.scale.z.domain([-i,i]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);let o=Io().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const l=s.append("path").datum(c).attr("d",o).classed("violin",!0).style("fill",()=>void 0!==e.color?e.color:a%2==0?"#90c1c1":"#94a8b8"),f=ra(e.values,.25),u=ra(e.values,.75),d=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(u-f),a=ia(e.values.filter(t=>t<=u+1.5*n)),r=ca(e.values.filter(t=>t>=f-1.5*n));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(a)).attr("y2",this.scale.y(r)).style("stroke","#fff")}s.append("rect").attr("x",this.scale.z(-d)).attr("y",this.scale.y(u)).attr("width",Math.abs(this.scale.z(-d)-this.scale.z(d))).attr("height",Math.abs(this.scale.y(u)-this.scale.y(f))).attr("class","violin-ir");const h=la(e.values);if(s.append("line").attr("x1",this.scale.z(-d)).attr("x2",this.scale.z(d)).attr("y1",this.scale.y(h)).attr("y2",this.scale.y(h)).attr("class","violin-median"),r){let t=so(0,d/2);const n=Math.abs(u-f),a=ia(e.values.filter(t=>t<=u+1.5*n)),r=ca(e.values.filter(t=>t>=f-1.5*n)),i=e.values.filter(t=>t<r||t>a);s.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(t())).attr("cy",t=>this.scale.y(t)).attr("r",2)}s.on("mouseover",()=>{l.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+h.toPrecision(4)+"<br/>")}),s.on("mouseout",()=>{l.classed("highlighted",!1)})}else if(i){let t=ia(e.values,t=>Math.abs(t));this.scale.z.domain([-t,t]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const n=this.scale.z.domain()[1]/3;let a=so(0,n/2);s.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",()=>this.scale.z(a())).attr("cy",t=>this.scale.y(t)).attr("r",2)}}_sanityCheck(t){const e=["group","label","values"];t.forEach(t=>{e.forEach(e=>{if(void 0===t[e])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const e=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),a=(t,a)=>a!==e.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+n/2:0;t.selectAll(".vline").data(e).enter().append("line").classed("vline",!0).attr("x1",a).attr("x2",a).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,n)=>n!=e.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,e)=>t.concat(e),[]).filter(t=>isNaN(t)).length}}const jo={id:"gtexGroupedViolinPlot",data:{heatmap:Ui({x:50,y:10,scaleFactor:1e3}),dendroHeatmap:{rowTree:"(((TP53:0.17,SLK:0.17):1.18,NDRG4:1.34):1.33,ACTN3:2.67);",colTree:"(((Adipose Visceral Omentum:0.06,Adipose Subcutaneous:0.06):0.00,Bladder:0.06):0.16,Adrenal Gland:0.22);",heatmap:[{y:"SLK",value:35.505,x:"Adipose Subcutaneous",unit:"TPM"},{y:"SLK",value:29.28,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"SLK",value:17.405,x:"Adrenal Gland",unit:"TPM"},{y:"SLK",value:53.29,x:"Bladder",unit:"TPM"},{y:"NDRG4",value:12.035,x:"Adipose Subcutaneous",unit:"TPM"},{y:"NDRG4",value:6.531000000000001,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"NDRG4",value:134.8,x:"Adrenal Gland",unit:"TPM"},{y:"NDRG4",value:7.1160000000000005,x:"Bladder",unit:"TPM"},{y:"TP53",value:29.935,x:"Adipose Subcutaneous",unit:"TPM"},{y:"TP53",value:23.55,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"TP53",value:18.515,x:"Adrenal Gland",unit:"TPM"},{y:"TP53",value:40.51,x:"Bladder",unit:"TPM"},{y:"ACTN3",value:.33145,x:"Adipose Subcutaneous",unit:"TPM"},{y:"ACTN3",value:.3317,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"ACTN3",value:.100005,x:"Adrenal Gland",unit:"TPM"},{y:"ACTN3",value:.48100000000000004,x:"Bladder",unit:"TPM"}]},groupedViolinPlot:[{group:"Group 1",label:"Gene 1",values:Jn(0,2e3).map(so(2,1))},{group:"Group 1",label:"Gene 2",values:Jn(0,2e3).map(so(5,1))},{group:"Group 1",label:"Gene 3",values:Jn(0,2e3).map(so(10,1))},{group:"Group 2",label:"Gene 1",values:Jn(0,2e3).map(so(5,1))},{group:"Group 2",label:"Gene 2",values:Jn(0,2e3).map(so(3,1))},{group:"Group 2",label:"Gene 3",values:Jn(0,2e3).map(so(1,1))},{group:"Group 3",label:"Gene 1",values:Jn(0,2e3).map(so(2,1))},{group:"Group 3",label:"Gene 2",values:Jn(0,2e3).map(so(3,1))},{group:"Group 3",label:"Gene 3",values:Jn(0,2e3).map(so(5,1))}],transcriptTracks:{exons:{"ENST00000311595.9":[{chrom:"17",chromEnd:77071172,exonId:"ENSE00002713933.1",exonNumber:"1",chromStart:77071151,strand:"+"},{chrom:"17",chromEnd:77073579,exonId:"ENSE00003672628.1",exonNumber:"2",chromStart:77073512,strand:"+"},{chrom:"17",chromEnd:77073946,exonId:"ENSE00003475281.1",exonNumber:"3",chromStart:77073745,strand:"+"},{chrom:"17",chromEnd:77075719,exonId:"ENSE00001111713.1",exonNumber:"4",chromStart:77075571,strand:"+"},{chrom:"17",chromEnd:77076446,exonId:"ENSE00003651250.1",exonNumber:"5",chromStart:77076289,strand:"+"},{chrom:"17",chromEnd:77077155,exonId:"ENSE00003607773.1",exonNumber:"6",chromStart:77077007,strand:"+"},{chrom:"17",chromEnd:77078612,exonId:"ENSE00002720924.1",exonNumber:"7",chromStart:77077980,strand:"+"}]},transcripts:[{chromosome:"17",end:77078612,gencodeId:"ENSG00000167280.12",geneSymbol:"ENGASE",start:77071151,strand:"+",transcriptId:"ENST00000311595.9"}]},bubbleMap:Ui({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),ldPlot:Ui({x:2,y:2,scaleFactor:1})}.groupedViolinPlot,width:500,height:300,marginLeft:100,marginRight:20,marginTop:50,marginBottom:100,showDivider:!0,xPadding:.3,yLabel:"Random Value",showSubX:!0,showX:!0,xAngle:0,subXAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0};function Xo(t=jo){console.log(t.data);let e={top:t.marginTop,right:t.marginRight,bottom:t.marginBottom,left:t.marginLeft};zi(t.id);let n=t.width-(t.marginLeft+t.marginRight),a=t.height-(t.marginTop+t.marginBottom),r=(t.id,`${t.id}Tooltip`),i=function(t,e,n,a,r,i="relative"){return zi(t),void 0===r&&(r=`${t}-svg`),lt("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",r).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}(t.id,t.width,t.height,e);const o=new qo(t.data);return o.render(i,n,a,t.xPadding,void 0,[],t.yLabel,t.showX,t.xAngle,t.showSubX,t.subXAngle,t.showWhisker,t.showDivider,t.showLegend,t.showSampleSize,t.sortSubX,t.showOutliers,t.numPoints),i.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1),o.createTooltip(r),i}function Bo(t,e,n,a,r,i=Fi()){p(i.dyneqtl+`?variantId=${n}&gencodeId=${e}&tissueSiteDetailId=${a}`,{credentials:"include"}).then(function(e){let n=function(t){["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: Required json attribute is missing: "+e}),t.expression_values=t.data.map(t=>parseFloat(t)),t.genotypes=t.genotypes.map(t=>parseFloat(t)),t.homoRefExp=t.expression_values.filter((e,n)=>0===t.genotypes[n]),t.homoAltExp=t.expression_values.filter((e,n)=>2===t.genotypes[n]),t.heteroExp=t.expression_values.filter((e,n)=>1===t.genotypes[n]);let e=t.variantId.split(/_/)[2],n=t.variantId.split(/_/)[3];return t.het=e+n,t.ref=e+e,t.alt=n+n,t}(e);t.data=[{group:r||n.tissueSiteDetailId,label:n.ref.length>2?"ref":n.ref,size:n.homoRefExp.length,values:n.homoRefExp},{group:r||n.tissueSiteDetailId,label:n.het.length>2?"het":n.het,size:n.heteroExp.length,values:n.heteroExp},{group:r||n.tissueSiteDetailId,label:n.alt.length>2?"alt":n.alt,size:n.homoAltExp.length,values:n.homoAltExp}],t.numPoints=10,Xo(t)})}function Ho(t,e,n=Fi()){$(`#${t.divSpinner}`).show(),p(n.geneId+e,{credentials:"include"}).then(a=>{let r=function(t,e=!1,n=null){if(!t.hasOwnProperty("gene"))throw"Parsing Error: attribute gene doesn't exist.";if(0===t.gene.length)throw alert("No gene is found"),"Fatal Error: gene(s) not found";if(e){if(null===n)throw"Please provide a gene ID for search results validation";if(t.gene.length>1){let e=t.gene.filter(t=>t.geneSymbolUpper===n.toUpperCase()||t.gencodeId===n.toUpperCase());if(e.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";if(0===e.length)throw alert("No gene is found with "+n),"Fatal Error: gene not found";t.gene=e}return t.gene[0]}return t.gene}(a,!0,e);$(`#${t.divGeneInfo}`).empty(),$("<span/>").html(`<span>${r.geneSymbol} (${r.gencodeId}), Chr${r.chromosome}:${r.start} - ${r.end} (${r.strand}), ${r.description}`).appendTo($(`#${t.divGeneInfo}`));let i=[p(n.tissue,{credentials:"include"}),p(n.exon+r.gencodeId,{credentials:"include"}),p(n.singleTissueEqtl+r.gencodeId,{credentials:"include"})];Promise.all(i).then(function(e){let a=function(t){const e="tissueInfo";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e],a=n[0];if(!a.hasOwnProperty("tissueSiteDetailId"))throw"Parsing Error: required attr is missing: tissueSiteDetailId";if(!a.hasOwnProperty("rnaSeqAndGenotypeSampleCount"))throw"Parsing Error: required attr is missing: rnaSeqAndGenotypeSampleCount";return n}(e[0]),i=function(t){const e="tissueInfo";if(!t.hasOwnProperty(e))throw"Parsing Error: required json attr is missing: "+e;const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),n.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{})}(e[0]),o=function(t){if(!t.hasOwnProperty("exon"))throw"Parsing Error: required json attribute is missing: exon";return t.exon}(e[1]),l=function(t,e){const n="singleTissueEqtl";if(!t.hasOwnProperty(n))throw"Parsing Error: required attribute is not found: "+n;return["variantId","tissueSiteDetailId","nes","pValue"].forEach(e=>{if(!t[n][0].hasOwnProperty(e))throw"Parsing Error: required attribute is missing: "+n}),t[n].map(t=>(t.x=t.variantId,t.displayX=Gi(t.variantId),t.y=t.tissueSiteDetailId,e&&(t.displayY=e[t.tissueSiteDetailId].tissueSiteDetail),t.value=t.nes,t.displayValue=t.nes.toPrecision(3),t.r=-Math.log10(t.pValue),t.rDisplayValue=parseFloat(t.pValue.toExponential()).toPrecision(3),t))}(e[2],i);t.data=l;let c=Zo(t=function(t){t.margin={left:t.marginLeft+t.focusPanelLabels.row.width+t.focusPanelLabels.row.adjust,top:t.marginTop,right:t.marginRight,bottom:t.marginBottom+t.focusPanelLabels.column.height};let e=ua().key(t=>t.y).entries(t.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN),n=(t.height-(t.margin.top+t.margin.bottom+t.miniPanelHeight+t.legendHeight))/e.length;n<10?t.height=10*e.length+t.margin.top+t.margin.bottom+t.miniPanelHeight+t.legendHeight:n>18&&(t.height=18*e.length+t.margin.top+t.margin.bottom+t.miniPanelHeight+t.legendHeight);if(t.inWidth=t.width-(t.margin.left+t.margin.right),t.inHeight=t.height-(t.margin.top+t.margin.bottom),t.focusPanelHeight=t.inHeight-(t.legendHeight+t.miniPanelHeight),t.focusPanelHeight<0)throw"Config error: focus panel height is negative.";return t.focusPanelMargin={left:t.margin.left,top:t.margin.top+t.miniPanelHeight+t.legendHeight},t.ldPanelMargin={left:t.margin.left,top:0},t}(t),r,a,o,i,n);p(n.ld+r.gencodeId,{credentials:"include"}).then(e=>{let s=function(t){if(!t.hasOwnProperty("ld"))throw"Parsing Error: required json attribute is missing: ld";let e=[],n={};return t.ld.forEach(t=>{let a=t[0].split(",").sort();n[a[0]]=!0,n[a[1]]=!0,e.push({x:a[0],displayX:Gi(a[0]),y:a[1],displayY:Gi(a[1]),value:parseFloat(t[1]),displayValue:parseFloat(t[1]).toPrecision(3)})}),Object.keys(n).forEach(t=>{e.push({x:t,displayX:Gi(t),y:t,displayY:Gi(t),value:1,displayValue:"1"})}),e}(e);t.ldData=s.filter(e=>e.value>=t.ldCutoff),Wo(t,c),$(`#${t.divSpinner}`).hide();c.yScale.domain(),c.xScale.domain();$(`#${t.divModal}`).on("hidden.bs.modal",e=>{let s=[];$(`#${t.divModal}`).find(":input").each(function(){$(this).prop("checked")&&s.push($(this).val())}),t.data=l.filter(t=>s.indexOf(t.y)>=0);ua().key(t=>t.x).entries(t.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN);c=Zo(t,r,a,o,i,n,!0),Wo(t,c)})})})})}function Ro(t,e,n,a){zi(t),void 0===a&&(a=`${t}-svg`),lt(`#${a}`).remove();let r=lt("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",a);return r.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",e).attr("height",n),r}function Wo(t,e){let n=new co(t.ldData,t.ldCutoff,!1,void 0,t.ldColorScheme,[0,1]);$(`#${t.ldId}`).empty(),n.addTooltip(t.ldId);let a=lt(`#${t.ldId}`).append("canvas").attr("id",t.ldId+"-ld-canvas").attr("width",t.width).attr("height",t.width).style("position","absolute"),r=Ro(t.ldId,t.width,t.width,void 0),i=r.append("g").attr("class","ld").attr("id","ldG").attr("transform",`translate(${t.ldPanelMargin.left}, ${t.ldPanelMargin.top})`);n.drawColorLegend(r,{x:t.ldPanelMargin.left,y:100},10,"LD"),i.selectAll("*").remove();let o={w:t.inWidth,top:t.ldPanelMargin.top,left:t.ldPanelMargin.left};n.draw(a,i,o,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain()),e.brush.on("brush",()=>{e.brushEvent(),i.selectAll("*").remove(),n.draw(a,i,o,[0,1],!1,void 0,e.xScale.domain(),e.xScale.domain())}),function(t,e,n,a,r){zi(t),Jo([{id:"ldPanel",class:"col-xs-12 col-sm-6 col-lg-2",fontSize:"11px",search:{id:"ldLimit",size:3,value:0,label:"LD cutoff R<sup>2</sup>>="},slider:{id:"ldSlider",type:"range",min:0,max:1,step:.1,value:0}}],t);let i=0;const o=()=>{e.filteredData=e._filter(e.data,i),a.selectAll("*").remove(),e.draw(n,a,r,[0,1],!1,void 0)};$("#ldLimit").keydown(t=>{if(13==t.keyCode){let t=parseFloat($("#ldLimit").val());i=t,o()}}),$("#ldSlider").on("change mousemove",()=>{let t=$("#ldSlider").val();$("#ldLimit").val(t),i=t,o()})}(t.divDashboard,n,a,i,o)}function Zo(t,e,n,a,r,i,o=!1){let l=new lo(t.data,t.useLog,t.logBase,t.colorScheme);l.addTooltip(t.id),l.urls=i,l.variantsInExons={},l.rsLookUp={},l.varLookUp={};let c=Ro(t.id,t.width,t.height,void 0),s=c.append("g").attr("class","context").attr("id","miniG").attr("transform",`translate(${t.margin.left}, ${t.margin.top})`),f=c.append("g").attr("id","focusG").attr("class","focus").attr("transform",`translate(${t.focusPanelMargin.left}, ${t.focusPanelMargin.top})`);return l.drawCombo(s,f,{w:t.inWidth,h:t.miniPanelHeight,top:5,left:0,h2:t.focusPanelHeight},t.colorScaleDomain,!1,t.focusPanelLabels),$(`#${t.divInfo}`).text("Total eQTL counts: "+t.data.length),f.selectAll(".bubble-map-cell").on("mouseover",function(t){let e=lt(this),n=e.attr("row"),a=e.attr("col");f.selectAll(".bubble-map-xlabel").filter(`.${n}`).classed("highlighted",!0),f.selectAll(".bubble-map-ylabel").filter(`.${a}`).classed("highlighted",!0),e.classed("highlighted",!0);let r=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue,i=void 0===t.rDisplayValue?t.r.toPrecision(4):t.rDisplayValue,o=void 0===t.displayX?t.x:t.displayX,c=void 0===t.displayY?t.y:t.displayY;l.tooltip.show(`Column: ${o} <br/> Row: ${c}<br/> NES: ${r}<br/> p-value: ${i}`)}),function(t,e,n,a,r,i){zi(t),$(`#${t}`).empty();let o=$("<div/>").attr("class","col-xs-12 col-sm-6 col-lg-1").css("padding-top","4px").css("margin","1px").css("font-size","12px").appendTo($(`#${t}`));$("<span/>").attr("data-toggle","modal").attr("data-target",`#${n}`).css("margin-left","2px").css("padding-top","2px").css("color","#0868ac").css("cursor","pointer").html('<i class="fas fa-filter"></i>Filter Tissues<br/>').appendTo(o);let l=$(`#${n}`).find(".modal-body");0==$(`#${n}`).find(":input").length&&a.yScale.domain().forEach(t=>{$("<input/>").attr("value",t).attr("type","checkbox").prop("checked",!0).appendTo(l),$("<label/>").css("font-size","12px").css("margin-left","2px").html(i[t].tissueSiteDetail).appendTo(l),$("<br/>").appendTo(l)});Jo([{id:"pvaluePanel",class:"col-xs-12 col-sm-6 col-lg-2",fontSize:"11px",search:{id:"pvalueLimit",size:3,value:0,label:"-log<sub>10</sub>(pValue)>="},slider:{id:"pvalueSlider",type:"range",min:0,max:20,step:1,value:0}},{id:"nesPanel",class:"col-xs-12 col-sm-6 col-lg-2",fontSize:"11px",search:{id:"nesLimit",size:3,value:0,label:"abs(NES)>="},slider:{id:"nesSlider",type:"range",min:0,max:1,step:.1,value:0}},{id:"variantPanel",fontSize:"11px",class:"col-xs-12 col-sm-6 col-lg-2",search:{id:"varLocator",size:20,label:"Variant locator",placeholder:"  Variant or RS ID... "}}],t);let c=$("<div/>").attr("class","col-xs-12 col-sm-6 col-lg-1").css("padding-top","2px").css("margin","1px").css("font-size","12px").appendTo($(`#${t}`));$("<input/>").attr("id","rsSwitch").attr("type","checkbox").css("margin-left","10px").appendTo(c);$("<label/>").css("margin-left","2px").css("padding-top","2px").css("font-size","11px").html("Use RS ID").appendTo(c);let s=0,f=0,u=r.select("#focusG"),d=r.select("#miniG");const h=()=>{u.selectAll(".bubble-map-cell").style("fill",t=>t.r<s?"#fff":Math.abs(t.value)<f?"#fff":a.colorScale(t.value));let t=0;d.selectAll(".mini-map-cell").style("fill",e=>e.r<s?"#fff":Math.abs(e.value)<f?"#fff":(t+=1,a.colorScale(e.value))),$(`#${e}`).text(`Total eQTL counts: ${t}`)};$("#pvalueLimit").keydown(t=>{13==t.keyCode&&(s=parseFloat($("#pvalueLimit").val()),h())}),$("#pvalueSlider").on("change mousemove",()=>{let t=$("#pvalueSlider").val();$("#pvalueLimit").val(t),s=t,h()}),$("#nesLimit").keydown(t=>{13==t.keyCode&&(f=parseFloat($("#nesLimit").val()),h())}),$("#nesSlider").on("change mousemove",()=>{let t=$("#nesSlider").val();$("#nesLimit").val(t),f=t,h()}),d.selectAll(".mini-marker").data(a.xScaleMini.domain()).enter().append("rect").classed("mini-marker",!0).attr("x",t=>a.xScaleMini(t)).attr("y",a.yScaleMini.range()[1]).attr("width",a.xScaleMini.bandwidth()).attr("height",a.yScaleMini.bandwidth()),$("#varLocator").keyup(t=>{let e=$("#varLocator").val();if(e.length>3){const t=new RegExp(e);u.selectAll(".bubble-map-xlabel").classed("query",e=>{var n=t.test(e)||t.test(a.rsLookUp[e])||t.test(a.varLookUp[e]);return n}),d.selectAll(".mini-marker").classed("highlighted",e=>t.test(e)||t.test(a.rsLookUp[e])||t.test(a.varLookUp[e]))}else u.selectAll(".bubble-map-xlabel").classed("query",!1),d.selectAll(".mini-marker").classed("highlighted",!1)}),$("#rsSwitch").change(()=>{$("#rsSwitch").is(":checked")?u.selectAll(".bubble-map-xlabel").text(t=>a.rsLookUp[t]):u.selectAll(".bubble-map-xlabel").text(t=>a.varLookUp[t])})}(t.divDashboard,t.divInfo,t.divModal,l,c,r),function(t){t.rsLookUp={},t.varLookUp={},ua().key(t=>t.x).entries(t.data).forEach(e=>{let n=e.values[0];if(void 0===n.hasOwnProperty("snpId"))throw"Input Error: RS ID lookup table is not built.";if(void 0===n.hasOwnProperty("displayX"))throw"Input Error: display label lookup table is not built.";t.rsLookUp[e.key]=e.values[0].snpId,t.varLookUp[e.key]=e.values[0].displayX})}(l),l.variantsInExons=function(t,e){let n={};return t.forEach(t=>{let a=parseFloat(t.split("_")[1]);e.filter(t=>t.start<=a&&t.end>=a).length>0&&(n[t]=!0)}),n}(l.xScale.domain(),a),function(t,e,n){let a=n.select("#focusG").append("g").attr("id","tissueBadgeG").selectAll(".tissue-badge").data(t.filter(t=>void 0!==e.yScale(t.tissueSiteDetailId))).enter().append("g").classed("tissue-badge",!0);a.append("ellipse").attr("cx",e.xScale.range()[0]-e.xScale.bandwidth()/2-10).attr("cy",t=>e.yScale(t.tissueSiteDetailId)+e.yScale.bandwidth()/2).attr("rx",11).attr("ry",e.yScale.bandwidth()/2).attr("fill","#748797"),a.append("text").text(t=>t.rnaSeqAndGenotypeSampleCount).attr("x",e.xScale.range()[0]-e.xScale.bandwidth()/2-17).attr("y",t=>e.yScale(t.tissueSiteDetailId)+e.yScale.bandwidth()/2+3).attr("fill","#ffffff").style("font-size","8px").attr("text-anchor","center")}(n,l,c),function(t,e){let n="+"==t.strand?t.start:t.end,a="+"==t.strand?t.end:t.start,r=e.xScaleMini.domain();const i=t=>r.filter((e,n)=>{let a=parseFloat(e.split("_")[1]);if(a===t)return!0;if(void 0===r[n+1])return!1;let i=parseFloat(r[n+1].split("_")[1])||void 0;return(a-t)*(i-t)<0});let o=i(n),l=i(a);e.tss=o[0],e.tes=l[0]}(e,l),Qo(l,c,!0),Ko(e,l,c),function(t,e,n){let a=n.id+"violin-dialog";(function(t,e,n){zi(t);let a=$(`#${t}`),r=$("<div/>").attr("id",e).attr("title",n).appendTo(a),i=$("<div/>").html("Clear All").appendTo(r),o=$("<div/>").attr("id","bMap-content").appendTo(r);r.dialog({title:n,autoOpen:!1}),i.click(function(){o.empty()})})(n.divDashboard,n.id+"violin-dialog","eQTL Violin Plot Dialog"),e.selectAll(".bubble-map-cell").on("click",e=>{$(`#${a}`).dialog("open");let n=$("<div/>").attr("class","bMap-dialog").css("float","left").css("margin","20px").appendTo($("#bMap-content")),r=$("<div/>").appendTo(n);$("<i/>").attr("class","fa fa-window-close").css("margin-right","2px").click(function(){n.remove()}).appendTo(r),$("<span/>").attr("class","title").html(`${e.displayX}<br/>${e.displayY}`).appendTo(r);let i="dEqtl"+Date.now().toString();$("<div/>").attr("id",i).appendTo(n);let o={id:i,data:void 0,width:250,height:200,marginLeft:50,marginRight:20,marginTop:20,marginBottom:50,showDivider:!1,xPadding:.3,yLabel:"Norm. Expression",showSubX:!0,showX:!1,subXAngle:0,xAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0};Bo(o,e.gencodeId,e.variantId,e.tissueSiteDetailId,e.displayY,t.urls)})}(l,c,t),l.brushEvent=(()=>{let n=function(t,e,n){let a=K.selection,r=Math.round(a[0]/e.xScaleMini.step()),i=Math.round(a[1]/e.xScaleMini.step()),o=e.xScaleMini.domain().slice(r,i);e.xScale.domain(o);let l=e._setBubbleMax();e.bubbleScale.range([2,l]),e.drawBubbleLegend(n,{x:t.width/2,y:t.focusPanelMargin.top-50,title:"-log10(p-value)"},5,"-log10(p-value)"),n.select("#focusG").selectAll(".bubble-map-cell").attr("cx",t=>{let n=e.xScale(t.x);return void 0===n?e.xScale.bandwidth()/2:n+e.xScale.bandwidth()/2}).attr("r",t=>{let n=e.xScale(t.x);return void 0===n?0:e.bubbleScale(t.r)});let c=t.focusPanelLabels.column;return n.select("#focusG").selectAll(".bubble-map-xlabel").attr("transform",t=>`translate(${e.xScale(t)+e.xScale.bandwidth()/3||0}, ${e.yScale.range()[1]+c.adjust}) rotate(${c.angle})`).style("font-size",()=>`${Math.floor(e.xScale.bandwidth()/2)>10?10:Math.floor(e.xScale.bandwidth()/2)}px`).style("display",t=>void 0===e.xScale(t)?"none":"block"),o}(t,l,c);return(l.tss&&l.xScale(l.tss)||l.tes&&l.xScale(l.tes))&&Qo(l,c,!1),Ko(e,l,c),n}),l.brush=jn().extent([[0,0],[t.inWidth,t.miniPanelHeight+5]]).on("brush",l.brushEvent),l.drawColorLegend(c,{x:t.focusPanelMargin.left,y:t.focusPanelMargin.top-50},4,"NES"),s.append("g").attr("class","brush").call(l.brush).call(l.brush.move,[0,80*l.xScaleMini.bandwidth()]),l.xScaleMini.domain().length==l.xScale.domain().length&&s.style("display","none"),l}function Qo(t,e,n=!1){if(n){let n=e.select("#miniG").append("g").attr("id","miniSiteMarkers");n.append("line").attr("x1",t.xScaleMini(t.tss)+t.xScaleMini.bandwidth()).attr("x2",t.xScaleMini(t.tss)+t.xScaleMini.bandwidth()).attr("y1",0).attr("y2",t.yScaleMini.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),n.append("line").attr("x1",t.xScaleMini(t.tes)+t.xScaleMini.bandwidth()).attr("x2",t.xScaleMini(t.tes)+t.xScaleMini.bandwidth()).attr("y1",0).attr("y2",t.yScaleMini.range()[1]).style("stroke","#748797").style("stroke-width",2)}else{e.select("#siteMarkers").remove();let n=e.select("#focusG").append("g").attr("id","siteMarkers");t.tss&&t.xScale(t.tss)&&(n.append("line").attr("x1",t.xScale(t.tss)+t.xScale.bandwidth()).attr("x2",t.xScale(t.tss)+t.xScale.bandwidth()).attr("y1",0).attr("y2",t.yScale.range()[1]).style("stroke","#94a8b8").style("stroke-width",2),n.append("text").text("TSS").attr("x",t.xScale(t.tss)).attr("y",-5).attr("text-anchor","center").style("font-size","12px")),t.tes&&t.xScale(t.tes)&&(n.append("line").attr("x1",t.xScale(t.tes)+t.xScale.bandwidth()).attr("x2",t.xScale(t.tes)+t.xScale.bandwidth()).attr("y1",0).attr("y2",t.yScale.range()[1]).style("stroke","#748797").style("stroke-width",2),n.append("text").text("TES").attr("x",t.xScale(t.tes)).attr("y",-5).attr("text-anchor","center").style("font-size","12px"))}}function Ko(t,e,n){let a="+"==t.strand?t.start:t.end;let r=[1e-6,.005,.01,.1,.5,2,3,4,5].map(function(t){return 1e5*t}),i=function t(){var e,n=[.5],a=[0,1],r=1;function i(t){return t<=t?a[Wn(n,t,0,r)]:e}return i.domain=function(t){return arguments.length?(n=wa.call(t),r=Math.min(n.length,a.length-1),i):n.slice()},i.range=function(t){return arguments.length?(a=wa.call(t),r=Math.min(n.length,a.length-1),i):a.slice()},i.invertExtent=function(t){var e=a.indexOf(t);return[n[e-1],n[e]]},i.unknown=function(t){return arguments.length?(e=t,i):e},i.copy=function(){return t().domain(n).range(a).unknown(e)},ya.apply(i,arguments)}().domain(r).range(["#000","#252525","#525252","#737373","#969696","#f0f0f0","#fff"]);n.select("#tssDistG").remove();let o=n.select("#focusG").append("g").attr("id","tssDistG");o.selectAll(".track").data(e.xScale.domain()).enter().append("rect").classed("track",!0).attr("x",t=>e.xScale(t)).attr("y",e.yScale.range()[1]).attr("width",e.xScale.bandwidth()).attr("height",e.yScale.bandwidth()).attr("fill",t=>{let e=Math.abs(parseFloat(t.split("_")[1])-a);return i(e)}).attr("stroke",t=>e.variantsInExons[t]?"#239db8":"#cacaca").attr("stroke-width",t=>e.variantsInExons[t]?"2px":"1px").on("mouseover",function(t){let n=Math.abs(parseFloat(t.split("_")[1])-a),r=`${t}<br/>${e.rsLookUp[t]}<br/>TSS Distance: ${n} bp</br>`;r=e.variantsInExons[t]?r+"Exon Region":r,e.tooltip.show(r),lt(this).classed("highlighted",!0)}).on("mouseout",function(t){var n;e.tooltip.hide(),(n=".track","string"==typeof n?new it([document.querySelectorAll(n)],[document.documentElement]):new it([null==n?[]:n],rt)).classed("highlighted",!1)}),o.append("text").text("TSS Proximity").attr("x",e.xScale.range()[0]).attr("y",e.yScale.range()[1]+e.yScale.bandwidth()).attr("text-anchor","end").style("font-size","8px")}function Jo(t,e){t.forEach((t,n)=>{if(0==$(`#${t.id}`).length){let n=$("<div/>").attr("id",t.id).attr("class",t.class).css("font-size",t.fontSize).css("margin","1px").css("padding-top","2px").appendTo($(`#${e}`));n.addClass(t.class),$("<label/>").css("font-weight","normal").html(t.search.label).appendTo(n);$("<input/>").attr("id",t.search.id).attr("value",t.search.value).attr("size",t.search.size).attr("placeholder",t.search.placeholder).css("margin-left","2px").appendTo(n);void 0!==t.slider&&$("<input/>").attr("id",t.slider.id).attr("value",t.slider.value).attr("type",t.slider.type).attr("min",t.slider.min).attr("max",t.slider.max).attr("step",t.slider.step).css("margin-left","0px").css("width","100px").appendTo(n)}})}var tl={render:Ho};t.GeneEqtlVisualizer=tl,t.render=Ho,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
