!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("jquery"),require("file-saver")):"function"==typeof define&&define.amd?define(["exports","jquery","file-saver"],n):n((t=t||self).GeneExpressionViolinPlot={},t.$,t.saveAs)}(this,(function(t,n,e){"use strict";n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n,e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e;var r={},i={};function o(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function a(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function s(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function u(t){var n=t.getUTCHours(),e=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+s(-t,6):t>9999?"+"+s(t,6):s(t,4)}(t.getUTCFullYear())+"-"+s(t.getUTCMonth()+1,2)+"-"+s(t.getUTCDate(),2)+(i?"T"+s(n,2)+":"+s(e,2)+":"+s(r,2)+"."+s(i,3)+"Z":r?"T"+s(n,2)+":"+s(e,2)+":"+s(r,2)+"Z":e||n?"T"+s(n,2)+":"+s(e,2)+"Z":"")}function l(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function s(t,n){var o,a=[],s=t.length,u=0,l=0,c=s<=0,h=!1;function f(){if(c)return i;if(h)return h=!1,r;var n,o,a=u;if(34===t.charCodeAt(a)){for(;u++<s&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=s?c=!0:10===(o=t.charCodeAt(u++))?h=!0:13===o&&(h=!0,10===t.charCodeAt(u)&&++u),t.slice(a+1,n-1).replace(/""/g,'"')}for(;u<s;){if(10===(o=t.charCodeAt(n=u++)))h=!0;else if(13===o)h=!0,10===t.charCodeAt(u)&&++u;else if(o!==e)continue;return t.slice(a,n)}return c=!0,t.slice(a,s)}for(10===t.charCodeAt(s-1)&&--s,13===t.charCodeAt(s-1)&&--s;(o=f())!==i;){for(var p=[];o!==r&&o!==i;)p.push(o),o=f();n&&null==(p=n(p,l++))||a.push(p)}return a}function l(n,e){return n.map((function(n){return e.map((function(t){return h(n[t])})).join(t)}))}function c(n){return n.map(h).join(t)}function h(t){return null==t?"":t instanceof Date?u(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,i=s(t,(function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=o(t);return function(r,i){return n(e(r),i,t)}}(t,n):o(t)}));return i.columns=r||[],i},parseRows:s,format:function(n,e){return null==e&&(e=a(n)),[e.map(h).join(t)].concat(l(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=a(t)),l(t,n).join("\n")},formatRows:function(t){return t.map(c).join("\n")},formatRow:c,formatValue:h}}l(","),l("\t"),new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function c(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function h(t,n){return fetch(t,n).then(c)}function f(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var p,d,g=(1===(p=f).length&&(d=p,p=function(t,n){return f(d(t),n)}),{left:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;p(t[i],n)<0?e=i+1:r=i}return e},right:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;p(t[i],n)>0?r=i:e=i+1}return e}}).right;function v(t){return null===t?NaN:+t}function m(t,n){var e=function(t,n){var e,r,i=t.length,o=0,a=-1,s=0,u=0;if(null==n)for(;++a<i;)isNaN(e=v(t[a]))||(u+=(r=e-s)*(e-(s+=r/++o)));else for(;++a<i;)isNaN(e=v(n(t[a],a,t)))||(u+=(r=e-s)*(e-(s+=r/++o)));if(o>1)return u/(o-1)}(t,n);return e?Math.sqrt(e):e}function y(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}function w(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var b=Math.sqrt(50),x=Math.sqrt(10),_=Math.sqrt(2);function M(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=b?10:o>=x?5:o>=_?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=b?10:o>=x?5:o>=_?2:1)}function T(t,n,e){if(null==e&&(e=v),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}function k(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function S(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=v(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=v(n(t[o],o,t)))?--i:a+=e;if(i)return a/i}function C(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=v(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=v(n(t[i],i,t)))||o.push(e);return T(o.sort(f),.5)}function A(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}var D="http://www.w3.org/1999/xhtml",N={svg:"http://www.w3.org/2000/svg",xhtml:D,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function E(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),N.hasOwnProperty(n)?{space:N[n],local:t}:t}function O(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===D&&n.documentElement.namespaceURI===D?n.createElement(t):n.createElementNS(e,t)}}function U(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function I(t){var n=E(t);return(n.local?U:O)(n)}function P(){}function z(t){return null==t?P:function(){return this.querySelector(t)}}function G(){return[]}function F(t){return null==t?G:function(){return this.querySelectorAll(t)}}function j(t){return function(){return this.matches(t)}}function Y(t){return new Array(t.length)}function H(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}H.prototype={constructor:H,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function q(t,n,e,r,i,o){for(var a,s=0,u=n.length,l=o.length;s<l;++s)(a=n[s])?(a.__data__=o[s],r[s]=a):e[s]=new H(t,o[s]);for(;s<u;++s)(a=n[s])&&(i[s]=a)}function V(t,n,e,r,i,o,a){var s,u,l,c={},h=n.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=n[s])&&(p[s]=l="$"+a.call(u,u.__data__,s,n),l in c?i[s]=u:c[l]=u);for(s=0;s<f;++s)(u=c[l="$"+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):e[s]=new H(t,o[s]);for(s=0;s<h;++s)(u=n[s])&&c[p[s]]===u&&(i[s]=u)}function L(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function B(t){return function(){this.removeAttribute(t)}}function R(t){return function(){this.removeAttributeNS(t.space,t.local)}}function X(t,n){return function(){this.setAttribute(t,n)}}function Z(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function W(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function J(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function K(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Q(t){return function(){this.style.removeProperty(t)}}function tt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function nt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function et(t,n){return t.style.getPropertyValue(n)||K(t).getComputedStyle(t,null).getPropertyValue(n)}function rt(t){return function(){delete this[t]}}function it(t,n){return function(){this[t]=n}}function ot(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function at(t){return t.trim().split(/^|\s+/)}function st(t){return t.classList||new ut(t)}function ut(t){this._node=t,this._names=at(t.getAttribute("class")||"")}function lt(t,n){for(var e=st(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function ct(t,n){for(var e=st(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function ht(t){return function(){lt(this,t)}}function ft(t){return function(){ct(this,t)}}function pt(t,n){return function(){(n.apply(this,arguments)?lt:ct)(this,t)}}function dt(){this.textContent=""}function gt(t){return function(){this.textContent=t}}function vt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function mt(){this.innerHTML=""}function yt(t){return function(){this.innerHTML=t}}function wt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function bt(){this.nextSibling&&this.parentNode.appendChild(this)}function xt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function _t(){return null}function Mt(){var t=this.parentNode;t&&t.removeChild(this)}function Tt(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function kt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}ut.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var St={},$t=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(St={mouseenter:"mouseover",mouseleave:"mouseout"}));function Ct(t,n,e){return t=At(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function At(t,n,e){return function(r){var i=$t;$t=r;try{t.call(this,this.__data__,n,e)}finally{$t=i}}}function Dt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Nt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Et(t,n,e){var r=St.hasOwnProperty(t.type)?Ct:At;return function(i,o,a){var s,u=this.__on,l=r(n,o,a);if(u)for(var c=0,h=u.length;c<h;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=e),void(s.value=n);this.addEventListener(t.type,l,e),s={type:t.type,name:t.name,value:n,listener:l,capture:e},u?u.push(s):this.__on=[s]}}function Ot(t,n,e){var r=K(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Ut(t,n){return function(){return Ot(this,t,n)}}function It(t,n){return function(){return Ot(this,t,n.apply(this,arguments))}}var Pt=[null];function zt(t,n){this._groups=t,this._parents=n}function Gt(){return new zt([[document.documentElement]],Pt)}function Ft(t){return"string"==typeof t?new zt([[document.querySelector(t)]],[document.documentElement]):new zt([[t]],Pt)}function jt(){for(var t,n=$t;t=n.sourceEvent;)n=t;return n}function Yt(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function Ht(t){var n=jt();return n.changedTouches&&(n=n.changedTouches[0]),Yt(t,n)}function qt(t){return"string"==typeof t?new zt([document.querySelectorAll(t)],[document.documentElement]):new zt([null==t?[]:t],Pt)}zt.prototype=Gt.prototype={constructor:zt,select:function(t){"function"!=typeof t&&(t=z(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,s=n[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new zt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=F(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,s=n[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new zt(r,i)},filter:function(t){"function"!=typeof t&&(t=j(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new zt(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),l=-1,this.each((function(t){p[++l]=t})),p;var e=n?V:q,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,a=new Array(o),s=new Array(o),u=new Array(o),l=0;l<o;++l){var c=r[l],h=i[l],f=h.length,p=t.call(c,c&&c.__data__,l,r),d=p.length,g=s[l]=new Array(d),v=a[l]=new Array(d);e(c,h,g,v,u[l]=new Array(f),p,n);for(var m,y,w=0,b=0;w<d;++w)if(m=g[w]){for(w>=b&&(b=w+1);!(y=v[b])&&++b<d;);m._next=y||null}}return(a=new zt(a,r))._enter=s,a._exit=u,a},enter:function(){return new zt(this._enter||this._groups.map(Y),this._parents)},exit:function(){return new zt(this._exit||this._groups.map(Y),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new zt(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=L);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,s=e[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(n)}return new zt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=E(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?R:B:"function"==typeof n?e.local?J:W:e.local?Z:X)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Q:"function"==typeof n?nt:tt)(t,n,null==e?"":e)):et(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?rt:"function"==typeof n?ot:it)(t,n)):this.node()[t]},classed:function(t,n){var e=at(t+"");if(arguments.length<2){for(var r=st(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?pt:n?ht:ft)(e,n))},text:function(t){return arguments.length?this.each(null==t?dt:("function"==typeof t?vt:gt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?mt:("function"==typeof t?wt:yt)(t)):this.node().innerHTML},raise:function(){return this.each(bt)},lower:function(){return this.each(xt)},append:function(t){var n="function"==typeof t?t:I(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:I(t),r=null==n?_t:"function"==typeof n?n:z(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Mt)},clone:function(t){return this.select(t?kt:Tt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Dt(t+""),a=o.length;if(!(arguments.length<2)){for(s=n?Et:Nt,null==e&&(e=!1),r=0;r<a;++r)this.each(s(o[r],n,e));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?It:Ut)(t,n))}};function Vt(){}function Lt(t,n){var e=new Vt;if(t instanceof Vt)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function Bt(){var t,n,e,r=[],i=[];function o(e,i,a,s){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var u,l,c,h=-1,f=e.length,p=r[i++],d=Lt(),g=a();++h<f;)(c=d.get(u=p(l=e[h])+""))?c.push(l):d.set(u,[l]);return d.each((function(t,n){s(g,n,o(t,i,a,s))})),g}return e={object:function(t){return o(t,0,Rt,Xt)},map:function(t){return o(t,0,Zt,Wt)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,s=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each((function(n,e){a.push({key:e,values:t(n,o)})}))),null!=s?a.sort((function(t,n){return s(t.key,n.key)})):a}(o(t,0,Zt,Wt),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function Rt(){return{}}function Xt(t,n,e){t[n]=e}function Zt(){return Lt()}function Wt(t,n,e){t.set(n,e)}function Jt(){}Vt.prototype=Lt.prototype={constructor:Vt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Kt=Lt.prototype;function Qt(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}Jt.prototype=function(t,n){var e=new Jt;if(t instanceof Jt)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}.prototype={constructor:Jt,has:Kt.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Kt.remove,clear:Kt.clear,values:Kt.keys,size:Kt.size,empty:Kt.empty,each:Kt.each};var tn=Array.prototype,nn=tn.map,en=tn.slice,rn={name:"implicit"};function on(){var t=Lt(),n=[],e=[],r=rn;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==rn)return r;t.set(o,a=n.push(i))}return e[(a-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Lt();for(var r,o,a=-1,s=e.length;++a<s;)t.has(o=(r=e[a])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=en.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return on(n,e).unknown(r)},Qt.apply(i,arguments),i}function an(){var t,n,e=on().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,s=0,u=0,l=.5;function c(){var e=r().length,c=o[1]<o[0],h=o[c-0],f=o[1-c];t=(f-h)/Math.max(1,e-s+2*u),a&&(t=Math.floor(t)),h+=(f-h-t*(e-s))*l,n=t*(1-s),a&&(h=Math.round(h),n=Math.round(n));var p=w(e).map((function(n){return h+t*n}));return i(c?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),c()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,c()):a},e.padding=function(t){return arguments.length?(s=Math.min(1,u=+t),c()):s},e.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),c()):s},e.paddingOuter=function(t){return arguments.length?(u=+t,c()):u},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},e.copy=function(){return an(r(),o).round(a).paddingInner(s).paddingOuter(u).align(l)},Qt.apply(c(),arguments)}function sn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function un(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function ln(){}var cn="\\s*([+-]?\\d+)\\s*",hn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",fn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pn=/^#([0-9a-f]{3,8})$/,dn=new RegExp("^rgb\\("+[cn,cn,cn]+"\\)$"),gn=new RegExp("^rgb\\("+[fn,fn,fn]+"\\)$"),vn=new RegExp("^rgba\\("+[cn,cn,cn,hn]+"\\)$"),mn=new RegExp("^rgba\\("+[fn,fn,fn,hn]+"\\)$"),yn=new RegExp("^hsl\\("+[hn,fn,fn]+"\\)$"),wn=new RegExp("^hsla\\("+[hn,fn,fn,hn]+"\\)$"),bn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function xn(){return this.rgb().formatHex()}function _n(){return this.rgb().formatRgb()}function Mn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=pn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Tn(n):3===e?new Cn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?kn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?kn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=dn.exec(t))?new Cn(n[1],n[2],n[3],1):(n=gn.exec(t))?new Cn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=vn.exec(t))?kn(n[1],n[2],n[3],n[4]):(n=mn.exec(t))?kn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=yn.exec(t))?En(n[1],n[2]/100,n[3]/100,1):(n=wn.exec(t))?En(n[1],n[2]/100,n[3]/100,n[4]):bn.hasOwnProperty(t)?Tn(bn[t]):"transparent"===t?new Cn(NaN,NaN,NaN,0):null}function Tn(t){return new Cn(t>>16&255,t>>8&255,255&t,1)}function kn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Cn(t,n,e,r)}function Sn(t){return t instanceof ln||(t=Mn(t)),t?new Cn((t=t.rgb()).r,t.g,t.b,t.opacity):new Cn}function $n(t,n,e,r){return 1===arguments.length?Sn(t):new Cn(t,n,e,null==r?1:r)}function Cn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function An(){return"#"+Nn(this.r)+Nn(this.g)+Nn(this.b)}function Dn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Nn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function En(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Un(t,n,e,r)}function On(t){if(t instanceof Un)return new Un(t.h,t.s,t.l,t.opacity);if(t instanceof ln||(t=Mn(t)),!t)return new Un;if(t instanceof Un)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=n===o?(e-r)/s+6*(e<r):e===o?(r-n)/s+2:(n-e)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new Un(a,s,u,t.opacity)}function Un(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function In(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}sn(ln,Mn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:xn,formatHex:xn,formatHsl:function(){return On(this).formatHsl()},formatRgb:_n,toString:_n}),sn(Cn,$n,un(ln,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Cn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Cn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:An,formatHex:An,formatRgb:Dn,toString:Dn})),sn(Un,(function(t,n,e,r){return 1===arguments.length?On(t):new Un(t,n,e,null==r?1:r)}),un(ln,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Cn(In(t>=240?t-240:t+120,i,r),In(t,i,r),In(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Pn=Math.PI/180,zn=180/Math.PI,Gn=6/29,Fn=3*Gn*Gn;function jn(t){if(t instanceof Yn)return new Yn(t.l,t.a,t.b,t.opacity);if(t instanceof Rn)return Xn(t);t instanceof Cn||(t=Sn(t));var n,e,r=Ln(t.r),i=Ln(t.g),o=Ln(t.b),a=Hn((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=a:(n=Hn((.4360747*r+.3850649*i+.1430804*o)/.96422),e=Hn((.0139322*r+.0971045*i+.7141733*o)/.82521)),new Yn(116*a-16,500*(n-a),200*(a-e),t.opacity)}function Yn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Hn(t){return t>.008856451679035631?Math.pow(t,1/3):t/Fn+4/29}function qn(t){return t>Gn?t*t*t:Fn*(t-4/29)}function Vn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ln(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Bn(t){if(t instanceof Rn)return new Rn(t.h,t.c,t.l,t.opacity);if(t instanceof Yn||(t=jn(t)),0===t.a&&0===t.b)return new Rn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*zn;return new Rn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Rn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Xn(t){if(isNaN(t.h))return new Yn(t.l,0,0,t.opacity);var n=t.h*Pn;return new Yn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}sn(Yn,(function(t,n,e,r){return 1===arguments.length?jn(t):new Yn(t,n,e,null==r?1:r)}),un(ln,{brighter:function(t){return new Yn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Yn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Cn(Vn(3.1338561*(n=.96422*qn(n))-1.6168667*(t=1*qn(t))-.4906146*(e=.82521*qn(e))),Vn(-.9787684*n+1.9161415*t+.033454*e),Vn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),sn(Rn,(function(t,n,e,r){return 1===arguments.length?Bn(t):new Rn(t,n,e,null==r?1:r)}),un(ln,{brighter:function(t){return new Rn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Rn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Xn(this).rgb()}}));var Zn=-.14861,Wn=1.78277,Jn=-.29227,Kn=-.90649,Qn=1.97294,te=Qn*Kn,ne=Qn*Wn,ee=Wn*Jn-Kn*Zn;function re(t){if(t instanceof ie)return new ie(t.h,t.s,t.l,t.opacity);t instanceof Cn||(t=Sn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(ee*r+te*n-ne*e)/(ee+te-ne),o=r-i,a=(Qn*(e-i)-Jn*o)/Kn,s=Math.sqrt(a*a+o*o)/(Qn*i*(1-i)),u=s?Math.atan2(a,o)*zn-120:NaN;return new ie(u<0?u+360:u,s,i,t.opacity)}function ie(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function oe(t){return function(){return t}}function ae(t){return 1==(t=+t)?se:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):oe(isNaN(n)?e:n)}}function se(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):oe(isNaN(t)?n:t)}sn(ie,(function(t,n,e,r){return 1===arguments.length?re(t):new ie(t,n,e,null==r?1:r)}),un(ln,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ie(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ie(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Pn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Cn(255*(n+e*(Zn*r+Wn*i)),255*(n+e*(Jn*r+Kn*i)),255*(n+e*(Qn*r)),this.opacity)}}));var ue=function t(n){var e=ae(n);function r(t,n){var r=e((t=$n(t)).r,(n=$n(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=se(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function le(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function ce(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=me(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}function he(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function fe(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function pe(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=me(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var de=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ge=new RegExp(de.source,"g");function ve(t,n){var e,r,i,o=de.lastIndex=ge.lastIndex=0,a=-1,s=[],u=[];for(t+="",n+="";(e=de.exec(t))&&(r=ge.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(e=e[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:fe(e,r)})),o=ge.lastIndex;return o<n.length&&(i=n.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)s[(e=u[r]).i]=e.x(t);return s.join("")})}function me(t,n){var e,r=typeof n;return null==n||"boolean"===r?oe(n):("number"===r?fe:"string"===r?(e=Mn(n))?(n=e,ue):ve:n instanceof Mn?ue:n instanceof Date?he:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(n)?le:Array.isArray(n)?ce:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?pe:fe)(t,n)}function ye(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}var we,be,xe,_e,Me=180/Math.PI,Te={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function ke(t,n,e,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(s=Math.sqrt(e*e+r*r))&&(e/=s,r/=s,u/=s),t*r<n*e&&(t=-t,n=-n,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Me,skewX:Math.atan(u)*Me,scaleX:a,scaleY:s}}function Se(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,n,null,e);s.push({i:u-4,x:fe(t,i)},{i:u-2,x:fe(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:fe(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,s,u),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:fe(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,s,u),function(t,n,e,r,o,a){if(t!==e||n!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:fe(t,e)},{i:s-2,x:fe(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var n,e=-1,r=u.length;++e<r;)s[(n=u[e]).i]=n.x(t);return s.join("")}}}var $e=Se((function(t){return"none"===t?Te:(we||(we=document.createElement("DIV"),be=document.documentElement,xe=document.defaultView),we.style.transform=t,t=xe.getComputedStyle(be.appendChild(we),null).getPropertyValue("transform"),be.removeChild(we),ke(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Ce=Se((function(t){return null==t?Te:(_e||(_e=document.createElementNS("http://www.w3.org/2000/svg","g")),_e.setAttribute("transform",t),(t=_e.transform.baseVal.consolidate())?ke((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Te)}),", ",")",")");function Ae(t){return+t}var De=[0,1];function Ne(t){return t}function Ee(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:function(t){return function(){return t}}(isNaN(n)?NaN:.5)}function Oe(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Ue(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=Ee(i,r),o=e(a,o)):(r=Ee(r,i),o=e(o,a)),function(t){return o(r(t))}}function Ie(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=Ee(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=g(t,n,1,r)-1;return o[e](i[e](n))}}function Pe(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function ze(t,n){return function(){var t,n,e,r,i,o,a=De,s=De,u=me,l=Ne;function c(){return r=Math.min(a.length,s.length)>2?Ie:Ue,i=o=null,h}function h(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),s,u)))(t(l(n)))}return h.invert=function(e){return l(n((o||(o=r(s,a.map(t),fe)))(e)))},h.domain=function(t){return arguments.length?(a=nn.call(t,Ae),l===Ne||(l=Oe(a)),c()):a.slice()},h.range=function(t){return arguments.length?(s=en.call(t),c()):s.slice()},h.rangeRound=function(t){return s=en.call(t),u=ye,c()},h.clamp=function(t){return arguments.length?(l=t?Oe(a):Ne,h):l!==Ne},h.interpolate=function(t){return arguments.length?(u=t,c()):u},h.unknown=function(t){return arguments.length?(e=t,h):e},function(e,r){return t=e,n=r,c()}}()(t,n)}function Ge(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function Fe(t){return(t=Ge(Math.abs(t)))?t[1]:NaN}var je,Ye=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function He(t){if(!(n=Ye.exec(t)))throw new Error("invalid format: "+t);var n;return new qe({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function qe(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Ve(t,n){var e=Ge(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}He.prototype=qe.prototype,qe.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Le={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Ve(100*t,n)},r:Ve,s:function(t,n){var e=Ge(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(je=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ge(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Be(t){return t}var Re,Xe,Ze,We=Array.prototype.map,Je=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Ke(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?Be:(n=We.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=n[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Be:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(We.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var n=(t=He(t)).fill,e=t.align,h=t.sign,f=t.symbol,p=t.zero,d=t.width,g=t.comma,v=t.precision,m=t.trim,y=t.type;"n"===y?(g=!0,y="g"):Le[y]||(void 0===v&&(v=12),m=!0,y="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var w="$"===f?i:"#"===f&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",b="$"===f?o:/[%p]/.test(y)?u:"",x=Le[y],_=/[defgprs%]/.test(y);function M(t){var i,o,u,f=w,M=b;if("c"===y)M=x(t)+M,t="";else{var T=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),v),m&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),T&&0==+t&&"+"!==h&&(T=!1),f=(T?"("===h?h:l:"-"===h||"("===h?"":h)+f,M=("s"===y?Je[8+je/3]:"")+M+(T&&"("===h?")":""),_)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){M=(46===u?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var k=f.length+t.length+M.length,S=k<d?new Array(d-k+1).join(n):"";switch(g&&p&&(t=r(S+t,S.length?d-M.length:1/0),S=""),e){case"<":t=f+t+M+S;break;case"=":t=f+S+t+M;break;case"^":t=S.slice(0,k=S.length>>1)+f+t+M+S.slice(k);break;default:t=S+f+t+M}return s(t)}return v=void 0===v?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),M.toString=function(){return t+""},M}return{format:h,formatPrefix:function(t,n){var e=h(((t=He(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Fe(n)/3))),i=Math.pow(10,-r),o=Je[8+r/3];return function(t){return e(i*t)+o}}}}function Qe(t,n,e,r){var i,o=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=b?i*=10:o>=x?i*=5:o>=_&&(i*=2),n<t?-i:i}(t,n,e);switch((r=He(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Fe(n)/3)))-Fe(Math.abs(t)))}(o,a))||(r.precision=i),Ze(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Fe(n)-Fe(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Fe(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Xe(r)}function tr(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,i,o,a,s=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=M(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Qe(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=M(s,u,e))>0?r=M(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,e):r<0&&(r=M(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,e)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,n(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,n(i)),t},t}function nr(){var t=ze(Ne,Ne);return t.copy=function(){return Pe(t,nr())},Qt.apply(t,arguments),tr(t)}Re=Ke({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Xe=Re.format,Ze=Re.formatPrefix;var er=new Date,rr=new Date;function ir(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,s=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return s;do{s.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return s},i.filter=function(e){return ir((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return er.setTime(+n),rr.setTime(+r),t(er),t(rr),Math.floor(e(er,rr))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var or=ir((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));or.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ir((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):or:null};ir((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()})),ir((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()})),ir((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}));var ar=ir((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}));function sr(t){return ir((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var ur=sr(0),lr=sr(1),cr=(sr(2),sr(3),sr(4)),hr=(sr(5),sr(6),ir((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),ir((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()})));hr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ir((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};ir((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})),ir((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}));var fr=ir((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}));function pr(t){return ir((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var dr=pr(0),gr=pr(1),vr=(pr(2),pr(3),pr(4)),mr=(pr(5),pr(6),ir((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),ir((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));function yr(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function wr(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function br(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}mr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ir((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var xr,_r,Mr,Tr={"-":"",_:" ",0:"0"},kr=/^\s*\d+/,Sr=/^%/,$r=/[\\^$*+?|[\]().{}]/g;function Cr(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Ar(t){return t.replace($r,"\\$&")}function Dr(t){return new RegExp("^(?:"+t.map(Ar).join("|")+")","i")}function Nr(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Er(t,n,e){var r=kr.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Or(t,n,e){var r=kr.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Ur(t,n,e){var r=kr.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Ir(t,n,e){var r=kr.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Pr(t,n,e){var r=kr.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function zr(t,n,e){var r=kr.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Gr(t,n,e){var r=kr.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Fr(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function jr(t,n,e){var r=kr.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Yr(t,n,e){var r=kr.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Hr(t,n,e){var r=kr.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function qr(t,n,e){var r=kr.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Vr(t,n,e){var r=kr.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Lr(t,n,e){var r=kr.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Br(t,n,e){var r=kr.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Rr(t,n,e){var r=kr.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Xr(t,n,e){var r=kr.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Zr(t,n,e){var r=Sr.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Wr(t,n,e){var r=kr.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Jr(t,n,e){var r=kr.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Kr(t,n){return Cr(t.getDate(),n,2)}function Qr(t,n){return Cr(t.getHours(),n,2)}function ti(t,n){return Cr(t.getHours()%12||12,n,2)}function ni(t,n){return Cr(1+ar.count(hr(t),t),n,3)}function ei(t,n){return Cr(t.getMilliseconds(),n,3)}function ri(t,n){return ei(t,n)+"000"}function ii(t,n){return Cr(t.getMonth()+1,n,2)}function oi(t,n){return Cr(t.getMinutes(),n,2)}function ai(t,n){return Cr(t.getSeconds(),n,2)}function si(t){var n=t.getDay();return 0===n?7:n}function ui(t,n){return Cr(ur.count(hr(t)-1,t),n,2)}function li(t,n){var e=t.getDay();return t=e>=4||0===e?cr(t):cr.ceil(t),Cr(cr.count(hr(t),t)+(4===hr(t).getDay()),n,2)}function ci(t){return t.getDay()}function hi(t,n){return Cr(lr.count(hr(t)-1,t),n,2)}function fi(t,n){return Cr(t.getFullYear()%100,n,2)}function pi(t,n){return Cr(t.getFullYear()%1e4,n,4)}function di(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Cr(n/60|0,"0",2)+Cr(n%60,"0",2)}function gi(t,n){return Cr(t.getUTCDate(),n,2)}function vi(t,n){return Cr(t.getUTCHours(),n,2)}function mi(t,n){return Cr(t.getUTCHours()%12||12,n,2)}function yi(t,n){return Cr(1+fr.count(mr(t),t),n,3)}function wi(t,n){return Cr(t.getUTCMilliseconds(),n,3)}function bi(t,n){return wi(t,n)+"000"}function xi(t,n){return Cr(t.getUTCMonth()+1,n,2)}function _i(t,n){return Cr(t.getUTCMinutes(),n,2)}function Mi(t,n){return Cr(t.getUTCSeconds(),n,2)}function Ti(t){var n=t.getUTCDay();return 0===n?7:n}function ki(t,n){return Cr(dr.count(mr(t)-1,t),n,2)}function Si(t,n){var e=t.getUTCDay();return t=e>=4||0===e?vr(t):vr.ceil(t),Cr(vr.count(mr(t),t)+(4===mr(t).getUTCDay()),n,2)}function $i(t){return t.getUTCDay()}function Ci(t,n){return Cr(gr.count(mr(t)-1,t),n,2)}function Ai(t,n){return Cr(t.getUTCFullYear()%100,n,2)}function Di(t,n){return Cr(t.getUTCFullYear()%1e4,n,4)}function Ni(){return"+0000"}function Ei(){return"%"}function Oi(t){return+t}function Ui(t){return Math.floor(+t/1e3)}!function(t){xr=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=Dr(i),c=Nr(i),h=Dr(o),f=Nr(o),p=Dr(a),d=Nr(a),g=Dr(s),v=Nr(s),m=Dr(u),y=Nr(u),w={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:Kr,e:Kr,f:ri,H:Qr,I:ti,j:ni,L:ei,m:ii,M:oi,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Oi,s:Ui,S:ai,u:si,U:ui,V:li,w:ci,W:hi,x:null,X:null,y:fi,Y:pi,Z:di,"%":Ei},b={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:gi,e:gi,f:bi,H:vi,I:mi,j:yi,L:wi,m:xi,M:_i,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Oi,s:Ui,S:Mi,u:Ti,U:ki,V:Si,w:$i,W:Ci,x:null,X:null,y:Ai,Y:Di,Z:Ni,"%":Ei},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=f[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=m.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return T(t,n,e,r)},d:Hr,e:Hr,f:Xr,H:Vr,I:Vr,j:qr,L:Rr,m:Yr,M:Lr,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},q:jr,Q:Wr,s:Jr,S:Br,u:Or,U:Ur,V:Ir,w:Er,W:Pr,x:function(t,n,r){return T(t,e,n,r)},X:function(t,n,e){return T(t,r,n,e)},y:Gr,Y:zr,Z:Fr,"%":Zr};function _(t,n){return function(e){var r,i,o,a=[],s=-1,u=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=Tr[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function M(t,n){return function(e){var r,i,o=br(1900,void 0,1);if(T(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=wr(br(o.y,0,1))).getUTCDay(),r=i>4||0===i?gr.ceil(r):gr(r),r=fr.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=yr(br(o.y,0,1))).getDay(),r=i>4||0===i?lr.ceil(r):lr(r),r=ar.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?wr(br(o.y,0,1)).getUTCDay():yr(br(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,wr(o)):yr(o)}}function T(t,n,e,r){for(var i,o,a=0,s=n.length,u=e.length;a<s;){if(r>=u)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in Tr?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return w.x=_(e,w),w.X=_(r,w),w.c=_(n,w),b.x=_(e,b),b.X=_(r,b),b.c=_(n,b),{format:function(t){var n=_(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=_(t+="",b);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}(t),xr.format,xr.parse,_r=xr.utcFormat,Mr=xr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||_r("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Mr("%Y-%m-%dT%H:%M:%S.%LZ");var Ii=Math.PI,Pi=2*Ii,zi=Pi-1e-6;function Gi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Fi(){return new Gi}function ji(t){return function(){return t}}function Yi(t){this._context=t}function Hi(t){return new Yi(t)}function qi(t){return t[0]}function Vi(t){return t[1]}function Li(){var t=qi,n=null,e=ji(0),r=Vi,i=ji(!0),o=null,a=Hi,s=null;function u(u){var l,c,h,f,p,d=u.length,g=!1,v=new Array(d),m=new Array(d);for(null==o&&(s=a(p=Fi())),l=0;l<=d;++l){if(!(l<d&&i(f=u[l],l,u))===g)if(g=!g)c=l,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),h=l-1;h>=c;--h)s.point(v[h],m[h]);s.lineEnd(),s.areaEnd()}g&&(v[l]=+t(f,l,u),m[l]=+e(f,l,u),s.point(n?+n(f,l,u):v[l],r?+r(f,l,u):m[l]))}if(p)return s=null,p+""||null}function l(){return function(){var t=qi,n=Vi,e=ji(!0),r=null,i=Hi,o=null;function a(a){var s,u,l,c=a.length,h=!1;for(null==r&&(o=i(l=Fi())),s=0;s<=c;++s)!(s<c&&e(u=a[s],s,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(u,s,a),+n(u,s,a));if(l)return o=null,l+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:ji(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:ji(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:ji(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return u.x=function(e){return arguments.length?(t="function"==typeof e?e:ji(+e),n=null,u):t},u.x0=function(n){return arguments.length?(t="function"==typeof n?n:ji(+n),u):t},u.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:ji(+t),u):n},u.y=function(t){return arguments.length?(e="function"==typeof t?t:ji(+t),r=null,u):e},u.y0=function(t){return arguments.length?(e="function"==typeof t?t:ji(+t),u):e},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ji(+t),u):r},u.lineX0=u.lineY0=function(){return l().x(t).y(e)},u.lineY1=function(){return l().x(t).y(r)},u.lineX1=function(){return l().x(n).y(e)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:ji(!!t),u):i},u.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),u):a},u.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),u):o},u}function Bi(t){return t<0?-1:1}function Ri(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(Bi(o)+Bi(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function Xi(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Zi(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*n,o-s,a-s*e,o,a)}function Wi(t){this._context=t}function Ji(t){this._context=t}Gi.prototype=Fi.prototype={constructor:Gi,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,s=e-t,u=r-n,l=o-t,c=a-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var f=e-o,p=r-a,d=s*s+u*u,g=f*f+p*p,v=Math.sqrt(d),m=Math.sqrt(h),y=i*Math.tan((Ii-Math.acos((d+h-g)/(2*v*m)))/2),w=y/m,b=y/v;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*l)+","+(n+w*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+b*s)+","+(this._y1=n+b*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),s=e*Math.sin(r),u=t+a,l=n+s,c=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),e&&(h<0&&(h=h%Pi+Pi),h>zi?this._+="A"+e+","+e+",0,1,"+c+","+(t-a)+","+(n-s)+"A"+e+","+e+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=Ii)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}},Yi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}},Wi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Zi(this,this._t0,Xi(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Zi(this,Xi(this,e=Ri(this,t,n)),e);break;default:Zi(this,this._t0,e=Ri(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(function(t){this._context=new Ji(t)}.prototype=Object.create(Wi.prototype)).point=function(t,n){Wi.prototype.point.call(this,n,t)},Ji.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}};var Ki=Array.prototype.slice;function Qi(t){return t}function to(t){return"translate("+(t+.5)+",0)"}function no(t){return"translate(0,"+(t+.5)+")"}function eo(t){return function(n){return+t(n)}}function ro(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function io(){return!this.__axis}function oo(t,n){var e=[],r=null,i=null,o=6,a=6,s=3,u=1===t||4===t?-1:1,l=4===t||2===t?"x":"y",c=1===t||3===t?to:no;function h(h){var f=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):Qi:i,d=Math.max(o,0)+s,g=n.range(),v=+g[0]+.5,m=+g[g.length-1]+.5,y=(n.bandwidth?ro:eo)(n.copy()),w=h.selection?h.selection():h,b=w.selectAll(".domain").data([null]),x=w.selectAll(".tick").data(f,n).order(),_=x.exit(),M=x.enter().append("g").attr("class","tick"),T=x.select("line"),k=x.select("text");b=b.merge(b.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),T=T.merge(M.append("line").attr("stroke","currentColor").attr(l+"2",u*o)),k=k.merge(M.append("text").attr("fill","currentColor").attr(l,u*d).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==w&&(b=b.transition(h),x=x.transition(h),T=T.transition(h),k=k.transition(h),_=_.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=y(t))?c(t):this.getAttribute("transform")})),M.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return c(n&&isFinite(n=n(t))?n:y(t))}))),_.remove(),b.attr("d",4===t||2==t?a?"M"+u*a+","+v+"H0.5V"+m+"H"+u*a:"M0.5,"+v+"V"+m:a?"M"+v+","+u*a+"V0.5H"+m+"V"+u*a:"M"+v+",0.5H"+m),x.attr("opacity",1).attr("transform",(function(t){return c(y(t))})),T.attr(l+"2",u*o),k.attr(l,u*d).text(p),w.filter(io).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),w.each((function(){this.__axis=y}))}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=Ki.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:Ki.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:Ki.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(s=+t,h):s},h}function ao(t){return oo(3,t)}var so={value:function(){}};function uo(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new lo(r)}function lo(t){this._=t}function co(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function ho(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function fo(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=so,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function po(){$t.preventDefault(),$t.stopImmediatePropagation()}function go(t){var n=t.document.documentElement,e=Ft(t).on("dragstart.drag",po,!0);"onselectstart"in n?e.on("selectstart.drag",po,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function vo(t,n){var e=t.document.documentElement,r=Ft(t).on("dragstart.drag",null);n&&(r.on("click.drag",po,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}lo.prototype=uo.prototype={constructor:lo,on:function(t,n){var e,r=this._,i=co(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=fo(r[e],t.name,n);else if(null==n)for(e in r)r[e]=fo(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=ho(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new lo(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var mo,yo,wo=0,bo=0,xo=0,_o=0,Mo=0,To=0,ko="object"==typeof performance&&performance.now?performance:Date,So="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function $o(){return Mo||(So(Co),Mo=ko.now()+To)}function Co(){Mo=0}function Ao(){this._call=this._time=this._next=null}function Do(t,n,e){var r=new Ao;return r.restart(t,n,e),r}function No(){Mo=(_o=ko.now())+To,wo=bo=0;try{!function(){$o(),++wo;for(var t,n=mo;n;)(t=Mo-n._time)>=0&&n._call.call(null,t),n=n._next;--wo}()}finally{wo=0,function(){var t,n,e=mo,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:mo=n);yo=t,Oo(r)}(),Mo=0}}function Eo(){var t=ko.now(),n=t-_o;n>1e3&&(To-=n,_o=t)}function Oo(t){wo||(bo&&(bo=clearTimeout(bo)),t-Mo>24?(t<1/0&&(bo=setTimeout(No,t-ko.now()-To)),xo&&(xo=clearInterval(xo))):(xo||(_o=ko.now(),xo=setInterval(Eo,1e3)),wo=1,So(No)))}function Uo(t,n,e){var r=new Ao;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}Ao.prototype=Do.prototype={constructor:Ao,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?$o():+e)+(null==n?0:+n),this._next||yo===this||(yo?yo._next=this:mo=this,yo=this),this._call=t,this._time=e,Oo()},stop:function(){this._call&&(this._call=null,this._time=1/0,Oo())}};var Io=uo("start","end","cancel","interrupt"),Po=[];function zo(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(u){var l,c,h,f;if(1!==e.state)return s();for(l in i)if((f=i[l]).name===e.name){if(3===f.state)return Uo(o);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=6,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(Uo((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(u))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(s),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),s())}function s(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Do((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Io,tween:Po,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Go(t,n){var e=jo(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Fo(t,n){var e=jo(t,n);if(e.state>3)throw new Error("too late; already running");return e}function jo(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Yo(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}function Ho(t,n){var e,r;return function(){var i=Fo(this,t),o=i.tween;if(o!==e)for(var a=0,s=(r=e=o).length;a<s;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function qo(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Fo(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:n,value:e},u=0,l=i.length;u<l;++u)if(i[u].name===n){i[u]=s;break}u===l&&i.push(s)}o.tween=i}}function Vo(t,n,e){var r=t._id;return t.each((function(){var t=Fo(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return jo(t,r).value[n]}}function Lo(t,n){var e;return("number"==typeof n?fe:n instanceof Mn?ue:(e=Mn(n))?(n=e,ue):ve)(t,n)}function Bo(t){return function(){this.removeAttribute(t)}}function Ro(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Xo(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function Zo(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function Wo(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttribute(t)}}function Jo(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttributeNS(t.space,t.local)}}function Ko(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Qo(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function ta(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Qo(t,i)),e}return i._value=n,i}function na(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Ko(t,i)),e}return i._value=n,i}function ea(t,n){return function(){Go(this,t).delay=+n.apply(this,arguments)}}function ra(t,n){return n=+n,function(){Go(this,t).delay=n}}function ia(t,n){return function(){Fo(this,t).duration=+n.apply(this,arguments)}}function oa(t,n){return n=+n,function(){Fo(this,t).duration=n}}function aa(t,n){if("function"!=typeof n)throw new Error;return function(){Fo(this,t).ease=n}}function sa(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Go:Fo;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(n,e),a.on=i}}var ua=Gt.prototype.constructor;function la(t){return function(){this.style.removeProperty(t)}}function ca(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function ha(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&ca(t,o,e)),r}return o._value=n,o}function fa(t){return function(n){this.textContent=t.call(this,n)}}function pa(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&fa(r)),n}return r._value=t,r}var da=0;function ga(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function va(){return++da}var ma=Gt.prototype;ga.prototype=function(t){return Gt().transition(t)}.prototype={constructor:ga,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=z(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,zo(h[f],n,e,f,h,jo(s,e)));return new ga(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=F(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=jo(u,e),g=0,v=p.length;g<v;++g)(f=p[g])&&zo(f,n,e,g,p,d);o.push(p),a.push(u)}return new ga(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=j(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new ga(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new ga(a,this._parents,this._name,this._id)},selection:function(){return new ua(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=va(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=jo(a,n);zo(a,t,e,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new ga(r,this._parents,t,e)},call:ma.call,nodes:ma.nodes,node:ma.node,size:ma.size,empty:ma.empty,each:ma.each,on:function(t,n){var e=this._id;return arguments.length<2?jo(this.node(),e).on.on(t):this.each(sa(e,t,n))},attr:function(t,n){var e=E(t),r="transform"===e?Ce:Lo;return this.attrTween(t,"function"==typeof n?(e.local?Jo:Wo)(e,r,Vo(this,"attr."+t,n)):null==n?(e.local?Ro:Bo)(e):(e.local?Zo:Xo)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=E(t);return this.tween(e,(r.local?ta:na)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?$e:Lo;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=et(this,t),a=(this.style.removeProperty(t),et(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,la(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=et(this,t),s=e(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=et(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=n(r=a,s))}}(t,r,Vo(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,s="end."+a;return function(){var u=Fo(this,t),l=u.on,c=null==u.value[a]?o||(o=la(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=et(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,ha(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Vo(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,pa(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=jo(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?Ho:qo)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ea:ra)(n,t)):jo(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ia:oa)(n,t)):jo(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(aa(n,t)):jo(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};e.each((function(){var e=Fo(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(s),n._.interrupt.push(s),n._.end.push(u)),e.on=n}))}))}};var ya={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function wa(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return ya.time=$o(),ya;return e}function ba(t){return function(){return t}}function xa(t,n,e){this.target=t,this.type=n,this.selection=e}function _a(){$t.stopImmediatePropagation()}function Ma(){$t.preventDefault(),$t.stopImmediatePropagation()}Gt.prototype.interrupt=function(t){return this.each((function(){Yo(this,t)}))},Gt.prototype.transition=function(t){var n,e;t instanceof ga?(n=t._id,t=t._name):(n=va(),(e=ya).time=$o(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&zo(a,t,n,l,s,e||wa(a,n));return new ga(r,this._parents,t,n)};var Ta={name:"drag"},ka={name:"space"},Sa={name:"handle"},$a={name:"center"};function Ca(t){return[+t[0],+t[1]]}function Aa(t){return[Ca(t[0]),Ca(t[1])]}function Da(t){return function(n){return function(t,n,e){arguments.length<3&&(e=n,n=jt().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return Yt(t,r);return null}(n,$t.touches,t)}}var Na={name:"x",handles:["w","e"].map(Fa),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Ea={name:"y",handles:["n","s"].map(Fa),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Oa={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Fa),input:function(t){return null==t?null:Aa(t)},output:function(t){return t}},Ua={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ia={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Pa={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},za={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Ga={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Fa(t){return{type:t}}function ja(){return!$t.ctrlKey&&!$t.button}function Ya(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Ha(){return navigator.maxTouchPoints||"ontouchstart"in this}function qa(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Va(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function La(){return function(t){var n,e=Ya,r=ja,i=Ha,o=!0,a=uo("start","brush","end"),s=6;function u(n){var e=n.property("__brush",g).selectAll(".overlay").data([Fa("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Ua.overlay).merge(e).each((function(){var t=qa(this).extent;Ft(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([Fa("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Ua.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Ua[t.type]})),n.each(l).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",f).filter(i).on("touchstart.brush",f).on("touchmove.brush",p).on("touchend.brush touchcancel.brush",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function l(){var t=Ft(this),n=qa(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-s/2:n[0][0]-s/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-s/2:n[0][1]-s/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+s:s})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+s:s}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n,e){return!e&&t.__brush.emitter||new h(t,n)}function h(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function f(){if((!n||$t.touches)&&r.apply(this,arguments)){var e,i,a,s,u,h,f,p,d,g,v,m=this,y=$t.target.__data__.type,w="selection"===(o&&$t.metaKey?y="overlay":y)?Ta:o&&$t.altKey?$a:Sa,b=t===Ea?null:za[y],x=t===Na?null:Ga[y],_=qa(m),M=_.extent,T=_.selection,k=M[0][0],S=M[0][1],$=M[1][0],C=M[1][1],A=0,D=0,N=b&&x&&o&&$t.shiftKey,E=$t.touches?Da($t.changedTouches[0].identifier):Ht,O=E(m),U=O,I=c(m,arguments,!0).beforestart();"overlay"===y?(T&&(d=!0),_.selection=T=[[e=t===Ea?k:O[0],a=t===Na?S:O[1]],[u=t===Ea?$:e,f=t===Na?C:a]]):(e=T[0][0],a=T[0][1],u=T[1][0],f=T[1][1]),i=e,s=a,h=u,p=f;var P=Ft(m).attr("pointer-events","none"),z=P.selectAll(".overlay").attr("cursor",Ua[y]);if($t.touches)I.moved=F,I.ended=Y;else{var G=Ft($t.view).on("mousemove.brush",F,!0).on("mouseup.brush",Y,!0);o&&G.on("keydown.brush",H,!0).on("keyup.brush",q,!0),go($t.view)}_a(),Yo(m),l.call(m),I.start()}function F(){var t=E(m);!N||g||v||(Math.abs(t[0]-U[0])>Math.abs(t[1]-U[1])?v=!0:g=!0),U=t,d=!0,Ma(),j()}function j(){var t;switch(A=U[0]-O[0],D=U[1]-O[1],w){case ka:case Ta:b&&(A=Math.max(k-e,Math.min($-u,A)),i=e+A,h=u+A),x&&(D=Math.max(S-a,Math.min(C-f,D)),s=a+D,p=f+D);break;case Sa:b<0?(A=Math.max(k-e,Math.min($-e,A)),i=e+A,h=u):b>0&&(A=Math.max(k-u,Math.min($-u,A)),i=e,h=u+A),x<0?(D=Math.max(S-a,Math.min(C-a,D)),s=a+D,p=f):x>0&&(D=Math.max(S-f,Math.min(C-f,D)),s=a,p=f+D);break;case $a:b&&(i=Math.max(k,Math.min($,e-A*b)),h=Math.max(k,Math.min($,u+A*b))),x&&(s=Math.max(S,Math.min(C,a-D*x)),p=Math.max(S,Math.min(C,f+D*x)))}h<i&&(b*=-1,t=e,e=u,u=t,t=i,i=h,h=t,y in Ia&&z.attr("cursor",Ua[y=Ia[y]])),p<s&&(x*=-1,t=a,a=f,f=t,t=s,s=p,p=t,y in Pa&&z.attr("cursor",Ua[y=Pa[y]])),_.selection&&(T=_.selection),g&&(i=T[0][0],h=T[1][0]),v&&(s=T[0][1],p=T[1][1]),T[0][0]===i&&T[0][1]===s&&T[1][0]===h&&T[1][1]===p||(_.selection=[[i,s],[h,p]],l.call(m),I.brush())}function Y(){if(_a(),$t.touches){if($t.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else vo($t.view,d),G.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);P.attr("pointer-events","all"),z.attr("cursor",Ua.overlay),_.selection&&(T=_.selection),Va(T)&&(_.selection=null,l.call(m)),I.end()}function H(){switch($t.keyCode){case 16:N=b&&x;break;case 18:w===Sa&&(b&&(u=h-A*b,e=i+A*b),x&&(f=p-D*x,a=s+D*x),w=$a,j());break;case 32:w!==Sa&&w!==$a||(b<0?u=h-A:b>0&&(e=i-A),x<0?f=p-D:x>0&&(a=s-D),w=ka,z.attr("cursor",Ua.selection),j());break;default:return}Ma()}function q(){switch($t.keyCode){case 16:N&&(g=v=N=!1,j());break;case 18:w===$a&&(b<0?u=h:b>0&&(e=i),x<0?f=p:x>0&&(a=s),w=Sa,j());break;case 32:w===ka&&($t.altKey?(b&&(u=h-A*b,e=i+A*b),x&&(f=p-D*x,a=s+D*x),w=$a):(b<0?u=h:b>0&&(e=i),x<0?f=p:x>0&&(a=s),w=Sa),z.attr("cursor",Ua[y]),j());break;default:return}Ma()}}function p(){c(this,arguments).moved()}function d(){c(this,arguments).ended()}function g(){var n=this.__brush||{selection:null};return n.extent=Aa(e.apply(this,arguments)),n.dim=t,n}return u.move=function(n,e){n.selection?n.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=c(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),s=me(o,a);function u(t){r.selection=1===t&&null===a?null:s(t),l.call(n),i.brush()}return null!==o&&null!==a?u:u(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),a=c(n,r).beforestart();Yo(n),i.selection=null===o?null:o,l.call(n),a.start().brush().end()}))},u.clear=function(t){u.move(t,null)},h.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){!function(t,n,e,r){var i=$t;t.sourceEvent=$t,$t=t;try{n.apply(e,r)}finally{$t=i}}(new xa(u,n,t.output(this.state.selection)),a.apply,a,[n,this.that,this.args])}},u.extent=function(t){return arguments.length?(e="function"==typeof t?t:ba(Aa(t)),u):e},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:ba(!!t),u):r},u.touchable=function(t){return arguments.length?(i="function"==typeof t?t:ba(!!t),u):i},u.handleSize=function(t){return arguments.length?(s=+t,u):s},u.keyModifiers=function(t){return arguments.length?(o=!!t,u):o},u.on=function(){var t=a.on.apply(a,arguments);return t===a?u:t},u}(Oa)}var Ba=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}((function(){return Math.random()}));const Ra=function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)},Xa=function(t){let n=(T(t,.75)-T(t,.25))/1.34;return 1.06*Math.min(m(t),n)*Math.pow(t.length,-.2)};class Za{constructor(t,n=!1,e=30,r=-40,i=100){this.id=t,this.verbose=n,this.offsetX=e,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),Ft("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){Ft("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=$t.pageX,n=$t.pageY){this.verbose&&(console.log(t),console.log(n)),t+=this.offsetX,n=n+this.offsetY<0?10:n+this.offsetY;Ft("#"+this.id).style("left",t+"px").style("top",n+"px")}edit(t){Ft("#"+this.id).html(t)}}class Wa{constructor(t,e,r=!1){n("#"+t).show();const i=r?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=n("<div/>").addClass(i).appendTo("#"+t),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,n,e,r,i="fa-download"){this.createButton(t,i);Ft("#"+t).on("click",()=>{this.downloadSvg(n,e,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,n,e="fa-expand-arrows-alt"){this.createButton(t,e);Ft("#"+t).on("click",n).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const r=n("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return n("<i/>").addClass("fa "+e).appendTo(r),this.buttons[t]=r,r}attachTooltip(t){this.tooltip=t}downloadSvg(t,r,i){let o=n(n(n(""+("#"+t)))[0]),a=o.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),s=function(t){for(var e="",r=document.styleSheets,i=0;i<r.length;i++)try{if(null==r[i].cssRules)continue;for(var o=r[i].cssRules,a=0;a<o.length;a++){var s=o[a];if(void 0!==s.style){var u,l=void 0===s.selectorText?s.selectorText:s.selectorText.replace(`#${t[0].id} `,"");try{u=n(t).find(l)}catch(t){u=[]}u.length>0&&(e+=s.selectorText+" { "+s.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var c=document.createElement("style");return c.setAttribute("type","text/css"),c.innerHTML="<![CDATA[\n"+e+"\n]]>",c}(o.get());a.prepend(s),n("#"+i).html("").hide();let u=n("#"+i).append(a).html(),l=new Blob([u],{type:"image/svg+xml"});e(l,r),n("#"+i).html("").hide()}}class Ja{constructor(t,n={}){this._sanityCheck(t),this.data=t,this.groupInfo=n,this.toolbar=void 0,this.tooltip=void 0}render(t,n=500,e=357,r=.05,i,o=[-3,3],a="Y axis",s=!0,u=30,l=!0,c=0,h=!1,p=!1,d=!1,g=!1,v=!1,m=!1,w=0){if(this.reset=()=>{t.selectAll("*").remove(),this.render(t,n,e,r,i,o,a,s,u,l,c,h,p,d,g,v,m)},this.updateYScale=function(o,a){t.selectAll("*").remove(),void 0===a&&(a=[]),this.render(t,n,e,r,i,[],o,s,u,l,c,h,p,d,g,v,m)},this.updateXScale=function(i){void 0===i&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,n,e,r,i,[],a,s,u,l,c,h,p,d,g,v,m)},void 0===o||0==o.length){let t=[];this.data.forEach(n=>t=t.concat(n.values)),o=y(t)}this.groups=Bt().key(t=>t.group).entries(this.data),this.scale={x:an().rangeRound([0,n]).domain(i||this.groups.map(t=>t.key)).paddingInner(r),subx:an(),y:nr().rangeRound([e,0]).domain(o),z:nr()},this.groups.forEach(n=>{let r=n.key,i=n.values,a=this.groupInfo[r];if(n.index=this.scale.x.domain().indexOf(r),void 0!==a){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(a[t])<=parseFloat(a.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,n)=>`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(o[0])+50})`).text(t=>`${t}: ${parseFloat(parseFloat(a[t]).toPrecision(3)).toExponential()}`)}v&&i.sort((t,n)=>t.label<n.label?-1:t.label>n.label?1:0),this.scale.subx.domain(i.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(e=>{0!=e.values.length&&(e.values=e.values.sort(f),this._drawViolin(t,e,h,n.index,m,w))});var s=18;if(g){const n=an().domain(i.map(t=>null==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${e+s})`).call(ao(n))}if(l){s=5;const n=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${e+s})`).call(ao(this.scale.subx));c>0&&n.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${c}, 2, 10)`)}});let b=l?55:0;var x;if(this.xAxis=s?ao(this.scale.x):ao(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${e+b})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${u}, -10, 10)`),b=5,this.yAxis=(x=this.scale.y,oo(4,x)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${b}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*b+Ft(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(a),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),p&&this._addGroupDivider(t),d){const n=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");n.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=n.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;e.append("rect").attr("x",(t,n)=>5+60*n+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),e.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,n)=>17+60*n+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,n){let e=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${e}, ${r})`).text(n)}createTooltip(t){return 0==n("#"+t).length&&n("<div/>").attr("id",t).appendTo(n("body")),this.tooltip=new Za(t),Ft("#"+t).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,n){return this.toolbar=new Wa(t,n),this.toolbar}addBrush(t){const n=La();n.on("end",()=>{this.zoom(t,n)}),t.append("g").attr("class","brush").call(n)}zoom(t,n){let e,r=$t.selection;if(void 0===n)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,n)=>{const e=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return n>=e&&n<=i}));const e=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([e,i]),t.select(".brush").call(n.move,null)}else{if(!e)return e=setTimeout((function(){e=null}),350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((n,e)=>{let r=n.key,o=n.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),o.forEach(e=>{if(0==e.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${n.index}-${e.label}`);o.select(".violin").transition(i).attr("d",Li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const a=T(e.values,.25),s=T(e.values,.75),u=.1;o.select(".violin-ir").transition(i).attr("x",this.scale.z(-u)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-u)-this.scale.z(u))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const l=C(e.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-u)).attr("x2",this.scale.z(u)).attr("y1",this.scale.y(l)).attr("y2",this.scale.y(l))})})}_drawViolin(t,n,e,r,i,o){let a=function(t,n,e){return function(r){return n.map(n=>[n,S(r,r=>t((n-r)/e))/e])}}(Ra,this.scale.y.ticks(100),Xa(n.values));const s=y(n.values),u=a(n.values).filter(t=>t[0]>=s[0]&&t[0]<=s[1]),l=t.append("g").attr("id",`violin${r}-${n.label}`).attr("class","violin-g").datum(n);if(n.values.length>=o&&u.length&&this._validVertices(u)){let o=k(u,t=>Math.abs(t[1]));this.scale.z.domain([-o,o]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);let a=Li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const s=l.append("path").datum(u).attr("d",a).classed("violin",!0).style("fill",()=>void 0!==n.color?n.color:r%2==0?"#90c1c1":"#94a8b8"),c=T(n.values,.25),h=T(n.values,.75),f=this.scale.z.domain()[1]/3;if(e){const e=Math.abs(h-c),r=k(n.values.filter(t=>t<=h+1.5*e)),i=A(n.values.filter(t=>t>=c-1.5*e));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(i)).style("stroke","#fff")}l.append("rect").attr("x",this.scale.z(-f)).attr("y",this.scale.y(h)).attr("width",Math.abs(this.scale.z(-f)-this.scale.z(f))).attr("height",Math.abs(this.scale.y(h)-this.scale.y(c))).attr("class","violin-ir");const p=C(n.values);if(l.append("line").attr("x1",this.scale.z(-f)).attr("x2",this.scale.z(f)).attr("y1",this.scale.y(p)).attr("y2",this.scale.y(p)).attr("class","violin-median"),i){let t=Ba(0,f/2);const e=Math.abs(h-c),r=k(n.values.filter(t=>t<=h+1.5*e)),i=A(n.values.filter(t=>t>=c-1.5*e)),o=n.values.filter(t=>t<i||t>r);l.append("g").attr("class","violin-outliers").selectAll("circle").data(o).enter().append("circle").attr("cx",()=>this.scale.z(t())).attr("cy",t=>this.scale.y(t)).attr("r",2)}l.on("mouseover",()=>{s.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(n.group+"<br/>"+n.label+"<br/>Median: "+p.toPrecision(4)+"<br/>")}),l.on("mouseout",()=>{s.classed("highlighted",!1)})}else if(o){let t=k(n.values,t=>Math.abs(t));this.scale.z.domain([-t,t]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const e=this.scale.z.domain()[1]/3;let r=Ba(0,e/2);l.append("g").attr("class","violin-points").selectAll("circle").data(n.values).enter().append("circle").attr("cx",()=>this.scale.z(r())).attr("cy",t=>this.scale.y(t)).attr("r",2)}}_sanityCheck(t){const n=["group","label","values"];t.forEach(t=>{n.forEach(n=>{if(void 0===t[n])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const n=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==n.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+e/2:0;t.selectAll(".vline").data(n).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,e)=>e!=n.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,n)=>t.concat(n),[]).filter(t=>isNaN(t)).length}}function Ka(t,e,r,i="Gene Expression Violin Plot",o=function(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v8&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v8&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v8&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v8&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v8&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v8&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v8",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}(),a=Qa(50,75,250,60),s={w:.8*window.innerWidth,h:250}){const u=[h(o.tissue,{credentials:"include"}),h(o.geneExp+r,{credentials:"include"}),h(o.geneExp+r+"&attributeSubset=sex",{credentials:"include"})],l={root:t,spinner:"spinner",svg:t+"-svg",tooltip:e,toolbar:t+"-toolbar",clone:t+"-svg-clone",buttons:{download:t+"-download",plotOptions:t+"-option-modal",filter:t+"-filter",ascAlphaSort:t+"-asc-alphasort",descAlphaSort:t+"-desc-alphasort",ascSort:t+"-asc-sort",descSort:t+"-desc-sort",logScale:t+"-log-scale",linearScale:t+"-linear-scale",noDiff:t+"-no-diff",sexDiff:t+"-sex-diff",outliersOn:t+"-outliers-on",outliersOff:t+"-outliers-off"},plotOptionGroups:{scale:t+"-option-scale",sort:t+"-option-sort",differentiation:t+"-option-differentiation",outliers:t+"-option-outlier"},plotSorts:{ascAlphaSort:"asc-alphasort",descAlphaSort:"desc-alphasort",ascSort:"asc-sort",descSort:"desc-sort"},tissueFilter:t+"-filter-modal"};if(0==$("#"+l.root).length)throw"Violin Plot Error: rootId does not exist.";0==$("#"+l.tooltip).length&&$("<div/>").attr("id",l.tooltip).appendTo($("body")),0==$("#"+l.toolbar).length&&$("<div/>").attr("id",l.toolbar).appendTo($("#"+l.root)),0==$(`#${l.root} #${l.spinner}`).length?$('<span><i id="spinner" class="fas fa-sync fa-spin"></i></span>').appendTo($("#"+l.root)):$(`#${l.root} #${l.spinner}`).show(),0==$("#"+l.clone).length&&$("<div/>").attr("id",l.clone).appendTo($("#"+l.root)),Promise.all(u).then((function(t){const e=function(t){const n="tissueInfo";if(!t.hasOwnProperty(n))throw"Parsing Error: required json attr is missing: "+n;const e=t[n];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!e[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),e}(t[0]),o={},u={},c={female:"#e67f7b",male:"#70bcd2"};e.forEach(t=>{u[t.tissueSiteDetailId]=t.tissueSiteDetail,o[t.tissueSiteDetail]=t,c[t.tissueSiteDetailId]=t.colorHex});const h=ns(t[1],u,c,!1);if(!h.length)return $("#"+l.toolbar).remove(),$(`<div id="gene-exp-vplot">No gene expression data found for ${r}</div>`).appendTo("#"+l.root),void $(`#${l.root} #${l.spinner}`).hide();let f=new Ja(h),p=f.createTooltip(l.tooltip);f.sortData=f.data.map(t=>t),f.allData=f.data.map(t=>t),f.gencodeId=r,f.tIdNameMap=u,f.groupColorDict=c,f.tissueDict=o,f.geneJson={allData:t[1],subsetData:t[2]},f.unit=h.length>0?" "+h[0].unit:"",f.gpConfig={subset:!1,scale:"linear",sort:l.plotSorts.ascAlphaSort,showOutliers:!0,title:i},function(t,n,e,r){const i=n,o=function(t=1200,n=250,e=Qa()){return{width:t,height:n,outerWidth:t+(e.left+e.right),outerHeight:n+(e.top+e.bottom)}}(e.w,e.h,i),a=Ft("#"+r.root).append("svg").attr("id",r.svg).attr("width",o.outerWidth).attr("height",o.outerHeight).append("g").attr("transform",`translate(${i.left}, ${i.top})`),s=o.width,u=o.height,l=os(t.gpConfig.sort,t.sortData,r);t.render(a,s,u,.2,l,[],"TPM",!0,35,!1,0,!1,!1,!0,!1,!0,!0),rs(t,r)}(f,a,s,l),function(t,e,r,i){const o=function(t,n=!1){const e=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"],r="tissueInfo";if(!t.hasOwnProperty(r))throw"Parsing Error: required json attribute is missing: "+r;let i=t[r];["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach(t=>{if(!i[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`}),i=!1===n?i:i.filter(t=>!e.includes(t.tissueSiteDetailId));let o=i.reduce((t,n)=>{let e=n.tissueSite,r={id:n.tissueSiteDetailId,name:n.tissueSiteDetail};return t.hasOwnProperty(e)||(t[e]=[]),t[e].push(r),t},{});return Object.keys(o).forEach(t=>{if(1===o[t].length){let n=o[t][0];delete o[t],o[n.name]=[n]}}),o}(i);(function(t,e,r=!1,i=!1,o=4){const a="tissue-group-main-level";Ft("#"+e).selectAll("*").remove();const s=n("<div/>").attr("class","col-xs-12 col-md-12").appendTo(n("#"+e));r?n(`<label class=${a}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(s):n(`<label class=${a}><input type="radio" name="allTissues" value="all"> All </label> <label class=${a}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(s),n('input[name="allTissues"]').change((function(){switch(n(this).val()){case"all":n(".tissueGroup").prop("checked",!0),n(".tissueSubGroup").prop("checked",!0);break;case"reset":n(".tissueGroup").prop("checked",!1),n(".tissueSubGroup").prop("checked",!1)}}));let u=Object.keys(t).sort((t,n)=>"Brain"==t?-1:"Brain"==n?1:t<n?-1:t>n?1:void 0),l=Object.keys(t).reduce((n,e)=>t[e].length>1?n+1+t[e].length:n+t[e].length,0),c=Math.ceil(l/o),h=l%o,f=Math.floor(12/o);const p=w(0,o).map(t=>n(`<div id="section${t}" class="col-xs-12 col-md-${f}">`).appendTo(n("#"+e)));let d=0,g=0;u.forEach(e=>{let r=t[e];const i=e.replace(/ /g,"_");let o=r.length;o=1==o?o:o+1,0!=d&&o+d>c+h&&(d=0,g+=1),d+=o;let s=p[g];n(`<label class=${a}><input type="checkbox" id="${i}" class="tissueGroup"> <span>${e}</span></label><br/>`).appendTo(s),r.length>1&&r.sort((t,n)=>t.id>n.id?1:t.id<n.id?-1:0).forEach((function(t,e){let i=n(`<label class=tissue-group-sub-level><input type="checkbox" id="${t.id}" class="tissueSubGroup"> <span>${t.name}</span></label><br/>`).appendTo(s);e==r.length-1&&i.addClass("last-site"),i.click((function(){n('input[name="allTissues"]').prop("checked",!1)}))})),n("#"+i).click((function(){n('input[name="allTissues"]').prop("checked",!1),n("#"+i).is(":checked")?r.forEach((function(t){"id"!=t.id&&n("#"+t.id).prop("checked",!0)})):r.forEach((function(t){"id"!=t.id&&n("#"+t.id).prop("checked",!1)}))}))}),i&&(n('input[name="allTissues"][value="all"]').prop("checked",!0),n(".tissueGroup").prop("checked",!0),n(".tissueSubGroup").prop("checked",!0))})(o,e+"-body",!1,!0,3),function(t,e,r,i){$("#"+e).on("hidden.bs.modal",o=>{let a=function(t,e,r=!1){let i=[];return n("#"+e).find(":input").each((function(){if(n(this).is(":checked")){const e=n(this).attr("id");if(n(this).hasClass("tissueGroup")){let n=e.replace(/_/g," ");1==t[n].length&&(r?i.push(t[n][0].name):i.push(t[n][0].id))}else r?i.push(n(n(this).siblings()[0]).text()):i.push(e)}})),i.filter(t=>void 0!==t)}(i,e+"-body",!0);!function(t,n,e){let r=t.allData.filter(t=>e.includes(t.group));t.data=r,as(t,n)}(t,r,a)})}(t,e,r,o)}(f,l.tissueFilter,l,t[0]),function(t,n,e,r){let i=t.createToolbar(e.toolbar,n);i.createDownloadSvgButton(e.buttons.download,e.svg,"gene-exp-plot.svg",e.clone),$("#"+e.toolbar).addClass("row"),$(`#${e.toolbar} .btn-group`).addClass("col-xs-12 col-lg-1 text-nowrap").css("display","flex"),$("<div></div>").appendTo("#"+e.toolbar).attr("id",e.toolbar+"-plot-options").attr("class","col-lg-11 text-nowrap");let o=$(`#${e.toolbar}-plot-options`);$("<div/>").appendTo(o).attr("id",e.plotOptionGroups.differentiation).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo("#"+e.plotOptionGroups.differentiation).attr("class",e.root+"-option-label").html("Subset"),$("<div/>").appendTo("#"+e.plotOptionGroups.differentiation).attr("class","btn-group btn-group-sm");let a=$(`#${e.plotOptionGroups.differentiation} .btn-group`);$(`<button class="btn btn-default" id="${e.buttons.noDiff}">None</button>`).appendTo(a),$(`<button class="btn btn-default" id="${e.buttons.sexDiff}">Sex</button>`).appendTo(a),$("<div/>").appendTo(o).attr("id",e.plotOptionGroups.scale).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo("#"+e.plotOptionGroups.scale).attr("class",e.root+"-option-label").html("Scale"),$("<div/>").appendTo("#"+e.plotOptionGroups.scale).attr("class","btn-group btn-group-sm");let s=$(`#${e.plotOptionGroups.scale} .btn-group`);$(`<button class="btn btn-default" id="${e.buttons.logScale}">Log</button>`).appendTo(s),$(`<button class="btn btn-default" id="${e.buttons.linearScale}">Linear</button>`).appendTo(s),$("<div/>").appendTo(o).attr("class",e.plotOptionGroups.sort+" col-lg-2 col-xl-2").attr("id","vplot-alpha-sorts"),$("<span/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-alpha-sorts`).attr("class",e.root+"-option-label").html("Tissue Sort"),$("<div/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-alpha-sorts`).attr("class","btn-group btn-group-sm").attr("id",e.plotOptionGroups.sort+"-alpha");let u=$(`#${e.plotOptionGroups.sort}-alpha.btn-group`);$(`<button class="btn btn-default fa fa-caret-up" id="${e.buttons.ascAlphaSort}"></button>`).appendTo(u),$(`<button class="btn btn-default fa fa-caret-down" id="${e.buttons.descAlphaSort}"></button>`).appendTo(u),$("<div/>").appendTo(o).attr("class",e.plotOptionGroups.sort+" col-lg-2 col-xl-2").attr("id","vplot-num-sorts"),$("<span/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-num-sorts`).attr("class",e.root+"-option-label").html("Median Sort"),$("<div/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-num-sorts`).attr("class","btn-group btn-group-sm").attr("id",e.plotOptionGroups.sort+"-num");let l=$(`#${e.plotOptionGroups.sort}-num.btn-group`);$(`<button class="btn btn-default fa fa-caret-up" id="${e.buttons.ascSort}"></button>`).appendTo(l),$(`<button class="btn btn-default fa fa-caret-down" id="${e.buttons.descSort}"></button>`).appendTo(l),$("<div/>").appendTo(o).attr("id",e.plotOptionGroups.outliers).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo("#"+e.plotOptionGroups.outliers).attr("class",e.root+"-option-label").html("Outliers"),$("<div/>").appendTo("#"+e.plotOptionGroups.outliers).attr("class","btn-group btn-group-sm");let c=$(`#${e.plotOptionGroups.outliers} .btn-group`);$(`<button class="btn btn-default" id="${e.buttons.outliersOn}">On</button>`).appendTo(c),$(`<button class="btn btn-default" id="${e.buttons.outliersOff}">Off</button>`).appendTo(c),qt(`#${e.plotOptionsModal} .modal-body button`).classed("active",!1),qt(`#${e.buttons.ascAlphaSort},\n               #${e.buttons.linearScale},\n               #${e.buttons.noDiff},\n               #${e.buttons.outliersOn}`).classed("active",!0),i.createButton(e.buttons.filter,"fa-filter"),Ft("#"+e.buttons.filter).on("mouseover",()=>{i.tooltip.show("Filter Tissues")}).on("mouseout",()=>{i.tooltip.hide()}).on("click",(t,n,e)=>{$("#gene-expr-vplot-filter-modal").modal("show")}),$(`.${e.plotOptionGroups.sort} button`).on("click",(function(n){let r=Ft(this);r.classed("active")||(qt(`.${e.plotOptionGroups.sort} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.sort=n.target.id.replace(e.root+"-",""),as(t,e))})),$(`#${e.plotOptionGroups.scale} button`).on("click",(function(n){let r=Ft(this);r.classed("active")||(qt(`#${e.plotOptionGroups.scale} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.scale=n.target.id==e.buttons.logScale?"log":"linear",as(t,e))})),$(`#${e.plotOptionGroups.outliers} button`).on("click",(function(n){let r=Ft(this);r.classed("active")||(qt(`#${e.plotOptionGroups.outliers} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.showOutliers=n.target.id==e.buttons.outliersOn,is(t,e))})),$(`#${e.plotOptionGroups.differentiation} button`).on("click",(function(n){let r=Ft(this);r.classed("active")||(qt(`#${e.plotOptionGroups.differentiation} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.subset=n.target.id==e.buttons.sexDiff,as(t,e))}))}(f,p,l),$(`#${l.root} #${l.spinner}`).hide()}))}function Qa(t=50,n=50,e=50,r=50){return{top:t,right:n,bottom:e,left:r}}function ts(t,n=!0){t.forEach(t=>{t.values=n?t.data.map(t=>Math.log10(+t+1)):t.data,t.values.sort(f),t.median=C(t.values)})}function ns(t,n,e,r=!0){const i="geneExpression";if(!t.hasOwnProperty(i))throw"Parse Error: required json attribute is missing: "+i;return t[i].forEach(t=>{["data","tissueSiteDetailId","geneSymbol","gencodeId"].forEach(n=>{if(!t.hasOwnProperty(n))throw console.error(t),"Parse Error: required json attribute is missing: "+n}),t.group=void 0===n?t.tissueSiteDetailId:n[t.tissueSiteDetailId],t.label=void 0===t.subsetGroup?t.geneSymbol:t.subsetGroup,t.color=void 0===e?"#90c1c1":"allData"==t.subsetGroup?"#"+e[t.tissueSiteDetailId]:e[t.subsetGroup]}),ts(t[i],r),t[i]}function es(t){const n=t.select(".violin-x-axis");n.attr("transform",n.attr("transform")+" translate(0, 3)")}function rs(t,n){let e=Ft(`#${n.svg} g`);void 0!==t.gpConfig.title&&t.addPlotTitle(e,t.gpConfig.title),is(t,n),t.gpConfig.subset?function(t,n,e,r="top"){es(n);const i=n.selectAll(".violin-x-axis text");i.attr("transform","translate(0, 8) "+i.attr("transform")),n.append("g").selectAll(".tcolor").data(t.scale.x.domain()).enter().append("rect").classed("tcolor",!0).attr("x",n=>t.scale.x(n)).attr("y",n=>"top"==r?t.scale.y.range()[1]:t.scale.y.range()[0]).attr("transform","translate(0, 14)").attr("width",n=>t.scale.x.bandwidth()).attr("height",5).style("stroke-width",0).style("fill",t=>"#"+e[t].colorHex).style("opacity",.9)}(t,e,t.tissueDict,"bottom"):(Ft(`#${n.svg} #violinLegend`).remove(),es(e)),function(t){qt(".violin-g").on("mouseover",(n,e,r)=>{let i="log"==t.gpConfig.scale?Math.pow(10,n.median)-1:n.median;Ft(r[e]).select("path").classed("highlighted",!0),t.gpConfig.subset?t.tooltip.show(n.group+"<br/>"+n.label+` (n = ${n.values.length})<br/>`+`Median${t.unit}: ${i.toPrecision(4)}<br/>`):t.tooltip.show(n.group+"<br/>n = "+n.values.length+"<br/>"+`Median${t.unit}: ${i.toPrecision(4)}<br/>`)})}(t)}function is(t,n){qt(`#${n.svg} path.violin`).classed("outlined",!t.gpConfig.showOutliers),$(`#${n.svg} .violin-outliers`).toggle(t.gpConfig.showOutliers)}function os(t,n,e){switch(t){case e.plotSorts.ascAlphaSort:n.sort((t,n)=>t.group<n.group?-1:t.group>n.group?1:0);break;case e.plotSorts.descAlphaSort:n.sort((t,n)=>t.group<n.group?1:t.group>n.group?-1:0);break;case e.plotSorts.ascSort:n.sort((t,n)=>t.median-n.median);break;case e.plotSorts.descSort:n.sort((t,n)=>n.median-t.median)}return n.map(t=>t.group)}function as(t,n){let e=t.gpConfig.subset?t.geneJson.subsetData:t.geneJson.allData;const r="log"==t.gpConfig.scale?ns(e,t.tIdNameMap,t.groupColorDict):ns(e,t.tIdNameMap,t.groupColorDict,!1);let i=t.data.map(t=>t.group);t.allData=r.map(t=>t),t.data=r.filter(t=>-1!=i.indexOf(t.group));let o=t.sortData.filter(t=>i.includes(t.group)),a=os(t.gpConfig.sort,o,n);ts(t.data,"log"==t.gpConfig.scale),ts(t.allData,"log"==t.gpConfig.scale);let s="log"==t.gpConfig.scale?"log10(TPM+1)":"TPM";t.updateXScale(a),t.updateYScale(s),rs(t,n)}var ss={launch:Ka};t.GeneExpressionViolinplot=ss,t.launch=Ka,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
