var GeneExpressionViolinPlot=function(t){"use strict";var n={},e={},r=34,i=10,o=13;function a(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function s(t){var s=new RegExp('["'+t+"\n\r]"),u=t.charCodeAt(0);function l(t,a){var s,l=[],c=t.length,h=0,f=0,p=c<=0,d=!1;function g(){if(p)return e;if(d)return d=!1,n;var a,s,l=h;if(t.charCodeAt(l)===r){for(;h++<c&&t.charCodeAt(h)!==r||t.charCodeAt(++h)===r;);return(a=h)>=c?p=!0:(s=t.charCodeAt(h++))===i?d=!0:s===o&&(d=!0,t.charCodeAt(h)===i&&++h),t.slice(l+1,a-1).replace(/""/g,'"')}for(;h<c;){if((s=t.charCodeAt(a=h++))===i)d=!0;else if(s===o)d=!0,t.charCodeAt(h)===i&&++h;else if(s!==u)continue;return t.slice(l,a)}return p=!0,t.slice(l,c)}for(t.charCodeAt(c-1)===i&&--c,t.charCodeAt(c-1)===o&&--c;(s=g())!==e;){for(var v=[];s!==n&&s!==e;)v.push(s),s=g();a&&null==(v=a(v,f++))||l.push(v)}return l}function c(n){return n.map(h).join(t)}function h(t){return null==t?"":s.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,i=l(t,function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=a(t);return function(r,i){return n(e(r),i,t)}}(t,n):a(t)});return i.columns=r||[],i},parseRows:l,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(h).join(t)].concat(n.map(function(n){return e.map(function(t){return h(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(c).join("\n")}}}s(","),s("\t");function u(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function l(t,n){return fetch(t,n).then(u)}function c(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var h,f,p=(1===(h=c).length&&(f=h,h=function(t,n){return c(f(t),n)}),{left:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;h(t[i],n)<0?e=i+1:r=i}return e},right:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;h(t[i],n)>0?r=i:e=i+1}return e}}).right;function d(t){return null===t?NaN:+t}function g(t,n){var e=function(t,n){var e,r,i=t.length,o=0,a=-1,s=0,u=0;if(null==n)for(;++a<i;)isNaN(e=d(t[a]))||(u+=(r=e-s)*(e-(s+=r/++o)));else for(;++a<i;)isNaN(e=d(n(t[a],a,t)))||(u+=(r=e-s)*(e-(s+=r/++o)));if(o>1)return u/(o-1)}(t,n);return e?Math.sqrt(e):e}function v(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}function m(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var y=Math.sqrt(50),b=Math.sqrt(10),w=Math.sqrt(2);function x(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=y?10:o>=b?5:o>=w?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=y?10:o>=b?5:o>=w?2:1)}function _(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}function M(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function T(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=d(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=d(n(t[i],i,t)))||o.push(e);return _(o.sort(c),.5)}function S(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}var k="http://www.w3.org/1999/xhtml",A={svg:"http://www.w3.org/2000/svg",xhtml:k,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function C(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),A.hasOwnProperty(n)?{space:A[n],local:t}:t}function E(t){var n=C(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===k&&n.documentElement.namespaceURI===k?n.createElement(t):n.createElementNS(e,t)}})(n)}function D(){}function N(t){return null==t?D:function(){return this.querySelector(t)}}function O(){return[]}function I(t){return null==t?O:function(){return this.querySelectorAll(t)}}var U=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var z=document.documentElement;if(!z.matches){var P=z.webkitMatchesSelector||z.msMatchesSelector||z.mozMatchesSelector||z.oMatchesSelector;U=function(t){return function(){return P.call(this,t)}}}}var G=U;function F(t){return new Array(t.length)}function Y(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}Y.prototype={constructor:Y,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var j="$";function H(t,n,e,r,i,o){for(var a,s=0,u=n.length,l=o.length;s<l;++s)(a=n[s])?(a.__data__=o[s],r[s]=a):e[s]=new Y(t,o[s]);for(;s<u;++s)(a=n[s])&&(i[s]=a)}function q(t,n,e,r,i,o,a){var s,u,l,c={},h=n.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=n[s])&&(p[s]=l=j+a.call(u,u.__data__,s,n),l in c?i[s]=u:c[l]=u);for(s=0;s<f;++s)(u=c[l=j+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):e[s]=new Y(t,o[s]);for(s=0;s<h;++s)(u=n[s])&&c[p[s]]===u&&(i[s]=u)}function L(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function V(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function X(t,n){return t.style.getPropertyValue(n)||V(t).getComputedStyle(t,null).getPropertyValue(n)}function B(t){return t.trim().split(/^|\s+/)}function R(t){return t.classList||new W(t)}function W(t){this._node=t,this._names=B(t.getAttribute("class")||"")}function Z(t,n){for(var e=R(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function J(t,n){for(var e=R(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Q(){this.textContent=""}function K(){this.innerHTML=""}function tt(){this.nextSibling&&this.parentNode.appendChild(this)}function nt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function et(){return null}function rt(){var t=this.parentNode;t&&t.removeChild(this)}function it(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function ot(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}W.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var at={},st=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(at={mouseenter:"mouseover",mouseleave:"mouseout"}));function ut(t,n,e){return t=lt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function lt(t,n,e){return function(r){var i=st;st=r;try{t.call(this,this.__data__,n,e)}finally{st=i}}}function ct(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function ht(t,n,e){var r=at.hasOwnProperty(t.type)?ut:lt;return function(i,o,a){var s,u=this.__on,l=r(n,o,a);if(u)for(var c=0,h=u.length;c<h;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=e),void(s.value=n);this.addEventListener(t.type,l,e),s={type:t.type,name:t.name,value:n,listener:l,capture:e},u?u.push(s):this.__on=[s]}}function ft(t,n,e){var r=V(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var pt=[null];function dt(t,n){this._groups=t,this._parents=n}function gt(){return new dt([[document.documentElement]],pt)}function vt(t){return"string"==typeof t?new dt([[document.querySelector(t)]],[document.documentElement]):new dt([[t]],pt)}function mt(){for(var t,n=st;t=n.sourceEvent;)n=t;return n}function yt(t){var n=mt();return n.changedTouches&&(n=n.changedTouches[0]),function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}(t,n)}function bt(t){return"string"==typeof t?new dt([document.querySelectorAll(t)],[document.documentElement]):new dt([null==t?[]:t],pt)}dt.prototype=gt.prototype={constructor:dt,select:function(t){"function"!=typeof t&&(t=N(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,s=n[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new dt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=I(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,s=n[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new dt(r,i)},filter:function(t){"function"!=typeof t&&(t=G(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new dt(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each(function(t){d[++c]=t}),d;var e,r=n?q:H,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,s=new Array(a),u=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],p=f.length,d=t.call(h,h&&h.__data__,c,i),g=d.length,v=u[c]=new Array(g),m=s[c]=new Array(g);r(h,f,v,m,l[c]=new Array(p),d,n);for(var y,b,w=0,x=0;w<g;++w)if(y=v[w]){for(w>=x&&(x=w+1);!(b=m[x])&&++x<g;);y._next=b||null}}return(s=new dt(s,i))._enter=u,s._exit=l,s},enter:function(){return new dt(this._enter||this._groups.map(F),this._parents)},exit:function(){return new dt(this._exit||this._groups.map(F),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new dt(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=L);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,s=e[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(n)}return new dt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=C(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):X(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=B(t+"");if(arguments.length<2){for(var r=R(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?Z:J)(this,t)}}:n?function(t){return function(){Z(this,t)}}:function(t){return function(){J(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Q:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?K:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(tt)},lower:function(){return this.each(nt)},append:function(t){var n="function"==typeof t?t:E(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:E(t),r=null==n?et:"function"==typeof n?n:N(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(rt)},clone:function(t){return this.select(t?ot:it)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=o.length;if(!(arguments.length<2)){for(s=n?ht:ct,null==e&&(e=!1),r=0;r<a;++r)this.each(s(o[r],n,e));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return ft(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return ft(this,t,n)}})(t,n))}};function wt(){}function xt(t,n){var e=new wt;if(t instanceof wt)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function _t(){var t,n,e,r=[],i=[];function o(e,i,a,s){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var u,l,c,h=-1,f=e.length,p=r[i++],d=xt(),g=a();++h<f;)(c=d.get(u=p(l=e[h])+""))?c.push(l):d.set(u,[l]);return d.each(function(t,n){s(g,n,o(t,i,a,s))}),g}return e={object:function(t){return o(t,0,Mt,$t)},map:function(t){return o(t,0,Tt,St)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,s=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each(function(n,e){a.push({key:e,values:t(n,o)})})),null!=s?a.sort(function(t,n){return s(t.key,n.key)}):a}(o(t,0,Tt,St),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function Mt(){return{}}function $t(t,n,e){t[n]=e}function Tt(){return xt()}function St(t,n,e){t.set(n,e)}function kt(){}wt.prototype=xt.prototype={constructor:wt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var At=xt.prototype;kt.prototype=function(t,n){var e=new kt;if(t instanceof kt)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}.prototype={constructor:kt,has:At.has,add:function(t){return this["$"+(t+="")]=t,this},remove:At.remove,clear:At.clear,values:At.keys,size:At.size,empty:At.empty,each:At.each};var Ct=Array.prototype,Et=Ct.map,Dt=Ct.slice,Nt={name:"implicit"};function Ot(){var t,n,e=function t(n){var e=xt(),r=[],i=Nt;function o(t){var o=t+"",a=e.get(o);if(!a){if(i!==Nt)return i;e.set(o,a=r.push(t))}return n[(a-1)%n.length]}return n=null==n?[]:Dt.call(n),o.domain=function(t){if(!arguments.length)return r.slice();r=[],e=xt();for(var n,i,a=-1,s=t.length;++a<s;)e.has(i=(n=t[a])+"")||e.set(i,r.push(n));return o},o.range=function(t){return arguments.length?(n=Dt.call(t),o):n.slice()},o.unknown=function(t){return arguments.length?(i=t,o):i},o.copy=function(){return t().domain(r).range(n).unknown(i)},o}().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,s=0,u=0,l=.5;function c(){var e=r().length,c=o[1]<o[0],h=o[c-0],f=o[1-c];t=(f-h)/Math.max(1,e-s+2*u),a&&(t=Math.floor(t)),h+=(f-h-t*(e-s))*l,n=t*(1-s),a&&(h=Math.round(h),n=Math.round(n));var p=m(e).map(function(n){return h+t*n});return i(c?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),c()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,c()):a},e.padding=function(t){return arguments.length?(s=u=Math.max(0,Math.min(1,t)),c()):s},e.paddingInner=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),c()):s},e.paddingOuter=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),c()):u},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},e.copy=function(){return Ot().domain(r()).range(o).round(a).paddingInner(s).paddingOuter(u).align(l)},c()}function It(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Ut(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function zt(){}var Pt="\\s*([+-]?\\d+)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ft="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Yt=/^#([0-9a-f]{3})$/,jt=/^#([0-9a-f]{6})$/,Ht=new RegExp("^rgb\\("+[Pt,Pt,Pt]+"\\)$"),qt=new RegExp("^rgb\\("+[Ft,Ft,Ft]+"\\)$"),Lt=new RegExp("^rgba\\("+[Pt,Pt,Pt,Gt]+"\\)$"),Vt=new RegExp("^rgba\\("+[Ft,Ft,Ft,Gt]+"\\)$"),Xt=new RegExp("^hsl\\("+[Gt,Ft,Ft]+"\\)$"),Bt=new RegExp("^hsla\\("+[Gt,Ft,Ft,Gt]+"\\)$"),Rt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Wt(t){var n;return t=(t+"").trim().toLowerCase(),(n=Yt.exec(t))?new tn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=jt.exec(t))?Zt(parseInt(n[1],16)):(n=Ht.exec(t))?new tn(n[1],n[2],n[3],1):(n=qt.exec(t))?new tn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Lt.exec(t))?Jt(n[1],n[2],n[3],n[4]):(n=Vt.exec(t))?Jt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Xt.exec(t))?en(n[1],n[2]/100,n[3]/100,1):(n=Bt.exec(t))?en(n[1],n[2]/100,n[3]/100,n[4]):Rt.hasOwnProperty(t)?Zt(Rt[t]):"transparent"===t?new tn(NaN,NaN,NaN,0):null}function Zt(t){return new tn(t>>16&255,t>>8&255,255&t,1)}function Jt(t,n,e,r){return r<=0&&(t=n=e=NaN),new tn(t,n,e,r)}function Qt(t){return t instanceof zt||(t=Wt(t)),t?new tn((t=t.rgb()).r,t.g,t.b,t.opacity):new tn}function Kt(t,n,e,r){return 1===arguments.length?Qt(t):new tn(t,n,e,null==r?1:r)}function tn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function nn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function en(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new rn(t,n,e,r)}function rn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function on(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}It(zt,Wt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),It(tn,Kt,Ut(zt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new tn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new tn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+nn(this.r)+nn(this.g)+nn(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),It(rn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof rn)return new rn(t.h,t.s,t.l,t.opacity);if(t instanceof zt||(t=Wt(t)),!t)return new rn;if(t instanceof rn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=n===o?(e-r)/s+6*(e<r):e===o?(r-n)/s+2:(n-e)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new rn(a,s,u,t.opacity)}(t):new rn(t,n,e,null==r?1:r)},Ut(zt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new tn(on(t>=240?t-240:t+120,i,r),on(t,i,r),on(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var an=Math.PI/180,sn=180/Math.PI,un=.96422,ln=1,cn=.82521,hn=4/29,fn=6/29,pn=3*fn*fn,dn=fn*fn*fn;function gn(t){if(t instanceof vn)return new vn(t.l,t.a,t.b,t.opacity);if(t instanceof xn){if(isNaN(t.h))return new vn(t.l,0,0,t.opacity);var n=t.h*an;return new vn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof tn||(t=Qt(t));var e,r,i=wn(t.r),o=wn(t.g),a=wn(t.b),s=mn((.2225045*i+.7168786*o+.0606169*a)/ln);return i===o&&o===a?e=r=s:(e=mn((.4360747*i+.3850649*o+.1430804*a)/un),r=mn((.0139322*i+.0971045*o+.7141733*a)/cn)),new vn(116*s-16,500*(e-s),200*(s-r),t.opacity)}function vn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function mn(t){return t>dn?Math.pow(t,1/3):t/pn+hn}function yn(t){return t>fn?t*t*t:pn*(t-hn)}function bn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function wn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function xn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}It(vn,function(t,n,e,r){return 1===arguments.length?gn(t):new vn(t,n,e,null==r?1:r)},Ut(zt,{brighter:function(t){return new vn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new vn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new tn(bn(3.1338561*(n=un*yn(n))-1.6168667*(t=ln*yn(t))-.4906146*(e=cn*yn(e))),bn(-.9787684*n+1.9161415*t+.033454*e),bn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),It(xn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof xn)return new xn(t.h,t.c,t.l,t.opacity);if(t instanceof vn||(t=gn(t)),0===t.a&&0===t.b)return new xn(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*sn;return new xn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new xn(t,n,e,null==r?1:r)},Ut(zt,{brighter:function(t){return new xn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new xn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return gn(this).rgb()}}));var _n=-.14861,Mn=1.78277,$n=-.29227,Tn=-.90649,Sn=1.97294,kn=Sn*Tn,An=Sn*Mn,Cn=Mn*$n-Tn*_n;function En(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Dn(t){return function(){return t}}function Nn(t){return 1==(t=+t)?On:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Dn(isNaN(n)?e:n)}}function On(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):Dn(isNaN(t)?n:t)}It(En,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof En)return new En(t.h,t.s,t.l,t.opacity);t instanceof tn||(t=Qt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Cn*r+kn*n-An*e)/(Cn+kn-An),o=r-i,a=(Sn*(e-i)-$n*o)/Tn,s=Math.sqrt(a*a+o*o)/(Sn*i*(1-i)),u=s?Math.atan2(a,o)*sn-120:NaN;return new En(u<0?u+360:u,s,i,t.opacity)}(t):new En(t,n,e,null==r?1:r)},Ut(zt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new En(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new En(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*an,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new tn(255*(n+e*(_n*r+Mn*i)),255*(n+e*($n*r+Tn*i)),255*(n+e*(Sn*r)),this.opacity)}}));var In=function t(n){var e=Nn(n);function r(t,n){var r=e((t=Kt(t)).r,(n=Kt(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=On(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Un(t,n){return n-=t=+t,function(e){return t+n*e}}var zn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Pn=new RegExp(zn.source,"g");function Gn(t,n){var e,r,i,o=zn.lastIndex=Pn.lastIndex=0,a=-1,s=[],u=[];for(t+="",n+="";(e=zn.exec(t))&&(r=Pn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(e=e[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:Un(e,r)})),o=Pn.lastIndex;return o<n.length&&(i=n.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)s[(e=u[r]).i]=e.x(t);return s.join("")})}function Fn(t,n){var e,r=typeof n;return null==n||"boolean"===r?Dn(n):("number"===r?Un:"string"===r?(e=Wt(n))?(n=e,In):Gn:n instanceof Wt?In:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Fn(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Fn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:Un)(t,n)}function Yn(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}}var jn,Hn,qn,Ln,Vn=180/Math.PI,Xn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Bn(t,n,e,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(s=Math.sqrt(e*e+r*r))&&(e/=s,r/=s,u/=s),t*r<n*e&&(t=-t,n=-n,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Vn,skewX:Math.atan(u)*Vn,scaleX:a,scaleY:s}}function Rn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,n,null,e);s.push({i:u-4,x:Un(t,i)},{i:u-2,x:Un(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Un(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,s,u),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Un(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,s,u),function(t,n,e,r,o,a){if(t!==e||n!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Un(t,e)},{i:s-2,x:Un(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var n,e=-1,r=u.length;++e<r;)s[(n=u[e]).i]=n.x(t);return s.join("")}}}var Wn=Rn(function(t){return"none"===t?Xn:(jn||(jn=document.createElement("DIV"),Hn=document.documentElement,qn=document.defaultView),jn.style.transform=t,t=qn.getComputedStyle(Hn.appendChild(jn),null).getPropertyValue("transform"),Hn.removeChild(jn),Bn(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Zn=Rn(function(t){return null==t?Xn:(Ln||(Ln=document.createElementNS("http://www.w3.org/2000/svg","g")),Ln.setAttribute("transform",t),(t=Ln.transform.baseVal.consolidate())?Bn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Xn)},", ",")",")");Math.SQRT2;function Jn(t){return+t}var Qn=[0,1];function Kn(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=n,function(){return e});var e}function te(t,n,e,r){var i=t[0],o=t[1],a=n[0],s=n[1];return o<i?(i=e(o,i),a=r(s,a)):(i=e(i,o),a=r(a,s)),function(t){return a(i(t))}}function ne(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),a=new Array(i),s=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++s<i;)o[s]=e(t[s],t[s+1]),a[s]=r(n[s],n[s+1]);return function(n){var e=p(t,n,1,i)-1;return a[e](o[e](n))}}function ee(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function re(t){return(t=ee(Math.abs(t)))?t[1]:NaN}var ie,oe=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ae(t){return new se(t)}function se(t){if(!(n=oe.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}function ue(t,n){var e=ee(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}ae.prototype=se.prototype,se.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var le={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ue(100*t,n)},r:ue,s:function(t,n){var e=ee(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ie=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ee(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function ce(t){return t}var he,fe,pe,de=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function ge(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,s=n[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=n[a=(a+1)%n.length];return o.reverse().join(e)}):ce,i=t.currency,o=t.decimal,a=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):ce,s=t.percent||"%";function u(t){var n=(t=ae(t)).fill,e=t.align,u=t.sign,l=t.symbol,c=t.zero,h=t.width,f=t.comma,p=t.precision,d=t.trim,g=t.type;"n"===g?(f=!0,g="g"):le[g]||(null==p&&(p=12),d=!0,g="g"),(c||"0"===n&&"="===e)&&(c=!0,n="0",e="=");var v="$"===l?i[0]:"#"===l&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===l?i[1]:/[%p]/.test(g)?s:"",y=le[g],b=/[defgprs%]/.test(g);function w(t){var i,s,l,w=v,x=m;if("c"===g)x=y(t)+x,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),p),d&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),_&&0==+t&&(_=!1),w=(_?"("===u?u:"-":"-"===u||"("===u?"":u)+w,x=("s"===g?de[8+ie/3]:"")+x+(_&&"("===u?")":""),b)for(i=-1,s=t.length;++i<s;)if(48>(l=t.charCodeAt(i))||l>57){x=(46===l?o+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}f&&!c&&(t=r(t,1/0));var M=w.length+t.length+x.length,$=M<h?new Array(h-M+1).join(n):"";switch(f&&c&&(t=r($+t,$.length?h-x.length:1/0),$=""),e){case"<":t=w+t+x+$;break;case"=":t=w+$+t+x;break;case"^":t=$.slice(0,M=$.length>>1)+w+t+x+$.slice(M);break;default:t=$+w+t+x}return a(t)}return p=null==p?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),w.toString=function(){return t+""},w}return{format:u,formatPrefix:function(t,n){var e=u(((t=ae(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(re(n)/3))),i=Math.pow(10,-r),o=de[8+r/3];return function(t){return e(i*t)+o}}}}function ve(t,n,e){var r,i=t[0],o=t[t.length-1],a=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=y?i*=10:o>=b?i*=5:o>=w&&(i*=2),n<t?-i:i}(i,o,null==n?10:n);switch((e=ae(null==e?",f":e)).type){case"s":var s=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(re(n)/3)))-re(Math.abs(t)))}(a,s))||(e.precision=r),pe(e,s);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,re(n)-re(t))+1}(a,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=function(t){return Math.max(0,-re(Math.abs(t)))}(a))||(e.precision=r-2*("%"===e.type))}return fe(e)}function me(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,i,o,a,s=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=x(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return ve(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=x(s,u,e))>0?r=x(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,e):r<0&&(r=x(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,e)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,n(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,n(i)),t},t}function ye(){var t=function(t,n){var e,r,i,o=Qn,a=Qn,s=Fn,u=!1;function l(){return e=Math.min(o.length,a.length)>2?ne:te,r=i=null,c}function c(n){return(r||(r=e(o,a,u?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,s)))(+n)}return c.invert=function(t){return(i||(i=e(a,o,Kn,u?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},c.domain=function(t){return arguments.length?(o=Et.call(t,Jn),l()):o.slice()},c.range=function(t){return arguments.length?(a=Dt.call(t),l()):a.slice()},c.rangeRound=function(t){return a=Dt.call(t),s=Yn,l()},c.clamp=function(t){return arguments.length?(u=!!t,l()):u},c.interpolate=function(t){return arguments.length?(s=t,l()):s},l()}(Kn,Un);return t.copy=function(){return n=t,ye().domain(n.domain()).range(n.range()).interpolate(n.interpolate()).clamp(n.clamp());var n},me(t)}he=ge({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),fe=he.format,pe=he.formatPrefix;var be=new Date,we=new Date;function xe(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,s=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return s;do{s.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return s},i.filter=function(e){return xe(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return be.setTime(+n),we.setTime(+r),t(be),t(we),Math.floor(e(be,we))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var _e=xe(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});_e.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?xe(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):_e:null};var Me=6e4,$e=6048e5,Te=(xe(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),xe(function(t){t.setTime(Math.floor(t/Me)*Me)},function(t,n){t.setTime(+t+n*Me)},function(t,n){return(n-t)/Me},function(t){return t.getMinutes()}),xe(function(t){var n=t.getTimezoneOffset()*Me%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),xe(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Me)/864e5},function(t){return t.getDate()-1}));function Se(t){return xe(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Me)/$e})}var ke=Se(0),Ae=Se(1),Ce=(Se(2),Se(3),Se(4)),Ee=(Se(5),Se(6),xe(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),xe(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Ee.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xe(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};xe(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Me)},function(t,n){return(n-t)/Me},function(t){return t.getUTCMinutes()}),xe(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()});var De=xe(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1});function Ne(t){return xe(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/$e})}var Oe=Ne(0),Ie=Ne(1),Ue=(Ne(2),Ne(3),Ne(4)),ze=(Ne(5),Ne(6),xe(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),xe(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function Pe(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ge(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Fe(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}ze.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xe(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Ye,je,He,qe={"-":"",_:" ",0:"0"},Le=/^\s*\d+/,Ve=/^%/,Xe=/[\\^$*+?|[\]().{}]/g;function Be(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Re(t){return t.replace(Xe,"\\$&")}function We(t){return new RegExp("^(?:"+t.map(Re).join("|")+")","i")}function Ze(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Je(t,n,e){var r=Le.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Qe(t,n,e){var r=Le.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Ke(t,n,e){var r=Le.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function tr(t,n,e){var r=Le.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function nr(t,n,e){var r=Le.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function er(t,n,e){var r=Le.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function rr(t,n,e){var r=Le.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function ir(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function or(t,n,e){var r=Le.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function ar(t,n,e){var r=Le.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function sr(t,n,e){var r=Le.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function ur(t,n,e){var r=Le.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function lr(t,n,e){var r=Le.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function cr(t,n,e){var r=Le.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function hr(t,n,e){var r=Le.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function fr(t,n,e){var r=Le.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function pr(t,n,e){var r=Ve.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function dr(t,n,e){var r=Le.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function gr(t,n,e){var r=Le.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function vr(t,n){return Be(t.getDate(),n,2)}function mr(t,n){return Be(t.getHours(),n,2)}function yr(t,n){return Be(t.getHours()%12||12,n,2)}function br(t,n){return Be(1+Te.count(Ee(t),t),n,3)}function wr(t,n){return Be(t.getMilliseconds(),n,3)}function xr(t,n){return wr(t,n)+"000"}function _r(t,n){return Be(t.getMonth()+1,n,2)}function Mr(t,n){return Be(t.getMinutes(),n,2)}function $r(t,n){return Be(t.getSeconds(),n,2)}function Tr(t){var n=t.getDay();return 0===n?7:n}function Sr(t,n){return Be(ke.count(Ee(t),t),n,2)}function kr(t,n){var e=t.getDay();return t=e>=4||0===e?Ce(t):Ce.ceil(t),Be(Ce.count(Ee(t),t)+(4===Ee(t).getDay()),n,2)}function Ar(t){return t.getDay()}function Cr(t,n){return Be(Ae.count(Ee(t),t),n,2)}function Er(t,n){return Be(t.getFullYear()%100,n,2)}function Dr(t,n){return Be(t.getFullYear()%1e4,n,4)}function Nr(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Be(n/60|0,"0",2)+Be(n%60,"0",2)}function Or(t,n){return Be(t.getUTCDate(),n,2)}function Ir(t,n){return Be(t.getUTCHours(),n,2)}function Ur(t,n){return Be(t.getUTCHours()%12||12,n,2)}function zr(t,n){return Be(1+De.count(ze(t),t),n,3)}function Pr(t,n){return Be(t.getUTCMilliseconds(),n,3)}function Gr(t,n){return Pr(t,n)+"000"}function Fr(t,n){return Be(t.getUTCMonth()+1,n,2)}function Yr(t,n){return Be(t.getUTCMinutes(),n,2)}function jr(t,n){return Be(t.getUTCSeconds(),n,2)}function Hr(t){var n=t.getUTCDay();return 0===n?7:n}function qr(t,n){return Be(Oe.count(ze(t),t),n,2)}function Lr(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Ue(t):Ue.ceil(t),Be(Ue.count(ze(t),t)+(4===ze(t).getUTCDay()),n,2)}function Vr(t){return t.getUTCDay()}function Xr(t,n){return Be(Ie.count(ze(t),t),n,2)}function Br(t,n){return Be(t.getUTCFullYear()%100,n,2)}function Rr(t,n){return Be(t.getUTCFullYear()%1e4,n,4)}function Wr(){return"+0000"}function Zr(){return"%"}function Jr(t){return+t}function Qr(t){return Math.floor(+t/1e3)}!function(t){Ye=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=We(i),c=Ze(i),h=We(o),f=Ze(o),p=We(a),d=Ze(a),g=We(s),v=Ze(s),m=We(u),y=Ze(u),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:vr,e:vr,f:xr,H:mr,I:yr,j:br,L:wr,m:_r,M:Mr,p:function(t){return i[+(t.getHours()>=12)]},Q:Jr,s:Qr,S:$r,u:Tr,U:Sr,V:kr,w:Ar,W:Cr,x:null,X:null,y:Er,Y:Dr,Z:Nr,"%":Zr},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:Or,e:Or,f:Gr,H:Ir,I:Ur,j:zr,L:Pr,m:Fr,M:Yr,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Jr,s:Qr,S:jr,u:Hr,U:qr,V:Lr,w:Vr,W:Xr,x:null,X:null,y:Br,Y:Rr,Z:Wr,"%":Zr},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=f[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=m.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return $(t,n,e,r)},d:ar,e:ar,f:fr,H:ur,I:ur,j:sr,L:hr,m:or,M:lr,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},Q:dr,s:gr,S:cr,u:Qe,U:Ke,V:tr,w:Je,W:nr,x:function(t,n,r){return $(t,e,n,r)},X:function(t,n,e){return $(t,r,n,e)},y:rr,Y:er,Z:ir,"%":pr};function _(t,n){return function(e){var r,i,o,a=[],s=-1,u=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=qe[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function M(t,n){return function(e){var r,i,o=Fe(1900);if($(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=(r=Ge(Fe(o.y))).getUTCDay())>4||0===i?Ie.ceil(r):Ie(r),r=De.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(r=(i=(r=n(Fe(o.y))).getDay())>4||0===i?Ae.ceil(r):Ae(r),r=Te.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ge(Fe(o.y)).getUTCDay():n(Fe(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ge(o)):n(o)}}function $(t,n,e,r){for(var i,o,a=0,s=n.length,u=e.length;a<s;){if(r>=u)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in qe?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=_(e,b),b.X=_(r,b),b.c=_(n,b),w.x=_(e,w),w.X=_(r,w),w.c=_(n,w),{format:function(t){var n=_(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",Pe);return n.toString=function(){return t},n},utcFormat:function(t){var n=_(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,Ge);return n.toString=function(){return t},n}}}(t),Ye.format,Ye.parse,je=Ye.utcFormat,He=Ye.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||je("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||He("%Y-%m-%dT%H:%M:%S.%LZ");var Kr=Math.PI,ti=2*Kr,ni=ti-1e-6;function ei(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ri(){return new ei}function ii(t){return function(){return t}}ei.prototype=ri.prototype={constructor:ei,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,s=e-t,u=r-n,l=o-t,c=a-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var f=e-o,p=r-a,d=s*s+u*u,g=f*f+p*p,v=Math.sqrt(d),m=Math.sqrt(h),y=i*Math.tan((Kr-Math.acos((d+h-g)/(2*v*m)))/2),b=y/m,w=y/v;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*l)+","+(n+b*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+w*s)+","+(this._y1=n+w*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var a=(e=+e)*Math.cos(r),s=e*Math.sin(r),u=t+a,l=n+s,c=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),e&&(h<0&&(h=h%ti+ti),h>ni?this._+="A"+e+","+e+",0,1,"+c+","+(t-a)+","+(n-s)+"A"+e+","+e+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=Kr)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};Math.PI;function oi(t){this._context=t}function ai(t){return new oi(t)}function si(t){return t[0]}function ui(t){return t[1]}function li(){var t=si,n=null,e=ii(0),r=ui,i=ii(!0),o=null,a=ai,s=null;function u(u){var l,c,h,f,p,d=u.length,g=!1,v=new Array(d),m=new Array(d);for(null==o&&(s=a(p=ri())),l=0;l<=d;++l){if(!(l<d&&i(f=u[l],l,u))===g)if(g=!g)c=l,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),h=l-1;h>=c;--h)s.point(v[h],m[h]);s.lineEnd(),s.areaEnd()}g&&(v[l]=+t(f,l,u),m[l]=+e(f,l,u),s.point(n?+n(f,l,u):v[l],r?+r(f,l,u):m[l]))}if(p)return s=null,p+""||null}function l(){return function(){var t=si,n=ui,e=ii(!0),r=null,i=ai,o=null;function a(a){var s,u,l,c=a.length,h=!1;for(null==r&&(o=i(l=ri())),s=0;s<=c;++s)!(s<c&&e(u=a[s],s,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(u,s,a),+n(u,s,a));if(l)return o=null,l+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:ii(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:ii(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:ii(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return u.x=function(e){return arguments.length?(t="function"==typeof e?e:ii(+e),n=null,u):t},u.x0=function(n){return arguments.length?(t="function"==typeof n?n:ii(+n),u):t},u.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:ii(+t),u):n},u.y=function(t){return arguments.length?(e="function"==typeof t?t:ii(+t),r=null,u):e},u.y0=function(t){return arguments.length?(e="function"==typeof t?t:ii(+t),u):e},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ii(+t),u):r},u.lineX0=u.lineY0=function(){return l().x(t).y(e)},u.lineY1=function(){return l().x(t).y(r)},u.lineX1=function(){return l().x(n).y(e)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:ii(!!t),u):i},u.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),u):a},u.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),u):o},u}function ci(t){return t<0?-1:1}function hi(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(ci(o)+ci(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function fi(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function pi(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*n,o-s,a-s*e,o,a)}function di(t){this._context=t}function gi(t){this._context=t}oi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}},di.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:pi(this,this._t0,fi(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,pi(this,fi(this,e=hi(this,t,n)),e);break;default:pi(this,this._t0,e=hi(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(function(t){this._context=new gi(t)}.prototype=Object.create(di.prototype)).point=function(t,n){di.prototype.point.call(this,n,t)},gi.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}};var vi=Array.prototype.slice;function mi(t){return t}var yi=1,bi=2,wi=3,xi=4,_i=1e-6;function Mi(t){return"translate("+(t+.5)+",0)"}function $i(t){return"translate(0,"+(t+.5)+")"}function Ti(){return!this.__axis}function Si(t,n){var e=[],r=null,i=null,o=6,a=6,s=3,u=t===yi||t===xi?-1:1,l=t===xi||t===bi?"x":"y",c=t===yi||t===wi?Mi:$i;function h(h){var f=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):mi:i,d=Math.max(o,0)+s,g=n.range(),v=+g[0]+.5,m=+g[g.length-1]+.5,y=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),b=h.selection?h.selection():h,w=b.selectAll(".domain").data([null]),x=b.selectAll(".tick").data(f,n).order(),_=x.exit(),M=x.enter().append("g").attr("class","tick"),$=x.select("line"),T=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge(M),$=$.merge(M.append("line").attr("stroke","#000").attr(l+"2",u*o)),T=T.merge(M.append("text").attr("fill","#000").attr(l,u*d).attr("dy",t===yi?"0em":t===wi?"0.71em":"0.32em")),h!==b&&(w=w.transition(h),x=x.transition(h),$=$.transition(h),T=T.transition(h),_=_.transition(h).attr("opacity",_i).attr("transform",function(t){return isFinite(t=y(t))?c(t):this.getAttribute("transform")}),M.attr("opacity",_i).attr("transform",function(t){var n=this.parentNode.__axis;return c(n&&isFinite(n=n(t))?n:y(t))})),_.remove(),w.attr("d",t===xi||t==bi?"M"+u*a+","+v+"H0.5V"+m+"H"+u*a:"M"+v+","+u*a+"V0.5H"+m+"V"+u*a),x.attr("opacity",1).attr("transform",function(t){return c(y(t))}),$.attr(l+"2",u*o),T.attr(l,u*d).text(p),b.filter(Ti).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===bi?"start":t===xi?"end":"middle"),b.each(function(){this.__axis=y})}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=vi.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:vi.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:vi.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(s=+t,h):s},h}function ki(t){return Si(wi,t)}var Ai={value:function(){}};function Ci(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Ei(r)}function Ei(t){this._=t}function Di(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Ni(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Ai,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function Oi(){st.preventDefault(),st.stopImmediatePropagation()}Ei.prototype=Ci.prototype={constructor:Ei,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<s;)if(e=(t=o[a]).type)i[e]=Ni(i[e],t.name,n);else if(null==n)for(e in i)i[e]=Ni(i[e],t.name,null);return this}for(;++a<s;)if((e=(t=o[a]).type)&&(e=Di(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Ei(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var Ii,Ui,zi=0,Pi=0,Gi=0,Fi=1e3,Yi=0,ji=0,Hi=0,qi="object"==typeof performance&&performance.now?performance:Date,Li="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Vi(){return ji||(Li(Xi),ji=qi.now()+Hi)}function Xi(){ji=0}function Bi(){this._call=this._time=this._next=null}function Ri(t,n,e){var r=new Bi;return r.restart(t,n,e),r}function Wi(){ji=(Yi=qi.now())+Hi,zi=Pi=0;try{!function(){Vi(),++zi;for(var t,n=Ii;n;)(t=ji-n._time)>=0&&n._call.call(null,t),n=n._next;--zi}()}finally{zi=0,function(){var t,n,e=Ii,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ii=n);Ui=t,Ji(r)}(),ji=0}}function Zi(){var t=qi.now(),n=t-Yi;n>Fi&&(Hi-=n,Yi=t)}function Ji(t){zi||(Pi&&(Pi=clearTimeout(Pi)),t-ji>24?(t<1/0&&(Pi=setTimeout(Wi,t-qi.now()-Hi)),Gi&&(Gi=clearInterval(Gi))):(Gi||(Yi=qi.now(),Gi=setInterval(Zi,Fi)),zi=1,Li(Wi)))}function Qi(t,n,e){var r=new Bi;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r}Bi.prototype=Ri.prototype={constructor:Bi,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Vi():+e)+(null==n?0:+n),this._next||Ui===this||(Ui?Ui._next=this:Ii=this,Ui=this),this._call=t,this._time=e,Ji()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ji())}};var Ki=Ci("start","end","interrupt"),to=[],no=0,eo=1,ro=2,io=3,oo=4,ao=5,so=6;function uo(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(u){var l,c,h,f;if(e.state!==eo)return s();for(l in i)if((f=i[l]).name===e.name){if(f.state===io)return Qi(o);f.state===oo?(f.state=so,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=so,f.timer.stop(),delete i[l])}if(Qi(function(){e.state===io&&(e.state=oo,e.timer.restart(a,e.delay,e.time),a(u))}),e.state=ro,e.on.call("start",t,t.__data__,e.index,e.group),e.state===ro){for(e.state=io,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(s),e.state=ao,1),o=-1,a=r.length;++o<a;)r[o].call(null,i);e.state===ao&&(e.on.call("end",t,t.__data__,e.index,e.group),s())}function s(){for(var r in e.state=so,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Ri(function(t){e.state=eo,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ki,tween:to,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:no})}function lo(t,n){var e=ho(t,n);if(e.state>no)throw new Error("too late; already scheduled");return e}function co(t,n){var e=ho(t,n);if(e.state>ro)throw new Error("too late; already started");return e}function ho(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function fo(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>ro&&e.state<ao,e.state=so,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}function po(t,n,e){var r=t._id;return t.each(function(){var t=co(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return ho(t,r).value[n]}}function go(t,n){var e;return("number"==typeof n?Un:n instanceof Wt?In:(e=Wt(n))?(n=e,In):Gn)(t,n)}var vo=gt.prototype.constructor;var mo=0;function yo(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function bo(){return++mo}var wo=gt.prototype;yo.prototype=function(t){return gt().transition(t)}.prototype={constructor:yo,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=N(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,uo(h[f],n,e,f,h,ho(s,e)));return new yo(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=I(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=ho(u,e),g=0,v=p.length;g<v;++g)(f=p[g])&&uo(f,n,e,g,p,d);o.push(p),a.push(u)}return new yo(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=G(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new yo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new yo(a,this._parents,this._name,this._id)},selection:function(){return new vo(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=bo(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=ho(a,n);uo(a,t,e,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new yo(r,this._parents,t,e)},call:wo.call,nodes:wo.nodes,node:wo.node,size:wo.size,empty:wo.empty,each:wo.each,on:function(t,n){var e=this._id;return arguments.length<2?ho(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?lo:co;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=C(t),r="transform"===e?Zn:go;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var a,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===s?null:a===r&&s===i?o:o=n(r=a,i=s);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var a,s=e(this);if(null!=s)return(a=this.getAttribute(t))===s?null:a===r&&s===i?o:o=n(r=a,i=s);this.removeAttribute(t)}})(e,r,po(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}:function(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}})(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=C(t);return this.tween(e,(r.local?function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}:function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Wn:go;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=X(this,t),a=(this.style.removeProperty(t),X(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,o;return function(){var a=X(this,t),s=e(this);return null==s&&(this.style.removeProperty(t),s=X(this,t)),a===s?null:a===r&&s===i?o:o=n(r=a,i=s)}}(t,r,po(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var o=X(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(po(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ho(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=co(this,t),o=i.tween;if(o!==e)for(var a=0,s=(r=e=o).length;a<s;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=co(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:n,value:e},u=0,l=i.length;u<l;++u)if(i[u].name===n){i[u]=s;break}u===l&&i.push(s)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){lo(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){lo(this,t).delay=n}})(n,t)):ho(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){co(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){co(this,t).duration=n}})(n,t)):ho(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){co(this,t).ease=n}}(n,t)):ho(this.node(),n).ease}};Math.PI,Math.PI;var xo={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function _o(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return xo.time=Vi(),xo;return e}function Mo(t){return function(){return t}}function $o(){st.stopImmediatePropagation()}function To(){st.preventDefault(),st.stopImmediatePropagation()}gt.prototype.interrupt=function(t){return this.each(function(){fo(this,t)})},gt.prototype.transition=function(t){var n,e;t instanceof yo?(n=t._id,t=t._name):(n=bo(),(e=xo).time=Vi(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&uo(a,t,n,l,s,e||_o(a,n));return new yo(r,this._parents,t,n)};var So={name:"drag"},ko={name:"space"},Ao={name:"handle"},Co={name:"center"},Eo={name:"x",handles:["e","w"].map(Go),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Do={name:"y",handles:["n","s"].map(Go),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},No={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Go),input:function(t){return t},output:function(t){return t}},Oo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Io={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Uo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},zo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Po={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Go(t){return{type:t}}function Fo(){return!st.button}function Yo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function jo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ho(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function qo(){return function(t){var n,e=Yo,r=Fo,i=Ci(a,"start","brush","end"),o=6;function a(n){var e=n.property("__brush",h).selectAll(".overlay").data([Go("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Oo.overlay).merge(e).each(function(){var t=jo(this).extent;vt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([Go("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Oo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Oo[t.type]}),n.each(s).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",c)}function s(){var t=vt(this),n=jo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function u(t,n){return t.__brush.emitter||new l(t,n)}function l(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function c(){if(st.touches){if(st.changedTouches.length<st.touches.length)return To()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,a,l,c,h,f,p,d,g,v,m,y=this,b=st.target.__data__.type,w="selection"===(st.metaKey?b="overlay":b)?So:st.altKey?Co:Ao,x=t===Do?null:zo[b],_=t===Eo?null:Po[b],M=jo(y),$=M.extent,T=M.selection,S=$[0][0],k=$[0][1],A=$[1][0],C=$[1][1],E=x&&_&&st.shiftKey,D=yt(y),N=D,O=u(y,arguments).beforestart();"overlay"===b?M.selection=T=[[e=t===Do?S:D[0],o=t===Eo?k:D[1]],[l=t===Do?A:e,h=t===Eo?C:o]]:(e=T[0][0],o=T[0][1],l=T[1][0],h=T[1][1]),i=e,a=o,c=l,f=h;var I=vt(y).attr("pointer-events","none"),U=I.selectAll(".overlay").attr("cursor",Oo[b]);if(st.touches)I.on("touchmove.brush",P,!0).on("touchend.brush touchcancel.brush",F,!0);else{var z=vt(st.view).on("keydown.brush",function(){switch(st.keyCode){case 16:E=x&&_;break;case 18:w===Ao&&(x&&(l=c-p*x,e=i+p*x),_&&(h=f-d*_,o=a+d*_),w=Co,G());break;case 32:w!==Ao&&w!==Co||(x<0?l=c-p:x>0&&(e=i-p),_<0?h=f-d:_>0&&(o=a-d),w=ko,U.attr("cursor",Oo.selection),G());break;default:return}To()},!0).on("keyup.brush",function(){switch(st.keyCode){case 16:E&&(v=m=E=!1,G());break;case 18:w===Co&&(x<0?l=c:x>0&&(e=i),_<0?h=f:_>0&&(o=a),w=Ao,G());break;case 32:w===ko&&(st.altKey?(x&&(l=c-p*x,e=i+p*x),_&&(h=f-d*_,o=a+d*_),w=Co):(x<0?l=c:x>0&&(e=i),_<0?h=f:_>0&&(o=a),w=Ao),U.attr("cursor",Oo[b]),G());break;default:return}To()},!0).on("mousemove.brush",P,!0).on("mouseup.brush",F,!0);!function(t){var n=t.document.documentElement,e=vt(t).on("dragstart.drag",Oi,!0);"onselectstart"in n?e.on("selectstart.drag",Oi,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}(st.view)}$o(),fo(y),s.call(y),O.start()}function P(){var t=yt(y);!E||v||m||(Math.abs(t[0]-N[0])>Math.abs(t[1]-N[1])?m=!0:v=!0),N=t,g=!0,To(),G()}function G(){var t;switch(p=N[0]-D[0],d=N[1]-D[1],w){case ko:case So:x&&(p=Math.max(S-e,Math.min(A-l,p)),i=e+p,c=l+p),_&&(d=Math.max(k-o,Math.min(C-h,d)),a=o+d,f=h+d);break;case Ao:x<0?(p=Math.max(S-e,Math.min(A-e,p)),i=e+p,c=l):x>0&&(p=Math.max(S-l,Math.min(A-l,p)),i=e,c=l+p),_<0?(d=Math.max(k-o,Math.min(C-o,d)),a=o+d,f=h):_>0&&(d=Math.max(k-h,Math.min(C-h,d)),a=o,f=h+d);break;case Co:x&&(i=Math.max(S,Math.min(A,e-p*x)),c=Math.max(S,Math.min(A,l+p*x))),_&&(a=Math.max(k,Math.min(C,o-d*_)),f=Math.max(k,Math.min(C,h+d*_)))}c<i&&(x*=-1,t=e,e=l,l=t,t=i,i=c,c=t,b in Io&&U.attr("cursor",Oo[b=Io[b]])),f<a&&(_*=-1,t=o,o=h,h=t,t=a,a=f,f=t,b in Uo&&U.attr("cursor",Oo[b=Uo[b]])),M.selection&&(T=M.selection),v&&(i=T[0][0],c=T[1][0]),m&&(a=T[0][1],f=T[1][1]),T[0][0]===i&&T[0][1]===a&&T[1][0]===c&&T[1][1]===f||(M.selection=[[i,a],[c,f]],s.call(y),O.brush())}function F(){if($o(),st.touches){if(st.touches.length)return;n&&clearTimeout(n),n=setTimeout(function(){n=null},500),I.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,n){var e=t.document.documentElement,r=vt(t).on("dragstart.drag",null);n&&(r.on("click.drag",Oi,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}(st.view,g),z.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);I.attr("pointer-events","all"),U.attr("cursor",Oo.overlay),M.selection&&(T=M.selection),Ho(T)&&(M.selection=null,s.call(y)),O.end()}}function h(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return a.move=function(n,e){n.selection?n.on("start.brush",function(){u(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){u(this,arguments).end()}).tween("brush",function(){var n=this,r=n.__brush,i=u(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),l=Fn(o,a);function c(t){r.selection=1===t&&Ho(a)?null:l(t),s.call(n),i.brush()}return o&&a?c:c(1)}):n.each(function(){var n=arguments,r=this.__brush,i=t.input("function"==typeof e?e.apply(this,n):e,r.extent),o=u(this,n).beforestart();fo(this),r.selection=null==i||Ho(i)?null:i,s.call(this),o.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){!function(t,n,e,r){var i=st;t.sourceEvent=st,st=t;try{n.apply(e,r)}finally{st=i}}(new function(t,n,e){this.target=t,this.type=n,this.selection=e}(a,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},a.extent=function(t){return arguments.length?(e="function"==typeof t?t:Mo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),a):e},a.filter=function(t){return arguments.length?(r="function"==typeof t?t:Mo(!!t),a):r},a.handleSize=function(t){return arguments.length?(o=+t,a):o},a.on=function(){var t=i.on.apply(i,arguments);return t===i?a:t},a}(No)}var Lo=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(function(){return Math.random()});const Vo={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},Xo={nrd:function(t){let n=(_(t,.75)-_(t,.25))/1.34;return 1.06*Math.min(g(t),n)*Math.pow(t.length,-.2)}};function Bo(t,n,e){return function(r){return n.map(n=>[n,function(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:a+=e;if(i)return a/i}(r,r=>t((n-r)/e))/e])}}class Ro{constructor(t,n=!1,e=30,r=-40,i=100){this.id=t,this.verbose=n,this.offsetX=e,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),vt("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){vt("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=st.pageX,n=st.pageY){this.verbose&&(console.log(t),console.log(n)),t+=this.offsetX,n=n+this.offsetY<0?10:n+this.offsetY;vt("#"+this.id).style("left",`${t}px`).style("top",`${n}px`)}edit(t){vt("#"+this.id).html(t)}}class Wo{constructor(t,n,e=!1){$(`#${t}`).show();const r=e?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=n}createDownloadSvgButton(t,n,e,r,i="fa-download"){this.createButton(t,i);vt(`#${t}`).on("click",()=>{this.downloadSvg(n,e,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,n,e="fa-expand-arrows-alt"){this.createButton(t,e);vt(`#${t}`).on("click",n).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,n="fa-download"){const e=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${n}`).appendTo(e),this.buttons[t]=e,e}attachTooltip(t){this.tooltip=t}downloadSvg(t,n,e){let r=$($($(`${"#"+t}`))[0]),i=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),o=function(t){for(var n="",e=document.styleSheets,r=0;r<e.length;r++)try{if(null==e[r].cssRules)continue;for(var i=e[r].cssRules,o=0;o<i.length;o++){var a=i[o];if(void 0!==a.style){var s,u=void 0===a.selectorText?a.selectorText:a.selectorText.replace(`#${t[0].id} `,"");try{s=$(t).find(u)}catch(t){s=[]}s.length>0&&(n+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var l=document.createElement("style");return l.setAttribute("type","text/css"),l.innerHTML="<![CDATA[\n"+n+"\n]]>",l}(r.get());i.prepend(o),$("#"+e).html("").hide();let a=$(`#${e}`).append(i).html(),s=new Blob([a],{type:"image/svg+xml"});saveAs(s,n),$(`#${e}`).html("").hide()}}class Zo{constructor(t,n={}){this._sanityCheck(t),this.data=t,this.groupInfo=n,this.toolbar=void 0,this.tooltip=void 0}render(t,n=500,e=357,r=.05,i,o=[-3,3],a="Y axis",s=!0,u=30,l=!0,h=0,f=!1,p=!1,d=!1,g=!1,m=!1,y=!1,b=0){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,n,e,r,i,o,a,s,u,l,h,f,p,d,g,m,y)}),this.updateYScale=function(o,a){t.selectAll("*").remove(),void 0===a&&(a=[]),this.render(t,n,e,r,i,[],o,s,u,l,h,f,p,d,g,m,y)},this.updateXScale=function(i){void 0===i&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,n,e,r,i,[],a,s,u,l,h,f,p,d,g,m,y)},void 0===o||0==o.length){let t=[];this.data.forEach(n=>t=t.concat(n.values)),o=v(t)}this.groups=_t().key(t=>t.group).entries(this.data),this.scale={x:Ot().rangeRound([0,n]).domain(i||this.groups.map(t=>t.key)).paddingInner(r),subx:Ot(),y:ye().rangeRound([e,0]).domain(o),z:ye()},this.groups.forEach(n=>{let r=n.key,i=n.values,a=this.groupInfo[r];if(n.index=this.scale.x.domain().indexOf(r),void 0!==a){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(a[t])<=parseFloat(a.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,n)=>{return`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(o[0])+50})`}).text(t=>`${t}: ${parseFloat(parseFloat(a[t]).toPrecision(3)).toExponential()}`)}m&&i.sort((t,n)=>t.label<n.label?-1:t.label>n.label?1:0),this.scale.subx.domain(i.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(e=>{0!=e.values.length&&(e.values=e.values.sort(c),this._drawViolin(t,e,f,n.index,y,b))});var s=18;if(g){const n=Ot().domain(i.map(t=>void 0==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${e+s})`).call(ki(n))}if(l){s=5;const n=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${e+s})`).call(ki(this.scale.subx));h>0&&n.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${h}, 2, 10)`)}});let w=l?55:0;var x;if(this.xAxis=s?ki(this.scale.x):ki(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${e+w})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${u}, -10, 10)`),w=5,this.yAxis=(x=this.scale.y,Si(xi,x)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${w}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*w+vt(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(a),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),p&&this._addGroupDivider(t),d){const n=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");n.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=n.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;e.append("rect").attr("x",(t,n)=>5+60*n+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),e.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,n)=>17+60*n+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,n){let e=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${e}, ${r})`).text(n)}createTooltip(t){return 0==$(`#${t}`).length&&$("<div/>").attr("id",t).appendTo($("body")),this.tooltip=new Ro(t),vt(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,n){return this.toolbar=new Wo(t,n),this.toolbar}addBrush(t){const n=qo();n.on("end",()=>{this.zoom(t,n)}),t.append("g").attr("class","brush").call(n)}zoom(t,n){let e,r=st.selection;if(void 0===n)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,n)=>{const e=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return n>=e&&n<=i}));const e=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([e,i]),t.select(".brush").call(n.move,null)}else{if(!e)return e=setTimeout(function(){e=null},350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((n,e)=>{let r=n.key,o=n.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),o.forEach(e=>{if(0==e.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${n.index}-${e.label}`);o.select(".violin").transition(i).attr("d",li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const a=_(e.values,.25),s=_(e.values,.75);o.select(".violin-ir").transition(i).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const u=T(e.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(u)).attr("y2",this.scale.y(u))})})}_drawViolin(t,n,e,r,i,o){let a=Bo(Vo.gaussian,this.scale.y.ticks(100),Xo.nrd(n.values));const s=v(n.values),u=a(n.values).filter(t=>t[0]>=s[0]&&t[0]<=s[1]),l=t.append("g").attr("id",`violin${r}-${n.label}`).attr("class","violin-g").datum(n);if(n.values.length>=o&&u.length&&this._validVertices(u)){let o=M(u,t=>Math.abs(t[1]));this.scale.z.domain([-o,o]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);let a=li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const s=l.append("path").datum(u).attr("d",a).classed("violin",!0).style("fill",()=>void 0!==n.color?n.color:r%2==0?"#90c1c1":"#94a8b8"),c=_(n.values,.25),h=_(n.values,.75),f=this.scale.z.domain()[1]/3;if(e){const e=Math.abs(h-c),r=M(n.values.filter(t=>t<=h+1.5*e)),i=S(n.values.filter(t=>t>=c-1.5*e));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(i)).style("stroke","#fff")}l.append("rect").attr("x",this.scale.z(-f)).attr("y",this.scale.y(h)).attr("width",Math.abs(this.scale.z(-f)-this.scale.z(f))).attr("height",Math.abs(this.scale.y(h)-this.scale.y(c))).attr("class","violin-ir");const p=T(n.values);if(l.append("line").attr("x1",this.scale.z(-f)).attr("x2",this.scale.z(f)).attr("y1",this.scale.y(p)).attr("y2",this.scale.y(p)).attr("class","violin-median"),i){let t=Lo(0,f/2);const e=Math.abs(h-c),r=M(n.values.filter(t=>t<=h+1.5*e)),i=S(n.values.filter(t=>t>=c-1.5*e)),o=n.values.filter(t=>t<i||t>r);l.append("g").attr("class","violin-outliers").selectAll("circle").data(o).enter().append("circle").attr("cx",()=>this.scale.z(t())).attr("cy",t=>this.scale.y(t)).attr("r",2)}l.on("mouseover",()=>{s.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(n.group+"<br/>"+n.label+"<br/>Median: "+p.toPrecision(4)+"<br/>")}),l.on("mouseout",()=>{s.classed("highlighted",!1)})}else if(o){let t=M(n.values,t=>Math.abs(t));this.scale.z.domain([-t,t]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const e=this.scale.z.domain()[1]/3;let r=Lo(0,e/2);l.append("g").attr("class","violin-points").selectAll("circle").data(n.values).enter().append("circle").attr("cx",()=>this.scale.z(r())).attr("cy",t=>this.scale.y(t)).attr("r",2)}}_sanityCheck(t){const n=["group","label","values"];t.forEach(t=>{n.forEach(n=>{if(void 0===t[n])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const n=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==n.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+e/2:0;t.selectAll(".vline").data(n).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,e)=>e!=n.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,n)=>t.concat(n),[]).filter(t=>isNaN(t)).length}}function Jo(t=50,n=50,e=50,r=50){return{top:t,right:n,bottom:e,left:r}}function Qo(t,n=!0){t.forEach(t=>{t.values=n?t.data.map(t=>Math.log10(+t+1)):t.data,t.values.sort(c),t.median=T(t.values)})}function Ko(t,n,e,r=!0){const i="geneExpression";if(!t.hasOwnProperty(i))throw"Parse Error: required json attribute is missing: "+i;return t[i].forEach(t=>{["data","tissueSiteDetailId","geneSymbol","gencodeId"].forEach(n=>{if(!t.hasOwnProperty(n))throw console.error(t),"Parse Error: required json attribute is missing: "+n}),t.group=void 0===n?t.tissueSiteDetailId:n[t.tissueSiteDetailId],t.label=void 0===t.subsetGroup?t.geneSymbol:t.subsetGroup,t.color=void 0===e?"#90c1c1":"allData"==t.subsetGroup?`#${e[t.tissueSiteDetailId]}`:e[t.subsetGroup]}),Qo(t[i],r),t[i]}function ta(t){const n=t.select(".violin-x-axis");n.attr("transform",`${n.attr("transform")} translate(0, 3)`)}function na(t,n){let e=vt(`#${n.svg} g`);void 0!==t.gpConfig.title&&t.addPlotTitle(e,t.gpConfig.title),ea(t,n),t.gpConfig.subset?function(t,n,e,r="top"){ta(n);const i=n.selectAll(".violin-x-axis text");i.attr("transform",`translate(0, 8) ${i.attr("transform")}`),n.append("g").selectAll(".tcolor").data(t.scale.x.domain()).enter().append("rect").classed("tcolor",!0).attr("x",n=>t.scale.x(n)).attr("y",n=>"top"==r?t.scale.y.range()[1]:t.scale.y.range()[0]).attr("transform","translate(0, 14)").attr("width",n=>t.scale.x.bandwidth()).attr("height",5).style("stroke-width",0).style("fill",t=>`#${e[t].colorHex}`).style("opacity",.9)}(t,e,t.tissueDict,"bottom"):(vt(`#${n.svg} #violinLegend`).remove(),ta(e)),function(t){bt(".violin-g").on("mouseover",(n,e,r)=>{let i="log"==t.gpConfig.scale?Math.pow(10,n.median)-1:n.median;vt(r[e]).select("path").classed("highlighted",!0),t.gpConfig.subset?t.tooltip.show(n.group+"<br/>"+n.label+` (n = ${n.values.length})`+"<br/>"+`Median${t.unit}: ${i.toPrecision(4)}`+"<br/>"):t.tooltip.show(n.group+"<br/>"+`n = ${n.values.length}`+"<br/>"+`Median${t.unit}: ${i.toPrecision(4)}`+"<br/>")})}(t)}function ea(t,n){bt(`#${n.svg} path.violin`).classed("outlined",!t.gpConfig.showOutliers),$(`#${n.svg} .violin-outliers`).toggle(t.gpConfig.showOutliers)}function ra(t,n,e){switch(t){case e.plotSorts.ascAlphaSort:n.sort((t,n)=>t.group<n.group?-1:t.group>n.group?1:0);break;case e.plotSorts.descAlphaSort:n.sort((t,n)=>t.group<n.group?1:t.group>n.group?-1:0);break;case e.plotSorts.ascSort:n.sort((t,n)=>t.median-n.median);break;case e.plotSorts.descSort:n.sort((t,n)=>n.median-t.median)}return n.map(t=>t.group)}function ia(t,n){let e=t.gpConfig.subset?t.geneJson.subsetData:t.geneJson.allData;const r="log"==t.gpConfig.scale?Ko(e,t.tIdNameMap,t.groupColorDict):Ko(e,t.tIdNameMap,t.groupColorDict,!1);let i=t.data.map(t=>t.group);t.allData=r.map(t=>t),t.data=r.filter(t=>-1!=i.indexOf(t.group));let o=t.sortData.filter(t=>i.includes(t.group)),a=ra(t.gpConfig.sort,o,n);Qo(t.data,"log"==t.gpConfig.scale),Qo(t.allData,"log"==t.gpConfig.scale);let s="log"==t.gpConfig.scale?"log10(TPM+1)":"TPM";t.updateXScale(a),t.updateYScale(s),na(t,n)}return t.launch=function(t,n,e,r="Gene Expression Violin Plot",i=function(){const t="http://local.gtex.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v8&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v8&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v8&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v8&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v8&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v8&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v8",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}(),o=Jo(50,75,250,60),a={w:.8*window.innerWidth,h:250}){const s=[l(i.tissue),l(i.geneExp+e),l(i.geneExp+e+"&attributeSubset=sex")],u={root:t,spinner:"spinner",svg:`${t}-svg`,tooltip:n,toolbar:`${t}-toolbar`,clone:`${t}-svg-clone`,buttons:{download:`${t}-download`,plotOptions:`${t}-option-modal`,filter:`${t}-filter`,ascAlphaSort:`${t}-asc-alphasort`,descAlphaSort:`${t}-desc-alphasort`,ascSort:`${t}-asc-sort`,descSort:`${t}-desc-sort`,logScale:`${t}-log-scale`,linearScale:`${t}-linear-scale`,noDiff:`${t}-no-diff`,sexDiff:`${t}-sex-diff`,outliersOn:`${t}-outliers-on`,outliersOff:`${t}-outliers-off`},plotOptionGroups:{scale:`${t}-option-scale`,sort:`${t}-option-sort`,differentiation:`${t}-option-differentiation`,outliers:`${t}-option-outlier`},plotSorts:{ascAlphaSort:"asc-alphasort",descAlphaSort:"desc-alphasort",ascSort:"asc-sort",descSort:"desc-sort"},tissueFilter:`${t}-filter-modal`};if(0==$(`#${u.root}`).length)throw"Violin Plot Error: rootId does not exist.";0==$(`#${u.tooltip}`).length&&$("<div/>").attr("id",u.tooltip).appendTo($("body")),0==$(`#${u.toolbar}`).length&&$("<div/>").attr("id",u.toolbar).appendTo($(`#${u.root}`)),0==$(`#${u.root} #${u.spinner}`).length?$('<span><i id="spinner" class="fas fa-sync fa-spin"></i></span>').appendTo($(`#${u.root}`)):$(`#${u.root} #${u.spinner}`).show(),0==$(`#${u.clone}`).length&&$("<div/>").attr("id",u.clone).appendTo($(`#${u.root}`)),Promise.all(s).then(function(t){const n={},i={},s={female:"#e67f7b",male:"#70bcd2"};(function(t){const n="tissueInfo";if(!t.hasOwnProperty(n))throw"Parsing Error: required json attr is missing: "+n;const e=t[n];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!e[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),e})(t[0]).forEach(t=>{i[t.tissueSiteDetailId]=t.tissueSiteDetail,n[t.tissueSiteDetail]=t,s[t.tissueSiteDetailId]=t.colorHex});const l=Ko(t[1],i,s,!1);if(!l.length)return $(`#${u.toolbar}`).remove(),$(`<div id="gene-exp-vplot">No gene expression data found for ${e}</div>`).appendTo(`#${u.root}`),void $(`#${u.root} #${u.spinner}`).hide();let c=new Zo(l),h=c.createTooltip(u.tooltip);c.sortData=c.data.map(t=>t),c.allData=c.data.map(t=>t),c.gencodeId=e,c.tIdNameMap=i,c.groupColorDict=s,c.tissueDict=n,c.geneJson={allData:t[1],subsetData:t[2]},c.unit=l.length>0?` ${l[0].unit}`:"",c.gpConfig={subset:!1,scale:"linear",sort:u.plotSorts.ascAlphaSort,showOutliers:!0,title:r},function(t,n,e,r){const i=n,o=function(t=1200,n=250,e=Jo()){return{width:t,height:n,outerWidth:t+(e.left+e.right),outerHeight:n+(e.top+e.bottom)}}(e.w,e.h,i),a=vt(`#${r.root}`).append("svg").attr("id",r.svg).attr("width",o.outerWidth).attr("height",o.outerHeight).append("g").attr("transform",`translate(${i.left}, ${i.top})`),s=o.width,u=o.height,l=ra(t.gpConfig.sort,t.sortData,r);t.render(a,s,u,.2,l,[],"TPM",!0,35,!1,0,!1,!1,!0,!1,!0,!0),na(t,r)}(c,o,a,u),function(t,n,e,r){const i=function(t,n=!1){const e=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"],r="tissueInfo";if(!t.hasOwnProperty(r))throw"Parsing Error: required json attribute is missing: "+r;let i=t[r];["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach(t=>{if(!i[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`});let o=(i=0==n?i:i.filter(t=>!e.includes(t.tissueSiteDetailId))).reduce((t,n)=>{let e=n.tissueSite,r={id:n.tissueSiteDetailId,name:n.tissueSiteDetail};return t.hasOwnProperty(e)||(t[e]=[]),t[e].push(r),t},{});return Object.keys(o).forEach(t=>{if(1==o[t].length){let n=o[t][0];delete o[t],o[n.name]=[n]}}),o}(r);(function(t,n,e=!1,r=!1,i=4){const o="tissue-group-main-level";vt(`#${n}`).selectAll("*").remove();const a=$("<div/>").attr("class","col-xs-12 col-md-12").appendTo($(`#${n}`));e?$(`<label class=${o}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(a):$(`<label class=${o}>`+'<input type="radio" name="allTissues" value="all"> All </label> '+`<label class=${o}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(a),$('input[name="allTissues"]').change(function(){switch($(this).val()){case"all":$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0);break;case"reset":$(".tissueGroup").prop("checked",!1),$(".tissueSubGroup").prop("checked",!1)}});let s=Object.keys(t).sort((t,n)=>"Brain"==t?-1:"Brain"==n?1:t<n?-1:t>n?1:void 0),u=Object.keys(t).reduce((n,e)=>t[e].length>1?n+1+t[e].length:n+t[e].length,0),l=Math.ceil(u/i),c=u%i,h=Math.floor(12/i);const f=m(0,i).map(t=>$(`<div id="section${t}" class="col-xs-12 col-md-${h}">`).appendTo($(`#${n}`)));let p=0,d=0;s.forEach(n=>{let e=t[n];const r=n.replace(/ /g,"_");let i=e.length;i=1==i?i:i+1,0!=p&&i+p>l+c&&(p=0,d+=1),p+=i;let a=f[d];$(`<label class=${o}>`+`<input type="checkbox" id="${r}" class="tissueGroup"> `+`<span>${n}</span>`+"</label><br/>").appendTo(a),e.length>1&&e.sort((t,n)=>t.id>n.id?1:t.id<n.id?-1:0).forEach(function(t,n){let r=$("<label class=tissue-group-sub-level>"+`<input type="checkbox" id="${t.id}" class="tissueSubGroup"> `+`<span>${t.name}</span>`+"</label><br/>").appendTo(a);n==e.length-1&&r.addClass("last-site"),r.click(function(){$('input[name="allTissues"]').prop("checked",!1)})}),$("#"+r).click(function(){$('input[name="allTissues"]').prop("checked",!1),$("#"+r).is(":checked")?e.forEach(function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!0)}):e.forEach(function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!1)})})}),r&&($('input[name="allTissues"][value="all"]').prop("checked",!0),$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0))})(i,`${n}-body`,!1,!0,3),function(t,n,e,r){$(`#${n}`).on("hidden.bs.modal",i=>{let o=function(t,n,e=!1){let r=[];return $(`#${n}`).find(":input").each(function(){if($(this).is(":checked")){const n=$(this).attr("id");if($(this).hasClass("tissueGroup")){let i=n.replace(/_/g," ");1==t[i].length&&(e?r.push(t[i][0].name):r.push(t[i][0].id))}else e?r.push($($(this).siblings()[0]).text()):r.push(n)}}),r.filter(t=>void 0!==t)}(r,`${n}-body`,!0);!function(t,n,e){let r=t.allData.filter(t=>e.includes(t.group));t.data=r,ia(t,n)}(t,e,o)})}(t,n,e,i)}(c,u.tissueFilter,u,t[0]),function(t,n,e,r){let i=t.createToolbar(e.toolbar,n);i.createDownloadSvgButton(e.buttons.download,e.svg,"gene-exp-plot.svg",e.clone),$(`#${e.toolbar}`).addClass("row"),$(`#${e.toolbar} .btn-group`).addClass("col-xs-12 col-lg-1 text-nowrap").css("display","flex"),$("<div></div>").appendTo(`#${e.toolbar}`).attr("id",`${e.toolbar}-plot-options`).attr("class","col-lg-11 text-nowrap");let o=$(`#${e.toolbar}-plot-options`);$("<div/>").appendTo(o).attr("id",e.plotOptionGroups.differentiation).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo(`#${e.plotOptionGroups.differentiation}`).attr("class",`${e.root}-option-label`).html("Subset"),$("<div/>").appendTo(`#${e.plotOptionGroups.differentiation}`).attr("class","btn-group btn-group-sm");let a=$(`#${e.plotOptionGroups.differentiation} .btn-group`);$(`<button class="btn btn-default" id="${e.buttons.noDiff}">None</button>`).appendTo(a),$(`<button class="btn btn-default" id="${e.buttons.sexDiff}">Sex</button>`).appendTo(a),$("<div/>").appendTo(o).attr("id",e.plotOptionGroups.scale).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo(`#${e.plotOptionGroups.scale}`).attr("class",`${e.root}-option-label`).html("Scale"),$("<div/>").appendTo(`#${e.plotOptionGroups.scale}`).attr("class","btn-group btn-group-sm");let s=$(`#${e.plotOptionGroups.scale} .btn-group`);$(`<button class="btn btn-default" id="${e.buttons.logScale}">Log</button>`).appendTo(s),$(`<button class="btn btn-default" id="${e.buttons.linearScale}">Linear</button>`).appendTo(s),$("<div/>").appendTo(o).attr("class",`${e.plotOptionGroups.sort} col-lg-2 col-xl-2`).attr("id","vplot-alpha-sorts"),$("<span/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-alpha-sorts`).attr("class",`${e.root}-option-label`).html("Tissue Sort"),$("<div/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-alpha-sorts`).attr("class","btn-group btn-group-sm").attr("id",`${e.plotOptionGroups.sort}-alpha`);let u=$(`#${e.plotOptionGroups.sort}-alpha.btn-group`);$(`<button class="btn btn-default fa fa-caret-up" id="${e.buttons.ascAlphaSort}"></button>`).appendTo(u),$(`<button class="btn btn-default fa fa-caret-down" id="${e.buttons.descAlphaSort}"></button>`).appendTo(u),$("<div/>").appendTo(o).attr("class",`${e.plotOptionGroups.sort} col-lg-2 col-xl-2`).attr("id","vplot-num-sorts"),$("<span/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-num-sorts`).attr("class",`${e.root}-option-label`).html("Median Sort"),$("<div/>").appendTo(`.${e.plotOptionGroups.sort}#vplot-num-sorts`).attr("class","btn-group btn-group-sm").attr("id",`${e.plotOptionGroups.sort}-num`);let l=$(`#${e.plotOptionGroups.sort}-num.btn-group`);$(`<button class="btn btn-default fa fa-caret-up" id="${e.buttons.ascSort}"></button>`).appendTo(l),$(`<button class="btn btn-default fa fa-caret-down" id="${e.buttons.descSort}"></button>`).appendTo(l),$("<div/>").appendTo(o).attr("id",e.plotOptionGroups.outliers).attr("class","col-lg-2 col-xl-2"),$("<span/>").appendTo(`#${e.plotOptionGroups.outliers}`).attr("class",`${e.root}-option-label`).html("Outliers"),$("<div/>").appendTo(`#${e.plotOptionGroups.outliers}`).attr("class","btn-group btn-group-sm");let c=$(`#${e.plotOptionGroups.outliers} .btn-group`);$(`<button class="btn btn-default" id="${e.buttons.outliersOn}">On</button>`).appendTo(c),$(`<button class="btn btn-default" id="${e.buttons.outliersOff}">Off</button>`).appendTo(c),bt(`#${e.plotOptionsModal} .modal-body button`).classed("active",!1),bt(`#${e.buttons.ascAlphaSort},\n               #${e.buttons.linearScale},\n               #${e.buttons.noDiff},\n               #${e.buttons.outliersOn}`).classed("active",!0),i.createButton(e.buttons.filter,"fa-filter"),vt(`#${e.buttons.filter}`).on("mouseover",()=>{i.tooltip.show("Filter Tissues")}).on("mouseout",()=>{i.tooltip.hide()}).on("click",(t,n,e)=>{$("#gene-expr-vplot-filter-modal").modal("show")}),$(`.${e.plotOptionGroups.sort} button`).on("click",function(n){let r=vt(this);r.classed("active")||(bt(`.${e.plotOptionGroups.sort} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.sort=n.target.id.replace(`${e.root}-`,""),ia(t,e))}),$(`#${e.plotOptionGroups.scale} button`).on("click",function(n){let r=vt(this);r.classed("active")||(bt(`#${e.plotOptionGroups.scale} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.scale=n.target.id==e.buttons.logScale?"log":"linear",ia(t,e))}),$(`#${e.plotOptionGroups.outliers} button`).on("click",function(n){let r=vt(this);r.classed("active")||(bt(`#${e.plotOptionGroups.outliers} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.showOutliers=n.target.id==e.buttons.outliersOn,ea(t,e))}),$(`#${e.plotOptionGroups.differentiation} button`).on("click",function(n){let r=vt(this);r.classed("active")||(bt(`#${e.plotOptionGroups.differentiation} button`).classed("active",!1),r.classed("active",!0),t.gpConfig.subset=n.target.id==e.buttons.sexDiff,ia(t,e))})}(c,h,u),$(`#${u.root} #${u.spinner}`).hide()})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
