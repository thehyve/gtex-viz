!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery"),require("file-saver")):"function"==typeof define&&define.amd?define(["exports","jquery","file-saver"],e):e((t=t||self).GTExViz={},t.$,t.saveAs)}(this,(function(t,e,n){"use strict";e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e,n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n;var a="http://www.w3.org/1999/xhtml",r={svg:"http://www.w3.org/2000/svg",xhtml:a,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function i(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),r.hasOwnProperty(e)?{space:r[e],local:t}:t}function o(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===a&&e.documentElement.namespaceURI===a?e.createElement(t):e.createElementNS(n,t)}}function c(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function s(t){var e=i(t);return(e.local?c:o)(e)}function l(){}function f(t){return null==t?l:function(){return this.querySelector(t)}}function u(){return[]}function h(t){return null==t?u:function(){return this.querySelectorAll(t)}}function d(t){return function(){return this.matches(t)}}function b(t){return new Array(t.length)}function p(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}p.prototype={constructor:p,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function g(t,e,n,a,r,i){for(var o,c=0,s=e.length,l=i.length;c<l;++c)(o=e[c])?(o.__data__=i[c],a[c]=o):n[c]=new p(t,i[c]);for(;c<s;++c)(o=e[c])&&(r[c]=o)}function m(t,e,n,a,r,i,o){var c,s,l,f={},u=e.length,h=i.length,d=new Array(u);for(c=0;c<u;++c)(s=e[c])&&(d[c]=l="$"+o.call(s,s.__data__,c,e),l in f?r[c]=s:f[l]=s);for(c=0;c<h;++c)(s=f[l="$"+o.call(t,i[c],c,i)])?(a[c]=s,s.__data__=i[c],f[l]=null):n[c]=new p(t,i[c]);for(c=0;c<u;++c)(s=e[c])&&f[d[c]]===s&&(r[c]=s)}function y(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function v(t){return function(){this.removeAttribute(t)}}function x(t){return function(){this.removeAttributeNS(t.space,t.local)}}function w(t,e){return function(){this.setAttribute(t,e)}}function _(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function S(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function M(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function T(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function A(t){return function(){this.style.removeProperty(t)}}function N(t,e,n){return function(){this.style.setProperty(t,e,n)}}function k(t,e,n){return function(){var a=e.apply(this,arguments);null==a?this.style.removeProperty(t):this.style.setProperty(t,a,n)}}function C(t,e){return t.style.getPropertyValue(e)||T(t).getComputedStyle(t,null).getPropertyValue(e)}function E(t){return function(){delete this[t]}}function L(t,e){return function(){this[t]=e}}function D(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function P(t){return t.trim().split(/^|\s+/)}function B(t){return t.classList||new j(t)}function j(t){this._node=t,this._names=P(t.getAttribute("class")||"")}function z(t,e){for(var n=B(t),a=-1,r=e.length;++a<r;)n.add(e[a])}function I(t,e){for(var n=B(t),a=-1,r=e.length;++a<r;)n.remove(e[a])}function U(t){return function(){z(this,t)}}function Y(t){return function(){I(this,t)}}function R(t,e){return function(){(e.apply(this,arguments)?z:I)(this,t)}}function V(){this.textContent=""}function H(t){return function(){this.textContent=t}}function F(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function O(){this.innerHTML=""}function X(t){return function(){this.innerHTML=t}}function G(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function q(){this.nextSibling&&this.parentNode.appendChild(this)}function W(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Z(){return null}function K(){var t=this.parentNode;t&&t.removeChild(this)}function J(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Q(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}j.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var tt={},et=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(tt={mouseenter:"mouseover",mouseleave:"mouseout"}));function nt(t,e,n){return t=at(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function at(t,e,n){return function(a){var r=et;et=a;try{t.call(this,this.__data__,e,n)}finally{et=r}}}function rt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function it(t){return function(){var e=this.__on;if(e){for(var n,a=0,r=-1,i=e.length;a<i;++a)n=e[a],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function ot(t,e,n){var a=tt.hasOwnProperty(t.type)?nt:at;return function(r,i,o){var c,s=this.__on,l=a(e,i,o);if(s)for(var f=0,u=s.length;f<u;++f)if((c=s[f]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=l,c.capture=n),void(c.value=e);this.addEventListener(t.type,l,n),c={type:t.type,name:t.name,value:e,listener:l,capture:n},s?s.push(c):this.__on=[c]}}function ct(t,e,n){var a=T(t),r=a.CustomEvent;"function"==typeof r?r=new r(e,n):(r=a.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}function st(t,e){return function(){return ct(this,t,e)}}function lt(t,e){return function(){return ct(this,t,e.apply(this,arguments))}}var ft=[null];function ut(t,e){this._groups=t,this._parents=e}function ht(){return new ut([[document.documentElement]],ft)}function dt(t){return"string"==typeof t?new ut([[document.querySelector(t)]],[document.documentElement]):new ut([[t]],ft)}function bt(){for(var t,e=et;t=e.sourceEvent;)e=t;return e}function pt(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=e.clientX,a.y=e.clientY,[(a=a.matrixTransform(t.getScreenCTM().inverse())).x,a.y]}var r=t.getBoundingClientRect();return[e.clientX-r.left-t.clientLeft,e.clientY-r.top-t.clientTop]}function gt(t){var e=bt();return e.changedTouches&&(e=e.changedTouches[0]),pt(t,e)}function mt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}ut.prototype=ht.prototype={constructor:ut,select:function(t){"function"!=typeof t&&(t=f(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o,c=e[r],s=c.length,l=a[r]=new Array(s),u=0;u<s;++u)(i=c[u])&&(o=t.call(i,i.__data__,u,c))&&("__data__"in i&&(o.__data__=i.__data__),l[u]=o);return new ut(a,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,a=[],r=[],i=0;i<n;++i)for(var o,c=e[i],s=c.length,l=0;l<s;++l)(o=c[l])&&(a.push(t.call(o,o.__data__,l,c)),r.push(o));return new ut(a,r)},filter:function(t){"function"!=typeof t&&(t=d(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],c=o.length,s=a[r]=[],l=0;l<c;++l)(i=o[l])&&t.call(i,i.__data__,l,o)&&s.push(i);return new ut(a,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),l=-1,this.each((function(t){d[++l]=t})),d;var n=e?m:g,a=this._parents,r=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var i=r.length,o=new Array(i),c=new Array(i),s=new Array(i),l=0;l<i;++l){var f=a[l],u=r[l],h=u.length,d=t.call(f,f&&f.__data__,l,a),b=d.length,p=c[l]=new Array(b),y=o[l]=new Array(b);n(f,u,p,y,s[l]=new Array(h),d,e);for(var v,x,w=0,_=0;w<b;++w)if(v=p[w]){for(w>=_&&(_=w+1);!(x=y[_])&&++_<b;);v._next=x||null}}return(o=new ut(o,a))._enter=c,o._exit=s,o},enter:function(){return new ut(this._enter||this._groups.map(b),this._parents)},exit:function(){return new ut(this._exit||this._groups.map(b),this._parents)},join:function(t,e,n){var a=this.enter(),r=this,i=this.exit();return a="function"==typeof t?t(a):a.append(t+""),null!=e&&(r=e(r)),null==n?i.remove():n(i),a&&r?a.merge(r).order():r},merge:function(t){for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),c=0;c<i;++c)for(var s,l=e[c],f=n[c],u=l.length,h=o[c]=new Array(u),d=0;d<u;++d)(s=l[d]||f[d])&&(h[d]=s);for(;c<a;++c)o[c]=e[c];return new ut(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var a,r=t[e],i=r.length-1,o=r[i];--i>=0;)(a=r[i])&&(o&&4^a.compareDocumentPosition(o)&&o.parentNode.insertBefore(a,o),o=a);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=y);for(var n=this._groups,a=n.length,r=new Array(a),i=0;i<a;++i){for(var o,c=n[i],s=c.length,l=r[i]=new Array(s),f=0;f<s;++f)(o=c[f])&&(l[f]=o);l.sort(e)}return new ut(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var a=t[e],r=0,i=a.length;r<i;++r){var o=a[r];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,a=e.length;n<a;++n)for(var r,i=e[n],o=0,c=i.length;o<c;++o)(r=i[o])&&t.call(r,r.__data__,o,i);return this},attr:function(t,e){var n=i(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?x:v:"function"==typeof e?n.local?M:S:n.local?_:w)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?A:"function"==typeof e?k:N)(t,e,null==n?"":n)):C(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?E:"function"==typeof e?D:L)(t,e)):this.node()[t]},classed:function(t,e){var n=P(t+"");if(arguments.length<2){for(var a=B(this.node()),r=-1,i=n.length;++r<i;)if(!a.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?R:e?U:Y)(n,e))},text:function(t){return arguments.length?this.each(null==t?V:("function"==typeof t?F:H)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?O:("function"==typeof t?G:X)(t)):this.node().innerHTML},raise:function(){return this.each(q)},lower:function(){return this.each(W)},append:function(t){var e="function"==typeof t?t:s(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:s(t),a=null==e?Z:"function"==typeof e?e:f(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),a.apply(this,arguments)||null)}))},remove:function(){return this.each(K)},clone:function(t){return this.select(t?Q:J)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var a,r,i=rt(t+""),o=i.length;if(!(arguments.length<2)){for(c=e?ot:it,null==n&&(n=!1),a=0;a<o;++a)this.each(c(i[a],e,n));return this}var c=this.node().__on;if(c)for(var s,l=0,f=c.length;l<f;++l)for(a=0,s=c[l];a<o;++a)if((r=i[a]).type===s.type&&r.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?lt:st)(t,e))}};var yt,vt,xt=(1===(yt=mt).length&&(vt=yt,yt=function(t,e){return mt(vt(t),e)}),{left:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;yt(t[r],e)<0?n=r+1:a=r}return n},right:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;yt(t[r],e)>0?a=r:n=r+1}return n}}).right;function wt(t){return null===t?NaN:+t}function _t(t,e){var n=function(t,e){var n,a,r=t.length,i=0,o=-1,c=0,s=0;if(null==e)for(;++o<r;)isNaN(n=wt(t[o]))||(s+=(a=n-c)*(n-(c+=a/++i)));else for(;++o<r;)isNaN(n=wt(e(t[o],o,t)))||(s+=(a=n-c)*(n-(c+=a/++i)));if(i>1)return s/(i-1)}(t,e);return n?Math.sqrt(n):n}function St(t,e){var n,a,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(a=r=n;++o<i;)null!=(n=t[o])&&(a>n&&(a=n),r<n&&(r=n))}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(a=r=n;++o<i;)null!=(n=e(t[o],o,t))&&(a>n&&(a=n),r<n&&(r=n));return[a,r]}function Mt(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var a=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(r);++a<r;)i[a]=t+a*n;return i}var Tt=Math.sqrt(50),At=Math.sqrt(10),Nt=Math.sqrt(2);function kt(t,e,n){var a=(e-t)/Math.max(0,n),r=Math.floor(Math.log(a)/Math.LN10),i=a/Math.pow(10,r);return r>=0?(i>=Tt?10:i>=At?5:i>=Nt?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(i>=Tt?10:i>=At?5:i>=Nt?2:1)}function Ct(t,e,n){if(null==n&&(n=wt),a=t.length){if((e=+e)<=0||a<2)return+n(t[0],0,t);if(e>=1)return+n(t[a-1],a-1,t);var a,r=(a-1)*e,i=Math.floor(r),o=+n(t[i],i,t);return o+(+n(t[i+1],i+1,t)-o)*(r-i)}}function Et(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&n>a&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&n>a&&(a=n);return a}function Lt(t,e){var n,a=t.length,r=a,i=-1,o=0;if(null==e)for(;++i<a;)isNaN(n=wt(t[i]))?--r:o+=n;else for(;++i<a;)isNaN(n=wt(e(t[i],i,t)))?--r:o+=n;if(r)return o/r}function Dt(t,e){var n,a=t.length,r=-1,i=[];if(null==e)for(;++r<a;)isNaN(n=wt(t[r]))||i.push(n);else for(;++r<a;)isNaN(n=wt(e(t[r],r,t)))||i.push(n);return Ct(i.sort(mt),.5)}function Pt(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&a>n&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&a>n&&(a=n);return a}function Bt(t){if(0==e("#"+t).length){let e=`Input Error: DOM ID ${t} is not found.`;throw console.warn(e),e}}function $t(t,e,n,a,r,i="absolute"){return Bt(t),void 0===r&&(r=t+"-canvas"),dt("#"+t).append("canvas").attr("id",r).attr("width",e).attr("height",n).style("position",i)}function jt(t,e,n,a,r,i="relative"){return Bt(t),void 0===r&&(r=t+"-svg"),dt("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",r).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}function zt(t={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let e=Mt(1,t.x+1),n=Mt(1,t.y+1),a=[];return e.forEach(e=>{e="x"+e.toString(),n.forEach(n=>{n="y"+n.toString();let r=Math.random()*t.scaleFactor;r=t.diverging&&Math.random()<.5?-r:r,a.push({x:e,y:n,value:r,displayValue:parseFloat(r.toExponential()).toPrecision(3),r:t.bubble?30*Math.random():void 0})})}),a}var It=function t(e){function n(t,n){var a,r;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=a)i=a,a=null;else do{a=2*e()-1,i=2*e()-1,r=a*a+i*i}while(!r||r>1);return t+n*i*Math.sqrt(-2*Math.log(r)/r)}}return n.source=t,n}((function(){return Math.random()}));function Ut(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Yt(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}function Rt(){}function Vt(t,e){var n=new Rt;if(t instanceof Rt)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var a,r=-1,i=t.length;if(null==e)for(;++r<i;)n.set(r,t[r]);else for(;++r<i;)n.set(e(a=t[r],r,t),a)}else if(t)for(var o in t)n.set(o,t[o]);return n}function Ht(){var t,e,n,a=[],r=[];function i(n,r,o,c){if(r>=a.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,l,f,u=-1,h=n.length,d=a[r++],b=Vt(),p=o();++u<h;)(f=b.get(s=d(l=n[u])+""))?f.push(l):b.set(s,[l]);return b.each((function(t,e){c(p,e,i(t,r,o,c))})),p}return n={object:function(t){return i(t,0,Ft,Ot)},map:function(t){return i(t,0,Xt,Gt)},entries:function(t){return function t(n,i){if(++i>a.length)return n;var o,c=r[i-1];return null!=e&&i>=a.length?o=n.entries():(o=[],n.each((function(e,n){o.push({key:n,values:t(e,i)})}))),null!=c?o.sort((function(t,e){return c(t.key,e.key)})):o}(i(t,0,Xt,Gt),0)},key:function(t){return a.push(t),n},sortKeys:function(t){return r[a.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function Ft(){return{}}function Ot(t,e,n){t[e]=n}function Xt(){return Vt()}function Gt(t,e,n){t.set(e,n)}function qt(){}Rt.prototype=Vt.prototype={constructor:Rt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Wt=Vt.prototype;qt.prototype=function(t,e){var n=new qt;if(t instanceof qt)t.each((function(t){n.add(t)}));else if(t){var a=-1,r=t.length;if(null==e)for(;++a<r;)n.add(t[a]);else for(;++a<r;)n.add(e(t[a],a,t))}return n}.prototype={constructor:qt,has:Wt.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Wt.remove,clear:Wt.clear,values:Wt.keys,size:Wt.size,empty:Wt.empty,each:Wt.each};var Zt=Array.prototype,Kt=Zt.map,Jt=Zt.slice,Qt={name:"implicit"};function te(){var t=Vt(),e=[],n=[],a=Qt;function r(r){var i=r+"",o=t.get(i);if(!o){if(a!==Qt)return a;t.set(i,o=e.push(r))}return n[(o-1)%n.length]}return r.domain=function(n){if(!arguments.length)return e.slice();e=[],t=Vt();for(var a,i,o=-1,c=n.length;++o<c;)t.has(i=(a=n[o])+"")||t.set(i,e.push(a));return r},r.range=function(t){return arguments.length?(n=Jt.call(t),r):n.slice()},r.unknown=function(t){return arguments.length?(a=t,r):a},r.copy=function(){return te(e,n).unknown(a)},Ut.apply(r,arguments),r}function ee(){var t,e,n=te().unknown(void 0),a=n.domain,r=n.range,i=[0,1],o=!1,c=0,s=0,l=.5;function f(){var n=a().length,f=i[1]<i[0],u=i[f-0],h=i[1-f];t=(h-u)/Math.max(1,n-c+2*s),o&&(t=Math.floor(t)),u+=(h-u-t*(n-c))*l,e=t*(1-c),o&&(u=Math.round(u),e=Math.round(e));var d=Mt(n).map((function(e){return u+t*e}));return r(f?d.reverse():d)}return delete n.unknown,n.domain=function(t){return arguments.length?(a(t),f()):a()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],f()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,f()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,f()):o},n.padding=function(t){return arguments.length?(c=Math.min(1,s=+t),f()):c},n.paddingInner=function(t){return arguments.length?(c=Math.min(1,t),f()):c},n.paddingOuter=function(t){return arguments.length?(s=+t,f()):s},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),f()):l},n.copy=function(){return ee(a(),i).round(o).paddingInner(c).paddingOuter(s).align(l)},Ut.apply(f(),arguments)}function ne(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function ae(t,e){var n=Object.create(t.prototype);for(var a in e)n[a]=e[a];return n}function re(){}var ie="\\s*([+-]?\\d+)\\s*",oe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ce="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",se=/^#([0-9a-f]{3,8})$/,le=new RegExp("^rgb\\("+[ie,ie,ie]+"\\)$"),fe=new RegExp("^rgb\\("+[ce,ce,ce]+"\\)$"),ue=new RegExp("^rgba\\("+[ie,ie,ie,oe]+"\\)$"),he=new RegExp("^rgba\\("+[ce,ce,ce,oe]+"\\)$"),de=new RegExp("^hsl\\("+[oe,ce,ce]+"\\)$"),be=new RegExp("^hsla\\("+[oe,ce,ce,oe]+"\\)$"),pe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ge(){return this.rgb().formatHex()}function me(){return this.rgb().formatRgb()}function ye(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=se.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?ve(e):3===n?new Se(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?xe(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?xe(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=le.exec(t))?new Se(e[1],e[2],e[3],1):(e=fe.exec(t))?new Se(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ue.exec(t))?xe(e[1],e[2],e[3],e[4]):(e=he.exec(t))?xe(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=de.exec(t))?Ne(e[1],e[2]/100,e[3]/100,1):(e=be.exec(t))?Ne(e[1],e[2]/100,e[3]/100,e[4]):pe.hasOwnProperty(t)?ve(pe[t]):"transparent"===t?new Se(NaN,NaN,NaN,0):null}function ve(t){return new Se(t>>16&255,t>>8&255,255&t,1)}function xe(t,e,n,a){return a<=0&&(t=e=n=NaN),new Se(t,e,n,a)}function we(t){return t instanceof re||(t=ye(t)),t?new Se((t=t.rgb()).r,t.g,t.b,t.opacity):new Se}function _e(t,e,n,a){return 1===arguments.length?we(t):new Se(t,e,n,null==a?1:a)}function Se(t,e,n,a){this.r=+t,this.g=+e,this.b=+n,this.opacity=+a}function Me(){return"#"+Ae(this.r)+Ae(this.g)+Ae(this.b)}function Te(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Ae(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Ne(t,e,n,a){return a<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ce(t,e,n,a)}function ke(t){if(t instanceof Ce)return new Ce(t.h,t.s,t.l,t.opacity);if(t instanceof re||(t=ye(t)),!t)return new Ce;if(t instanceof Ce)return t;var e=(t=t.rgb()).r/255,n=t.g/255,a=t.b/255,r=Math.min(e,n,a),i=Math.max(e,n,a),o=NaN,c=i-r,s=(i+r)/2;return c?(o=e===i?(n-a)/c+6*(n<a):n===i?(a-e)/c+2:(e-n)/c+4,c/=s<.5?i+r:2-i-r,o*=60):c=s>0&&s<1?0:o,new Ce(o,c,s,t.opacity)}function Ce(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function Ee(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}ne(re,ye,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:ge,formatHex:ge,formatHsl:function(){return ke(this).formatHsl()},formatRgb:me,toString:me}),ne(Se,_e,ae(re,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Se(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Se(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Me,formatHex:Me,formatRgb:Te,toString:Te})),ne(Ce,(function(t,e,n,a){return 1===arguments.length?ke(t):new Ce(t,e,n,null==a?1:a)}),ae(re,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ce(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ce(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,a=n+(n<.5?n:1-n)*e,r=2*n-a;return new Se(Ee(t>=240?t-240:t+120,r,a),Ee(t,r,a),Ee(t<120?t+240:t-120,r,a),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Le=Math.PI/180,De=180/Math.PI,Pe=6/29,Be=3*Pe*Pe;function $e(t){if(t instanceof je)return new je(t.l,t.a,t.b,t.opacity);if(t instanceof Ve)return He(t);t instanceof Se||(t=we(t));var e,n,a=Ye(t.r),r=Ye(t.g),i=Ye(t.b),o=ze((.2225045*a+.7168786*r+.0606169*i)/1);return a===r&&r===i?e=n=o:(e=ze((.4360747*a+.3850649*r+.1430804*i)/.96422),n=ze((.0139322*a+.0971045*r+.7141733*i)/.82521)),new je(116*o-16,500*(e-o),200*(o-n),t.opacity)}function je(t,e,n,a){this.l=+t,this.a=+e,this.b=+n,this.opacity=+a}function ze(t){return t>.008856451679035631?Math.pow(t,1/3):t/Be+4/29}function Ie(t){return t>Pe?t*t*t:Be*(t-4/29)}function Ue(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ye(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Re(t){if(t instanceof Ve)return new Ve(t.h,t.c,t.l,t.opacity);if(t instanceof je||(t=$e(t)),0===t.a&&0===t.b)return new Ve(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*De;return new Ve(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Ve(t,e,n,a){this.h=+t,this.c=+e,this.l=+n,this.opacity=+a}function He(t){if(isNaN(t.h))return new je(t.l,0,0,t.opacity);var e=t.h*Le;return new je(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}ne(je,(function(t,e,n,a){return 1===arguments.length?$e(t):new je(t,e,n,null==a?1:a)}),ae(re,{brighter:function(t){return new je(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new je(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Se(Ue(3.1338561*(e=.96422*Ie(e))-1.6168667*(t=1*Ie(t))-.4906146*(n=.82521*Ie(n))),Ue(-.9787684*e+1.9161415*t+.033454*n),Ue(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),ne(Ve,(function(t,e,n,a){return 1===arguments.length?Re(t):new Ve(t,e,n,null==a?1:a)}),ae(re,{brighter:function(t){return new Ve(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Ve(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return He(this).rgb()}}));var Fe=-.14861,Oe=1.78277,Xe=-.29227,Ge=-.90649,qe=1.97294,We=qe*Ge,Ze=qe*Oe,Ke=Oe*Xe-Ge*Fe;function Je(t){if(t instanceof tn)return new tn(t.h,t.s,t.l,t.opacity);t instanceof Se||(t=we(t));var e=t.r/255,n=t.g/255,a=t.b/255,r=(Ke*a+We*e-Ze*n)/(Ke+We-Ze),i=a-r,o=(qe*(n-r)-Xe*i)/Ge,c=Math.sqrt(o*o+i*i)/(qe*r*(1-r)),s=c?Math.atan2(o,i)*De-120:NaN;return new tn(s<0?s+360:s,c,r,t.opacity)}function Qe(t,e,n,a){return 1===arguments.length?Je(t):new tn(t,e,n,null==a?1:a)}function tn(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function en(t){return function(){return t}}function nn(t,e){return function(n){return t+n*e}}function an(t){return 1==(t=+t)?rn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(a){return Math.pow(t+a*e,n)}}(e,n,t):en(isNaN(e)?n:e)}}function rn(t,e){var n=e-t;return n?nn(t,n):en(isNaN(t)?e:t)}ne(tn,Qe,ae(re,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new tn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new tn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Le,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),a=Math.cos(t),r=Math.sin(t);return new Se(255*(e+n*(Fe*a+Oe*r)),255*(e+n*(Xe*a+Ge*r)),255*(e+n*(qe*a)),this.opacity)}}));var on=function t(e){var n=an(e);function a(t,e){var a=n((t=_e(t)).r,(e=_e(e)).r),r=n(t.g,e.g),i=n(t.b,e.b),o=rn(t.opacity,e.opacity);return function(e){return t.r=a(e),t.g=r(e),t.b=i(e),t.opacity=o(e),t+""}}return a.gamma=t,a}(1);var cn,sn=(cn=function(t){var e=t.length-1;return function(n){var a=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[a],i=t[a+1],o=a>0?t[a-1]:2*r-i,c=a<e-1?t[a+2]:2*i-r;return function(t,e,n,a,r){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*a+o*r)/6}((n-a/e)*e,o,r,i,c)}},function(t){var e,n,a=t.length,r=new Array(a),i=new Array(a),o=new Array(a);for(e=0;e<a;++e)n=_e(t[e]),r[e]=n.r||0,i[e]=n.g||0,o[e]=n.b||0;return r=cn(r),i=cn(i),o=cn(o),n.opacity=1,function(t){return n.r=r(t),n.g=i(t),n.b=o(t),n+""}});function ln(t,e){e||(e=[]);var n,a=t?Math.min(e.length,t.length):0,r=e.slice();return function(i){for(n=0;n<a;++n)r[n]=t[n]*(1-i)+e[n]*i;return r}}function fn(t,e){var n,a=e?e.length:0,r=t?Math.min(a,t.length):0,i=new Array(r),o=new Array(a);for(n=0;n<r;++n)i[n]=mn(t[n],e[n]);for(;n<a;++n)o[n]=e[n];return function(t){for(n=0;n<r;++n)o[n]=i[n](t);return o}}function un(t,e){var n=new Date;return t=+t,e=+e,function(a){return n.setTime(t*(1-a)+e*a),n}}function hn(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function dn(t,e){var n,a={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?a[n]=mn(t[n],e[n]):r[n]=e[n];return function(t){for(n in a)r[n]=a[n](t);return r}}var bn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,pn=new RegExp(bn.source,"g");function gn(t,e){var n,a,r,i=bn.lastIndex=pn.lastIndex=0,o=-1,c=[],s=[];for(t+="",e+="";(n=bn.exec(t))&&(a=pn.exec(e));)(r=a.index)>i&&(r=e.slice(i,r),c[o]?c[o]+=r:c[++o]=r),(n=n[0])===(a=a[0])?c[o]?c[o]+=a:c[++o]=a:(c[++o]=null,s.push({i:o,x:hn(n,a)})),i=pn.lastIndex;return i<e.length&&(r=e.slice(i),c[o]?c[o]+=r:c[++o]=r),c.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,a=0;a<e;++a)c[(n=s[a]).i]=n.x(t);return c.join("")})}function mn(t,e){var n,a=typeof e;return null==e||"boolean"===a?en(e):("number"===a?hn:"string"===a?(n=ye(e))?(e=n,on):gn:e instanceof ye?on:e instanceof Date?un:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?ln:Array.isArray(e)?fn:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?dn:hn)(t,e)}function yn(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var vn,xn,wn,_n,Sn=180/Math.PI,Mn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Tn(t,e,n,a,r,i){var o,c,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*a)&&(n-=t*s,a-=e*s),(c=Math.sqrt(n*n+a*a))&&(n/=c,a/=c,s/=c),t*a<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:r,translateY:i,rotate:Math.atan2(e,t)*Sn,skewX:Math.atan(s)*Sn,scaleX:o,scaleY:c}}function An(t,e,n,a){function r(t){return t.length?t.pop()+" ":""}return function(i,o){var c=[],s=[];return i=t(i),o=t(o),function(t,a,r,i,o,c){if(t!==r||a!==i){var s=o.push("translate(",null,e,null,n);c.push({i:s-4,x:hn(t,r)},{i:s-2,x:hn(a,i)})}else(r||i)&&o.push("translate("+r+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,c,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(r(n)+"rotate(",null,a)-2,x:hn(t,e)})):e&&n.push(r(n)+"rotate("+e+a)}(i.rotate,o.rotate,c,s),function(t,e,n,i){t!==e?i.push({i:n.push(r(n)+"skewX(",null,a)-2,x:hn(t,e)}):e&&n.push(r(n)+"skewX("+e+a)}(i.skewX,o.skewX,c,s),function(t,e,n,a,i,o){if(t!==n||e!==a){var c=i.push(r(i)+"scale(",null,",",null,")");o.push({i:c-4,x:hn(t,n)},{i:c-2,x:hn(e,a)})}else 1===n&&1===a||i.push(r(i)+"scale("+n+","+a+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,c,s),i=o=null,function(t){for(var e,n=-1,a=s.length;++n<a;)c[(e=s[n]).i]=e.x(t);return c.join("")}}}var Nn=An((function(t){return"none"===t?Mn:(vn||(vn=document.createElement("DIV"),xn=document.documentElement,wn=document.defaultView),vn.style.transform=t,t=wn.getComputedStyle(xn.appendChild(vn),null).getPropertyValue("transform"),xn.removeChild(vn),Tn(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),kn=An((function(t){return null==t?Mn:(_n||(_n=document.createElementNS("http://www.w3.org/2000/svg","g")),_n.setAttribute("transform",t),(t=_n.transform.baseVal.consolidate())?Tn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Mn)}),", ",")",")");function Cn(t){return function e(n){function a(e,a){var r=t((e=Qe(e)).h,(a=Qe(a)).h),i=rn(e.s,a.s),o=rn(e.l,a.l),c=rn(e.opacity,a.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=c(t),e+""}}return n=+n,a.gamma=e,a}(1)}Cn((function(t,e){var n=e-t;return n?nn(t,n>180||n<-180?n-360*Math.round(n/360):n):en(isNaN(t)?e:t)}));var En=Cn(rn);function Ln(t){return+t}var Dn=[0,1];function Pn(t){return t}function Bn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function $n(t){var e,n=t[0],a=t[t.length-1];return n>a&&(e=n,n=a,a=e),function(t){return Math.max(n,Math.min(a,t))}}function jn(t,e,n){var a=t[0],r=t[1],i=e[0],o=e[1];return r<a?(a=Bn(r,a),i=n(o,i)):(a=Bn(a,r),i=n(i,o)),function(t){return i(a(t))}}function zn(t,e,n){var a=Math.min(t.length,e.length)-1,r=new Array(a),i=new Array(a),o=-1;for(t[a]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<a;)r[o]=Bn(t[o],t[o+1]),i[o]=n(e[o],e[o+1]);return function(e){var n=xt(t,e,1,a)-1;return i[n](r[n](e))}}function In(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Un(){var t,e,n,a,r,i,o=Dn,c=Dn,s=mn,l=Pn;function f(){return a=Math.min(o.length,c.length)>2?zn:jn,r=i=null,u}function u(e){return isNaN(e=+e)?n:(r||(r=a(o.map(t),c,s)))(t(l(e)))}return u.invert=function(n){return l(e((i||(i=a(c,o.map(t),hn)))(n)))},u.domain=function(t){return arguments.length?(o=Kt.call(t,Ln),l===Pn||(l=$n(o)),f()):o.slice()},u.range=function(t){return arguments.length?(c=Jt.call(t),f()):c.slice()},u.rangeRound=function(t){return c=Jt.call(t),s=yn,f()},u.clamp=function(t){return arguments.length?(l=t?$n(o):Pn,u):l!==Pn},u.interpolate=function(t){return arguments.length?(s=t,f()):s},u.unknown=function(t){return arguments.length?(n=t,u):n},function(n,a){return t=n,e=a,f()}}function Yn(t,e){return Un()(t,e)}function Rn(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,a=t.slice(0,n);return[a.length>1?a[0]+a.slice(2):a,+t.slice(n+1)]}function Vn(t){return(t=Rn(Math.abs(t)))?t[1]:NaN}var Hn,Fn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function On(t){if(!(e=Fn.exec(t)))throw new Error("invalid format: "+t);var e;return new Xn({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Xn(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Gn(t,e){var n=Rn(t,e);if(!n)return t+"";var a=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+a:a.length>r+1?a.slice(0,r+1)+"."+a.slice(r+1):a+new Array(r-a.length+2).join("0")}On.prototype=Xn.prototype,Xn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var qn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Gn(100*t,e)},r:Gn,s:function(t,e){var n=Rn(t,e);if(!n)return t+"";var a=n[0],r=n[1],i=r-(Hn=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,o=a.length;return i===o?a:i>o?a+new Array(i-o+1).join("0"):i>0?a.slice(0,i)+"."+a.slice(i):"0."+new Array(1-i).join("0")+Rn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Wn(t){return t}var Zn,Kn,Jn,Qn=Array.prototype.map,ta=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function ea(t){var e,n,a=void 0===t.grouping||void 0===t.thousands?Wn:(e=Qn.call(t.grouping,Number),n=t.thousands+"",function(t,a){for(var r=t.length,i=[],o=0,c=e[0],s=0;r>0&&c>0&&(s+c+1>a&&(c=Math.max(1,a-s)),i.push(t.substring(r-=c,r+c)),!((s+=c+1)>a));)c=e[o=(o+1)%e.length];return i.reverse().join(n)}),r=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",c=void 0===t.numerals?Wn:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Qn.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function u(t){var e=(t=On(t)).fill,n=t.align,u=t.sign,h=t.symbol,d=t.zero,b=t.width,p=t.comma,g=t.precision,m=t.trim,y=t.type;"n"===y?(p=!0,y="g"):qn[y]||(void 0===g&&(g=12),m=!0,y="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var v="$"===h?r:"#"===h&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",x="$"===h?i:/[%p]/.test(y)?s:"",w=qn[y],_=/[defgprs%]/.test(y);function S(t){var r,i,s,h=v,S=x;if("c"===y)S=w(t)+S,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:w(Math.abs(t),g),m&&(t=function(t){t:for(var e,n=t.length,a=1,r=-1;a<n;++a)switch(t[a]){case".":r=e=a;break;case"0":0===r&&(r=a),e=a;break;default:if(!+t[a])break t;r>0&&(r=0)}return r>0?t.slice(0,r)+t.slice(e+1):t}(t)),M&&0==+t&&"+"!==u&&(M=!1),h=(M?"("===u?u:l:"-"===u||"("===u?"":u)+h,S=("s"===y?ta[8+Hn/3]:"")+S+(M&&"("===u?")":""),_)for(r=-1,i=t.length;++r<i;)if(48>(s=t.charCodeAt(r))||s>57){S=(46===s?o+t.slice(r+1):t.slice(r))+S,t=t.slice(0,r);break}}p&&!d&&(t=a(t,1/0));var T=h.length+t.length+S.length,A=T<b?new Array(b-T+1).join(e):"";switch(p&&d&&(t=a(A+t,A.length?b-S.length:1/0),A=""),n){case"<":t=h+t+S+A;break;case"=":t=h+A+t+S;break;case"^":t=A.slice(0,T=A.length>>1)+h+t+S+A.slice(T);break;default:t=A+h+t+S}return c(t)}return g=void 0===g?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),S.toString=function(){return t+""},S}return{format:u,formatPrefix:function(t,e){var n=u(((t=On(t)).type="f",t)),a=3*Math.max(-8,Math.min(8,Math.floor(Vn(e)/3))),r=Math.pow(10,-a),i=ta[8+a/3];return function(t){return n(r*t)+i}}}}function na(t,e,n,a){var r,i=function(t,e,n){var a=Math.abs(e-t)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),i=a/r;return i>=Tt?r*=10:i>=At?r*=5:i>=Nt&&(r*=2),e<t?-r:r}(t,e,n);switch((a=On(null==a?",f":a)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=a.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Vn(e)/3)))-Vn(Math.abs(t)))}(i,o))||(a.precision=r),Jn(a,o);case"":case"e":case"g":case"p":case"r":null!=a.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Vn(e)-Vn(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(a.precision=r-("e"===a.type));break;case"f":case"%":null!=a.precision||isNaN(r=function(t){return Math.max(0,-Vn(Math.abs(t)))}(i))||(a.precision=r-2*("%"===a.type))}return Kn(a)}function aa(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var a,r,i,o,c=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((a=e<t)&&(r=t,t=e,e=r),0===(o=kt(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(r=Math.ceil(e-t+1));++c<r;)i[c]=(t+c)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(r=Math.ceil(t-e+1));++c<r;)i[c]=(t-c)/o;return a&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var a=e();return na(a[0],a[a.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var a,r=e(),i=0,o=r.length-1,c=r[i],s=r[o];return s<c&&(a=c,c=s,s=a,a=i,i=o,o=a),(a=kt(c,s,n))>0?a=kt(c=Math.floor(c/a)*a,s=Math.ceil(s/a)*a,n):a<0&&(a=kt(c=Math.ceil(c*a)/a,s=Math.floor(s*a)/a,n)),a>0?(r[i]=Math.floor(c/a)*a,r[o]=Math.ceil(s/a)*a,e(r)):a<0&&(r[i]=Math.ceil(c*a)/a,r[o]=Math.floor(s*a)/a,e(r)),t},t}function ra(){var t=Yn(Pn,Pn);return t.copy=function(){return In(t,ra())},Ut.apply(t,arguments),aa(t)}function ia(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function oa(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function ca(t){return t<0?-t*t:t*t}function sa(t){var e=t(Pn,Pn),n=1;function a(){return 1===n?t(Pn,Pn):.5===n?t(oa,ca):t(ia(n),ia(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,a()):n},aa(e)}function la(){var t=sa(Un());return t.copy=function(){return In(t,la()).exponent(t.exponent())},Ut.apply(t,arguments),t}Zn=ea({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Kn=Zn.format,Jn=Zn.formatPrefix;var fa=new Date,ua=new Date;function ha(t,e,n,a){function r(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return r.floor=function(e){return t(e=new Date(+e)),e},r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,a,i){var o,c=[];if(n=r.ceil(n),i=null==i?1:Math.floor(i),!(n<a&&i>0))return c;do{c.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<a);return c},r.filter=function(n){return ha((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,a){if(t>=t)if(a<0)for(;++a<=0;)for(;e(t,-1),!n(t););else for(;--a>=0;)for(;e(t,1),!n(t););}))},n&&(r.count=function(e,a){return fa.setTime(+e),ua.setTime(+a),t(fa),t(ua),Math.floor(n(fa,ua))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(a?function(e){return a(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var da=ha((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));da.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ha((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):da:null};ha((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),ha((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()})),ha((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}));var ba=ha((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}));function pa(t){return ha((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var ga=pa(0),ma=pa(1),ya=(pa(2),pa(3),pa(4)),va=(pa(5),pa(6),ha((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),ha((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()})));va.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ha((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};ha((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})),ha((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}));var xa=ha((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}));function wa(t){return ha((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var _a=wa(0),Sa=wa(1),Ma=(wa(2),wa(3),wa(4)),Ta=(wa(5),wa(6),ha((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),ha((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));function Aa(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Na(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ka(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}Ta.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ha((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var Ca,Ea,La,Da={"-":"",_:" ",0:"0"},Pa=/^\s*\d+/,Ba=/^%/,$a=/[\\^$*+?|[\]().{}]/g;function ja(t,e,n){var a=t<0?"-":"",r=(a?-t:t)+"",i=r.length;return a+(i<n?new Array(n-i+1).join(e)+r:r)}function za(t){return t.replace($a,"\\$&")}function Ia(t){return new RegExp("^(?:"+t.map(za).join("|")+")","i")}function Ua(t){for(var e={},n=-1,a=t.length;++n<a;)e[t[n].toLowerCase()]=n;return e}function Ya(t,e,n){var a=Pa.exec(e.slice(n,n+1));return a?(t.w=+a[0],n+a[0].length):-1}function Ra(t,e,n){var a=Pa.exec(e.slice(n,n+1));return a?(t.u=+a[0],n+a[0].length):-1}function Va(t,e,n){var a=Pa.exec(e.slice(n,n+2));return a?(t.U=+a[0],n+a[0].length):-1}function Ha(t,e,n){var a=Pa.exec(e.slice(n,n+2));return a?(t.V=+a[0],n+a[0].length):-1}function Fa(t,e,n){var a=Pa.exec(e.slice(n,n+2));return a?(t.W=+a[0],n+a[0].length):-1}function Oa(t,e,n){var a=Pa.exec(e.slice(n,n+4));return a?(t.y=+a[0],n+a[0].length):-1}function Xa(t,e,n){var a=Pa.exec(e.slice(n,n+2));return a?(t.y=+a[0]+(+a[0]>68?1900:2e3),n+a[0].length):-1}function Ga(t,e,n){var a=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return a?(t.Z=a[1]?0:-(a[2]+(a[3]||"00")),n+a[0].length):-1}function qa(t,e,n){var a=Pa.exec(e.slice(n,n+1));return a?(t.q=3*a[0]-3,n+a[0].length):-1}function Wa(t,e,n){var a=Pa.exec(e.slice(n,n+2));return a?(t.m=a[0]-1,n+a[0].length):-1}function Za(t,e,n){var a=Pa.exec(e.slice(n,n+2));return a?(t.d=+a[0],n+a[0].length):-1}function Ka(t,e,n){var a=Pa.exec(e.slice(n,n+3));return a?(t.m=0,t.d=+a[0],n+a[0].length):-1}function Ja(t,e,n){var a=Pa.exec(e.slice(n,n+2));return a?(t.H=+a[0],n+a[0].length):-1}function Qa(t,e,n){var a=Pa.exec(e.slice(n,n+2));return a?(t.M=+a[0],n+a[0].length):-1}function tr(t,e,n){var a=Pa.exec(e.slice(n,n+2));return a?(t.S=+a[0],n+a[0].length):-1}function er(t,e,n){var a=Pa.exec(e.slice(n,n+3));return a?(t.L=+a[0],n+a[0].length):-1}function nr(t,e,n){var a=Pa.exec(e.slice(n,n+6));return a?(t.L=Math.floor(a[0]/1e3),n+a[0].length):-1}function ar(t,e,n){var a=Ba.exec(e.slice(n,n+1));return a?n+a[0].length:-1}function rr(t,e,n){var a=Pa.exec(e.slice(n));return a?(t.Q=+a[0],n+a[0].length):-1}function ir(t,e,n){var a=Pa.exec(e.slice(n));return a?(t.s=+a[0],n+a[0].length):-1}function or(t,e){return ja(t.getDate(),e,2)}function cr(t,e){return ja(t.getHours(),e,2)}function sr(t,e){return ja(t.getHours()%12||12,e,2)}function lr(t,e){return ja(1+ba.count(va(t),t),e,3)}function fr(t,e){return ja(t.getMilliseconds(),e,3)}function ur(t,e){return fr(t,e)+"000"}function hr(t,e){return ja(t.getMonth()+1,e,2)}function dr(t,e){return ja(t.getMinutes(),e,2)}function br(t,e){return ja(t.getSeconds(),e,2)}function pr(t){var e=t.getDay();return 0===e?7:e}function gr(t,e){return ja(ga.count(va(t)-1,t),e,2)}function mr(t,e){var n=t.getDay();return t=n>=4||0===n?ya(t):ya.ceil(t),ja(ya.count(va(t),t)+(4===va(t).getDay()),e,2)}function yr(t){return t.getDay()}function vr(t,e){return ja(ma.count(va(t)-1,t),e,2)}function xr(t,e){return ja(t.getFullYear()%100,e,2)}function wr(t,e){return ja(t.getFullYear()%1e4,e,4)}function _r(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+ja(e/60|0,"0",2)+ja(e%60,"0",2)}function Sr(t,e){return ja(t.getUTCDate(),e,2)}function Mr(t,e){return ja(t.getUTCHours(),e,2)}function Tr(t,e){return ja(t.getUTCHours()%12||12,e,2)}function Ar(t,e){return ja(1+xa.count(Ta(t),t),e,3)}function Nr(t,e){return ja(t.getUTCMilliseconds(),e,3)}function kr(t,e){return Nr(t,e)+"000"}function Cr(t,e){return ja(t.getUTCMonth()+1,e,2)}function Er(t,e){return ja(t.getUTCMinutes(),e,2)}function Lr(t,e){return ja(t.getUTCSeconds(),e,2)}function Dr(t){var e=t.getUTCDay();return 0===e?7:e}function Pr(t,e){return ja(_a.count(Ta(t)-1,t),e,2)}function Br(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Ma(t):Ma.ceil(t),ja(Ma.count(Ta(t),t)+(4===Ta(t).getUTCDay()),e,2)}function $r(t){return t.getUTCDay()}function jr(t,e){return ja(Sa.count(Ta(t)-1,t),e,2)}function zr(t,e){return ja(t.getUTCFullYear()%100,e,2)}function Ir(t,e){return ja(t.getUTCFullYear()%1e4,e,4)}function Ur(){return"+0000"}function Yr(){return"%"}function Rr(t){return+t}function Vr(t){return Math.floor(+t/1e3)}!function(t){Ca=function(t){var e=t.dateTime,n=t.date,a=t.time,r=t.periods,i=t.days,o=t.shortDays,c=t.months,s=t.shortMonths,l=Ia(r),f=Ua(r),u=Ia(i),h=Ua(i),d=Ia(o),b=Ua(o),p=Ia(c),g=Ua(c),m=Ia(s),y=Ua(s),v={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:or,e:or,f:ur,H:cr,I:sr,j:lr,L:fr,m:hr,M:dr,p:function(t){return r[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Rr,s:Vr,S:br,u:pr,U:gr,V:mr,w:yr,W:vr,x:null,X:null,y:xr,Y:wr,Z:_r,"%":Yr},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:Sr,e:Sr,f:kr,H:Mr,I:Tr,j:Ar,L:Nr,m:Cr,M:Er,p:function(t){return r[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Rr,s:Vr,S:Lr,u:Dr,U:Pr,V:Br,w:$r,W:jr,x:null,X:null,y:zr,Y:Ir,Z:Ur,"%":Yr},w={a:function(t,e,n){var a=d.exec(e.slice(n));return a?(t.w=b[a[0].toLowerCase()],n+a[0].length):-1},A:function(t,e,n){var a=u.exec(e.slice(n));return a?(t.w=h[a[0].toLowerCase()],n+a[0].length):-1},b:function(t,e,n){var a=m.exec(e.slice(n));return a?(t.m=y[a[0].toLowerCase()],n+a[0].length):-1},B:function(t,e,n){var a=p.exec(e.slice(n));return a?(t.m=g[a[0].toLowerCase()],n+a[0].length):-1},c:function(t,n,a){return M(t,e,n,a)},d:Za,e:Za,f:nr,H:Ja,I:Ja,j:Ka,L:er,m:Wa,M:Qa,p:function(t,e,n){var a=l.exec(e.slice(n));return a?(t.p=f[a[0].toLowerCase()],n+a[0].length):-1},q:qa,Q:rr,s:ir,S:tr,u:Ra,U:Va,V:Ha,w:Ya,W:Fa,x:function(t,e,a){return M(t,n,e,a)},X:function(t,e,n){return M(t,a,e,n)},y:Xa,Y:Oa,Z:Ga,"%":ar};function _(t,e){return function(n){var a,r,i,o=[],c=-1,s=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++c<l;)37===t.charCodeAt(c)&&(o.push(t.slice(s,c)),null!=(r=Da[a=t.charAt(++c)])?a=t.charAt(++c):r="e"===a?" ":"0",(i=e[a])&&(a=i(n,r)),o.push(a),s=c+1);return o.push(t.slice(s,c)),o.join("")}}function S(t,e){return function(n){var a,r,i=ka(1900,void 0,1);if(M(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(e&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(a=Na(ka(i.y,0,1))).getUTCDay(),a=r>4||0===r?Sa.ceil(a):Sa(a),a=xa.offset(a,7*(i.V-1)),i.y=a.getUTCFullYear(),i.m=a.getUTCMonth(),i.d=a.getUTCDate()+(i.w+6)%7):(r=(a=Aa(ka(i.y,0,1))).getDay(),a=r>4||0===r?ma.ceil(a):ma(a),a=ba.offset(a,7*(i.V-1)),i.y=a.getFullYear(),i.m=a.getMonth(),i.d=a.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),r="Z"in i?Na(ka(i.y,0,1)).getUTCDay():Aa(ka(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(r+5)%7:i.w+7*i.U-(r+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Na(i)):Aa(i)}}function M(t,e,n,a){for(var r,i,o=0,c=e.length,s=n.length;o<c;){if(a>=s)return-1;if(37===(r=e.charCodeAt(o++))){if(r=e.charAt(o++),!(i=w[r in Da?e.charAt(o++):r])||(a=i(t,n,a))<0)return-1}else if(r!=n.charCodeAt(a++))return-1}return a}return v.x=_(n,v),v.X=_(a,v),v.c=_(e,v),x.x=_(n,x),x.X=_(a,x),x.c=_(e,x),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t+="",!0);return e.toString=function(){return t},e}}}(t),Ca.format,Ca.parse,Ea=Ca.utcFormat,La=Ca.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Ea("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||La("%Y-%m-%dT%H:%M:%S.%LZ");function Hr(){var t,e,n,a,r,i=0,o=1,c=Pn,s=!1;function l(e){return isNaN(e=+e)?r:c(0===n?.5:(e=(a(e)-t)*n,s?Math.max(0,Math.min(1,e)):e))}return l.domain=function(r){return arguments.length?(t=a(i=+r[0]),e=a(o=+r[1]),n=t===e?0:1/(e-t),l):[i,o]},l.clamp=function(t){return arguments.length?(s=!!t,l):s},l.interpolator=function(t){return arguments.length?(c=t,l):c},l.unknown=function(t){return arguments.length?(r=t,l):r},function(r){return a=r,t=r(i),e=r(o),n=t===e?0:1/(e-t),l}}function Fr(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}var Or={value:function(){}};function Xr(){for(var t,e=0,n=arguments.length,a={};e<n;++e){if(!(t=arguments[e]+"")||t in a||/[\s.]/.test(t))throw new Error("illegal type: "+t);a[t]=[]}return new Gr(a)}function Gr(t){this._=t}function qr(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",a=t.indexOf(".");if(a>=0&&(n=t.slice(a+1),t=t.slice(0,a)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function Wr(t,e){for(var n,a=0,r=t.length;a<r;++a)if((n=t[a]).name===e)return n.value}function Zr(t,e,n){for(var a=0,r=t.length;a<r;++a)if(t[a].name===e){t[a]=Or,t=t.slice(0,a).concat(t.slice(a+1));break}return null!=n&&t.push({name:e,value:n}),t}Gr.prototype=Xr.prototype={constructor:Gr,on:function(t,e){var n,a=this._,r=qr(t+"",a),i=-1,o=r.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<o;)if(n=(t=r[i]).type)a[n]=Zr(a[n],t.name,e);else if(null==e)for(n in a)a[n]=Zr(a[n],t.name,null);return this}for(;++i<o;)if((n=(t=r[i]).type)&&(n=Wr(a[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Gr(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,a,r=new Array(n),i=0;i<n;++i)r[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(a=this._[t]).length;i<n;++i)a[i].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var a=this._[t],r=0,i=a.length;r<i;++r)a[r].value.apply(e,n)}};var Kr,Jr,Qr=0,ti=0,ei=0,ni=0,ai=0,ri=0,ii="object"==typeof performance&&performance.now?performance:Date,oi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ci(){return ai||(oi(si),ai=ii.now()+ri)}function si(){ai=0}function li(){this._call=this._time=this._next=null}function fi(t,e,n){var a=new li;return a.restart(t,e,n),a}function ui(){ai=(ni=ii.now())+ri,Qr=ti=0;try{!function(){ci(),++Qr;for(var t,e=Kr;e;)(t=ai-e._time)>=0&&e._call.call(null,t),e=e._next;--Qr}()}finally{Qr=0,function(){var t,e,n=Kr,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Kr=e);Jr=t,di(a)}(),ai=0}}function hi(){var t=ii.now(),e=t-ni;e>1e3&&(ri-=e,ni=t)}function di(t){Qr||(ti&&(ti=clearTimeout(ti)),t-ai>24?(t<1/0&&(ti=setTimeout(ui,t-ii.now()-ri)),ei&&(ei=clearInterval(ei))):(ei||(ni=ii.now(),ei=setInterval(hi,1e3)),Qr=1,oi(ui)))}function bi(t,e,n){var a=new li;return e=null==e?0:+e,a.restart((function(n){a.stop(),t(n+e)}),e,n),a}li.prototype=fi.prototype={constructor:li,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ci():+n)+(null==e?0:+e),this._next||Jr===this||(Jr?Jr._next=this:Kr=this,Jr=this),this._call=t,this._time=n,di()},stop:function(){this._call&&(this._call=null,this._time=1/0,di())}};var pi=Xr("start","end","cancel","interrupt"),gi=[];function mi(t,e,n,a,r,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var a,r=t.__transition;function i(s){var l,f,u,h;if(1!==n.state)return c();for(l in r)if((h=r[l]).name===n.name){if(3===h.state)return bi(i);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete r[l]):+l<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete r[l])}if(bi((function(){3===n.state&&(n.state=4,n.timer.restart(o,n.delay,n.time),o(s))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,a=new Array(u=n.tween.length),l=0,f=-1;l<u;++l)(h=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(a[++f]=h);a.length=f+1}}function o(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(c),n.state=5,1),i=-1,o=a.length;++i<o;)a[i].call(t,r);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),c())}function c(){for(var a in n.state=6,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=fi((function(t){n.state=1,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}),0,n.time)}(t,n,{name:e,index:a,group:r,on:pi,tween:gi,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function yi(t,e){var n=xi(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function vi(t,e){var n=xi(t,e);if(n.state>3)throw new Error("too late; already running");return n}function xi(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function wi(t,e){var n,a,r,i=t.__transition,o=!0;if(i){for(r in e=null==e?null:e+"",i)(n=i[r]).name===e?(a=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(a?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[r]):o=!1;o&&delete t.__transition}}function _i(t,e){var n,a;return function(){var r=vi(this,t),i=r.tween;if(i!==n)for(var o=0,c=(a=n=i).length;o<c;++o)if(a[o].name===e){(a=a.slice()).splice(o,1);break}r.tween=a}}function Si(t,e,n){var a,r;if("function"!=typeof n)throw new Error;return function(){var i=vi(this,t),o=i.tween;if(o!==a){r=(a=o).slice();for(var c={name:e,value:n},s=0,l=r.length;s<l;++s)if(r[s].name===e){r[s]=c;break}s===l&&r.push(c)}i.tween=r}}function Mi(t,e,n){var a=t._id;return t.each((function(){var t=vi(this,a);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return xi(t,a).value[e]}}function Ti(t,e){var n;return("number"==typeof e?hn:e instanceof ye?on:(n=ye(e))?(e=n,on):gn)(t,e)}function Ai(t){return function(){this.removeAttribute(t)}}function Ni(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ki(t,e,n){var a,r,i=n+"";return function(){var o=this.getAttribute(t);return o===i?null:o===a?r:r=e(a=o,n)}}function Ci(t,e,n){var a,r,i=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===i?null:o===a?r:r=e(a=o,n)}}function Ei(t,e,n){var a,r,i;return function(){var o,c,s=n(this);if(null!=s)return(o=this.getAttribute(t))===(c=s+"")?null:o===a&&c===r?i:(r=c,i=e(a=o,s));this.removeAttribute(t)}}function Li(t,e,n){var a,r,i;return function(){var o,c,s=n(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===(c=s+"")?null:o===a&&c===r?i:(r=c,i=e(a=o,s));this.removeAttributeNS(t.space,t.local)}}function Di(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Pi(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Bi(t,e){var n,a;function r(){var r=e.apply(this,arguments);return r!==a&&(n=(a=r)&&Pi(t,r)),n}return r._value=e,r}function $i(t,e){var n,a;function r(){var r=e.apply(this,arguments);return r!==a&&(n=(a=r)&&Di(t,r)),n}return r._value=e,r}function ji(t,e){return function(){yi(this,t).delay=+e.apply(this,arguments)}}function zi(t,e){return e=+e,function(){yi(this,t).delay=e}}function Ii(t,e){return function(){vi(this,t).duration=+e.apply(this,arguments)}}function Ui(t,e){return e=+e,function(){vi(this,t).duration=e}}function Yi(t,e){if("function"!=typeof e)throw new Error;return function(){vi(this,t).ease=e}}function Ri(t,e,n){var a,r,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?yi:vi;return function(){var o=i(this,t),c=o.on;c!==a&&(r=(a=c).copy()).on(e,n),o.on=r}}var Vi=ht.prototype.constructor;function Hi(t){return function(){this.style.removeProperty(t)}}function Fi(t,e,n){return function(a){this.style.setProperty(t,e.call(this,a),n)}}function Oi(t,e,n){var a,r;function i(){var i=e.apply(this,arguments);return i!==r&&(a=(r=i)&&Fi(t,i,n)),a}return i._value=e,i}function Xi(t){return function(e){this.textContent=t.call(this,e)}}function Gi(t){var e,n;function a(){var a=t.apply(this,arguments);return a!==n&&(e=(n=a)&&Xi(a)),e}return a._value=t,a}var qi=0;function Wi(t,e,n,a){this._groups=t,this._parents=e,this._name=n,this._id=a}function Zi(){return++qi}var Ki=ht.prototype;Wi.prototype=function(t){return ht().transition(t)}.prototype={constructor:Wi,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=f(t));for(var a=this._groups,r=a.length,i=new Array(r),o=0;o<r;++o)for(var c,s,l=a[o],u=l.length,h=i[o]=new Array(u),d=0;d<u;++d)(c=l[d])&&(s=t.call(c,c.__data__,d,l))&&("__data__"in c&&(s.__data__=c.__data__),h[d]=s,mi(h[d],e,n,d,h,xi(c,n)));return new Wi(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=h(t));for(var a=this._groups,r=a.length,i=[],o=[],c=0;c<r;++c)for(var s,l=a[c],f=l.length,u=0;u<f;++u)if(s=l[u]){for(var d,b=t.call(s,s.__data__,u,l),p=xi(s,n),g=0,m=b.length;g<m;++g)(d=b[g])&&mi(d,e,n,g,b,p);i.push(b),o.push(s)}return new Wi(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=d(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],c=o.length,s=a[r]=[],l=0;l<c;++l)(i=o[l])&&t.call(i,i.__data__,l,o)&&s.push(i);return new Wi(a,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),c=0;c<i;++c)for(var s,l=e[c],f=n[c],u=l.length,h=o[c]=new Array(u),d=0;d<u;++d)(s=l[d]||f[d])&&(h[d]=s);for(;c<a;++c)o[c]=e[c];return new Wi(o,this._parents,this._name,this._id)},selection:function(){return new Vi(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Zi(),a=this._groups,r=a.length,i=0;i<r;++i)for(var o,c=a[i],s=c.length,l=0;l<s;++l)if(o=c[l]){var f=xi(o,e);mi(o,t,n,l,c,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new Wi(a,this._parents,t,n)},call:Ki.call,nodes:Ki.nodes,node:Ki.node,size:Ki.size,empty:Ki.empty,each:Ki.each,on:function(t,e){var n=this._id;return arguments.length<2?xi(this.node(),n).on.on(t):this.each(Ri(n,t,e))},attr:function(t,e){var n=i(t),a="transform"===n?kn:Ti;return this.attrTween(t,"function"==typeof e?(n.local?Li:Ei)(n,a,Mi(this,"attr."+t,e)):null==e?(n.local?Ni:Ai)(n):(n.local?Ci:ki)(n,a,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=i(t);return this.tween(n,(a.local?Bi:$i)(a,e))},style:function(t,e,n){var a="transform"==(t+="")?Nn:Ti;return null==e?this.styleTween(t,function(t,e){var n,a,r;return function(){var i=C(this,t),o=(this.style.removeProperty(t),C(this,t));return i===o?null:i===n&&o===a?r:r=e(n=i,a=o)}}(t,a)).on("end.style."+t,Hi(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var a,r,i;return function(){var o=C(this,t),c=n(this),s=c+"";return null==c&&(this.style.removeProperty(t),s=c=C(this,t)),o===s?null:o===a&&s===r?i:(r=s,i=e(a=o,c))}}(t,a,Mi(this,"style."+t,e))).each(function(t,e){var n,a,r,i,o="style."+e,c="end."+o;return function(){var s=vi(this,t),l=s.on,f=null==s.value[o]?i||(i=Hi(e)):void 0;l===n&&r===f||(a=(n=l).copy()).on(c,r=f),s.on=a}}(this._id,t)):this.styleTween(t,function(t,e,n){var a,r,i=n+"";return function(){var o=C(this,t);return o===i?null:o===a?r:r=e(a=o,n)}}(t,a,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var a="style."+(t+="");if(arguments.length<2)return(a=this.tween(a))&&a._value;if(null==e)return this.tween(a,null);if("function"!=typeof e)throw new Error;return this.tween(a,Oi(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Mi(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Gi(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var a,r=xi(this.node(),n).tween,i=0,o=r.length;i<o;++i)if((a=r[i]).name===t)return a.value;return null}return this.each((null==e?_i:Si)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?ji:zi)(e,t)):xi(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Ii:Ui)(e,t)):xi(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Yi(e,t)):xi(this.node(),e).ease},end:function(){var t,e,n=this,a=n._id,r=n.size();return new Promise((function(i,o){var c={value:o},s={value:function(){0==--r&&i()}};n.each((function(){var n=vi(this,a),r=n.on;r!==t&&((e=(t=r).copy())._.cancel.push(c),e._.interrupt.push(c),e._.end.push(s)),n.on=e}))}))}};var Ji={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Qi(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Ji.time=ci(),Ji;return n}function to(t){for(var e=t.length/6|0,n=new Array(e),a=0;a<e;)n[a]="#"+t.slice(6*a,6*++a);return n}function eo(t){return sn(t[t.length-1])}ht.prototype.interrupt=function(t){return this.each((function(){wi(this,t)}))},ht.prototype.transition=function(t){var e,n;t instanceof Wi?(e=t._id,t=t._name):(e=Zi(),(n=Ji).time=ci(),t=null==t?null:t+"");for(var a=this._groups,r=a.length,i=0;i<r;++i)for(var o,c=a[i],s=c.length,l=0;l<s;++l)(o=c[l])&&mi(o,t,e,l,c,n||Qi(o,e));return new Wi(a,this._parents,t,e)},to("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),to("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),to("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),to("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),to("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),to("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),to("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),to("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),to("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),to("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),eo(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(to)),eo(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(to));var no=eo(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(to)),ao=eo(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(to)),ro=eo(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(to)),io=eo(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(to)),oo=eo(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(to));eo(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(to)),eo(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(to));var co=eo(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(to));eo(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(to)),eo(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(to));var so=eo(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(to));eo(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(to));var lo=eo(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(to));eo(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(to)),eo(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(to));var fo=eo(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(to));eo(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(to)),eo(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(to)),eo(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(to));var uo=eo(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(to)),ho=eo(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(to)),bo=eo(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(to)),po=eo(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(to)),go=eo(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(to)),mo=eo(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(to));En(Qe(300,.5,0),Qe(-240,.5,1));En(Qe(-100,.75,.35),Qe(80,1.5,.8)),En(Qe(260,.75,.35),Qe(80,1.5,.8)),Qe(),_e();function yo(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}yo(to("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));yo(to("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),yo(to("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),yo(to("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function vo(t,e="YlGnBu",n,a,r=!1){a=void 0===a?Et(t):a,n=void 0===n?Pt(t):n;const i=function t(){var e=aa(Hr()(Pn));return e.copy=function(){return Fr(e,t())},Yt.apply(e,arguments)}(function(t){const e={BuGn:co,OrRd:so,PuBu:lo,YlGnBu:fo,Blues:uo,Oranges:mo,Greens:ho,Purples:po,Reds:go,Greys:bo,Grays:bo,RdBu:ro,RdGy:io,PiYG:no,PuOr:ao,RdYlBu:oo};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return r?i.domain([a,n]):i.domain([n,a]),i}function xo(t,e,n,a,r,i=10,o=10,c={h:10,w:40},s="h",l=!1){let f=[];if(l){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=t.map(t=>t*e),f=f.concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${a.x}, ${a.y})`).selectAll(".legend").data(f).enter().append("g").classed("legend",!0);"h"===s?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",c.h).attr("transform",`translate(${a.x}, ${a.y})`),u.append("rect").attr("x",(t,e)=>c.w*e).attr("y",5).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>c.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${a.x}, ${a.y+c.h*f.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>c.h*e).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>c.h*e+c.h/2))}class wo{constructor(t,n,a=!1){e("#"+t).show();const r=a?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=e("<div/>").addClass(r).appendTo("#"+t),this.buttons={},this.tooltip=n}createDownloadSvgButton(t,e,n,a,r="fa-download"){this.createButton(t,r);dt("#"+t).on("click",()=>{this.downloadSvg(e,n,a)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);dt("#"+t).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,n="fa-download"){const a=e("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return e("<i/>").addClass("fa "+n).appendTo(a),this.buttons[t]=a,a}attachTooltip(t){this.tooltip=t}downloadSvg(t,a,r){let i=e(e(e(""+("#"+t)))[0]),o=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),c=function(t){for(var n="",a=document.styleSheets,r=0;r<a.length;r++)try{if(null==a[r].cssRules)continue;for(var i=a[r].cssRules,o=0;o<i.length;o++){var c=i[o];if(void 0!==c.style){var s,l=void 0===c.selectorText?c.selectorText:c.selectorText.replace(`#${t[0].id} `,"");try{s=e(t).find(l)}catch(t){s=[]}s.length>0&&(n+=c.selectorText+" { "+c.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var f=document.createElement("style");return f.setAttribute("type","text/css"),f.innerHTML="<![CDATA[\n"+n+"\n]]>",f}(i.get());o.prepend(c),e("#"+r).html("").hide();let s=e("#"+r).append(o).html(),l=new Blob([s],{type:"image/svg+xml"});n(l,a),e("#"+r).html("").hide()}}class _o{constructor(t,e=!1,n=30,a=-40,r=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=a,this.duration=r}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),dt("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){dt("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=et.pageX,e=et.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;dt("#"+this.id).style("left",t+"px").style("top",e+"px")}edit(t){dt("#"+this.id).html(t)}}class So{constructor(t,n=!0,a=10,r="YlGnBu",i=2,o="heatmapTooltip"){this.data=t,this.useLog=n,this.logBase=a,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=i,this.colorScheme=r,0==e("#"+o).length&&e("<div/>").attr("id",o).appendTo(e("body")),this.tooltip=new _o(o),dt("#"+o).classed("heatmap-tooltip",!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new wo(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){xo(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,a={w:1e3,h:1e3},r=30){this._setXScale(a.w,e),this._setYScale(a.h,n),this.draw(t,a,r)}draw(t,e={w:1e3,h:600},n=30,a=!1,r=null){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale();const i=t.selectAll(".exp-map-xlabel").data(this.xList),o=null==r?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+r;i.attr("transform",t=>`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`),i.enter().append("text").attr("class",(t,e)=>"exp-map-xlabel x"+e).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","default").attr("transform",t=>`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`).merge(i).text(t=>t),i.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>"exp-map-ylabel y"+e).attr("text-anchor","start").style("cursor","default").on("click",t=>{alert(t+" is clicked. To be implemented")}).on("mouseover",(function(t){dt(this).classed("normal",!1).classed("highlighted",!0)})).on("mouseout",(function(t){dt(this).classed("normal",!0).classed("highlighted",!1)}));const c=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);c.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>"x"+this.xList.indexOf(t.x)).attr("col",t=>"y"+this.yList.indexOf(t.y));const s=this;c.enter().append("rect").attr("row",t=>"x"+this.xList.indexOf(t.x)).attr("col",t=>"y"+this.yList.indexOf(t.y)).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class","exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill","#eeeeee").on("mouseover",(function(e){const n=dt(this);s.cellMouseover(e,t,n)})).on("mouseout",(function(t){dt(this);s.cellMouseout()})).merge(c).style("fill",t=>a&&0==t.value?"#DDDDDD":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value)),c.exit().remove()}cellMouseout(t){(function(t){return"string"==typeof t?new ut([document.querySelectorAll(t)],[document.documentElement]):new ut([null==t?[]:t],ft)})("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const a=n.attr("row"),r=n.attr("col");e.selectAll(".exp-map-xlabel").filter("."+a).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter("."+r).classed("highlighted",!0),n.classed("highlighted",!0);const i=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${i}`)}_setXScale(t,e){this.xList=void 0!==e?e:Ht().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=ee().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:Ht().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=ee().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(){let t=this.useLog,e=this.data.map(e=>t?this._log(e.value):e.value);this.colorScale=vo(e,this.colorScheme,0)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class Mo{constructor(t=window.innerWidth,e=100,n=100,a={top:50,right:250,bottom:170,left:10},r=12,i=10){this.margin=a,this.rootW=t,this.leftTreePanel={x:a.left,y:a.top+n,h:void 0,w:e-i,id:"leftTree"},this.cell={w:void 0,h:r},this.topTreePanel={x:a.left+e,y:a.top,h:n-i,w:this.rootW-(a.left+e+a.right),id:"topTree"},this.heatmapPanel={x:a.left+e,y:a.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:a.left+e,y:0,h:a.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function To(t){var e=0,n=t.children,a=n&&n.length;if(a)for(;--a>=0;)e+=n[a].value;else e=1;t.value=e}function Ao(t,e){var n,a,r,i,o,c=new Eo(t),s=+t.value&&(c.value=t.value),l=[c];for(null==e&&(e=No);n=l.pop();)if(s&&(n.value=+n.data.value),(r=e(n.data))&&(o=r.length))for(n.children=new Array(o),i=o-1;i>=0;--i)l.push(a=n.children[i]=new Eo(r[i])),a.parent=n,a.depth=n.depth+1;return c.eachBefore(Co)}function No(t){return t.children}function ko(t){t.data=t.data.data}function Co(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Eo(t){this.data=t,this.depth=this.height=0,this.parent=null}Eo.prototype=Ao.prototype={constructor:Eo,count:function(){return this.eachAfter(To)},each:function(t){var e,n,a,r,i=this,o=[i];do{for(e=o.reverse(),o=[];i=e.pop();)if(t(i),n=i.children)for(a=0,r=n.length;a<r;++a)o.push(n[a])}while(o.length);return this},eachAfter:function(t){for(var e,n,a,r=this,i=[r],o=[];r=i.pop();)if(o.push(r),e=r.children)for(n=0,a=e.length;n<a;++n)i.push(e[n]);for(;r=o.pop();)t(r);return this},eachBefore:function(t){for(var e,n,a=this,r=[a];a=r.pop();)if(t(a),e=a.children)for(n=e.length-1;n>=0;--n)r.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,a=e.children,r=a&&a.length;--r>=0;)n+=a[r].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),a=e.ancestors(),r=null;t=n.pop(),e=a.pop();for(;t===e;)r=t,t=n.pop(),e=a.pop();return r}(e,t),a=[e];e!==n;)e=e.parent,a.push(e);for(var r=a.length;t!==n;)a.splice(r,0,t),t=t.parent;return a},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return Ao(this).eachBefore(ko)}};var Lo=Array.prototype.slice;function Do(t){return t}function Po(t){return"translate("+(t+.5)+",0)"}function Bo(t){return"translate(0,"+(t+.5)+")"}function $o(t){return function(e){return+t(e)}}function jo(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function zo(){return!this.__axis}function Io(t,e){var n=[],a=null,r=null,i=6,o=6,c=3,s=1===t||4===t?-1:1,l=4===t||2===t?"x":"y",f=1===t||3===t?Po:Bo;function u(u){var h=null==a?e.ticks?e.ticks.apply(e,n):e.domain():a,d=null==r?e.tickFormat?e.tickFormat.apply(e,n):Do:r,b=Math.max(i,0)+c,p=e.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(e.bandwidth?jo:$o)(e.copy()),v=u.selection?u.selection():u,x=v.selectAll(".domain").data([null]),w=v.selectAll(".tick").data(h,e).order(),_=w.exit(),S=w.enter().append("g").attr("class","tick"),M=w.select("line"),T=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(l+"2",s*i)),T=T.merge(S.append("text").attr("fill","currentColor").attr(l,s*b).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),u!==v&&(x=x.transition(u),w=w.transition(u),M=M.transition(u),T=T.transition(u),_=_.transition(u).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=y(t))?f(t):this.getAttribute("transform")})),S.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return f(e&&isFinite(e=e(t))?e:y(t))}))),_.remove(),x.attr("d",4===t||2==t?o?"M"+s*o+","+g+"H0.5V"+m+"H"+s*o:"M0.5,"+g+"V"+m:o?"M"+g+","+s*o+"V0.5H"+m+"V"+s*o:"M"+g+",0.5H"+m),w.attr("opacity",1).attr("transform",(function(t){return f(y(t))})),M.attr(l+"2",s*i),T.attr(l,s*b).text(d),v.filter(zo).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),v.each((function(){this.__axis=y}))}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=Lo.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:Lo.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(a=null==t?null:Lo.call(t),u):a&&a.slice()},u.tickFormat=function(t){return arguments.length?(r=t,u):r},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(c=+t,u):c},u}function Uo(t){return Io(3,t)}function Yo(t){return Io(4,t)}class Ro{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=Ao(function(t){for(var e=[],n={},a=t.split(/\s*(;|\(|\)|,|:)\s*/),r=0;r<a.length;r++){var i=a[r];switch(i){case"(":var o={};n.branchset=[o],e.push(n),n=o;break;case",":o={};e[e.length-1].branchset.push(o),n=o;break;case")":n=e.pop();break;case":":break;default:var c=a[r-1];")"==c||"("==c||","==c?n.name=i:":"==c&&(n.length=parseFloat(i))}}return n}(t),t=>t.branchset).sum(t=>t.branchset?0:1).sort((t,e)=>t.value-e.value||t.data.length-e.data.length),this.leaves=this.root.leaves().sort((t,e)=>t.value-e.value||mt(t.data.length,e.data.length)),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce((t,e)=>t+e.y,0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},a=this._sortNodesByLevel();a.forEach(t=>{n(t),e(t)}),t.selectAll(".branch").data(a).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.data.length?t.x-this.xScale(t.data.length):t.x).attr("y1",t=>t.y+this.yScale.bandwidth()/2).attr("y2",t=>t.y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const r=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);t.selectAll(".arm").data(r).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.x).attr("y1",t=>t.children[0].y+this.yScale.bandwidth()/2).attr("y2",t=>t.children[1].y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(r).enter().append("circle").attr("cx",t=>t.x).attr("cy",t=>t.y+this.yScale.bandwidth()/2).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){d3.select(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(t){d3.select(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call(Uo(this.xScale).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort((t,e)=>t.height-e.height||mt(t.data.length,e.data.length))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce((t,e)=>t+e.x,0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},a=this._sortNodesByLevel();a.forEach(t=>{e(t),n(t)}),t.selectAll(".branch").data(a).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.data.length?t.y-this.yScale(t.data.length):t.y).attr("x1",t=>t.x+this.xScale.bandwidth()/2).attr("x2",t=>t.x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const r=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);t.selectAll(".arm").data(r).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.y).attr("x1",t=>t.children[0].x+this.xScale.bandwidth()/2).attr("x2",t=>t.children[1].x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(r).enter().append("circle").attr("cx",t=>t.x+this.xScale.bandwidth()/2).attr("cy",t=>t.y).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",(function(t){d3.select(this).attr("r",3),console.log(t.leaves())})).on("mouseout",(function(t){d3.select(this).attr("r",2)})),t.append("g").attr("class","dendrogram-axis").call(Yo(this.yScale).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce((t,e)=>e.data.length?t+e.data.length:t,0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=ra().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),this.xScale=ee().domain(this.postorder.map(t=>t.data.name)).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),this.yScale=ee().domain(this.postorder.map(t=>t.data.name)).range([0,this.height]).padding(.05)):this.yScale=ra().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}class Vo{constructor(t,e,n,a="YlGnBu",r=2,i=new Mo,o="dmapTooltip",c=!0,s=10,l=""){this.config=i.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new Ro(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new Ro(this.data.rowTree,"h"),heatmap:new So(this.data.heatmap,c,s,a,r,o)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=l,this.toolbar=void 0,this.tooltip=this.objects.heatmap.tooltip}createToolbar(t,e){return this.toolbar=new wo(t,e),this.toolbar}render(t,e,n=!0,a=!0,r="top",i=5){this._updateConfig(r),this.visualComponents.svg=jt(t,this.config.w,this.config.h,this.config.margin,e);let o=void 0,c=void 0;n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),o=this.objects.columnTree.xScale.domain()),a&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),c=this.objects.rowTree.yScale.domain()),""!=this.title&&dt(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title),this._renderHeatmap(this.objects.heatmap,o,c,i)}_renderTree(t,e,n){let a=this.visualComponents.svg;const r="row"==t?".exp-map-ylabel":".exp-map-xlabel",i=(this.visualComponents.tooltip,a.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`));e.draw(i,n.w,n.h);return i.selectAll(".dendrogram-node").on("mouseover",(function(t){dt(this).attr("r",6).attr("fill","red");let e=t.leaves().map(t=>t.data.name);a.selectAll(r).filter(t=>e.includes(t)).classed("highlighted",!0),a.selectAll(".leaf-color").filter(t=>e.includes(t)).classed("highlighted",!0)})).on("mouseout",(function(){dt(this).attr("r",2).attr("fill","#333"),a.selectAll(r).classed("highlighted",!1),a.selectAll(".leaf-color").classed("highlighted",!1)})),i}_renderHeatmap(t,e,n,a=5){let r=this.visualComponents.svg;const i=this.config.panels.main,o=r.append("g").attr("id",i.id).attr("transform",`translate(${i.x}, ${i.y})`);t.redraw(o,e,n,{w:i.w,h:i.h}),t.drawColorLegend(r,this.config.panels.legend,a)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}var Ho=Math.PI,Fo=2*Ho,Oo=Fo-1e-6;function Xo(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Go(){return new Xo}function qo(t){return function(){return t}}function Wo(t){this._context=t}function Zo(t){return new Wo(t)}function Ko(t){return t[0]}function Jo(t){return t[1]}function Qo(){var t=Ko,e=Jo,n=qo(!0),a=null,r=Zo,i=null;function o(o){var c,s,l,f=o.length,u=!1;for(null==a&&(i=r(l=Go())),c=0;c<=f;++c)!(c<f&&n(s=o[c],c,o))===u&&((u=!u)?i.lineStart():i.lineEnd()),u&&i.point(+t(s,c,o),+e(s,c,o));if(l)return i=null,l+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:qo(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:qo(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:qo(!!t),o):n},o.curve=function(t){return arguments.length?(r=t,null!=a&&(i=r(a)),o):r},o.context=function(t){return arguments.length?(null==t?a=i=null:i=r(a=t),o):a},o}function tc(){var t=Ko,e=null,n=qo(0),a=Jo,r=qo(!0),i=null,o=Zo,c=null;function s(s){var l,f,u,h,d,b=s.length,p=!1,g=new Array(b),m=new Array(b);for(null==i&&(c=o(d=Go())),l=0;l<=b;++l){if(!(l<b&&r(h=s[l],l,s))===p)if(p=!p)f=l,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),u=l-1;u>=f;--u)c.point(g[u],m[u]);c.lineEnd(),c.areaEnd()}p&&(g[l]=+t(h,l,s),m[l]=+n(h,l,s),c.point(e?+e(h,l,s):g[l],a?+a(h,l,s):m[l]))}if(d)return c=null,d+""||null}function l(){return Qo().defined(r).curve(o).context(i)}return s.x=function(n){return arguments.length?(t="function"==typeof n?n:qo(+n),e=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:qo(+e),s):t},s.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:qo(+t),s):e},s.y=function(t){return arguments.length?(n="function"==typeof t?t:qo(+t),a=null,s):n},s.y0=function(t){return arguments.length?(n="function"==typeof t?t:qo(+t),s):n},s.y1=function(t){return arguments.length?(a=null==t?null:"function"==typeof t?t:qo(+t),s):a},s.lineX0=s.lineY0=function(){return l().x(t).y(n)},s.lineY1=function(){return l().x(t).y(a)},s.lineX1=function(){return l().x(e).y(n)},s.defined=function(t){return arguments.length?(r="function"==typeof t?t:qo(!!t),s):r},s.curve=function(t){return arguments.length?(o=t,null!=i&&(c=o(i)),s):o},s.context=function(t){return arguments.length?(null==t?i=c=null:c=o(i=t),s):i},s}function ec(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function nc(t,e){this._context=t,this._k=(1-e)/6}Xo.prototype=Go.prototype={constructor:Xo,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,a){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+a)},bezierCurveTo:function(t,e,n,a,r,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +a+","+(this._x1=+r)+","+(this._y1=+i)},arcTo:function(t,e,n,a,r){t=+t,e=+e,n=+n,a=+a,r=+r;var i=this._x1,o=this._y1,c=n-t,s=a-e,l=i-t,f=o-e,u=l*l+f*f;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(f*c-s*l)>1e-6&&r){var h=n-i,d=a-o,b=c*c+s*s,p=h*h+d*d,g=Math.sqrt(b),m=Math.sqrt(u),y=r*Math.tan((Ho-Math.acos((b+u-p)/(2*g*m)))/2),v=y/m,x=y/g;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*l)+","+(e+v*f)),this._+="A"+r+","+r+",0,0,"+ +(f*h>l*d)+","+(this._x1=t+x*c)+","+(this._y1=e+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,a,r,i){t=+t,e=+e,i=!!i;var o=(n=+n)*Math.cos(a),c=n*Math.sin(a),s=t+o,l=e+c,f=1^i,u=i?a-r:r-a;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+s+","+l),n&&(u<0&&(u=u%Fo+Fo),u>Oo?this._+="A"+n+","+n+",0,1,"+f+","+(t-o)+","+(e-c)+"A"+n+","+n+",0,1,"+f+","+(this._x1=s)+","+(this._y1=l):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=Ho)+","+f+","+(this._x1=t+n*Math.cos(r))+","+(this._y1=e+n*Math.sin(r))))},rect:function(t,e,n,a){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +a+"h"+-n+"Z"},toString:function(){return this._}},Wo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},nc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:ec(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:ec(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var ac=function t(e){function n(t){return new nc(t,e)}return n.tension=function(e){return t(+e)},n}(0);function rc(t){return t<0?-1:1}function ic(t,e,n){var a=t._x1-t._x0,r=e-t._x1,i=(t._y1-t._y0)/(a||r<0&&-0),o=(n-t._y1)/(r||a<0&&-0),c=(i*r+o*a)/(a+r);return(rc(i)+rc(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(c))||0}function oc(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function cc(t,e,n){var a=t._x0,r=t._y0,i=t._x1,o=t._y1,c=(i-a)/3;t._context.bezierCurveTo(a+c,r+c*e,i-c,o-c*n,i,o)}function sc(t){this._context=t}function lc(t){this._context=t}function fc(){et.preventDefault(),et.stopImmediatePropagation()}function uc(t){var e=t.document.documentElement,n=dt(t).on("dragstart.drag",fc,!0);"onselectstart"in e?n.on("selectstart.drag",fc,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}function hc(t,e){var n=t.document.documentElement,a=dt(t).on("dragstart.drag",null);e&&(a.on("click.drag",fc,!0),setTimeout((function(){a.on("click.drag",null)}),0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function dc(t){return function(){return t}}function bc(t,e,n){this.target=t,this.type=e,this.selection=n}function pc(){et.stopImmediatePropagation()}function gc(){et.preventDefault(),et.stopImmediatePropagation()}sc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:cc(this,this._t0,oc(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,cc(this,oc(this,n=ic(this,t,e)),n);break;default:cc(this,this._t0,n=ic(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new lc(t)}.prototype=Object.create(sc.prototype)).point=function(t,e){sc.prototype.point.call(this,e,t)},lc.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,a,r,i){this._context.bezierCurveTo(e,t,a,n,i,r)}};var mc={name:"drag"},yc={name:"space"},vc={name:"handle"},xc={name:"center"};function wc(t){return[+t[0],+t[1]]}function _c(t){return[wc(t[0]),wc(t[1])]}function Sc(t){return function(e){return function(t,e,n){arguments.length<3&&(n=e,e=bt().changedTouches);for(var a,r=0,i=e?e.length:0;r<i;++r)if((a=e[r]).identifier===n)return pt(t,a);return null}(e,et.touches,t)}}var Mc={name:"x",handles:["w","e"].map(Dc),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Tc={name:"y",handles:["n","s"].map(Dc),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Ac={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Dc),input:function(t){return null==t?null:_c(t)},output:function(t){return t}},Nc={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},kc={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Cc={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Ec={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Lc={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Dc(t){return{type:t}}function Pc(){return!et.ctrlKey&&!et.button}function Bc(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function $c(){return navigator.maxTouchPoints||"ontouchstart"in this}function jc(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function zc(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Ic(t){var e,n=Bc,a=Pc,r=$c,i=!0,o=Xr("start","brush","end"),c=6;function s(e){var n=e.property("__brush",p).selectAll(".overlay").data([Dc("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Nc.overlay).merge(n).each((function(){var t=jc(this).extent;dt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([Dc("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Nc.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));a.exit().remove(),a.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Nc[t.type]})),e.each(l).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(r).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",b).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function l(){var t=dt(this),e=jc(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-c/2:e[0][0]-c/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-c/2:e[0][1]-c/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+c:c})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+c:c}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function f(t,e,n){return!n&&t.__brush.emitter||new u(t,e)}function u(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function h(){if((!e||et.touches)&&a.apply(this,arguments)){var n,r,o,c,s,u,h,d,b,p,g,m=this,y=et.target.__data__.type,v="selection"===(i&&et.metaKey?y="overlay":y)?mc:i&&et.altKey?xc:vc,x=t===Tc?null:Ec[y],w=t===Mc?null:Lc[y],_=jc(m),S=_.extent,M=_.selection,T=S[0][0],A=S[0][1],N=S[1][0],k=S[1][1],C=0,E=0,L=x&&w&&i&&et.shiftKey,D=et.touches?Sc(et.changedTouches[0].identifier):gt,P=D(m),B=P,$=f(m,arguments,!0).beforestart();"overlay"===y?(M&&(b=!0),_.selection=M=[[n=t===Tc?T:P[0],o=t===Mc?A:P[1]],[s=t===Tc?N:n,h=t===Mc?k:o]]):(n=M[0][0],o=M[0][1],s=M[1][0],h=M[1][1]),r=n,c=o,u=s,d=h;var j=dt(m).attr("pointer-events","none"),z=j.selectAll(".overlay").attr("cursor",Nc[y]);if(et.touches)$.moved=U,$.ended=R;else{var I=dt(et.view).on("mousemove.brush",U,!0).on("mouseup.brush",R,!0);i&&I.on("keydown.brush",V,!0).on("keyup.brush",H,!0),uc(et.view)}pc(),wi(m),l.call(m),$.start()}function U(){var t=D(m);!L||p||g||(Math.abs(t[0]-B[0])>Math.abs(t[1]-B[1])?g=!0:p=!0),B=t,b=!0,gc(),Y()}function Y(){var t;switch(C=B[0]-P[0],E=B[1]-P[1],v){case yc:case mc:x&&(C=Math.max(T-n,Math.min(N-s,C)),r=n+C,u=s+C),w&&(E=Math.max(A-o,Math.min(k-h,E)),c=o+E,d=h+E);break;case vc:x<0?(C=Math.max(T-n,Math.min(N-n,C)),r=n+C,u=s):x>0&&(C=Math.max(T-s,Math.min(N-s,C)),r=n,u=s+C),w<0?(E=Math.max(A-o,Math.min(k-o,E)),c=o+E,d=h):w>0&&(E=Math.max(A-h,Math.min(k-h,E)),c=o,d=h+E);break;case xc:x&&(r=Math.max(T,Math.min(N,n-C*x)),u=Math.max(T,Math.min(N,s+C*x))),w&&(c=Math.max(A,Math.min(k,o-E*w)),d=Math.max(A,Math.min(k,h+E*w)))}u<r&&(x*=-1,t=n,n=s,s=t,t=r,r=u,u=t,y in kc&&z.attr("cursor",Nc[y=kc[y]])),d<c&&(w*=-1,t=o,o=h,h=t,t=c,c=d,d=t,y in Cc&&z.attr("cursor",Nc[y=Cc[y]])),_.selection&&(M=_.selection),p&&(r=M[0][0],u=M[1][0]),g&&(c=M[0][1],d=M[1][1]),M[0][0]===r&&M[0][1]===c&&M[1][0]===u&&M[1][1]===d||(_.selection=[[r,c],[u,d]],l.call(m),$.brush())}function R(){if(pc(),et.touches){if(et.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else hc(et.view,b),I.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);j.attr("pointer-events","all"),z.attr("cursor",Nc.overlay),_.selection&&(M=_.selection),zc(M)&&(_.selection=null,l.call(m)),$.end()}function V(){switch(et.keyCode){case 16:L=x&&w;break;case 18:v===vc&&(x&&(s=u-C*x,n=r+C*x),w&&(h=d-E*w,o=c+E*w),v=xc,Y());break;case 32:v!==vc&&v!==xc||(x<0?s=u-C:x>0&&(n=r-C),w<0?h=d-E:w>0&&(o=c-E),v=yc,z.attr("cursor",Nc.selection),Y());break;default:return}gc()}function H(){switch(et.keyCode){case 16:L&&(p=g=L=!1,Y());break;case 18:v===xc&&(x<0?s=u:x>0&&(n=r),w<0?h=d:w>0&&(o=c),v=vc,Y());break;case 32:v===yc&&(et.altKey?(x&&(s=u-C*x,n=r+C*x),w&&(h=d-E*w,o=c+E*w),v=xc):(x<0?s=u:x>0&&(n=r),w<0?h=d:w>0&&(o=c),v=vc),z.attr("cursor",Nc[y]),Y());break;default:return}gc()}}function d(){f(this,arguments).moved()}function b(){f(this,arguments).ended()}function p(){var e=this.__brush||{selection:null};return e.extent=_c(n.apply(this,arguments)),e.dim=t,e}return s.move=function(e,n){e.selection?e.on("start.brush",(function(){f(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){f(this,arguments).end()})).tween("brush",(function(){var e=this,a=e.__brush,r=f(e,arguments),i=a.selection,o=t.input("function"==typeof n?n.apply(this,arguments):n,a.extent),c=mn(i,o);function s(t){a.selection=1===t&&null===o?null:c(t),l.call(e),r.brush()}return null!==i&&null!==o?s:s(1)})):e.each((function(){var e=this,a=arguments,r=e.__brush,i=t.input("function"==typeof n?n.apply(e,a):n,r.extent),o=f(e,a).beforestart();wi(e),r.selection=null===i?null:i,l.call(e),o.start().brush().end()}))},s.clear=function(t){s.move(t,null)},u.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,a){var r=et;t.sourceEvent=et,et=t;try{e.apply(n,a)}finally{et=r}}(new bc(s,e,t.output(this.state.selection)),o.apply,o,[e,this.that,this.args])}},s.extent=function(t){return arguments.length?(n="function"==typeof t?t:dc(_c(t)),s):n},s.filter=function(t){return arguments.length?(a="function"==typeof t?t:dc(!!t),s):a},s.touchable=function(t){return arguments.length?(r="function"==typeof t?t:dc(!!t),s):r},s.handleSize=function(t){return arguments.length?(c=+t,s):c},s.keyModifiers=function(t){return arguments.length?(i=!!t,s):i},s.on=function(){var t=o.on.apply(o,arguments);return t===o?s:t},s}const Uc=function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)},Yc=function(t){let e=(Ct(t,.75)-Ct(t,.25))/1.34;return 1.06*Math.min(_t(t),e)*Math.pow(t.length,-.2)};class Rc{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0}render(t,e=500,n=357,a=.05,r,i=[-3,3],o="Y axis",c=!0,s=30,l=!0,f=0,u=!1,h=!1,d=!1,b=!1,p=!1,g=!1,m=0){if(this.reset=()=>{t.selectAll("*").remove(),this.render(t,e,n,a,r,i,o,c,s,l,f,u,h,d,b,p,g)},this.updateYScale=function(i,o){t.selectAll("*").remove(),void 0===o&&(o=[]),this.render(t,e,n,a,r,[],i,c,s,l,f,u,h,d,b,p,g)},this.updateXScale=function(r){void 0===r&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,e,n,a,r,[],o,c,s,l,f,u,h,d,b,p,g)},void 0===i||0==i.length){let t=[];this.data.forEach(e=>t=t.concat(e.values)),i=St(t)}this.groups=Ht().key(t=>t.group).entries(this.data),this.scale={x:ee().rangeRound([0,e]).domain(r||this.groups.map(t=>t.key)).paddingInner(a),subx:ee(),y:ra().rangeRound([n,0]).domain(i),z:ra()},this.groups.forEach(e=>{let a=e.key,r=e.values,o=this.groupInfo[a];if(e.index=this.scale.x.domain().indexOf(a),void 0!==o){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(o[t])<=parseFloat(o.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,e)=>`translate(${this.scale.x(a)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`).text(t=>`${t}: ${parseFloat(parseFloat(o[t]).toPrecision(3)).toExponential()}`)}p&&r.sort((t,e)=>t.label<e.label?-1:t.label>e.label?1:0),this.scale.subx.domain(r.map(t=>t.label)).rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]),r.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(mt),this._drawViolin(t,n,u,e.index,g,m))});var c=18;if(b){const e=ee().domain(r.map(t=>null==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+c})`).call(Uo(e))}if(l){c=5;const e=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+c})`).call(Uo(this.scale.subx));f>0&&e.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${f}, 2, 10)`)}});let y=l?55:0;if(this.xAxis=c?Uo(this.scale.x):Uo(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+y})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${s}, -10, 10)`),y=5,this.yAxis=Yo(this.scale.y).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${y}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*y+dt(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(o),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),h&&this._addGroupDivider(t),d){const e=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");e.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=e.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),a=10;n.append("rect").attr("x",(t,e)=>5+60*e+this.scale.x.range()[0]).attr("y",-28).attr("width",a).attr("height",a).style("fill",t=>t.color),n.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,e)=>17+60*e+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,e){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,a=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${a})`).text(e)}createTooltip(t){return 0==e("#"+t).length&&e("<div/>").attr("id",t).appendTo(e("body")),this.tooltip=new _o(t),dt("#"+t).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return this.toolbar=new wo(t,e),this.toolbar}addBrush(t){const e=Ic(Ac);e.on("end",()=>{this.zoom(t,e)}),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,a=et.selection;if(void 0===e)this.reset();else if(a){this.scale.x.domain(this.scale.x.domain().filter((t,e)=>{const n=Math.floor(a[0][0]/this.scale.x.bandwidth()),r=Math.floor(a[1][0]/this.scale.x.bandwidth());return e>=n&&e<=r}));const n=Math.floor(this.scale.y.invert(a[1][1])),r=Math.floor(this.scale.y.invert(a[0][1]));this.scale.y.domain([n,r]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout((function(){n=null}),350);this.reset()}let r=t.transition().duration(750);t.select(".axis--x").transition(r).call(this.xAxis),t.select(".axis--y").transition(r).call(this.yAxis),this.groups.forEach((e,n)=>{let a=e.key,i=e.values;this.scale.subx.rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(a);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=t.select(`#violin${e.index}-${n.label}`);i.select(".violin").transition(r).attr("d",tc().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const o=Ct(n.values,.25),c=Ct(n.values,.75),s=.1;i.select(".violin-ir").transition(r).attr("x",this.scale.z(-s)).attr("y",this.scale.y(c)).attr("width",Math.abs(this.scale.z(-s)-this.scale.z(s))).attr("height",Math.abs(this.scale.y(c)-this.scale.y(o)));const l=Dt(n.values);i.select(".violin-median").transition(r).attr("x1",this.scale.z(-s)).attr("x2",this.scale.z(s)).attr("y1",this.scale.y(l)).attr("y2",this.scale.y(l))})})}_drawViolin(t,e,n,a,r,i){let o=function(t,e,n){return function(a){return e.map(e=>[e,Lt(a,a=>t((e-a)/n))/n])}}(Uc,this.scale.y.ticks(100),Yc(e.values));const c=St(e.values),s=o(e.values).filter(t=>t[0]>=c[0]&&t[0]<=c[1]),l=t.append("g").attr("id",`violin${a}-${e.label}`).attr("class","violin-g").datum(e);if(e.values.length>=i&&s.length&&this._validVertices(s)){let i=Et(s,t=>Math.abs(t[1]));this.scale.z.domain([-i,i]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);let o=tc().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const c=l.append("path").datum(s).attr("d",o).classed("violin",!0).style("fill",()=>void 0!==e.color?e.color:a%2==0?"#90c1c1":"#94a8b8"),f=Ct(e.values,.25),u=Ct(e.values,.75),h=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(u-f),a=Et(e.values.filter(t=>t<=u+1.5*n)),r=Pt(e.values.filter(t=>t>=f-1.5*n));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(a)).attr("y2",this.scale.y(r)).style("stroke","#fff")}l.append("rect").attr("x",this.scale.z(-h)).attr("y",this.scale.y(u)).attr("width",Math.abs(this.scale.z(-h)-this.scale.z(h))).attr("height",Math.abs(this.scale.y(u)-this.scale.y(f))).attr("class","violin-ir");const d=Dt(e.values);if(l.append("line").attr("x1",this.scale.z(-h)).attr("x2",this.scale.z(h)).attr("y1",this.scale.y(d)).attr("y2",this.scale.y(d)).attr("class","violin-median"),r){let t=It(0,h/2);const n=Math.abs(u-f),a=Et(e.values.filter(t=>t<=u+1.5*n)),r=Pt(e.values.filter(t=>t>=f-1.5*n)),i=e.values.filter(t=>t<r||t>a);l.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(t())).attr("cy",t=>this.scale.y(t)).attr("r",2)}l.on("mouseover",()=>{c.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+d.toPrecision(4)+"<br/>")}),l.on("mouseout",()=>{c.classed("highlighted",!1)})}else if(i){let t=Et(e.values,t=>Math.abs(t));this.scale.z.domain([-t,t]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const n=this.scale.z.domain()[1]/3;let a=It(0,n/2);l.append("g").attr("class","violin-points").selectAll("circle").data(e.values).enter().append("circle").attr("cx",()=>this.scale.z(a())).attr("cy",t=>this.scale.y(t)).attr("r",2)}}_sanityCheck(t){const e=["group","label","values"];t.forEach(t=>{e.forEach(e=>{if(void 0===t[e])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const e=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),a=(t,a)=>a!==e.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+n/2:0;t.selectAll(".vline").data(e).enter().append("line").classed("vline",!0).attr("x1",a).attr("x2",a).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,n)=>n!=e.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,e)=>t.concat(e),[]).filter(t=>isNaN(t)).length}}class Vc{constructor(t,e,n,a,r=!1,i=1e3,o=0){this.gene=t,this.exons=e,"+"==this.gene.strand?this.exons.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)):this.exons.sort((t,e)=>Number(e.exonNumber)-Number(t.exonNumber)),this.exonsCurated=n.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)),this.junctions=a.sort((t,e)=>t.junctionId<e.junctionId?-1:t.junctionId>e.junctionId?1:0),this.isIsoform=r,this.maxIntronLength=i,this.intronLength=0,this.minExonWidth=o,this.nullColor="#DDDDDD"}changeTextlabel(t,e){t.selectAll("#modelInfo").text(e)}addData(t,e,n,a,r){void 0!==e&&t.selectAll(".junc").style("fill",n=>{const r=e.filter(t=>t.junctionId==n.junctionId)[0],i=0==r.value?this.nullColor:a(r.value);return t.selectAll(".junc-curve").filter(".junc"+n.junctionId).style("stroke",i),i}),t.selectAll(".exon-curated").style("fill",t=>{const e=n.filter(e=>e.exonId==t.exonId)[0];if(void 0===e)throw t.exonId+" has no data";return 0==e.value?this.nullColor:r(e.value)})}render(t,e){this.setXscale(e.w);const n=e.h/2;if(this.exons.forEach((t,e)=>{t.x=0==e?0:this.exons[e-1].x+this.exons[e-1].w+this.xScale(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}),this.exonsCurated.forEach((t,e)=>{if(t.oriExon=this._findExon(t.chromStart)||this._findExon(t.chromEnd),void 0!==t.oriExon){if(Number(t.oriExon.chromStart)==Number(t.chromStart))t.x=t.oriExon.x;else{const e=Number(t.chromStart)-Number(t.oriExon.chromStart)+1;t.x=t.oriExon.x+this.xScale(e)}void 0===t.length&&(t.length=Number(t.chromEnd)-Number(t.chromStart)+1),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}else console.warn(`${this.gene.transcriptId}-${t.exonId} can't map to full gene model`)}),this.isIsoform){t.append("line").attr("x1",this.exonsCurated[0].x).attr("x2",this.exonsCurated[this.exonsCurated.length-1].x).attr("y1",n+7.5).attr("y2",n+7.5).classed("intron",!0)}else{this.junctions=this.junctions.filter(t=>(t.startExon=this._findExon(t.chromStart),t.endExon=this._findExon(t.chromEnd),void 0!==t.startExon&&void 0!==t.endExon)),this.junctions.sort((t,e)=>+t.chromStart<+e.chromStart?-1:+t.chromStart>+e.chromStart?1:+t.chromEnd<+e.chromEnd?-1:+t.chromEnd>+e.chromEnd?1:0),this.junctions.forEach((t,e)=>{t.displayName="Junction "+(e+1);const a=Number(t.chromStart)-Number(t.startExon.chromStart)+1,r=Number(t.chromEnd)-Number(t.endExon.chromStart)+1;t.startX=t.startExon.x+this.xScale(a),t.endX=t.endExon.x+this.xScale(r),t.cx=t.startX+(t.endX-t.startX+1)/2,t.cy=n-15*(Math.abs(Number(t.endExon.exonNumber)-Number(t.startExon.exonNumber))+.5),t.cy<0&&(t.cy=0)});const e=this.junctions.reduce((t,e)=>(t[e.displayName]=1+t[e.displayName]||1,t),{});this.junctions.forEach(t=>{e[t.displayName]>1&&(t.cy-=15*Math.random())});const a=Qo().x(t=>t.x).y(t=>t.y).curve(ac);this.junctions.forEach((e,r)=>{t.append("path").datum([{x:e.startX,y:n},{x:e.cx,y:e.cy},{x:e.endX,y:n}]).attr("class","junc-curve junc"+e.junctionId).attr("d",a).style("stroke","#92bcc9")});const r=t.selectAll(".junc").data(this.junctions);r.attr("cx",t=>t.cx),r.attr("cy",t=>t.cy),r.enter().append("circle").attr("class",t=>"junc junc"+t.junctionId).attr("cx",t=>t.cx).attr("cy",t=>t.cy).merge(r).attr("r",4).style("fill","rgb(86, 98, 107)");const i=t.selectAll(".exon").data(this.exons);i.attr("x",t=>t.x),i.attr("y",n),i.enter().append("rect").attr("class",t=>"exon exon"+t.exonNumber).attr("y",n).attr("rx",2).attr("ry",2).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(i).style("cursor","default"),t.append("text").attr("id","modelInfo").attr("text-anchor","end").attr("x",this.xScale(0)).attr("y",n-10).style("font-size",12).text("Gene Model")}const a=t.selectAll(".exon-curated").data(this.exonsCurated);a.attr("x",t=>t.x),a.attr("y",n),a.enter().append("rect").attr("class",t=>this.isIsoform?"exon-curated":"exon-curated exon-curated"+t.exonNumber).attr("y",n).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(a).style("fill","#eee").style("cursor","default"),"left"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabel").attr("text-anchor","end").attr("x",this.xScale.range()[0]-5).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?""+this.gene.geneSymbol:this.gene.transcriptId),"right"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabelRight").attr("text-anchor","start").attr("x",this.xScale.range()[1]+50).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?""+this.gene.geneSymbol:this.gene.transcriptId)}setXscale(t){this.exons.sort((t,e)=>Number(t.chromStart)<Number(e.chromStart)?-1:Number(t.chromStart)>Number(e.chromStart)?1:0);let e=0;this.exons.forEach((t,n)=>{if(t.length=Number(t.chromEnd)-Number(t.chromStart)+1,0==n)e+=t.length;else{let a=this.exons[n-1];t.intronLength=Number(t.chromStart)-Number(a.chromEnd)+1,e+=t.length+(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength)}});const n=[0,e],a=[0,t];this.xScale=ra().domain(n).range(a)}setXscaleFixIntron(t){this.exons.forEach(t=>{t.length=Number(t.chromEnd)-Number(t.chromStart)+1});const e=Et(this.exons,t=>t.length),n=[0,e*this.exons.length],a=[0,t];this.xScale=ra().domain(n).range(a);const r=this.xScale.invert(this.minExonWidth),i=function(t,e){var n,a=t.length,r=-1,i=0;if(null==e)for(;++r<a;)(n=+t[r])&&(i+=n);else for(;++r<a;)(n=+e(t[r],r,t))&&(i+=n);return i}(this.exons,t=>t.length>r?t.length:r);this.intronLength=(e*this.exons.length-i)/(this.exons.length-1)}_findExon(t){t=Number(t);const e=this.exons.filter(e=>Number(e.chromStart)-1<=t&&Number(e.chromEnd)+1>=t);return 1==e.length?e[0]:0==e.length?void console.warn("No exon found for: "+t):void console.warn("More than one exons found for: "+t)}}class Hc{constructor(t,e,n,a){this.isoforms=t,this.isoformExons=e,this.modelExons=n,this.visualDom=void 0,this.config=a,this.nullColor="#DDDDDD"}showData(t,e,n,a,r=!0){if(r){t.sort((t,e)=>-(t.displayValue-e.displayValue));const e=t.map(t=>t.transcriptId);this.sortTracks(e)}t.forEach(t=>{this.visualDom.select("#"+t.transcriptId.replace(".","_")).selectAll(".exon-curated").style("fill",0==t.value?this.nullColor:e(t.value))}),this.visualDom.select(".lollipopGraph").remove();const i=this.visualDom.append("g").classed("lollipopGraph",!0).attr("transform","translate(-100, 13)"),o=i.selectAll(".lollipop").data(t).enter().append("g").classed("lollipop",!0);var c;o.append("line").attr("x1",0).attr("y1",t=>this.yScale(t.transcriptId)).attr("y2",t=>this.yScale(t.transcriptId)).style("stroke",t=>0==t.value?this.nullColor:e(t.value)).style("stroke-width",2).transition().duration(1e3).attr("x2",t=>0==t.value?0:n(t.value)),o.append("circle").attr("cx",0).attr("cy",t=>this.yScale(t.transcriptId)).attr("r",5).style("fill",t=>0==t.value?this.nullColor:e(t.value)).transition().duration(1e3).attr("cx",t=>n(t.value)),i.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call((c=n,Io(1,c)).ticks(3)),i.append("text").attr("id","lolliLabel").attr("x",0).attr("y",-40).attr("text-anchor","end").style("font-size",9).text("log10(TPM)"),i.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call(function(t){return Io(2,t)}(this.yScale).tickValues([])),i.append("text").attr("id","lolliLabel").attr("x",10).attr("y",-20).text("Transcript Expression in "+a).attr("text-anchor","start").style("font-size","12px")}sortTracks(t){this.setYscale(this.config.h,t),this.render(!0)}render(t=!1,e,n="left",a=1e3){if(void 0===e&&void 0===this.visualDom)throw"Fatal Error: must provide a dom element";void 0===e?e=this.visualDom:this.visualDom=e,void 0===this.yScale&&this.setYscale(this.config.h);const r=e.selectAll(".isotrack").data(this.isoforms.map(t=>t.transcriptId));r.transition().duration(a).attr("transform",t=>`translate(0, ${this.yScale(t)})`),r.enter().append("g").attr("id",t=>t.replace(".","_")).attr("class","isotrack").attr("transform",t=>"translate(0, 0)").transition().duration(a/2).attr("transform",t=>`translate(0, ${this.yScale(t)})`),t||this._renderModels(this.config.w,n)}_renderModels(t,e="left"){this.isoforms.forEach(n=>{let a=void 0===this.modelExons||null===this.modelExons?this.isoformExons[n.transcriptId]:this.modelExons;const r=new Vc(n,a,this.isoformExons[n.transcriptId],[],!0),i=dt("#"+n.transcriptId.replace(".","_"));r.render(i,{w:t,h:this.yScale.bandwidth(),labelOn:e})})}setYscale(t,e){void 0===e&&(e=this.isoforms.map(t=>t.transcriptId)),this.yScale=ee().domain(e).range([0,t]).padding(.05)}}class Fc{constructor(t,e=!0,n=10,a="Reds"){this.data=t,this.useLog=e,this.logBase=n,this.colorScheme=a,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.bubbleScale=void 0,this.toolbar=void 0,this.tooltip=void 0}addTooltip(t){let n=e("#"+t),a=t+"-tooltip";0==e("#"+a).length&&e("<div/>").attr("id",a).appendTo(n),this.tooltip=new _o(a),dt("#"+a).classed("bubblemap-tooltip",!0)}drawCanvas(t,e={w:1e3,h:600,top:20,left:20},n,a={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(e,n);let r=t.node().getContext("2d");r.fillStyle="#ffffff",r.rect(0,0,t.attr("width"),t.attr("height")),r.fill(),this.data.forEach(t=>{r.beginPath(),r.fillStyle=this.colorScale(t.value),r.arc(this.xScale(t.x)+this.xScale.bandwidth()/2,this.yScale(t.y),this.bubbleScale(t.r),0,2*Math.PI),r.fill(),r.closePath()});let i=a.column,o=a.row;o.show&&(r.save(),r.textAlign=i.textAlign,r.fillStyle="black",r.font="10px Open Sans",this.yScale.domain().forEach(t=>{r.fillText(t,this.xScale.range()[0]-o.adjust,this.yScale(t)+2)}),r.restore()),i.show&&this.xScale.domain().forEach(t=>{r.save(),r.fillStyle="black",r.font="10px Open Sans",r.textAlign=i.textAlign,r.translate(this.xScale(t)+this.xScale.bandwidth()/2-3,this.yScale.range()[1]+i.adjust),r.rotate(0==i.angle?0:Math.PI/(180/i.angle)),r.fillText(t,0,0),r.restore()})}drawCombo(t,e,n={w:1e3,h:600,top:0,left:0},a,r=!0,i={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){let o={w:n.w,h:n.h2,top:n.top,left:n.left};this.drawSvg(e,o,a,50,i);let c=t.append("g").attr("clip-path","url(#clip)");if(this._setMiniScales(n,a),c.selectAll(".mini-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","mini-map-cell").attr("row",t=>"x"+this.xScaleMini.domain().indexOf(t.x)).attr("col",t=>"y"+this.yScaleMini.domain().indexOf(t.y)).attr("cx",t=>this.xScaleMini(t.x)+this.xScaleMini.bandwidth()/2).attr("cy",t=>this.yScaleMini(t.y)).attr("r",t=>this.bubbleScaleMini(t.r)).style("fill",t=>this.colorScale(t.value)),r){let a=Ic(Mc).extent([[0,0],[n.w,n.h]]).on("brush",()=>{this._brushed(e,i)});t.append("g").attr("class","brush").call(a).call(a.move,[0,50*this.xScaleMini.bandwidth()])}}drawSvg(t,e={w:1e3,h:600,top:0,left:0},n,a=50,r={column:{show:!0,angle:30,adjust:0,location:"bottom",textAlign:"left"},row:{show:!0,angle:0,adjust:0,location:"left",textAlign:"right"}}){this._setScales(e,n,a);let i=this.tooltip;t.append("g").attr("clip-path","url(#clip)").selectAll(".bubble-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("class","bubble-map-cell").attr("row",t=>"x"+this.xScale.domain().indexOf(t.x)).attr("col",t=>"y"+this.yScale.domain().indexOf(t.y)).attr("cx",t=>this.xScale(t.x)+this.xScale.bandwidth()/2).attr("cy",t=>this.yScale(t.y)+this.yScale.bandwidth()/2).attr("r",t=>this.bubbleScale(t.r)).style("fill",t=>this.colorScale(t.value)).on("mouseover",(function(e){let n=dt(this),a=n.attr("row"),r=n.attr("col");t.selectAll(".bubble-map-xlabel").filter("."+a).classed("highlighted",!0),t.selectAll(".bubble-map-ylabel").filter("."+r).classed("highlighted",!0),n.classed("highlighted",!0);let o=void 0===e.displayValue?parseFloat(e.value.toExponential()).toPrecision(4):e.displayValue,c=void 0===e.rDisplayValue?e.r.toPrecision(4):e.rDisplayValue,s=void 0===e.displayX?e.x:e.displayX,l=void 0===e.displayY?e.y:e.displayY;i.show(`Column: ${s} <br/> Row: ${l}<br/> Value: ${o}<br/> Size: ${c}`)})).on("mouseout",(function(){t.selectAll("*").classed("highlighted",!1),i.hide()}));let o=r.column,c=r.row;if(o.show){let e={};Ht().key(t=>t.x).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayX});t.selectAll(".bubble-map-xlabel").data(this.xScale.domain()).enter().append("text").attr("class",(t,e)=>"bubble-map-xlabel x"+e).attr("x",0).attr("y",0).attr("text-anchor","left"==o.textAlign?"start":"end").style("cursor","default").style("font-size",()=>(Math.floor(this.xScale.bandwidth()/2)>12?12:Math.floor(this.xScale.bandwidth()/2))+"px").attr("transform",t=>`translate(${this.xScale(t)+this.xScale.bandwidth()/3}, ${this.yScale.range()[1]+o.adjust}) rotate(${o.angle})`).text(t=>e[t]||t)}if(c.show){let e={};Ht().key(t=>t.y).entries(this.data).forEach(t=>{e[t.key]=t.values[0].displayY});t.selectAll(".bubble-map-ylabel").data(this.yScale.domain()).enter().append("text").attr("class",(t,e)=>"bubble-map-ylabel y"+e).attr("x",0).attr("y",0).attr("text-anchor","left"==c.textAlign?"start":"end").style("cursor","default").style("font-size",()=>(Math.floor(this.yScale.bandwidth()/1.5)>14?14:Math.floor(this.yScale.bandwidth()/1.5)<10?10:Math.floor(this.yScale.bandwidth()/1.5))+"px").attr("transform",t=>`translate(${this.xScale.range()[0]-c.adjust}, ${this.yScale(t)+this.yScale.bandwidth()/1.5}) rotate(${c.angle})`).text(t=>e[t]||t)}}drawColorLegend(t,e={x:0,y:0},n=5,a=""){xo(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:10,w:40},"h",!0)}drawBubbleLegend(t,e={x:0,y:0,title:"Bubble legend"},n=5,a=""){t.selectAll(".bmap-bubble-legend").remove();let r=[...Array(n+1).keys()],i=(this.bubbleScale.domain()[1]-this.bubbleScale.domain()[0])/n,o=r.map(t=>this.bubbleScale.domain()[0]+t*i),c=t.append("g").attr("class","bmap-bubble-legend").attr("transform",`translate(${e.x}, ${e.y})`);c.append("text").attr("class","color-legend").text(e.title).attr("x",-10).attr("text-anchor","end").attr("y",10);let s=c.selectAll(".legend").data(o).enter().append("g").classed("legend",!0);s.append("circle").attr("cx",(t,e)=>40*e).attr("cy",10).attr("r",t=>this.bubbleScale(t)).style("fill","black"),s.append("text").attr("class","color-legend").text(t=>this.useLog?Math.pow(base,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>40*e-5).attr("y",0)}_brushed(t,e){let n=et.selection,a=Math.round(n[0]/this.xScaleMini.step()),r=Math.round(n[1]/this.xScaleMini.step());this.xScale.domain(this.xScaleMini.domain().slice(a,r));let i=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:i,min:2}),t.selectAll(".bubble-map-cell").attr("cx",t=>{let e=this.xScale(t.x);return void 0===e?this.xScale.bandwidth()/2:e+this.xScale.bandwidth()/2}).attr("r",t=>void 0===this.xScale(t.x)?0:this.bubbleScale(t.r)),t.selectAll(".bubble-map-xlabel").attr("transform",t=>`translate(${this.xScale(t)+5||0}, ${this.yScale.range()[1]+e.column.adjust}) rotate(${e.column.angle})`).style("display",t=>void 0===this.xScale(t)?"none":"block")}_setMiniScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScaleMini&&(this.xScaleMini=this._setXScaleMini(t)),void 0===this.yScaleMini&&(this.yScaleMini=this._setYScaleMini(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScaleMini){let t=this._setBubbleMax(!0);this.bubbleScaleMini=this._setBubbleScale({max:t,min:1})}}_setScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScale&&(this.xScale=this._setXScale(t)),void 0===this.yScale&&(this.yScale=this._setYScale(t)),void 0===this.colorScale&&(this.colorScale=this._setColorScale(e)),void 0===this.bubbleScale){let t=this._setBubbleMax();this.bubbleScale=this._setBubbleScale({max:t,min:2})}}_parseXList(){return Ht().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_parseYList(){return Ht().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}_setXScaleMini(t={w:1e3,left:20}){let e=this._parseXList();return this._setXScale(t,e)}_setXScale(t={w:1e3,left:20},e){return e=void 0===e?this._parseXList():e,ee().domain(e).range([t.left,t.left+t.w]).padding(.05)}_setYScaleMini(t={h:600,top:20}){let e=this._parseYList();return this._setYScale(t,e)}_setYScale(t={h:600,top:20},e){return e=void 0===e?this._parseYList():e,ee().domain(e).range([t.top,t.top+t.h]).padding(.05)}_setColorScale(t){let e=this.useLog;return vo(void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t,this.colorScheme,void 0,void 0,!0)}_setBubbleMax(t=!1,e=2,n=10){let a=t?this.xScaleMini:this.xScale,r=t?this.yScaleMini:this.yScale,i=Et([a.bandwidth(),r.bandwidth()])/e;return n<i?n:i}_setBubbleScale(t={max:10,min:0}){return function(){return la.apply(null,arguments).exponent(.5)}().domain([3,Et(this.data.map(t=>t.r))]).range([t.min,t.max])}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class Oc{constructor(t,e=0,n=!0,a=10,r="Greys",i=[0,1]){this.data=this._unique(t),this.dataDict={},this.cutoff=e,this.filteredData=this._filter(this.data,this.cutoff),this.dataDict=this._generateDataDict(this.filteredData),this.useLog=n,this.logBase=a,this.colorScheme=r,this.colorScale=this._setColorScale(i),this.xScale=void 0,this.yScale=void 0,this.labelScale=void 0,this.tooltip=void 0}addTooltip(t){let e=t+"-tooltip";0==$("#"+e).length&&$("<div/>").attr("id",e).appendTo($("#"+t)),this.tooltip=new _o(e,!1,40,0),dt("#"+e).classed("half-map-tooltip",!0)}draw(t,e,n={w:600,top:20,left:20},a=[0,1],r=!0,i=90,o,c){this._drawCanvas(t,n,a,o,c);this.drawSvg(e,n,!1,r,i,a,o,c)}drawColorLegend(t,e={x:0,y:0},n=5,a="",r=[0,1]){void 0===this.colorScale&&this._setColorScale(r),xo(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:20,w:10},"v")}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}_drawCanvas(t,e={w:600,top:20,left:20},n=[0,1],a,r){this._setScales(e,n,a,r);let i=t.node().getContext("2d");i.save(),i.translate(e.left,e.top+this.xScale.bandwidth()*Math.sqrt(2)/2),i.rotate(-.25*Math.PI),i.clearRect(-e.w,-e.w,2*e.w,2*e.w),this.filteredData.forEach(t=>{let e=this.xScale(t.x),n=this.yScale(t.y);void 0!==e&&void 0!==n&&(t.color=0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value),i.fillStyle=this.colorScale(t.value),i.fillRect(e,n,this.xScale.bandwidth(),this.yScale.bandwidth()))}),i.restore()}drawSvg(t,e,n=!0,a=!0,r=90,i=[0,1],o,c){if(n){this._setScales(e,i,o,c);let n=t.append("g").attr("clip-path","url(#clip)").selectAll(".half-map-cell").data(this.filteredData);n.enter().append("rect").attr("class","half-map-cell").attr("row",t=>"y"+this.yScale.domain().indexOf(t.y)).attr("column",t=>"x"+this.xScale.domain().indexOf(t.x)).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("transform","rotate(-45)").merge(n).style("fill",t=>0==t.value?"#fff":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value))}a&&(this._setLabelScale(e),t.selectAll().data(this.labelScale.domain()).enter().append("text").attr("class",(t,e)=>"half-map-label l"+e).attr("x",0).attr("y",0).attr("text-anchor","start").style("cursor","none").attr("transform",t=>`translate(${this.labelScale(t)+this.labelScale.step()/2}, -5) rotate(-${r})`).text(t=>t));let s=t.append("rect").attr("class","half-map-cursor").attr("x",0).attr("y",0).attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("stroke","#d2111b").style("stroke-width","1px").style("fill","none").style("display","none");t.on("mouseout",()=>{s.style("display","none"),this.tooltip.hide(),t.selectAll(".half-map-label").classed("highlighted",!1)}),dt(t.node().parentNode).style("cursor","none").style("position","absolute").on("mousemove",()=>{let e=gt(t.node()),n=e[0],r=e[1],i=.25*Math.PI,o=n*Math.cos(i)-r*Math.sin(i)+this.xScale.step()/2,c=n*Math.sin(i)+r*Math.cos(i)-this.yScale.step()/2;if(n<0||r<0||o<0||c<0)return this.tooltip.hide(),void s.style("display","none");let l=Math.floor(o/this.xScale.step()),f=Math.floor(c/this.yScale.step()),u=this.xScale.domain()[l],h=this.yScale.domain()[f],d=this.dataDict[u+h];void 0!==d?(s.attr("transform",`translate(${n},${r}) rotate(-45)`),s.style("display","block"),this.tooltip.show(`${u}<br/> ${h}<br/> Value: ${d.displayValue}`),a&&(t.selectAll(".half-map-label").classed("highlighted",!1),t.select(".l"+l).classed("highlighted",!0),t.select(".l"+f).classed("highlighted",!0))):(this.tooltip.hide(),s.style("display","none"))})}_unique(t){t.sort((t,e)=>t.x<e.x?-1:t.x>e.x?1:t.y<e.y?-1:t.y>e.y?1:0);let e={};return t.filter(t=>{let n=t.x+t.y,a=t.y+t.x;return!e.hasOwnProperty(n)&&!e.hasOwnProperty(a)&&(e[n]=!0,!0)})}_filter(t,e){return t.filter(t=>!(t.value<e))}_generateDataDict(t){let e={};return t.forEach(t=>{e[t.x+t.y]=t,e[t.y+t.x]=t}),e}_setScales(t={w:600,top:20,left:20},e=[0,1],n,a){(n||void 0===this.xScale)&&this._setXScale(t,n),(a||void 0===this.yScale)&&this._setYScale(t,a),void 0===this.colorScale&&this._setColorScale(e)}_setXScale(t={w:600},e){void 0===e&&(e=Ht().key(t=>t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.xScale=ee().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setYScale(t={w:600},e){void 0===e&&(e=Ht().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)),this.yScale=ee().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setLabelScale(t={w:600}){void 0===this.xScale&&this._setXScale();let e=this.xScale.domain();this.labelScale=ee().domain(e).range([0,t.w]).padding(.05)}_setColorScale(t){let e=this.useLog,n=void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t;this.colorScale=vo(n,this.colorScheme)}}var Xc={},Gc={};function qc(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function Wc(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var a in t)a in e||n.push(e[a]=a)})),n}function Zc(t,e){var n=t+"",a=n.length;return a<e?new Array(e-a+1).join(0)+n:n}function Kc(t){var e=t.getUTCHours(),n=t.getUTCMinutes(),a=t.getUTCSeconds(),r=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+Zc(-t,6):t>9999?"+"+Zc(t,6):Zc(t,4)}(t.getUTCFullYear())+"-"+Zc(t.getUTCMonth()+1,2)+"-"+Zc(t.getUTCDate(),2)+(r?"T"+Zc(e,2)+":"+Zc(n,2)+":"+Zc(a,2)+"."+Zc(r,3)+"Z":a?"T"+Zc(e,2)+":"+Zc(n,2)+":"+Zc(a,2)+"Z":n||e?"T"+Zc(e,2)+":"+Zc(n,2)+"Z":"")}function Jc(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function a(t,e){var a,r=[],i=t.length,o=0,c=0,s=i<=0,l=!1;function f(){if(s)return Gc;if(l)return l=!1,Xc;var e,a,r=o;if(34===t.charCodeAt(r)){for(;o++<i&&34!==t.charCodeAt(o)||34===t.charCodeAt(++o););return(e=o)>=i?s=!0:10===(a=t.charCodeAt(o++))?l=!0:13===a&&(l=!0,10===t.charCodeAt(o)&&++o),t.slice(r+1,e-1).replace(/""/g,'"')}for(;o<i;){if(10===(a=t.charCodeAt(e=o++)))l=!0;else if(13===a)l=!0,10===t.charCodeAt(o)&&++o;else if(a!==n)continue;return t.slice(r,e)}return s=!0,t.slice(r,i)}for(10===t.charCodeAt(i-1)&&--i,13===t.charCodeAt(i-1)&&--i;(a=f())!==Gc;){for(var u=[];a!==Xc&&a!==Gc;)u.push(a),a=f();e&&null==(u=e(u,c++))||r.push(u)}return r}function r(e,n){return e.map((function(e){return n.map((function(t){return o(e[t])})).join(t)}))}function i(e){return e.map(o).join(t)}function o(t){return null==t?"":t instanceof Date?Kc(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,i=a(t,(function(t,a){if(n)return n(t,a-1);r=t,n=e?function(t,e){var n=qc(t);return function(a,r){return e(n(a),r,t)}}(t,e):qc(t)}));return i.columns=r||[],i},parseRows:a,format:function(e,n){return null==n&&(n=Wc(e)),[n.map(o).join(t)].concat(r(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=Wc(t)),r(t,e).join("\n")},formatRows:function(t){return t.map(i).join("\n")},formatRow:i,formatValue:o}}Jc(","),Jc("\t"),new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();const Qc={heatmap:zt({x:50,y:10,scaleFactor:1e3}),dendroHeatmap:{rowTree:"(((TP53:0.17,SLK:0.17):1.18,NDRG4:1.34):1.33,ACTN3:2.67);",colTree:"(((Adipose Visceral Omentum:0.06,Adipose Subcutaneous:0.06):0.00,Bladder:0.06):0.16,Adrenal Gland:0.22);",heatmap:[{y:"SLK",value:35.505,x:"Adipose Subcutaneous",unit:"TPM"},{y:"SLK",value:29.28,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"SLK",value:17.405,x:"Adrenal Gland",unit:"TPM"},{y:"SLK",value:53.29,x:"Bladder",unit:"TPM"},{y:"NDRG4",value:12.035,x:"Adipose Subcutaneous",unit:"TPM"},{y:"NDRG4",value:6.531000000000001,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"NDRG4",value:134.8,x:"Adrenal Gland",unit:"TPM"},{y:"NDRG4",value:7.1160000000000005,x:"Bladder",unit:"TPM"},{y:"TP53",value:29.935,x:"Adipose Subcutaneous",unit:"TPM"},{y:"TP53",value:23.55,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"TP53",value:18.515,x:"Adrenal Gland",unit:"TPM"},{y:"TP53",value:40.51,x:"Bladder",unit:"TPM"},{y:"ACTN3",value:.33145,x:"Adipose Subcutaneous",unit:"TPM"},{y:"ACTN3",value:.3317,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"ACTN3",value:.100005,x:"Adrenal Gland",unit:"TPM"},{y:"ACTN3",value:.48100000000000004,x:"Bladder",unit:"TPM"}]},groupedViolinPlot:[{group:"Group 1",label:"Gene 1",values:Mt(0,2e3).map(It(2,1))},{group:"Group 1",label:"Gene 2",values:Mt(0,2e3).map(It(5,1))},{group:"Group 1",label:"Gene 3",values:Mt(0,2e3).map(It(10,1))},{group:"Group 2",label:"Gene 1",values:Mt(0,2e3).map(It(5,1))},{group:"Group 2",label:"Gene 2",values:Mt(0,2e3).map(It(3,1))},{group:"Group 2",label:"Gene 3",values:Mt(0,2e3).map(It(1,1))},{group:"Group 3",label:"Gene 1",values:Mt(0,2e3).map(It(2,1))},{group:"Group 3",label:"Gene 2",values:Mt(0,2e3).map(It(3,1))},{group:"Group 3",label:"Gene 3",values:Mt(0,2e3).map(It(5,1))}],transcriptTracks:{exons:{"ENST00000311595.9":[{chrom:"17",chromEnd:77071172,exonId:"ENSE00002713933.1",exonNumber:"1",chromStart:77071151,strand:"+"},{chrom:"17",chromEnd:77073579,exonId:"ENSE00003672628.1",exonNumber:"2",chromStart:77073512,strand:"+"},{chrom:"17",chromEnd:77073946,exonId:"ENSE00003475281.1",exonNumber:"3",chromStart:77073745,strand:"+"},{chrom:"17",chromEnd:77075719,exonId:"ENSE00001111713.1",exonNumber:"4",chromStart:77075571,strand:"+"},{chrom:"17",chromEnd:77076446,exonId:"ENSE00003651250.1",exonNumber:"5",chromStart:77076289,strand:"+"},{chrom:"17",chromEnd:77077155,exonId:"ENSE00003607773.1",exonNumber:"6",chromStart:77077007,strand:"+"},{chrom:"17",chromEnd:77078612,exonId:"ENSE00002720924.1",exonNumber:"7",chromStart:77077980,strand:"+"}]},transcripts:[{chromosome:"17",end:77078612,gencodeId:"ENSG00000167280.12",geneSymbol:"ENGASE",start:77071151,strand:"+",transcriptId:"ENST00000311595.9"}]},bubbleMap:zt({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),ldPlot:zt({x:2,y:2,scaleFactor:1})},ts={id:"gtexVizLdPlot",data:Qc.ldPlot,cutoff:0,width:1e3,marginLeft:100,marginRight:200,marginTop:20,marginBottom:100,colorScheme:"Greys",labelHeight:20,showLabels:!0,labelAngle:30,legendSpace:50,useLog:!1,logBase:void 0};function es(t=ts){let e={left:t.marginLeft,top:t.showLabels?t.marginTop+t.labelHeight:t.marginTop,right:t.marginRight,bottom:t.marginBottom},n=t.width-(t.marginLeft+t.marginRight),a=t.width-(t.marginTop+t.marginBottom);n=n>a?a:n;let r=new Oc(t.data,t.cutoff,t.useLog,t.logBase,t.colorScheme);r.addTooltip(t.id);let i=$t(t.id,t.width,t.width),o=jt(t.id,t.width,t.width,e,void 0,"absolute");r.draw(i,o,{w:n,top:e.top,left:e.left},[0,1],t.showLabels,t.labelAngle),r.drawColorLegend(o,{x:0,y:100},10,"Value")}const ns={id:"gtexTranscriptTracks",data:Qc.transcriptTracks,width:1200,height:80,marginLeft:100,marginRight:20,marginTop:0,marginBottom:20,labelPos:"left"};function as(t=ns){let e={top:t.marginTop,right:t.marginRight,bottom:t.marginBottom,left:t.marginLeft},n=t.width-(t.marginLeft+t.marginRight),a=t.height-(t.marginTop+t.marginBottom);Bt(t.id);let r=jt(t.id,t.width,t.height,e),i=(t.id,{x:0,y:0,w:n,h:a,labelOn:t.labelPos});new Hc(t.data.transcripts,t.data.exons,void 0,i).render(!1,r,t.labelPos)}const rs={id:"gtexVizBubblemap",data:Qc.bubbleMap,width:1200,height:400,marginTop:100,marginRight:100,marginBottom:30,marginLeft:30,labels:{column:{show:!0,height:100,angle:90,adjust:10,location:"bottom",textAlign:"left"},row:{show:!0,width:150,angle:0,adjust:0,location:"left",textAlign:"right"}},useLog:!1,logBase:10,colorScheme:"RdBu",colorScaleDomain:[-.75,.75],useCanvas:!1};function is(t=rs){let e={left:t.showLabels?t.marginLeft+t.rowLabelWidth:t.marginLeft,top:t.marginTop,right:t.marginRight,bottom:t.showLabels?t.marginBottom+t.columnLabelHeight:t.marginBottom},n=t.width-(t.labels.row.width+t.marginLeft+t.marginRight),a=t.height-(t.labels.column.height+t.marginTop+t.marginBottom);if(t.useCanvas){let r=new Fc(t.data,t.useLog,t.logBase,t.colorScheme);r.addTooltip(canvasId);let i=$t(t.id,t.width,t.height);r.drawCanvas(i,{w:n,h:a,top:e.top,left:e.left},t.colorScaleDomain,t.labels)}else{let r=new Fc(t.data,t.useLog,t.logBase,t.colorScheme);r.addTooltip(t.id);let i=jt(t.id,t.width,t.height,e);r.drawSvg(i,{w:n,h:a,top:0,left:0},t.colorScaleDomain,0,t.labels),r.drawColorLegend(i,{x:0,y:-40},3,"NES"),r.drawBubbleLegend(i,{x:500,y:-40,title:"-log10(p-value)"},5,"-log10(p-value)")}}const os={id:"gtexVizHeatmap",data:Qc.heatmap,width:1200,height:300,marginLeft:20,marginRight:40,marginTop:50,marginBottom:50,colorScheme:"YlGnBu",cornerRadius:2,columnLabelHeight:20,columnLabelAngle:60,columnLabelPosAdjust:10,rowLabelWidth:100,legendSpace:50,useLog:!0,logBase:10};function cs(t=os){let e={top:t.marginTop,right:t.marginRight,bottom:t.marginBottom,left:t.marginLeft},n=t.width-(t.marginLeft+t.marginRight+t.rowLabelWidth),a=t.height-(t.marginTop+t.marginBottom+t.columnLabelHeight);Bt(t.id);let r=jt(t.id,t.width,t.height,e),i=t.id+"Tooltip",o=new So(t.data,t.useLog,t.logBase,t.colorScheme,t.cornerRadius,i);o.draw(r,{w:n,h:a},t.columnLabelAngle,!1,t.columnLabelPosAdjust),o.drawColorLegend(r,{x:20,y:-20},10)}const ss={id:"gtexVizDendroHeatmap",data:Qc.dendroHeatmap,useLog:!0,logBase:10,width:600,height:300,marginLeft:20,marginRight:40,marginTop:50,marginBottom:50,rowTreePanelWidth:100,colTreePanelHeight:100,colorScheme:"Blues",cornerRadius:2,columnLabelHeight:200,columnLabelAngle:60,columnLabelPosAdjust:10,rowLabelWidth:200,legendSpace:50};function ls(t=ss){let e={top:t.marginTop,right:t.marginRight+t.rowLabelWidth,bottom:t.marginBottom+t.columnLabelHeight,left:t.marginLeft};Bt(t.id);t.width,t.marginLeft,t.marginRight,t.rowLabelWidth,t.height,t.marginTop,t.marginBottom,t.columnLabelHeight;let n=t.id+"Svg",a=t.id+"Tooltip",r=new Mo(t.width,t.rowTreePanelWidth,t.colTreePanelHeight,e),i=new Vo(t.data.colTree,t.data.rowTree,t.data.heatmap,t.colorScheme,t.cornerRadius,r,a,t.useLog,t.logBase),o=void 0!==t.data.colTree,c=void 0!==t.data.rowTree;i.render(t.id,n,o,c,"top",8)}const fs={id:"gtexGroupedViolinPlot",data:Qc.groupedViolinPlot,width:500,height:300,marginLeft:100,marginRight:20,marginTop:50,marginBottom:100,showDivider:!0,xPadding:.3,yLabel:"Random Value",showSubX:!0,showX:!0,xAngle:0,subXAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0};function us(t=fs){console.log(t.data);let e={top:t.marginTop,right:t.marginRight,bottom:t.marginBottom,left:t.marginLeft};Bt(t.id);let n=t.width-(t.marginLeft+t.marginRight),a=t.height-(t.marginTop+t.marginBottom),r=(t.id,t.id+"Tooltip"),i=jt(t.id,t.width,t.height,e);const o=new Rc(t.data);return o.render(i,n,a,t.xPadding,void 0,[],t.yLabel,t.showX,t.xAngle,t.showSubX,t.subXAngle,t.showWhisker,t.showDivider,t.showLegend,t.showSampleSize,t.sortSubX,t.showOutliers,t.numPoints),i.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1),o.createTooltip(r),i}var hs={demoData:Qc,ldPlot:es,transcriptTracks:as,bubblemap:is,heatmap:cs,dendroHeatmap:ls,groupedViolinPlot:us};t.GTExViz=hs,t.bubblemap=is,t.demoData=Qc,t.dendroHeatmap=ls,t.groupedViolinPlot=us,t.heatmap=cs,t.ldPlot=es,t.transcriptTracks=as,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
