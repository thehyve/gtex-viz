!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("jquery"),require("file-saver")):"function"==typeof define&&define.amd?define(["exports","jquery","file-saver"],t):t((e=e||self).EqtlViolinPlot={},e.$,e.saveAs)}(this,(function(e,t,n){"use strict";t=t&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t,n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n;var r={},a={};function i(e){return new Function("d","return {"+e.map((function(e,t){return JSON.stringify(e)+": d["+t+'] || ""'})).join(",")+"}")}function f(e){var t=Object.create(null),n=[];return e.forEach((function(e){for(var r in e)r in t||n.push(t[r]=r)})),n}function c(e,t){var n=e+"",r=n.length;return r<t?new Array(t-r+1).join(0)+n:n}function o(e){var t=e.getUTCHours(),n=e.getUTCMinutes(),r=e.getUTCSeconds(),a=e.getUTCMilliseconds();return isNaN(e)?"Invalid Date":function(e){return e<0?"-"+c(-e,6):e>9999?"+"+c(e,6):c(e,4)}(e.getUTCFullYear())+"-"+c(e.getUTCMonth()+1,2)+"-"+c(e.getUTCDate(),2)+(a?"T"+c(t,2)+":"+c(n,2)+":"+c(r,2)+"."+c(a,3)+"Z":r?"T"+c(t,2)+":"+c(n,2)+":"+c(r,2)+"Z":n||t?"T"+c(t,2)+":"+c(n,2)+"Z":"")}function u(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function c(e,t){var i,f=[],c=e.length,o=0,u=0,s=c<=0,l=!1;function d(){if(s)return a;if(l)return l=!1,r;var t,i,f=o;if(34===e.charCodeAt(f)){for(;o++<c&&34!==e.charCodeAt(o)||34===e.charCodeAt(++o););return(t=o)>=c?s=!0:10===(i=e.charCodeAt(o++))?l=!0:13===i&&(l=!0,10===e.charCodeAt(o)&&++o),e.slice(f+1,t-1).replace(/""/g,'"')}for(;o<c;){if(10===(i=e.charCodeAt(t=o++)))l=!0;else if(13===i)l=!0,10===e.charCodeAt(o)&&++o;else if(i!==n)continue;return e.slice(f,t)}return s=!0,e.slice(f,c)}for(10===e.charCodeAt(c-1)&&--c,13===e.charCodeAt(c-1)&&--c;(i=d())!==a;){for(var h=[];i!==r&&i!==a;)h.push(i),i=d();t&&null==(h=t(h,u++))||f.push(h)}return f}function u(t,n){return t.map((function(t){return n.map((function(e){return l(t[e])})).join(e)}))}function s(t){return t.map(l).join(e)}function l(e){return null==e?"":e instanceof Date?o(e):t.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,r,a=c(e,(function(e,a){if(n)return n(e,a-1);r=e,n=t?function(e,t){var n=i(e);return function(r,a){return t(n(r),a,e)}}(e,t):i(e)}));return a.columns=r||[],a},parseRows:c,format:function(t,n){return null==n&&(n=f(t)),[n.map(l).join(e)].concat(u(t,n)).join("\n")},formatBody:function(e,t){return null==t&&(t=f(e)),u(e,t).join("\n")},formatRows:function(e){return e.map(s).join("\n")},formatRow:s,formatValue:l}}u(","),u("\t"),new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function s(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);if(204!==e.status&&205!==e.status)return e.json()}var l="http://www.w3.org/1999/xhtml",d={svg:"http://www.w3.org/2000/svg",xhtml:l,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function h(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),d.hasOwnProperty(t)?{space:d[t],local:e}:e}function b(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===l&&t.documentElement.namespaceURI===l?t.createElement(e):t.createElementNS(n,e)}}function p(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function g(e){var t=h(e);return(t.local?p:b)(t)}function v(){}function m(e){return null==e?v:function(){return this.querySelector(e)}}function y(){return[]}function w(e){return null==e?y:function(){return this.querySelectorAll(e)}}function x(e){return function(){return this.matches(e)}}function _(e){return new Array(e.length)}function M(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}M.prototype={constructor:M,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};function T(e,t,n,r,a,i){for(var f,c=0,o=t.length,u=i.length;c<u;++c)(f=t[c])?(f.__data__=i[c],r[c]=f):n[c]=new M(e,i[c]);for(;c<o;++c)(f=t[c])&&(a[c]=f)}function A(e,t,n,r,a,i,f){var c,o,u,s={},l=t.length,d=i.length,h=new Array(l);for(c=0;c<l;++c)(o=t[c])&&(h[c]=u="$"+f.call(o,o.__data__,c,t),u in s?a[c]=o:s[u]=o);for(c=0;c<d;++c)(o=s[u="$"+f.call(e,i[c],c,i)])?(r[c]=o,o.__data__=i[c],s[u]=null):n[c]=new M(e,i[c]);for(c=0;c<l;++c)(o=t[c])&&s[h[c]]===o&&(a[c]=o)}function N(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function S(e){return function(){this.removeAttribute(e)}}function k(e){return function(){this.removeAttributeNS(e.space,e.local)}}function E(e,t){return function(){this.setAttribute(e,t)}}function C(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function D(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function I(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function P(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function U(e){return function(){this.style.removeProperty(e)}}function z(e,t,n){return function(){this.style.setProperty(e,t,n)}}function F(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function Y(e,t){return e.style.getPropertyValue(t)||P(e).getComputedStyle(e,null).getPropertyValue(t)}function V(e){return function(){delete this[e]}}function $(e,t){return function(){this[e]=t}}function L(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function q(e){return e.trim().split(/^|\s+/)}function G(e){return e.classList||new H(e)}function H(e){this._node=e,this._names=q(e.getAttribute("class")||"")}function j(e,t){for(var n=G(e),r=-1,a=t.length;++r<a;)n.add(t[r])}function O(e,t){for(var n=G(e),r=-1,a=t.length;++r<a;)n.remove(t[r])}function R(e){return function(){j(this,e)}}function X(e){return function(){O(this,e)}}function B(e,t){return function(){(t.apply(this,arguments)?j:O)(this,e)}}function Z(){this.textContent=""}function W(e){return function(){this.textContent=e}}function K(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function J(){this.innerHTML=""}function Q(e){return function(){this.innerHTML=e}}function ee(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function te(){this.nextSibling&&this.parentNode.appendChild(this)}function ne(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function re(){return null}function ae(){var e=this.parentNode;e&&e.removeChild(this)}function ie(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function fe(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}H.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var ce={},oe=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ce={mouseenter:"mouseover",mouseleave:"mouseout"}));function ue(e,t,n){return e=se(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function se(e,t,n){return function(r){var a=oe;oe=r;try{e.call(this,this.__data__,t,n)}finally{oe=a}}}function le(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function de(e){return function(){var t=this.__on;if(t){for(var n,r=0,a=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?t.length=a:delete this.__on}}}function he(e,t,n){var r=ce.hasOwnProperty(e.type)?ue:se;return function(a,i,f){var c,o=this.__on,u=r(t,i,f);if(o)for(var s=0,l=o.length;s<l;++s)if((c=o[s]).type===e.type&&c.name===e.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=u,c.capture=n),void(c.value=t);this.addEventListener(e.type,u,n),c={type:e.type,name:e.name,value:t,listener:u,capture:n},o?o.push(c):this.__on=[c]}}function be(e,t,n){var r=P(e),a=r.CustomEvent;"function"==typeof a?a=new a(t,n):(a=r.document.createEvent("Event"),n?(a.initEvent(t,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(t,!1,!1)),e.dispatchEvent(a)}function pe(e,t){return function(){return be(this,e,t)}}function ge(e,t){return function(){return be(this,e,t.apply(this,arguments))}}var ve=[null];function me(e,t){this._groups=e,this._parents=t}function ye(){return new me([[document.documentElement]],ve)}function we(e){return"string"==typeof e?new me([[document.querySelector(e)]],[document.documentElement]):new me([[e]],ve)}function xe(){for(var e,t=oe;e=t.sourceEvent;)t=e;return t}function _e(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var a=e.getBoundingClientRect();return[t.clientX-a.left-e.clientLeft,t.clientY-a.top-e.clientTop]}function Me(e){var t=xe();return t.changedTouches&&(t=t.changedTouches[0]),_e(e,t)}function Te(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}me.prototype=ye.prototype={constructor:me,select:function(e){"function"!=typeof e&&(e=m(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,f,c=t[a],o=c.length,u=r[a]=new Array(o),s=0;s<o;++s)(i=c[s])&&(f=e.call(i,i.__data__,s,c))&&("__data__"in i&&(f.__data__=i.__data__),u[s]=f);return new me(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=w(e));for(var t=this._groups,n=t.length,r=[],a=[],i=0;i<n;++i)for(var f,c=t[i],o=c.length,u=0;u<o;++u)(f=c[u])&&(r.push(e.call(f,f.__data__,u,c)),a.push(f));return new me(r,a)},filter:function(e){"function"!=typeof e&&(e=x(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,f=t[a],c=f.length,o=r[a]=[],u=0;u<c;++u)(i=f[u])&&e.call(i,i.__data__,u,f)&&o.push(i);return new me(r,this._parents)},data:function(e,t){if(!e)return h=new Array(this.size()),u=-1,this.each((function(e){h[++u]=e})),h;var n=t?A:T,r=this._parents,a=this._groups;"function"!=typeof e&&(e=function(e){return function(){return e}}(e));for(var i=a.length,f=new Array(i),c=new Array(i),o=new Array(i),u=0;u<i;++u){var s=r[u],l=a[u],d=l.length,h=e.call(s,s&&s.__data__,u,r),b=h.length,p=c[u]=new Array(b),g=f[u]=new Array(b);n(s,l,p,g,o[u]=new Array(d),h,t);for(var v,m,y=0,w=0;y<b;++y)if(v=p[y]){for(y>=w&&(w=y+1);!(m=g[w])&&++w<b;);v._next=m||null}}return(f=new me(f,r))._enter=c,f._exit=o,f},enter:function(){return new me(this._enter||this._groups.map(_),this._parents)},exit:function(){return new me(this._exit||this._groups.map(_),this._parents)},join:function(e,t,n){var r=this.enter(),a=this,i=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(a=t(a)),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,a=n.length,i=Math.min(r,a),f=new Array(r),c=0;c<i;++c)for(var o,u=t[c],s=n[c],l=u.length,d=f[c]=new Array(l),h=0;h<l;++h)(o=u[h]||s[h])&&(d[h]=o);for(;c<r;++c)f[c]=t[c];return new me(f,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,a=e[t],i=a.length-1,f=a[i];--i>=0;)(r=a[i])&&(f&&4^r.compareDocumentPosition(f)&&f.parentNode.insertBefore(r,f),f=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=N);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var f,c=n[i],o=c.length,u=a[i]=new Array(o),s=0;s<o;++s)(f=c[s])&&(u[s]=f);u.sort(t)}return new me(a,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each((function(){e[++t]=this})),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],a=0,i=r.length;a<i;++a){var f=r[a];if(f)return f}return null},size:function(){var e=0;return this.each((function(){++e})),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var a,i=t[n],f=0,c=i.length;f<c;++f)(a=i[f])&&e.call(a,a.__data__,f,i);return this},attr:function(e,t){var n=h(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?k:S:"function"==typeof t?n.local?I:D:n.local?C:E)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?U:"function"==typeof t?F:z)(e,t,null==n?"":n)):Y(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?V:"function"==typeof t?L:$)(e,t)):this.node()[e]},classed:function(e,t){var n=q(e+"");if(arguments.length<2){for(var r=G(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof t?B:t?R:X)(n,t))},text:function(e){return arguments.length?this.each(null==e?Z:("function"==typeof e?K:W)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?J:("function"==typeof e?ee:Q)(e)):this.node().innerHTML},raise:function(){return this.each(te)},lower:function(){return this.each(ne)},append:function(e){var t="function"==typeof e?e:g(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:g(e),r=null==t?re:"function"==typeof t?t:m(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ae)},clone:function(e){return this.select(e?fe:ie)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,a,i=le(e+""),f=i.length;if(!(arguments.length<2)){for(c=t?he:de,null==n&&(n=!1),r=0;r<f;++r)this.each(c(i[r],t,n));return this}var c=this.node().__on;if(c)for(var o,u=0,s=c.length;u<s;++u)for(r=0,o=c[u];r<f;++r)if((a=i[r]).type===o.type&&a.name===o.name)return o.value},dispatch:function(e,t){return this.each(("function"==typeof t?ge:pe)(e,t))}};var Ae,Ne,Se=(1===(Ae=Te).length&&(Ne=Ae,Ae=function(e,t){return Te(Ne(e),t)}),{left:function(e,t,n,r){for(null==n&&(n=0),null==r&&(r=e.length);n<r;){var a=n+r>>>1;Ae(e[a],t)<0?n=a+1:r=a}return n},right:function(e,t,n,r){for(null==n&&(n=0),null==r&&(r=e.length);n<r;){var a=n+r>>>1;Ae(e[a],t)>0?r=a:n=a+1}return n}}).right;function ke(e){return null===e?NaN:+e}function Ee(e,t){var n=function(e,t){var n,r,a=e.length,i=0,f=-1,c=0,o=0;if(null==t)for(;++f<a;)isNaN(n=ke(e[f]))||(o+=(r=n-c)*(n-(c+=r/++i)));else for(;++f<a;)isNaN(n=ke(t(e[f],f,e)))||(o+=(r=n-c)*(n-(c+=r/++i)));if(i>1)return o/(i-1)}(e,t);return n?Math.sqrt(n):n}function Ce(e,t){var n,r,a,i=e.length,f=-1;if(null==t){for(;++f<i;)if(null!=(n=e[f])&&n>=n)for(r=a=n;++f<i;)null!=(n=e[f])&&(r>n&&(r=n),a<n&&(a=n))}else for(;++f<i;)if(null!=(n=t(e[f],f,e))&&n>=n)for(r=a=n;++f<i;)null!=(n=t(e[f],f,e))&&(r>n&&(r=n),a<n&&(a=n));return[r,a]}function De(e,t,n){e=+e,t=+t,n=(a=arguments.length)<2?(t=e,e=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((t-e)/n)),i=new Array(a);++r<a;)i[r]=e+r*n;return i}var Ie=Math.sqrt(50),Pe=Math.sqrt(10),Ue=Math.sqrt(2);function ze(e,t,n){var r=(t-e)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=Ie?10:i>=Pe?5:i>=Ue?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=Ie?10:i>=Pe?5:i>=Ue?2:1)}function Fe(e,t,n){if(null==n&&(n=ke),r=e.length){if((t=+t)<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,a=(r-1)*t,i=Math.floor(a),f=+n(e[i],i,e);return f+(+n(e[i+1],i+1,e)-f)*(a-i)}}function Ye(e,t){var n,r,a=e.length,i=-1;if(null==t){for(;++i<a;)if(null!=(n=e[i])&&n>=n)for(r=n;++i<a;)null!=(n=e[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=n;++i<a;)null!=(n=t(e[i],i,e))&&n>r&&(r=n);return r}function Ve(e,t){var n,r=e.length,a=r,i=-1,f=0;if(null==t)for(;++i<r;)isNaN(n=ke(e[i]))?--a:f+=n;else for(;++i<r;)isNaN(n=ke(t(e[i],i,e)))?--a:f+=n;if(a)return f/a}function $e(e,t){var n,r=e.length,a=-1,i=[];if(null==t)for(;++a<r;)isNaN(n=ke(e[a]))||i.push(n);else for(;++a<r;)isNaN(n=ke(t(e[a],a,e)))||i.push(n);return Fe(i.sort(Te),.5)}function Le(e,t){var n,r,a=e.length,i=-1;if(null==t){for(;++i<a;)if(null!=(n=e[i])&&n>=n)for(r=n;++i<a;)null!=(n=e[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=n;++i<a;)null!=(n=t(e[i],i,e))&&r>n&&(r=n);return r}function qe(e){if(0==t("#"+e).length){let t=`Input Error: DOM ID ${e} is not found.`;throw console.warn(t),t}}function Ge(e={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let t=De(1,e.x+1),n=De(1,e.y+1),r=[];return t.forEach(t=>{t="x"+t.toString(),n.forEach(n=>{n="y"+n.toString();let a=Math.random()*e.scaleFactor;a=e.diverging&&Math.random()<.5?-a:a,r.push({x:t,y:n,value:a,displayValue:parseFloat(a.toExponential()).toPrecision(3),r:e.bubble?30*Math.random():void 0})})}),r}var He=function e(t){function n(e,n){var r,a;return e=null==e?0:+e,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*t()-1,i=2*t()-1,a=r*r+i*i}while(!a||a>1);return e+n*i*Math.sqrt(-2*Math.log(a)/a)}}return n.source=e,n}((function(){return Math.random()}));function je(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}function Oe(){}function Re(e,t){var n=new Oe;if(e instanceof Oe)e.each((function(e,t){n.set(t,e)}));else if(Array.isArray(e)){var r,a=-1,i=e.length;if(null==t)for(;++a<i;)n.set(a,e[a]);else for(;++a<i;)n.set(t(r=e[a],a,e),r)}else if(e)for(var f in e)n.set(f,e[f]);return n}function Xe(){var e,t,n,r=[],a=[];function i(n,a,f,c){if(a>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var o,u,s,l=-1,d=n.length,h=r[a++],b=Re(),p=f();++l<d;)(s=b.get(o=h(u=n[l])+""))?s.push(u):b.set(o,[u]);return b.each((function(e,t){c(p,t,i(e,a,f,c))})),p}return n={object:function(e){return i(e,0,Be,Ze)},map:function(e){return i(e,0,We,Ke)},entries:function(e){return function e(n,i){if(++i>r.length)return n;var f,c=a[i-1];return null!=t&&i>=r.length?f=n.entries():(f=[],n.each((function(t,n){f.push({key:n,values:e(t,i)})}))),null!=c?f.sort((function(e,t){return c(e.key,t.key)})):f}(i(e,0,We,Ke),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return a[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}}function Be(){return{}}function Ze(e,t,n){e[t]=n}function We(){return Re()}function Ke(e,t,n){e.set(t,n)}function Je(){}Oe.prototype=Re.prototype={constructor:Oe,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var Qe=Re.prototype;Je.prototype=function(e,t){var n=new Je;if(e instanceof Je)e.each((function(e){n.add(e)}));else if(e){var r=-1,a=e.length;if(null==t)for(;++r<a;)n.add(e[r]);else for(;++r<a;)n.add(t(e[r],r,e))}return n}.prototype={constructor:Je,has:Qe.has,add:function(e){return this["$"+(e+="")]=e,this},remove:Qe.remove,clear:Qe.clear,values:Qe.keys,size:Qe.size,empty:Qe.empty,each:Qe.each};var et=Array.prototype,tt=et.map,nt=et.slice,rt={name:"implicit"};function at(){var e=Re(),t=[],n=[],r=rt;function a(a){var i=a+"",f=e.get(i);if(!f){if(r!==rt)return r;e.set(i,f=t.push(a))}return n[(f-1)%n.length]}return a.domain=function(n){if(!arguments.length)return t.slice();t=[],e=Re();for(var r,i,f=-1,c=n.length;++f<c;)e.has(i=(r=n[f])+"")||e.set(i,t.push(r));return a},a.range=function(e){return arguments.length?(n=nt.call(e),a):n.slice()},a.unknown=function(e){return arguments.length?(r=e,a):r},a.copy=function(){return at(t,n).unknown(r)},je.apply(a,arguments),a}function it(){var e,t,n=at().unknown(void 0),r=n.domain,a=n.range,i=[0,1],f=!1,c=0,o=0,u=.5;function s(){var n=r().length,s=i[1]<i[0],l=i[s-0],d=i[1-s];e=(d-l)/Math.max(1,n-c+2*o),f&&(e=Math.floor(e)),l+=(d-l-e*(n-c))*u,t=e*(1-c),f&&(l=Math.round(l),t=Math.round(t));var h=De(n).map((function(t){return l+e*t}));return a(s?h.reverse():h)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),s()):r()},n.range=function(e){return arguments.length?(i=[+e[0],+e[1]],s()):i.slice()},n.rangeRound=function(e){return i=[+e[0],+e[1]],f=!0,s()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(f=!!e,s()):f},n.padding=function(e){return arguments.length?(c=Math.min(1,o=+e),s()):c},n.paddingInner=function(e){return arguments.length?(c=Math.min(1,e),s()):c},n.paddingOuter=function(e){return arguments.length?(o=+e,s()):o},n.align=function(e){return arguments.length?(u=Math.max(0,Math.min(1,e)),s()):u},n.copy=function(){return it(r(),i).round(f).paddingInner(c).paddingOuter(o).align(u)},je.apply(s(),arguments)}function ft(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function ct(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function ot(){}var ut="\\s*([+-]?\\d+)\\s*",st="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",lt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",dt=/^#([0-9a-f]{3,8})$/,ht=new RegExp("^rgb\\("+[ut,ut,ut]+"\\)$"),bt=new RegExp("^rgb\\("+[lt,lt,lt]+"\\)$"),pt=new RegExp("^rgba\\("+[ut,ut,ut,st]+"\\)$"),gt=new RegExp("^rgba\\("+[lt,lt,lt,st]+"\\)$"),vt=new RegExp("^hsl\\("+[st,lt,lt]+"\\)$"),mt=new RegExp("^hsla\\("+[st,lt,lt,st]+"\\)$"),yt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function wt(){return this.rgb().formatHex()}function xt(){return this.rgb().formatRgb()}function _t(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=dt.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?Mt(t):3===n?new St(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?Tt(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?Tt(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=ht.exec(e))?new St(t[1],t[2],t[3],1):(t=bt.exec(e))?new St(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=pt.exec(e))?Tt(t[1],t[2],t[3],t[4]):(t=gt.exec(e))?Tt(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=vt.exec(e))?Dt(t[1],t[2]/100,t[3]/100,1):(t=mt.exec(e))?Dt(t[1],t[2]/100,t[3]/100,t[4]):yt.hasOwnProperty(e)?Mt(yt[e]):"transparent"===e?new St(NaN,NaN,NaN,0):null}function Mt(e){return new St(e>>16&255,e>>8&255,255&e,1)}function Tt(e,t,n,r){return r<=0&&(e=t=n=NaN),new St(e,t,n,r)}function At(e){return e instanceof ot||(e=_t(e)),e?new St((e=e.rgb()).r,e.g,e.b,e.opacity):new St}function Nt(e,t,n,r){return 1===arguments.length?At(e):new St(e,t,n,null==r?1:r)}function St(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function kt(){return"#"+Ct(this.r)+Ct(this.g)+Ct(this.b)}function Et(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function Ct(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function Dt(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Pt(e,t,n,r)}function It(e){if(e instanceof Pt)return new Pt(e.h,e.s,e.l,e.opacity);if(e instanceof ot||(e=_t(e)),!e)return new Pt;if(e instanceof Pt)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,a=Math.min(t,n,r),i=Math.max(t,n,r),f=NaN,c=i-a,o=(i+a)/2;return c?(f=t===i?(n-r)/c+6*(n<r):n===i?(r-t)/c+2:(t-n)/c+4,c/=o<.5?i+a:2-i-a,f*=60):c=o>0&&o<1?0:f,new Pt(f,c,o,e.opacity)}function Pt(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function Ut(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}ft(ot,_t,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:wt,formatHex:wt,formatHsl:function(){return It(this).formatHsl()},formatRgb:xt,toString:xt}),ft(St,Nt,ct(ot,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new St(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new St(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:kt,formatHex:kt,formatRgb:Et,toString:Et})),ft(Pt,(function(e,t,n,r){return 1===arguments.length?It(e):new Pt(e,t,n,null==r?1:r)}),ct(ot,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Pt(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Pt(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,a=2*n-r;return new St(Ut(e>=240?e-240:e+120,a,r),Ut(e,a,r),Ut(e<120?e+240:e-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}));var zt=Math.PI/180,Ft=180/Math.PI,Yt=6/29,Vt=3*Yt*Yt;function $t(e){if(e instanceof Lt)return new Lt(e.l,e.a,e.b,e.opacity);if(e instanceof Rt)return Xt(e);e instanceof St||(e=At(e));var t,n,r=jt(e.r),a=jt(e.g),i=jt(e.b),f=qt((.2225045*r+.7168786*a+.0606169*i)/1);return r===a&&a===i?t=n=f:(t=qt((.4360747*r+.3850649*a+.1430804*i)/.96422),n=qt((.0139322*r+.0971045*a+.7141733*i)/.82521)),new Lt(116*f-16,500*(t-f),200*(f-n),e.opacity)}function Lt(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function qt(e){return e>.008856451679035631?Math.pow(e,1/3):e/Vt+4/29}function Gt(e){return e>Yt?e*e*e:Vt*(e-4/29)}function Ht(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function jt(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function Ot(e){if(e instanceof Rt)return new Rt(e.h,e.c,e.l,e.opacity);if(e instanceof Lt||(e=$t(e)),0===e.a&&0===e.b)return new Rt(NaN,0<e.l&&e.l<100?0:NaN,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*Ft;return new Rt(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function Rt(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}function Xt(e){if(isNaN(e.h))return new Lt(e.l,0,0,e.opacity);var t=e.h*zt;return new Lt(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}ft(Lt,(function(e,t,n,r){return 1===arguments.length?$t(e):new Lt(e,t,n,null==r?1:r)}),ct(ot,{brighter:function(e){return new Lt(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new Lt(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new St(Ht(3.1338561*(t=.96422*Gt(t))-1.6168667*(e=1*Gt(e))-.4906146*(n=.82521*Gt(n))),Ht(-.9787684*t+1.9161415*e+.033454*n),Ht(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),ft(Rt,(function(e,t,n,r){return 1===arguments.length?Ot(e):new Rt(e,t,n,null==r?1:r)}),ct(ot,{brighter:function(e){return new Rt(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new Rt(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return Xt(this).rgb()}}));var Bt=-.14861,Zt=1.78277,Wt=-.29227,Kt=-.90649,Jt=1.97294,Qt=Jt*Kt,en=Jt*Zt,tn=Zt*Wt-Kt*Bt;function nn(e){if(e instanceof an)return new an(e.h,e.s,e.l,e.opacity);e instanceof St||(e=At(e));var t=e.r/255,n=e.g/255,r=e.b/255,a=(tn*r+Qt*t-en*n)/(tn+Qt-en),i=r-a,f=(Jt*(n-a)-Wt*i)/Kt,c=Math.sqrt(f*f+i*i)/(Jt*a*(1-a)),o=c?Math.atan2(f,i)*Ft-120:NaN;return new an(o<0?o+360:o,c,a,e.opacity)}function rn(e,t,n,r){return 1===arguments.length?nn(e):new an(e,t,n,null==r?1:r)}function an(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function fn(e){return function(){return e}}function cn(e,t){return function(n){return e+n*t}}function on(e){return 1==(e=+e)?un:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):fn(isNaN(t)?n:t)}}function un(e,t){var n=t-e;return n?cn(e,n):fn(isNaN(e)?t:e)}ft(an,rn,ct(ot,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new an(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new an(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*zt,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),a=Math.sin(e);return new St(255*(t+n*(Bt*r+Zt*a)),255*(t+n*(Wt*r+Kt*a)),255*(t+n*(Jt*r)),this.opacity)}}));var sn=function e(t){var n=on(t);function r(e,t){var r=n((e=Nt(e)).r,(t=Nt(t)).r),a=n(e.g,t.g),i=n(e.b,t.b),f=un(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=a(t),e.b=i(t),e.opacity=f(t),e+""}}return r.gamma=e,r}(1);var ln,dn=(ln=function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),a=e[r],i=e[r+1],f=r>0?e[r-1]:2*a-i,c=r<t-1?e[r+2]:2*i-a;return function(e,t,n,r,a){var i=e*e,f=i*e;return((1-3*e+3*i-f)*t+(4-6*i+3*f)*n+(1+3*e+3*i-3*f)*r+f*a)/6}((n-r/t)*t,f,a,i,c)}},function(e){var t,n,r=e.length,a=new Array(r),i=new Array(r),f=new Array(r);for(t=0;t<r;++t)n=Nt(e[t]),a[t]=n.r||0,i[t]=n.g||0,f[t]=n.b||0;return a=ln(a),i=ln(i),f=ln(f),n.opacity=1,function(e){return n.r=a(e),n.g=i(e),n.b=f(e),n+""}});function hn(e,t){t||(t=[]);var n,r=e?Math.min(t.length,e.length):0,a=t.slice();return function(i){for(n=0;n<r;++n)a[n]=e[n]*(1-i)+t[n]*i;return a}}function bn(e,t){var n,r=t?t.length:0,a=e?Math.min(r,e.length):0,i=new Array(a),f=new Array(r);for(n=0;n<a;++n)i[n]=xn(e[n],t[n]);for(;n<r;++n)f[n]=t[n];return function(e){for(n=0;n<a;++n)f[n]=i[n](e);return f}}function pn(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}}function gn(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}function vn(e,t){var n,r={},a={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=xn(e[n],t[n]):a[n]=t[n];return function(e){for(n in r)a[n]=r[n](e);return a}}var mn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,yn=new RegExp(mn.source,"g");function wn(e,t){var n,r,a,i=mn.lastIndex=yn.lastIndex=0,f=-1,c=[],o=[];for(e+="",t+="";(n=mn.exec(e))&&(r=yn.exec(t));)(a=r.index)>i&&(a=t.slice(i,a),c[f]?c[f]+=a:c[++f]=a),(n=n[0])===(r=r[0])?c[f]?c[f]+=r:c[++f]=r:(c[++f]=null,o.push({i:f,x:gn(n,r)})),i=yn.lastIndex;return i<t.length&&(a=t.slice(i),c[f]?c[f]+=a:c[++f]=a),c.length<2?o[0]?function(e){return function(t){return e(t)+""}}(o[0].x):function(e){return function(){return e}}(t):(t=o.length,function(e){for(var n,r=0;r<t;++r)c[(n=o[r]).i]=n.x(e);return c.join("")})}function xn(e,t){var n,r=typeof t;return null==t||"boolean"===r?fn(t):("number"===r?gn:"string"===r?(n=_t(t))?(t=n,sn):wn:t instanceof _t?sn:t instanceof Date?pn:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}(t)?hn:Array.isArray(t)?bn:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?vn:gn)(e,t)}function _n(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}}var Mn,Tn,An,Nn,Sn=180/Math.PI,kn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function En(e,t,n,r,a,i){var f,c,o;return(f=Math.sqrt(e*e+t*t))&&(e/=f,t/=f),(o=e*n+t*r)&&(n-=e*o,r-=t*o),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,o/=c),e*r<t*n&&(e=-e,t=-t,o=-o,f=-f),{translateX:a,translateY:i,rotate:Math.atan2(t,e)*Sn,skewX:Math.atan(o)*Sn,scaleX:f,scaleY:c}}function Cn(e,t,n,r){function a(e){return e.length?e.pop()+" ":""}return function(i,f){var c=[],o=[];return i=e(i),f=e(f),function(e,r,a,i,f,c){if(e!==a||r!==i){var o=f.push("translate(",null,t,null,n);c.push({i:o-4,x:gn(e,a)},{i:o-2,x:gn(r,i)})}else(a||i)&&f.push("translate("+a+t+i+n)}(i.translateX,i.translateY,f.translateX,f.translateY,c,o),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:gn(e,t)})):t&&n.push(a(n)+"rotate("+t+r)}(i.rotate,f.rotate,c,o),function(e,t,n,i){e!==t?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:gn(e,t)}):t&&n.push(a(n)+"skewX("+t+r)}(i.skewX,f.skewX,c,o),function(e,t,n,r,i,f){if(e!==n||t!==r){var c=i.push(a(i)+"scale(",null,",",null,")");f.push({i:c-4,x:gn(e,n)},{i:c-2,x:gn(t,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,f.scaleX,f.scaleY,c,o),i=f=null,function(e){for(var t,n=-1,r=o.length;++n<r;)c[(t=o[n]).i]=t.x(e);return c.join("")}}}var Dn=Cn((function(e){return"none"===e?kn:(Mn||(Mn=document.createElement("DIV"),Tn=document.documentElement,An=document.defaultView),Mn.style.transform=e,e=An.getComputedStyle(Tn.appendChild(Mn),null).getPropertyValue("transform"),Tn.removeChild(Mn),En(+(e=e.slice(7,-1).split(","))[0],+e[1],+e[2],+e[3],+e[4],+e[5]))}),"px, ","px)","deg)"),In=Cn((function(e){return null==e?kn:(Nn||(Nn=document.createElementNS("http://www.w3.org/2000/svg","g")),Nn.setAttribute("transform",e),(e=Nn.transform.baseVal.consolidate())?En((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):kn)}),", ",")",")");function Pn(e){return function t(n){function r(t,r){var a=e((t=rn(t)).h,(r=rn(r)).h),i=un(t.s,r.s),f=un(t.l,r.l),c=un(t.opacity,r.opacity);return function(e){return t.h=a(e),t.s=i(e),t.l=f(Math.pow(e,n)),t.opacity=c(e),t+""}}return n=+n,r.gamma=t,r}(1)}Pn((function(e,t){var n=t-e;return n?cn(e,n>180||n<-180?n-360*Math.round(n/360):n):fn(isNaN(e)?t:e)}));var Un=Pn(un);function zn(e){return+e}var Fn=[0,1];function Yn(e){return e}function Vn(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:function(e){return function(){return e}}(isNaN(t)?NaN:.5)}function $n(e){var t,n=e[0],r=e[e.length-1];return n>r&&(t=n,n=r,r=t),function(e){return Math.max(n,Math.min(r,e))}}function Ln(e,t,n){var r=e[0],a=e[1],i=t[0],f=t[1];return a<r?(r=Vn(a,r),i=n(f,i)):(r=Vn(r,a),i=n(i,f)),function(e){return i(r(e))}}function qn(e,t,n){var r=Math.min(e.length,t.length)-1,a=new Array(r),i=new Array(r),f=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++f<r;)a[f]=Vn(e[f],e[f+1]),i[f]=n(t[f],t[f+1]);return function(t){var n=Se(e,t,1,r)-1;return i[n](a[n](t))}}function Gn(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function Hn(e,t){return function(){var e,t,n,r,a,i,f=Fn,c=Fn,o=xn,u=Yn;function s(){return r=Math.min(f.length,c.length)>2?qn:Ln,a=i=null,l}function l(t){return isNaN(t=+t)?n:(a||(a=r(f.map(e),c,o)))(e(u(t)))}return l.invert=function(n){return u(t((i||(i=r(c,f.map(e),gn)))(n)))},l.domain=function(e){return arguments.length?(f=tt.call(e,zn),u===Yn||(u=$n(f)),s()):f.slice()},l.range=function(e){return arguments.length?(c=nt.call(e),s()):c.slice()},l.rangeRound=function(e){return c=nt.call(e),o=_n,s()},l.clamp=function(e){return arguments.length?(u=e?$n(f):Yn,l):u!==Yn},l.interpolate=function(e){return arguments.length?(o=e,s()):o},l.unknown=function(e){return arguments.length?(n=e,l):n},function(n,r){return e=n,t=r,s()}}()(e,t)}function jn(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]}function On(e){return(e=jn(Math.abs(e)))?e[1]:NaN}var Rn,Xn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Bn(e){if(!(t=Xn.exec(e)))throw new Error("invalid format: "+e);var t;return new Zn({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function Zn(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}function Wn(e,t){var n=jn(e,t);if(!n)return e+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}Bn.prototype=Zn.prototype,Zn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Kn={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return Wn(100*e,t)},r:Wn,s:function(e,t){var n=jn(e,t);if(!n)return e+"";var r=n[0],a=n[1],i=a-(Rn=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,f=r.length;return i===f?r:i>f?r+new Array(i-f+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+jn(e,Math.max(0,t+i-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}};function Jn(e){return e}var Qn,er,tr,nr=Array.prototype.map,rr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function ar(e){var t,n,r=void 0===e.grouping||void 0===e.thousands?Jn:(t=nr.call(e.grouping,Number),n=e.thousands+"",function(e,r){for(var a=e.length,i=[],f=0,c=t[0],o=0;a>0&&c>0&&(o+c+1>r&&(c=Math.max(1,r-o)),i.push(e.substring(a-=c,a+c)),!((o+=c+1)>r));)c=t[f=(f+1)%t.length];return i.reverse().join(n)}),a=void 0===e.currency?"":e.currency[0]+"",i=void 0===e.currency?"":e.currency[1]+"",f=void 0===e.decimal?".":e.decimal+"",c=void 0===e.numerals?Jn:function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}(nr.call(e.numerals,String)),o=void 0===e.percent?"%":e.percent+"",u=void 0===e.minus?"-":e.minus+"",s=void 0===e.nan?"NaN":e.nan+"";function l(e){var t=(e=Bn(e)).fill,n=e.align,l=e.sign,d=e.symbol,h=e.zero,b=e.width,p=e.comma,g=e.precision,v=e.trim,m=e.type;"n"===m?(p=!0,m="g"):Kn[m]||(void 0===g&&(g=12),v=!0,m="g"),(h||"0"===t&&"="===n)&&(h=!0,t="0",n="=");var y="$"===d?a:"#"===d&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===d?i:/[%p]/.test(m)?o:"",x=Kn[m],_=/[defgprs%]/.test(m);function M(e){var a,i,o,d=y,M=w;if("c"===m)M=x(e)+M,e="";else{var T=(e=+e)<0||1/e<0;if(e=isNaN(e)?s:x(Math.abs(e),g),v&&(e=function(e){e:for(var t,n=e.length,r=1,a=-1;r<n;++r)switch(e[r]){case".":a=t=r;break;case"0":0===a&&(a=r),t=r;break;default:if(!+e[r])break e;a>0&&(a=0)}return a>0?e.slice(0,a)+e.slice(t+1):e}(e)),T&&0==+e&&"+"!==l&&(T=!1),d=(T?"("===l?l:u:"-"===l||"("===l?"":l)+d,M=("s"===m?rr[8+Rn/3]:"")+M+(T&&"("===l?")":""),_)for(a=-1,i=e.length;++a<i;)if(48>(o=e.charCodeAt(a))||o>57){M=(46===o?f+e.slice(a+1):e.slice(a))+M,e=e.slice(0,a);break}}p&&!h&&(e=r(e,1/0));var A=d.length+e.length+M.length,N=A<b?new Array(b-A+1).join(t):"";switch(p&&h&&(e=r(N+e,N.length?b-M.length:1/0),N=""),n){case"<":e=d+e+M+N;break;case"=":e=d+N+e+M;break;case"^":e=N.slice(0,A=N.length>>1)+d+e+M+N.slice(A);break;default:e=N+d+e+M}return c(e)}return g=void 0===g?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),M.toString=function(){return e+""},M}return{format:l,formatPrefix:function(e,t){var n=l(((e=Bn(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(On(t)/3))),a=Math.pow(10,-r),i=rr[8+r/3];return function(e){return n(a*e)+i}}}}function ir(e,t,n,r){var a,i=function(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=Ie?a*=10:i>=Pe?a*=5:i>=Ue&&(a*=2),t<e?-a:a}(e,t,n);switch((r=Bn(null==r?",f":r)).type){case"s":var f=Math.max(Math.abs(e),Math.abs(t));return null!=r.precision||isNaN(a=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(On(t)/3)))-On(Math.abs(e)))}(i,f))||(r.precision=a),tr(r,f);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,On(t)-On(e))+1}(i,Math.max(Math.abs(e),Math.abs(t))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=function(e){return Math.max(0,-On(Math.abs(e)))}(i))||(r.precision=a-2*("%"===r.type))}return er(r)}function fr(e){var t=e.domain;return e.ticks=function(e){var n=t();return function(e,t,n){var r,a,i,f,c=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((r=t<e)&&(a=e,e=t,t=a),0===(f=ze(e,t,n))||!isFinite(f))return[];if(f>0)for(e=Math.ceil(e/f),t=Math.floor(t/f),i=new Array(a=Math.ceil(t-e+1));++c<a;)i[c]=(e+c)*f;else for(e=Math.floor(e*f),t=Math.ceil(t*f),i=new Array(a=Math.ceil(e-t+1));++c<a;)i[c]=(e-c)/f;return r&&i.reverse(),i}(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return ir(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var r,a=t(),i=0,f=a.length-1,c=a[i],o=a[f];return o<c&&(r=c,c=o,o=r,r=i,i=f,f=r),(r=ze(c,o,n))>0?r=ze(c=Math.floor(c/r)*r,o=Math.ceil(o/r)*r,n):r<0&&(r=ze(c=Math.ceil(c*r)/r,o=Math.floor(o*r)/r,n)),r>0?(a[i]=Math.floor(c/r)*r,a[f]=Math.ceil(o/r)*r,t(a)):r<0&&(a[i]=Math.ceil(c*r)/r,a[f]=Math.floor(o*r)/r,t(a)),e},e}function cr(){var e=Hn(Yn,Yn);return e.copy=function(){return Gn(e,cr())},je.apply(e,arguments),fr(e)}Qn=ar({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),er=Qn.format,tr=Qn.formatPrefix;var or=new Date,ur=new Date;function sr(e,t,n,r){function a(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return a.floor=function(t){return e(t=new Date(+t)),t},a.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},a.round=function(e){var t=a(e),n=a.ceil(e);return e-t<n-e?t:n},a.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},a.range=function(n,r,i){var f,c=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return c;do{c.push(f=new Date(+n)),t(n,i),e(n)}while(f<n&&n<r);return c},a.filter=function(n){return sr((function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),(function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););}))},n&&(a.count=function(t,r){return or.setTime(+t),ur.setTime(+r),e(or),e(ur),Math.floor(n(or,ur))},a.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?a.filter(r?function(t){return r(t)%e==0}:function(t){return a.count(0,t)%e==0}):a:null}),a}var lr=sr((function(){}),(function(e,t){e.setTime(+e+t)}),(function(e,t){return t-e}));lr.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?sr((function(t){t.setTime(Math.floor(t/e)*e)}),(function(t,n){t.setTime(+t+n*e)}),(function(t,n){return(n-t)/e})):lr:null};sr((function(e){e.setTime(e-e.getMilliseconds())}),(function(e,t){e.setTime(+e+1e3*t)}),(function(e,t){return(t-e)/1e3}),(function(e){return e.getUTCSeconds()})),sr((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds())}),(function(e,t){e.setTime(+e+6e4*t)}),(function(e,t){return(t-e)/6e4}),(function(e){return e.getMinutes()})),sr((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds()-6e4*e.getMinutes())}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getHours()}));var dr=sr((function(e){e.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+t)}),(function(e,t){return(t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5}),(function(e){return e.getDate()-1}));function hr(e){return sr((function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+7*t)}),(function(e,t){return(t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/6048e5}))}var br=hr(0),pr=hr(1),gr=(hr(2),hr(3),hr(4)),vr=(hr(5),hr(6),sr((function(e){e.setDate(1),e.setHours(0,0,0,0)}),(function(e,t){e.setMonth(e.getMonth()+t)}),(function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())}),(function(e){return e.getMonth()})),sr((function(e){e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,t){e.setFullYear(e.getFullYear()+t)}),(function(e,t){return t.getFullYear()-e.getFullYear()}),(function(e){return e.getFullYear()})));vr.every=function(e){return isFinite(e=Math.floor(e))&&e>0?sr((function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n*e)})):null};sr((function(e){e.setUTCSeconds(0,0)}),(function(e,t){e.setTime(+e+6e4*t)}),(function(e,t){return(t-e)/6e4}),(function(e){return e.getUTCMinutes()})),sr((function(e){e.setUTCMinutes(0,0,0)}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getUTCHours()}));var mr=sr((function(e){e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+t)}),(function(e,t){return(t-e)/864e5}),(function(e){return e.getUTCDate()-1}));function yr(e){return sr((function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+7*t)}),(function(e,t){return(t-e)/6048e5}))}var wr=yr(0),xr=yr(1),_r=(yr(2),yr(3),yr(4)),Mr=(yr(5),yr(6),sr((function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCMonth(e.getUTCMonth()+t)}),(function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())}),(function(e){return e.getUTCMonth()})),sr((function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)}),(function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()}),(function(e){return e.getUTCFullYear()})));function Tr(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function Ar(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function Nr(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}Mr.every=function(e){return isFinite(e=Math.floor(e))&&e>0?sr((function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null};var Sr,kr,Er,Cr={"-":"",_:" ",0:"0"},Dr=/^\s*\d+/,Ir=/^%/,Pr=/[\\^$*+?|[\]().{}]/g;function Ur(e,t,n){var r=e<0?"-":"",a=(r?-e:e)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(t)+a:a)}function zr(e){return e.replace(Pr,"\\$&")}function Fr(e){return new RegExp("^(?:"+e.map(zr).join("|")+")","i")}function Yr(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function Vr(e,t,n){var r=Dr.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function $r(e,t,n){var r=Dr.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function Lr(e,t,n){var r=Dr.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function qr(e,t,n){var r=Dr.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function Gr(e,t,n){var r=Dr.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function Hr(e,t,n){var r=Dr.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function jr(e,t,n){var r=Dr.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Or(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Rr(e,t,n){var r=Dr.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function Xr(e,t,n){var r=Dr.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function Br(e,t,n){var r=Dr.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function Zr(e,t,n){var r=Dr.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function Wr(e,t,n){var r=Dr.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function Kr(e,t,n){var r=Dr.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function Jr(e,t,n){var r=Dr.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function Qr(e,t,n){var r=Dr.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function ea(e,t,n){var r=Dr.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function ta(e,t,n){var r=Ir.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function na(e,t,n){var r=Dr.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function ra(e,t,n){var r=Dr.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function aa(e,t){return Ur(e.getDate(),t,2)}function ia(e,t){return Ur(e.getHours(),t,2)}function fa(e,t){return Ur(e.getHours()%12||12,t,2)}function ca(e,t){return Ur(1+dr.count(vr(e),e),t,3)}function oa(e,t){return Ur(e.getMilliseconds(),t,3)}function ua(e,t){return oa(e,t)+"000"}function sa(e,t){return Ur(e.getMonth()+1,t,2)}function la(e,t){return Ur(e.getMinutes(),t,2)}function da(e,t){return Ur(e.getSeconds(),t,2)}function ha(e){var t=e.getDay();return 0===t?7:t}function ba(e,t){return Ur(br.count(vr(e)-1,e),t,2)}function pa(e,t){var n=e.getDay();return e=n>=4||0===n?gr(e):gr.ceil(e),Ur(gr.count(vr(e),e)+(4===vr(e).getDay()),t,2)}function ga(e){return e.getDay()}function va(e,t){return Ur(pr.count(vr(e)-1,e),t,2)}function ma(e,t){return Ur(e.getFullYear()%100,t,2)}function ya(e,t){return Ur(e.getFullYear()%1e4,t,4)}function wa(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+Ur(t/60|0,"0",2)+Ur(t%60,"0",2)}function xa(e,t){return Ur(e.getUTCDate(),t,2)}function _a(e,t){return Ur(e.getUTCHours(),t,2)}function Ma(e,t){return Ur(e.getUTCHours()%12||12,t,2)}function Ta(e,t){return Ur(1+mr.count(Mr(e),e),t,3)}function Aa(e,t){return Ur(e.getUTCMilliseconds(),t,3)}function Na(e,t){return Aa(e,t)+"000"}function Sa(e,t){return Ur(e.getUTCMonth()+1,t,2)}function ka(e,t){return Ur(e.getUTCMinutes(),t,2)}function Ea(e,t){return Ur(e.getUTCSeconds(),t,2)}function Ca(e){var t=e.getUTCDay();return 0===t?7:t}function Da(e,t){return Ur(wr.count(Mr(e)-1,e),t,2)}function Ia(e,t){var n=e.getUTCDay();return e=n>=4||0===n?_r(e):_r.ceil(e),Ur(_r.count(Mr(e),e)+(4===Mr(e).getUTCDay()),t,2)}function Pa(e){return e.getUTCDay()}function Ua(e,t){return Ur(xr.count(Mr(e)-1,e),t,2)}function za(e,t){return Ur(e.getUTCFullYear()%100,t,2)}function Fa(e,t){return Ur(e.getUTCFullYear()%1e4,t,4)}function Ya(){return"+0000"}function Va(){return"%"}function $a(e){return+e}function La(e){return Math.floor(+e/1e3)}!function(e){Sr=function(e){var t=e.dateTime,n=e.date,r=e.time,a=e.periods,i=e.days,f=e.shortDays,c=e.months,o=e.shortMonths,u=Fr(a),s=Yr(a),l=Fr(i),d=Yr(i),h=Fr(f),b=Yr(f),p=Fr(c),g=Yr(c),v=Fr(o),m=Yr(o),y={a:function(e){return f[e.getDay()]},A:function(e){return i[e.getDay()]},b:function(e){return o[e.getMonth()]},B:function(e){return c[e.getMonth()]},c:null,d:aa,e:aa,f:ua,H:ia,I:fa,j:ca,L:oa,m:sa,M:la,p:function(e){return a[+(e.getHours()>=12)]},q:function(e){return 1+~~(e.getMonth()/3)},Q:$a,s:La,S:da,u:ha,U:ba,V:pa,w:ga,W:va,x:null,X:null,y:ma,Y:ya,Z:wa,"%":Va},w={a:function(e){return f[e.getUTCDay()]},A:function(e){return i[e.getUTCDay()]},b:function(e){return o[e.getUTCMonth()]},B:function(e){return c[e.getUTCMonth()]},c:null,d:xa,e:xa,f:Na,H:_a,I:Ma,j:Ta,L:Aa,m:Sa,M:ka,p:function(e){return a[+(e.getUTCHours()>=12)]},q:function(e){return 1+~~(e.getUTCMonth()/3)},Q:$a,s:La,S:Ea,u:Ca,U:Da,V:Ia,w:Pa,W:Ua,x:null,X:null,y:za,Y:Fa,Z:Ya,"%":Va},x={a:function(e,t,n){var r=h.exec(t.slice(n));return r?(e.w=b[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=l.exec(t.slice(n));return r?(e.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=v.exec(t.slice(n));return r?(e.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=p.exec(t.slice(n));return r?(e.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return T(e,t,n,r)},d:Br,e:Br,f:ea,H:Wr,I:Wr,j:Zr,L:Qr,m:Xr,M:Kr,p:function(e,t,n){var r=u.exec(t.slice(n));return r?(e.p=s[r[0].toLowerCase()],n+r[0].length):-1},q:Rr,Q:na,s:ra,S:Jr,u:$r,U:Lr,V:qr,w:Vr,W:Gr,x:function(e,t,r){return T(e,n,t,r)},X:function(e,t,n){return T(e,r,t,n)},y:jr,Y:Hr,Z:Or,"%":ta};function _(e,t){return function(n){var r,a,i,f=[],c=-1,o=0,u=e.length;for(n instanceof Date||(n=new Date(+n));++c<u;)37===e.charCodeAt(c)&&(f.push(e.slice(o,c)),null!=(a=Cr[r=e.charAt(++c)])?r=e.charAt(++c):a="e"===r?" ":"0",(i=t[r])&&(r=i(n,a)),f.push(r),o=c+1);return f.push(e.slice(o,c)),f.join("")}}function M(e,t){return function(n){var r,a,i=Nr(1900,void 0,1);if(T(i,e,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(t&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Ar(Nr(i.y,0,1))).getUTCDay(),r=a>4||0===a?xr.ceil(r):xr(r),r=mr.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=Tr(Nr(i.y,0,1))).getDay(),r=a>4||0===a?pr.ceil(r):pr(r),r=dr.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Ar(Nr(i.y,0,1)).getUTCDay():Tr(Nr(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Ar(i)):Tr(i)}}function T(e,t,n,r){for(var a,i,f=0,c=t.length,o=n.length;f<c;){if(r>=o)return-1;if(37===(a=t.charCodeAt(f++))){if(a=t.charAt(f++),!(i=x[a in Cr?t.charAt(f++):a])||(r=i(e,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return y.x=_(n,y),y.X=_(r,y),y.c=_(t,y),w.x=_(n,w),w.X=_(r,w),w.c=_(t,w),{format:function(e){var t=_(e+="",y);return t.toString=function(){return e},t},parse:function(e){var t=M(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=_(e+="",w);return t.toString=function(){return e},t},utcParse:function(e){var t=M(e+="",!0);return t.toString=function(){return e},t}}}(e),Sr.format,Sr.parse,kr=Sr.utcFormat,Er=Sr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||kr("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Er("%Y-%m-%dT%H:%M:%S.%LZ");var qa={value:function(){}};function Ga(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new Ha(r)}function Ha(e){this._=e}function ja(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function Oa(e,t){for(var n,r=0,a=e.length;r<a;++r)if((n=e[r]).name===t)return n.value}function Ra(e,t,n){for(var r=0,a=e.length;r<a;++r)if(e[r].name===t){e[r]=qa,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}Ha.prototype=Ga.prototype={constructor:Ha,on:function(e,t){var n,r=this._,a=ja(e+"",r),i=-1,f=a.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++i<f;)if(n=(e=a[i]).type)r[n]=Ra(r[n],e.name,t);else if(null==t)for(n in r)r[n]=Ra(r[n],e.name,null);return this}for(;++i<f;)if((n=(e=a[i]).type)&&(n=Oa(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new Ha(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(r=this._[e]).length;i<n;++i)r[i].value.apply(t,a)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],a=0,i=r.length;a<i;++a)r[a].value.apply(t,n)}};var Xa,Ba,Za=0,Wa=0,Ka=0,Ja=0,Qa=0,ei=0,ti="object"==typeof performance&&performance.now?performance:Date,ni="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function ri(){return Qa||(ni(ai),Qa=ti.now()+ei)}function ai(){Qa=0}function ii(){this._call=this._time=this._next=null}function fi(e,t,n){var r=new ii;return r.restart(e,t,n),r}function ci(){Qa=(Ja=ti.now())+ei,Za=Wa=0;try{!function(){ri(),++Za;for(var e,t=Xa;t;)(e=Qa-t._time)>=0&&t._call.call(null,e),t=t._next;--Za}()}finally{Za=0,function(){var e,t,n=Xa,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:Xa=t);Ba=e,ui(r)}(),Qa=0}}function oi(){var e=ti.now(),t=e-Ja;t>1e3&&(ei-=t,Ja=e)}function ui(e){Za||(Wa&&(Wa=clearTimeout(Wa)),e-Qa>24?(e<1/0&&(Wa=setTimeout(ci,e-ti.now()-ei)),Ka&&(Ka=clearInterval(Ka))):(Ka||(Ja=ti.now(),Ka=setInterval(oi,1e3)),Za=1,ni(ci)))}function si(e,t,n){var r=new ii;return t=null==t?0:+t,r.restart((function(n){r.stop(),e(n+t)}),t,n),r}ii.prototype=fi.prototype={constructor:ii,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?ri():+n)+(null==t?0:+t),this._next||Ba===this||(Ba?Ba._next=this:Xa=this,Ba=this),this._call=e,this._time=n,ui()},stop:function(){this._call&&(this._call=null,this._time=1/0,ui())}};var li=Ga("start","end","cancel","interrupt"),di=[];function hi(e,t,n,r,a,i){var f=e.__transition;if(f){if(n in f)return}else e.__transition={};!function(e,t,n){var r,a=e.__transition;function i(o){var u,s,l,d;if(1!==n.state)return c();for(u in a)if((d=a[u]).name===n.name){if(3===d.state)return si(i);4===d.state?(d.state=6,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete a[u]):+u<t&&(d.state=6,d.timer.stop(),d.on.call("cancel",e,e.__data__,d.index,d.group),delete a[u])}if(si((function(){3===n.state&&(n.state=4,n.timer.restart(f,n.delay,n.time),f(o))})),n.state=2,n.on.call("start",e,e.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(l=n.tween.length),u=0,s=-1;u<l;++u)(d=n.tween[u].value.call(e,e.__data__,n.index,n.group))&&(r[++s]=d);r.length=s+1}}function f(t){for(var a=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(c),n.state=5,1),i=-1,f=r.length;++i<f;)r[i].call(e,a);5===n.state&&(n.on.call("end",e,e.__data__,n.index,n.group),c())}function c(){for(var r in n.state=6,n.timer.stop(),delete a[t],a)return;delete e.__transition}a[t]=n,n.timer=fi((function(e){n.state=1,n.timer.restart(i,n.delay,n.time),n.delay<=e&&i(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:a,on:li,tween:di,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function bi(e,t){var n=gi(e,t);if(n.state>0)throw new Error("too late; already scheduled");return n}function pi(e,t){var n=gi(e,t);if(n.state>3)throw new Error("too late; already running");return n}function gi(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function vi(e,t){var n,r,a,i=e.__transition,f=!0;if(i){for(a in t=null==t?null:t+"",i)(n=i[a]).name===t?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete i[a]):f=!1;f&&delete e.__transition}}function mi(e,t){var n,r;return function(){var a=pi(this,e),i=a.tween;if(i!==n)for(var f=0,c=(r=n=i).length;f<c;++f)if(r[f].name===t){(r=r.slice()).splice(f,1);break}a.tween=r}}function yi(e,t,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=pi(this,e),f=i.tween;if(f!==r){a=(r=f).slice();for(var c={name:t,value:n},o=0,u=a.length;o<u;++o)if(a[o].name===t){a[o]=c;break}o===u&&a.push(c)}i.tween=a}}function wi(e,t,n){var r=e._id;return e.each((function(){var e=pi(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return gi(e,r).value[t]}}function xi(e,t){var n;return("number"==typeof t?gn:t instanceof _t?sn:(n=_t(t))?(t=n,sn):wn)(e,t)}function _i(e){return function(){this.removeAttribute(e)}}function Mi(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Ti(e,t,n){var r,a,i=n+"";return function(){var f=this.getAttribute(e);return f===i?null:f===r?a:a=t(r=f,n)}}function Ai(e,t,n){var r,a,i=n+"";return function(){var f=this.getAttributeNS(e.space,e.local);return f===i?null:f===r?a:a=t(r=f,n)}}function Ni(e,t,n){var r,a,i;return function(){var f,c,o=n(this);if(null!=o)return(f=this.getAttribute(e))===(c=o+"")?null:f===r&&c===a?i:(a=c,i=t(r=f,o));this.removeAttribute(e)}}function Si(e,t,n){var r,a,i;return function(){var f,c,o=n(this);if(null!=o)return(f=this.getAttributeNS(e.space,e.local))===(c=o+"")?null:f===r&&c===a?i:(a=c,i=t(r=f,o));this.removeAttributeNS(e.space,e.local)}}function ki(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function Ei(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function Ci(e,t){var n,r;function a(){var a=t.apply(this,arguments);return a!==r&&(n=(r=a)&&Ei(e,a)),n}return a._value=t,a}function Di(e,t){var n,r;function a(){var a=t.apply(this,arguments);return a!==r&&(n=(r=a)&&ki(e,a)),n}return a._value=t,a}function Ii(e,t){return function(){bi(this,e).delay=+t.apply(this,arguments)}}function Pi(e,t){return t=+t,function(){bi(this,e).delay=t}}function Ui(e,t){return function(){pi(this,e).duration=+t.apply(this,arguments)}}function zi(e,t){return t=+t,function(){pi(this,e).duration=t}}function Fi(e,t){if("function"!=typeof t)throw new Error;return function(){pi(this,e).ease=t}}function Yi(e,t,n){var r,a,i=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?bi:pi;return function(){var f=i(this,e),c=f.on;c!==r&&(a=(r=c).copy()).on(t,n),f.on=a}}var Vi=ye.prototype.constructor;function $i(e){return function(){this.style.removeProperty(e)}}function Li(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function qi(e,t,n){var r,a;function i(){var i=t.apply(this,arguments);return i!==a&&(r=(a=i)&&Li(e,i,n)),r}return i._value=t,i}function Gi(e){return function(t){this.textContent=e.call(this,t)}}function Hi(e){var t,n;function r(){var r=e.apply(this,arguments);return r!==n&&(t=(n=r)&&Gi(r)),t}return r._value=e,r}var ji=0;function Oi(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function Ri(){return++ji}var Xi=ye.prototype;Oi.prototype=function(e){return ye().transition(e)}.prototype={constructor:Oi,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=m(e));for(var r=this._groups,a=r.length,i=new Array(a),f=0;f<a;++f)for(var c,o,u=r[f],s=u.length,l=i[f]=new Array(s),d=0;d<s;++d)(c=u[d])&&(o=e.call(c,c.__data__,d,u))&&("__data__"in c&&(o.__data__=c.__data__),l[d]=o,hi(l[d],t,n,d,l,gi(c,n)));return new Oi(i,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=w(e));for(var r=this._groups,a=r.length,i=[],f=[],c=0;c<a;++c)for(var o,u=r[c],s=u.length,l=0;l<s;++l)if(o=u[l]){for(var d,h=e.call(o,o.__data__,l,u),b=gi(o,n),p=0,g=h.length;p<g;++p)(d=h[p])&&hi(d,t,n,p,h,b);i.push(h),f.push(o)}return new Oi(i,f,t,n)},filter:function(e){"function"!=typeof e&&(e=x(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,f=t[a],c=f.length,o=r[a]=[],u=0;u<c;++u)(i=f[u])&&e.call(i,i.__data__,u,f)&&o.push(i);return new Oi(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,a=n.length,i=Math.min(r,a),f=new Array(r),c=0;c<i;++c)for(var o,u=t[c],s=n[c],l=u.length,d=f[c]=new Array(l),h=0;h<l;++h)(o=u[h]||s[h])&&(d[h]=o);for(;c<r;++c)f[c]=t[c];return new Oi(f,this._parents,this._name,this._id)},selection:function(){return new Vi(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=Ri(),r=this._groups,a=r.length,i=0;i<a;++i)for(var f,c=r[i],o=c.length,u=0;u<o;++u)if(f=c[u]){var s=gi(f,t);hi(f,e,n,u,c,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Oi(r,this._parents,e,n)},call:Xi.call,nodes:Xi.nodes,node:Xi.node,size:Xi.size,empty:Xi.empty,each:Xi.each,on:function(e,t){var n=this._id;return arguments.length<2?gi(this.node(),n).on.on(e):this.each(Yi(n,e,t))},attr:function(e,t){var n=h(e),r="transform"===n?In:xi;return this.attrTween(e,"function"==typeof t?(n.local?Si:Ni)(n,r,wi(this,"attr."+e,t)):null==t?(n.local?Mi:_i)(n):(n.local?Ai:Ti)(n,r,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=h(e);return this.tween(n,(r.local?Ci:Di)(r,t))},style:function(e,t,n){var r="transform"==(e+="")?Dn:xi;return null==t?this.styleTween(e,function(e,t){var n,r,a;return function(){var i=Y(this,e),f=(this.style.removeProperty(e),Y(this,e));return i===f?null:i===n&&f===r?a:a=t(n=i,r=f)}}(e,r)).on("end.style."+e,$i(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,a,i;return function(){var f=Y(this,e),c=n(this),o=c+"";return null==c&&(this.style.removeProperty(e),o=c=Y(this,e)),f===o?null:f===r&&o===a?i:(a=o,i=t(r=f,c))}}(e,r,wi(this,"style."+e,t))).each(function(e,t){var n,r,a,i,f="style."+t,c="end."+f;return function(){var o=pi(this,e),u=o.on,s=null==o.value[f]?i||(i=$i(t)):void 0;u===n&&a===s||(r=(n=u).copy()).on(c,a=s),o.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,a,i=n+"";return function(){var f=Y(this,e);return f===i?null:f===r?a:a=t(r=f,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,qi(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(wi(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,Hi(e))},remove:function(){return this.on("end.remove",function(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}(this._id))},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,a=gi(this.node(),n).tween,i=0,f=a.length;i<f;++i)if((r=a[i]).name===e)return r.value;return null}return this.each((null==t?mi:yi)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Ii:Pi)(t,e)):gi(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Ui:zi)(t,e)):gi(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(Fi(t,e)):gi(this.node(),t).ease},end:function(){var e,t,n=this,r=n._id,a=n.size();return new Promise((function(i,f){var c={value:f},o={value:function(){0==--a&&i()}};n.each((function(){var n=pi(this,r),a=n.on;a!==e&&((t=(e=a).copy())._.cancel.push(c),t._.interrupt.push(c),t._.end.push(o)),n.on=t}))}))}};var Bi={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function Zi(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return Bi.time=ri(),Bi;return n}function Wi(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n}function Ki(e){return dn(e[e.length-1])}ye.prototype.interrupt=function(e){return this.each((function(){vi(this,e)}))},ye.prototype.transition=function(e){var t,n;e instanceof Oi?(t=e._id,e=e._name):(t=Ri(),(n=Bi).time=ri(),e=null==e?null:e+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var f,c=r[i],o=c.length,u=0;u<o;++u)(f=c[u])&&hi(f,e,t,u,c,n||Zi(f,t));return new Oi(r,this._parents,e,t)},Wi("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Wi("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Wi("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Wi("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Wi("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Wi("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Wi("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Wi("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Wi("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Wi("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Ki(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Wi)),Ki(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Wi)),Ki(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Wi)),Ki(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Wi)),Ki(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Wi)),Ki(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Wi)),Ki(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Wi)),Ki(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Wi)),Ki(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Wi)),Ki(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Wi)),Ki(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Wi)),Ki(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Wi)),Ki(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Wi)),Ki(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Wi)),Ki(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Wi)),Ki(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Wi)),Ki(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Wi)),Ki(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Wi)),Ki(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Wi)),Ki(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Wi)),Ki(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Wi)),Ki(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Wi)),Ki(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Wi)),Ki(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Wi)),Ki(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Wi)),Ki(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Wi)),Ki(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Wi)),Un(rn(300,.5,0),rn(-240,.5,1));Un(rn(-100,.75,.35),rn(80,1.5,.8)),Un(rn(260,.75,.35),rn(80,1.5,.8)),rn(),Nt();function Ji(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}Ji(Wi("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));Ji(Wi("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ji(Wi("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ji(Wi("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));class Qi{constructor(e,n,r=!1){t("#"+e).show();const a=r?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=t("<div/>").addClass(a).appendTo("#"+e),this.buttons={},this.tooltip=n}createDownloadSvgButton(e,t,n,r,a="fa-download"){this.createButton(e,a);we("#"+e).on("click",()=>{this.downloadSvg(t,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(e,t,n="fa-expand-arrows-alt"){this.createButton(e,n);we("#"+e).on("click",t).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(e,n="fa-download"){const r=t("<a/>").attr("id",e).addClass("btn btn-default").appendTo(this.bar);return t("<i/>").addClass("fa "+n).appendTo(r),this.buttons[e]=r,r}attachTooltip(e){this.tooltip=e}downloadSvg(e,r,a){let i=t(t(t(""+("#"+e)))[0]),f=i.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),c=function(e){for(var n="",r=document.styleSheets,a=0;a<r.length;a++)try{if(null==r[a].cssRules)continue;for(var i=r[a].cssRules,f=0;f<i.length;f++){var c=i[f];if(void 0!==c.style){var o,u=void 0===c.selectorText?c.selectorText:c.selectorText.replace(`#${e[0].id} `,"");try{o=t(e).find(u)}catch(e){o=[]}o.length>0&&(n+=c.selectorText+" { "+c.style.cssText+" }\n")}}}catch(e){if("SecurityError"!==e.name)throw e;continue}var s=document.createElement("style");return s.setAttribute("type","text/css"),s.innerHTML="<![CDATA[\n"+n+"\n]]>",s}(i.get());f.prepend(c),t("#"+a).html("").hide();let o=t("#"+a).append(f).html(),u=new Blob([o],{type:"image/svg+xml"});n(u,r),t("#"+a).html("").hide()}}class ef{constructor(e,t=!1,n=30,r=-40,a=100){this.id=e,this.verbose=t,this.offsetX=n,this.offsetY=r,this.duration=a}show(e){this.verbose&&console.log(e),this.edit(e),this.move(),we("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){we("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(e=oe.pageX,t=oe.pageY){this.verbose&&(console.log(e),console.log(t)),e+=this.offsetX,t=t+this.offsetY<0?10:t+this.offsetY;we("#"+this.id).style("left",e+"px").style("top",t+"px")}edit(e){we("#"+this.id).html(e)}}var tf=Array.prototype.slice;function nf(e){return e}function rf(e){return"translate("+(e+.5)+",0)"}function af(e){return"translate(0,"+(e+.5)+")"}function ff(e){return function(t){return+e(t)}}function cf(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}function of(){return!this.__axis}function uf(e,t){var n=[],r=null,a=null,i=6,f=6,c=3,o=1===e||4===e?-1:1,u=4===e||2===e?"x":"y",s=1===e||3===e?rf:af;function l(l){var d=null==r?t.ticks?t.ticks.apply(t,n):t.domain():r,h=null==a?t.tickFormat?t.tickFormat.apply(t,n):nf:a,b=Math.max(i,0)+c,p=t.range(),g=+p[0]+.5,v=+p[p.length-1]+.5,m=(t.bandwidth?cf:ff)(t.copy()),y=l.selection?l.selection():l,w=y.selectAll(".domain").data([null]),x=y.selectAll(".tick").data(d,t).order(),_=x.exit(),M=x.enter().append("g").attr("class","tick"),T=x.select("line"),A=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),T=T.merge(M.append("line").attr("stroke","currentColor").attr(u+"2",o*i)),A=A.merge(M.append("text").attr("fill","currentColor").attr(u,o*b).attr("dy",1===e?"0em":3===e?"0.71em":"0.32em")),l!==y&&(w=w.transition(l),x=x.transition(l),T=T.transition(l),A=A.transition(l),_=_.transition(l).attr("opacity",1e-6).attr("transform",(function(e){return isFinite(e=m(e))?s(e):this.getAttribute("transform")})),M.attr("opacity",1e-6).attr("transform",(function(e){var t=this.parentNode.__axis;return s(t&&isFinite(t=t(e))?t:m(e))}))),_.remove(),w.attr("d",4===e||2==e?f?"M"+o*f+","+g+"H0.5V"+v+"H"+o*f:"M0.5,"+g+"V"+v:f?"M"+g+","+o*f+"V0.5H"+v+"V"+o*f:"M"+g+",0.5H"+v),x.attr("opacity",1).attr("transform",(function(e){return s(m(e))})),T.attr(u+"2",o*i),A.attr(u,o*b).text(h),y.filter(of).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===e?"start":4===e?"end":"middle"),y.each((function(){this.__axis=m}))}return l.scale=function(e){return arguments.length?(t=e,l):t},l.ticks=function(){return n=tf.call(arguments),l},l.tickArguments=function(e){return arguments.length?(n=null==e?[]:tf.call(e),l):n.slice()},l.tickValues=function(e){return arguments.length?(r=null==e?null:tf.call(e),l):r&&r.slice()},l.tickFormat=function(e){return arguments.length?(a=e,l):a},l.tickSize=function(e){return arguments.length?(i=f=+e,l):i},l.tickSizeInner=function(e){return arguments.length?(i=+e,l):i},l.tickSizeOuter=function(e){return arguments.length?(f=+e,l):f},l.tickPadding=function(e){return arguments.length?(c=+e,l):c},l}function sf(e){return uf(3,e)}var lf=Math.PI,df=2*lf,hf=df-1e-6;function bf(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function pf(){return new bf}function gf(e){return function(){return e}}function vf(e){this._context=e}function mf(e){return new vf(e)}function yf(e){return e[0]}function wf(e){return e[1]}function xf(){var e=yf,t=null,n=gf(0),r=wf,a=gf(!0),i=null,f=mf,c=null;function o(o){var u,s,l,d,h,b=o.length,p=!1,g=new Array(b),v=new Array(b);for(null==i&&(c=f(h=pf())),u=0;u<=b;++u){if(!(u<b&&a(d=o[u],u,o))===p)if(p=!p)s=u,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),l=u-1;l>=s;--l)c.point(g[l],v[l]);c.lineEnd(),c.areaEnd()}p&&(g[u]=+e(d,u,o),v[u]=+n(d,u,o),c.point(t?+t(d,u,o):g[u],r?+r(d,u,o):v[u]))}if(h)return c=null,h+""||null}function u(){return function(){var e=yf,t=wf,n=gf(!0),r=null,a=mf,i=null;function f(f){var c,o,u,s=f.length,l=!1;for(null==r&&(i=a(u=pf())),c=0;c<=s;++c)!(c<s&&n(o=f[c],c,f))===l&&((l=!l)?i.lineStart():i.lineEnd()),l&&i.point(+e(o,c,f),+t(o,c,f));if(u)return i=null,u+""||null}return f.x=function(t){return arguments.length?(e="function"==typeof t?t:gf(+t),f):e},f.y=function(e){return arguments.length?(t="function"==typeof e?e:gf(+e),f):t},f.defined=function(e){return arguments.length?(n="function"==typeof e?e:gf(!!e),f):n},f.curve=function(e){return arguments.length?(a=e,null!=r&&(i=a(r)),f):a},f.context=function(e){return arguments.length?(null==e?r=i=null:i=a(r=e),f):r},f}().defined(a).curve(f).context(i)}return o.x=function(n){return arguments.length?(e="function"==typeof n?n:gf(+n),t=null,o):e},o.x0=function(t){return arguments.length?(e="function"==typeof t?t:gf(+t),o):e},o.x1=function(e){return arguments.length?(t=null==e?null:"function"==typeof e?e:gf(+e),o):t},o.y=function(e){return arguments.length?(n="function"==typeof e?e:gf(+e),r=null,o):n},o.y0=function(e){return arguments.length?(n="function"==typeof e?e:gf(+e),o):n},o.y1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:gf(+e),o):r},o.lineX0=o.lineY0=function(){return u().x(e).y(n)},o.lineY1=function(){return u().x(e).y(r)},o.lineX1=function(){return u().x(t).y(n)},o.defined=function(e){return arguments.length?(a="function"==typeof e?e:gf(!!e),o):a},o.curve=function(e){return arguments.length?(f=e,null!=i&&(c=f(i)),o):f},o.context=function(e){return arguments.length?(null==e?i=c=null:c=f(i=e),o):i},o}function _f(e){return e<0?-1:1}function Mf(e,t,n){var r=e._x1-e._x0,a=t-e._x1,i=(e._y1-e._y0)/(r||a<0&&-0),f=(n-e._y1)/(a||r<0&&-0),c=(i*a+f*r)/(r+a);return(_f(i)+_f(f))*Math.min(Math.abs(i),Math.abs(f),.5*Math.abs(c))||0}function Tf(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function Af(e,t,n){var r=e._x0,a=e._y0,i=e._x1,f=e._y1,c=(i-r)/3;e._context.bezierCurveTo(r+c,a+c*t,i-c,f-c*n,i,f)}function Nf(e){this._context=e}function Sf(e){this._context=e}function kf(){oe.preventDefault(),oe.stopImmediatePropagation()}function Ef(e){var t=e.document.documentElement,n=we(e).on("dragstart.drag",kf,!0);"onselectstart"in t?n.on("selectstart.drag",kf,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")}function Cf(e,t){var n=e.document.documentElement,r=we(e).on("dragstart.drag",null);t&&(r.on("click.drag",kf,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function Df(e){return function(){return e}}function If(e,t,n){this.target=e,this.type=t,this.selection=n}function Pf(){oe.stopImmediatePropagation()}function Uf(){oe.preventDefault(),oe.stopImmediatePropagation()}bf.prototype=pf.prototype={constructor:bf,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,a,i){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(e,t,n,r,a){e=+e,t=+t,n=+n,r=+r,a=+a;var i=this._x1,f=this._y1,c=n-e,o=r-t,u=i-e,s=f-t,l=u*u+s*s;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(l>1e-6)if(Math.abs(s*c-o*u)>1e-6&&a){var d=n-i,h=r-f,b=c*c+o*o,p=d*d+h*h,g=Math.sqrt(b),v=Math.sqrt(l),m=a*Math.tan((lf-Math.acos((b+l-p)/(2*g*v)))/2),y=m/v,w=m/g;Math.abs(y-1)>1e-6&&(this._+="L"+(e+y*u)+","+(t+y*s)),this._+="A"+a+","+a+",0,0,"+ +(s*d>u*h)+","+(this._x1=e+w*c)+","+(this._y1=t+w*o)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,a,i){e=+e,t=+t,i=!!i;var f=(n=+n)*Math.cos(r),c=n*Math.sin(r),o=e+f,u=t+c,s=1^i,l=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+o+","+u:(Math.abs(this._x1-o)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+o+","+u),n&&(l<0&&(l=l%df+df),l>hf?this._+="A"+n+","+n+",0,1,"+s+","+(e-f)+","+(t-c)+"A"+n+","+n+",0,1,"+s+","+(this._x1=o)+","+(this._y1=u):l>1e-6&&(this._+="A"+n+","+n+",0,"+ +(l>=lf)+","+s+","+(this._x1=e+n*Math.cos(a))+","+(this._y1=t+n*Math.sin(a))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},vf.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}},Nf.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Af(this,this._t0,Tf(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,Af(this,Tf(this,n=Mf(this,e,t)),n);break;default:Af(this,this._t0,n=Mf(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(function(e){this._context=new Sf(e)}.prototype=Object.create(Nf.prototype)).point=function(e,t){Nf.prototype.point.call(this,t,e)},Sf.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,a,i){this._context.bezierCurveTo(t,e,r,n,i,a)}};var zf={name:"drag"},Ff={name:"space"},Yf={name:"handle"},Vf={name:"center"};function $f(e){return[+e[0],+e[1]]}function Lf(e){return[$f(e[0]),$f(e[1])]}function qf(e){return function(t){return function(e,t,n){arguments.length<3&&(n=t,t=xe().changedTouches);for(var r,a=0,i=t?t.length:0;a<i;++a)if((r=t[a]).identifier===n)return _e(e,r);return null}(t,oe.touches,e)}}var Gf={name:"x",handles:["w","e"].map(Wf),input:function(e,t){return null==e?null:[[+e[0],t[0][1]],[+e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},Hf={name:"y",handles:["n","s"].map(Wf),input:function(e,t){return null==e?null:[[t[0][0],+e[0]],[t[1][0],+e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},jf={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Wf),input:function(e){return null==e?null:Lf(e)},output:function(e){return e}},Of={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Rf={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Xf={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Bf={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Zf={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Wf(e){return{type:e}}function Kf(){return!oe.ctrlKey&&!oe.button}function Jf(){var e=this.ownerSVGElement||this;return e.hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function Qf(){return navigator.maxTouchPoints||"ontouchstart"in this}function ec(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function tc(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function nc(){return function(e){var t,n=Jf,r=Kf,a=Qf,i=!0,f=Ga("start","brush","end"),c=6;function o(t){var n=t.property("__brush",p).selectAll(".overlay").data([Wf("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Of.overlay).merge(n).each((function(){var e=ec(this).extent;we(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])})),t.selectAll(".selection").data([Wf("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Of.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(e.handles,(function(e){return e.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(e){return"handle handle--"+e.type})).attr("cursor",(function(e){return Of[e.type]})),t.each(u).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",d).filter(a).on("touchstart.brush",d).on("touchmove.brush",h).on("touchend.brush touchcancel.brush",b).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function u(){var e=we(this),t=ec(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",(function(e){return"e"===e.type[e.type.length-1]?t[1][0]-c/2:t[0][0]-c/2})).attr("y",(function(e){return"s"===e.type[0]?t[1][1]-c/2:t[0][1]-c/2})).attr("width",(function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+c:c})).attr("height",(function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+c:c}))):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(e,t,n){return!n&&e.__brush.emitter||new l(e,t)}function l(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function d(){if((!t||oe.touches)&&r.apply(this,arguments)){var n,a,f,c,o,l,d,h,b,p,g,v=this,m=oe.target.__data__.type,y="selection"===(i&&oe.metaKey?m="overlay":m)?zf:i&&oe.altKey?Vf:Yf,w=e===Hf?null:Bf[m],x=e===Gf?null:Zf[m],_=ec(v),M=_.extent,T=_.selection,A=M[0][0],N=M[0][1],S=M[1][0],k=M[1][1],E=0,C=0,D=w&&x&&i&&oe.shiftKey,I=oe.touches?qf(oe.changedTouches[0].identifier):Me,P=I(v),U=P,z=s(v,arguments,!0).beforestart();"overlay"===m?(T&&(b=!0),_.selection=T=[[n=e===Hf?A:P[0],f=e===Gf?N:P[1]],[o=e===Hf?S:n,d=e===Gf?k:f]]):(n=T[0][0],f=T[0][1],o=T[1][0],d=T[1][1]),a=n,c=f,l=o,h=d;var F=we(v).attr("pointer-events","none"),Y=F.selectAll(".overlay").attr("cursor",Of[m]);if(oe.touches)z.moved=$,z.ended=q;else{var V=we(oe.view).on("mousemove.brush",$,!0).on("mouseup.brush",q,!0);i&&V.on("keydown.brush",G,!0).on("keyup.brush",H,!0),Ef(oe.view)}Pf(),vi(v),u.call(v),z.start()}function $(){var e=I(v);!D||p||g||(Math.abs(e[0]-U[0])>Math.abs(e[1]-U[1])?g=!0:p=!0),U=e,b=!0,Uf(),L()}function L(){var e;switch(E=U[0]-P[0],C=U[1]-P[1],y){case Ff:case zf:w&&(E=Math.max(A-n,Math.min(S-o,E)),a=n+E,l=o+E),x&&(C=Math.max(N-f,Math.min(k-d,C)),c=f+C,h=d+C);break;case Yf:w<0?(E=Math.max(A-n,Math.min(S-n,E)),a=n+E,l=o):w>0&&(E=Math.max(A-o,Math.min(S-o,E)),a=n,l=o+E),x<0?(C=Math.max(N-f,Math.min(k-f,C)),c=f+C,h=d):x>0&&(C=Math.max(N-d,Math.min(k-d,C)),c=f,h=d+C);break;case Vf:w&&(a=Math.max(A,Math.min(S,n-E*w)),l=Math.max(A,Math.min(S,o+E*w))),x&&(c=Math.max(N,Math.min(k,f-C*x)),h=Math.max(N,Math.min(k,d+C*x)))}l<a&&(w*=-1,e=n,n=o,o=e,e=a,a=l,l=e,m in Rf&&Y.attr("cursor",Of[m=Rf[m]])),h<c&&(x*=-1,e=f,f=d,d=e,e=c,c=h,h=e,m in Xf&&Y.attr("cursor",Of[m=Xf[m]])),_.selection&&(T=_.selection),p&&(a=T[0][0],l=T[1][0]),g&&(c=T[0][1],h=T[1][1]),T[0][0]===a&&T[0][1]===c&&T[1][0]===l&&T[1][1]===h||(_.selection=[[a,c],[l,h]],u.call(v),z.brush())}function q(){if(Pf(),oe.touches){if(oe.touches.length)return;t&&clearTimeout(t),t=setTimeout((function(){t=null}),500)}else Cf(oe.view,b),V.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);F.attr("pointer-events","all"),Y.attr("cursor",Of.overlay),_.selection&&(T=_.selection),tc(T)&&(_.selection=null,u.call(v)),z.end()}function G(){switch(oe.keyCode){case 16:D=w&&x;break;case 18:y===Yf&&(w&&(o=l-E*w,n=a+E*w),x&&(d=h-C*x,f=c+C*x),y=Vf,L());break;case 32:y!==Yf&&y!==Vf||(w<0?o=l-E:w>0&&(n=a-E),x<0?d=h-C:x>0&&(f=c-C),y=Ff,Y.attr("cursor",Of.selection),L());break;default:return}Uf()}function H(){switch(oe.keyCode){case 16:D&&(p=g=D=!1,L());break;case 18:y===Vf&&(w<0?o=l:w>0&&(n=a),x<0?d=h:x>0&&(f=c),y=Yf,L());break;case 32:y===Ff&&(oe.altKey?(w&&(o=l-E*w,n=a+E*w),x&&(d=h-C*x,f=c+C*x),y=Vf):(w<0?o=l:w>0&&(n=a),x<0?d=h:x>0&&(f=c),y=Yf),Y.attr("cursor",Of[m]),L());break;default:return}Uf()}}function h(){s(this,arguments).moved()}function b(){s(this,arguments).ended()}function p(){var t=this.__brush||{selection:null};return t.extent=Lf(n.apply(this,arguments)),t.dim=e,t}return o.move=function(t,n){t.selection?t.on("start.brush",(function(){s(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){s(this,arguments).end()})).tween("brush",(function(){var t=this,r=t.__brush,a=s(t,arguments),i=r.selection,f=e.input("function"==typeof n?n.apply(this,arguments):n,r.extent),c=xn(i,f);function o(e){r.selection=1===e&&null===f?null:c(e),u.call(t),a.brush()}return null!==i&&null!==f?o:o(1)})):t.each((function(){var t=this,r=arguments,a=t.__brush,i=e.input("function"==typeof n?n.apply(t,r):n,a.extent),f=s(t,r).beforestart();vi(t),a.selection=null===i?null:i,u.call(t),f.start().brush().end()}))},o.clear=function(e){o.move(e,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){!function(e,t,n,r){var a=oe;e.sourceEvent=oe,oe=e;try{t.apply(n,r)}finally{oe=a}}(new If(o,t,e.output(this.state.selection)),f.apply,f,[t,this.that,this.args])}},o.extent=function(e){return arguments.length?(n="function"==typeof e?e:Df(Lf(e)),o):n},o.filter=function(e){return arguments.length?(r="function"==typeof e?e:Df(!!e),o):r},o.touchable=function(e){return arguments.length?(a="function"==typeof e?e:Df(!!e),o):a},o.handleSize=function(e){return arguments.length?(c=+e,o):c},o.keyModifiers=function(e){return arguments.length?(i=!!e,o):i},o.on=function(){var e=f.on.apply(f,arguments);return e===f?o:e},o}(jf)}const rc=function(e){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*e*e)},ac=function(e){let t=(Fe(e,.75)-Fe(e,.25))/1.34;return 1.06*Math.min(Ee(e),t)*Math.pow(e.length,-.2)};class ic{constructor(e,t={}){this._sanityCheck(e),this.data=e,this.groupInfo=t,this.toolbar=void 0,this.tooltip=void 0}render(e,t=500,n=357,r=.05,a,i=[-3,3],f="Y axis",c=!0,o=30,u=!0,s=0,l=!1,d=!1,h=!1,b=!1,p=!1,g=!1,v=0){if(this.reset=()=>{e.selectAll("*").remove(),this.render(e,t,n,r,a,i,f,c,o,u,s,l,d,h,b,p,g)},this.updateYScale=function(i,f){e.selectAll("*").remove(),void 0===f&&(f=[]),this.render(e,t,n,r,a,[],i,c,o,u,s,l,d,h,b,p,g)},this.updateXScale=function(a){void 0===a&&console.error("updateXScale called without new X domain"),e.selectAll("*").remove(),this.render(e,t,n,r,a,[],f,c,o,u,s,l,d,h,b,p,g)},void 0===i||0==i.length){let e=[];this.data.forEach(t=>e=e.concat(t.values)),i=Ce(e)}this.groups=Xe().key(e=>e.group).entries(this.data),this.scale={x:it().rangeRound([0,t]).domain(a||this.groups.map(e=>e.key)).paddingInner(r),subx:it(),y:cr().rangeRound([n,0]).domain(i),z:cr()},this.groups.forEach(t=>{let r=t.key,a=t.values,f=this.groupInfo[r];if(t.index=this.scale.x.domain().indexOf(r),void 0!==f){e.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",e=>"pvalue"==e&&parseFloat(f[e])<=parseFloat(f.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(e,t)=>`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`).text(e=>`${e}: ${parseFloat(parseFloat(f[e]).toPrecision(3)).toExponential()}`)}p&&a.sort((e,t)=>e.label<t.label?-1:e.label>t.label?1:0),this.scale.subx.domain(a.map(e=>e.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),a.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(Te),this._drawViolin(e,n,l,t.index,g,v))});var c=18;if(b){const t=it().domain(a.map(e=>null==e.size?"(0)":`(${e.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);e.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+c})`).call(sf(t))}if(u){c=5;const t=e.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+c})`).call(sf(this.scale.subx));s>0&&t.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${s}, 2, 10)`)}});let m=u?55:0;var y;if(this.xAxis=c?sf(this.scale.x):sf(this.scale.x).tickFormat(""),e.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+m})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${o}, -10, 10)`),m=5,this.yAxis=(y=this.scale.y,uf(4,y)).tickValues(this.scale.y.ticks(5)),e.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${m}, 0)`).call(this.yAxis),e.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*m+we(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(f),e.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),d&&this._addGroupDivider(e),h){const t=e.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");t.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=t.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;n.append("rect").attr("x",(e,t)=>5+60*t+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",e=>e.color),n.append("text").attr("class","violin-legend-text").text(e=>e.label).attr("x",(e,t)=>17+60*t+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(e,t){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;e.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${r})`).text(t)}createTooltip(e){return 0==t("#"+e).length&&t("<div/>").attr("id",e).appendTo(t("body")),this.tooltip=new ef(e),we("#"+e).classed("violin-tooltip",!0),this.tooltip}createToolbar(e,t){return this.toolbar=new Qi(e,t),this.toolbar}addBrush(e){const t=nc();t.on("end",()=>{this.zoom(e,t)}),e.append("g").attr("class","brush").call(t)}zoom(e,t){let n,r=oe.selection;if(void 0===t)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((e,t)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),a=Math.floor(r[1][0]/this.scale.x.bandwidth());return t>=n&&t<=a}));const n=Math.floor(this.scale.y.invert(r[1][1])),a=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,a]),e.select(".brush").call(t.move,null)}else{if(!n)return n=setTimeout((function(){n=null}),350);this.reset()}let a=e.transition().duration(750);e.select(".axis--x").transition(a).call(this.xAxis),e.select(".axis--y").transition(a).call(this.yAxis),this.groups.forEach((t,n)=>{let r=t.key,i=t.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=e.select(`#violin${t.index}-${n.label}`);i.select(".violin").transition(a).attr("d",xf().x0(e=>this.scale.z(e[1])).x1(e=>this.scale.z(-e[1])).y(e=>this.scale.y(e[0])));const f=Fe(n.values,.25),c=Fe(n.values,.75),o=.1;i.select(".violin-ir").transition(a).attr("x",this.scale.z(-o)).attr("y",this.scale.y(c)).attr("width",Math.abs(this.scale.z(-o)-this.scale.z(o))).attr("height",Math.abs(this.scale.y(c)-this.scale.y(f)));const u=$e(n.values);i.select(".violin-median").transition(a).attr("x1",this.scale.z(-o)).attr("x2",this.scale.z(o)).attr("y1",this.scale.y(u)).attr("y2",this.scale.y(u))})})}_drawViolin(e,t,n,r,a,i){let f=function(e,t,n){return function(r){return t.map(t=>[t,Ve(r,r=>e((t-r)/n))/n])}}(rc,this.scale.y.ticks(100),ac(t.values));const c=Ce(t.values),o=f(t.values).filter(e=>e[0]>=c[0]&&e[0]<=c[1]),u=e.append("g").attr("id",`violin${r}-${t.label}`).attr("class","violin-g").datum(t);if(t.values.length>=i&&o.length&&this._validVertices(o)){let i=Ye(o,e=>Math.abs(e[1]));this.scale.z.domain([-i,i]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()]);let f=xf().x0(e=>this.scale.z(e[1])).x1(e=>this.scale.z(-e[1])).y(e=>this.scale.y(e[0]));const c=u.append("path").datum(o).attr("d",f).classed("violin",!0).style("fill",()=>void 0!==t.color?t.color:r%2==0?"#90c1c1":"#94a8b8"),s=Fe(t.values,.25),l=Fe(t.values,.75),d=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(l-s),r=Ye(t.values.filter(e=>e<=l+1.5*n)),a=Le(t.values.filter(e=>e>=s-1.5*n));e.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(a)).style("stroke","#fff")}u.append("rect").attr("x",this.scale.z(-d)).attr("y",this.scale.y(l)).attr("width",Math.abs(this.scale.z(-d)-this.scale.z(d))).attr("height",Math.abs(this.scale.y(l)-this.scale.y(s))).attr("class","violin-ir");const h=$e(t.values);if(u.append("line").attr("x1",this.scale.z(-d)).attr("x2",this.scale.z(d)).attr("y1",this.scale.y(h)).attr("y2",this.scale.y(h)).attr("class","violin-median"),a){let e=He(0,d/2);const n=Math.abs(l-s),r=Ye(t.values.filter(e=>e<=l+1.5*n)),a=Le(t.values.filter(e=>e>=s-1.5*n)),i=t.values.filter(e=>e<a||e>r);u.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(e())).attr("cy",e=>this.scale.y(e)).attr("r",2)}u.on("mouseover",()=>{c.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(t.group+"<br/>"+t.label+"<br/>Median: "+h.toPrecision(4)+"<br/>")}),u.on("mouseout",()=>{c.classed("highlighted",!1)})}else if(i){let e=Ye(t.values,e=>Math.abs(e));this.scale.z.domain([-e,e]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()]);const n=this.scale.z.domain()[1]/3;let r=He(0,n/2);u.append("g").attr("class","violin-points").selectAll("circle").data(t.values).enter().append("circle").attr("cx",()=>this.scale.z(r())).attr("cy",e=>this.scale.y(e)).attr("r",2)}}_sanityCheck(e){const t=["group","label","values"];e.forEach(e=>{t.forEach(t=>{if(void 0===e[t])throw"GroupedViolin: input data error."})})}_addGroupDivider(e){const t=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(e,r)=>r!==t.length-1?this.scale.x(e)+ +this.scale.x.bandwidth()+n/2:0;e.selectAll(".vline").data(t).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(e,n)=>n!=t.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(e){return!e.reduce((e,t)=>e.concat(t),[]).filter(e=>isNaN(e)).length}}const fc={id:"gtexGroupedViolinPlot",data:{heatmap:Ge({x:50,y:10,scaleFactor:1e3}),dendroHeatmap:{rowTree:"(((TP53:0.17,SLK:0.17):1.18,NDRG4:1.34):1.33,ACTN3:2.67);",colTree:"(((Adipose Visceral Omentum:0.06,Adipose Subcutaneous:0.06):0.00,Bladder:0.06):0.16,Adrenal Gland:0.22);",heatmap:[{y:"SLK",value:35.505,x:"Adipose Subcutaneous",unit:"TPM"},{y:"SLK",value:29.28,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"SLK",value:17.405,x:"Adrenal Gland",unit:"TPM"},{y:"SLK",value:53.29,x:"Bladder",unit:"TPM"},{y:"NDRG4",value:12.035,x:"Adipose Subcutaneous",unit:"TPM"},{y:"NDRG4",value:6.531000000000001,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"NDRG4",value:134.8,x:"Adrenal Gland",unit:"TPM"},{y:"NDRG4",value:7.1160000000000005,x:"Bladder",unit:"TPM"},{y:"TP53",value:29.935,x:"Adipose Subcutaneous",unit:"TPM"},{y:"TP53",value:23.55,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"TP53",value:18.515,x:"Adrenal Gland",unit:"TPM"},{y:"TP53",value:40.51,x:"Bladder",unit:"TPM"},{y:"ACTN3",value:.33145,x:"Adipose Subcutaneous",unit:"TPM"},{y:"ACTN3",value:.3317,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"ACTN3",value:.100005,x:"Adrenal Gland",unit:"TPM"},{y:"ACTN3",value:.48100000000000004,x:"Bladder",unit:"TPM"}]},groupedViolinPlot:[{group:"Group 1",label:"Gene 1",values:De(0,2e3).map(He(2,1))},{group:"Group 1",label:"Gene 2",values:De(0,2e3).map(He(5,1))},{group:"Group 1",label:"Gene 3",values:De(0,2e3).map(He(10,1))},{group:"Group 2",label:"Gene 1",values:De(0,2e3).map(He(5,1))},{group:"Group 2",label:"Gene 2",values:De(0,2e3).map(He(3,1))},{group:"Group 2",label:"Gene 3",values:De(0,2e3).map(He(1,1))},{group:"Group 3",label:"Gene 1",values:De(0,2e3).map(He(2,1))},{group:"Group 3",label:"Gene 2",values:De(0,2e3).map(He(3,1))},{group:"Group 3",label:"Gene 3",values:De(0,2e3).map(He(5,1))}],transcriptTracks:{exons:{"ENST00000311595.9":[{chrom:"17",chromEnd:77071172,exonId:"ENSE00002713933.1",exonNumber:"1",chromStart:77071151,strand:"+"},{chrom:"17",chromEnd:77073579,exonId:"ENSE00003672628.1",exonNumber:"2",chromStart:77073512,strand:"+"},{chrom:"17",chromEnd:77073946,exonId:"ENSE00003475281.1",exonNumber:"3",chromStart:77073745,strand:"+"},{chrom:"17",chromEnd:77075719,exonId:"ENSE00001111713.1",exonNumber:"4",chromStart:77075571,strand:"+"},{chrom:"17",chromEnd:77076446,exonId:"ENSE00003651250.1",exonNumber:"5",chromStart:77076289,strand:"+"},{chrom:"17",chromEnd:77077155,exonId:"ENSE00003607773.1",exonNumber:"6",chromStart:77077007,strand:"+"},{chrom:"17",chromEnd:77078612,exonId:"ENSE00002720924.1",exonNumber:"7",chromStart:77077980,strand:"+"}]},transcripts:[{chromosome:"17",end:77078612,gencodeId:"ENSG00000167280.12",geneSymbol:"ENGASE",start:77071151,strand:"+",transcriptId:"ENST00000311595.9"}]},bubbleMap:Ge({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),ldPlot:Ge({x:2,y:2,scaleFactor:1})}.groupedViolinPlot,width:500,height:300,marginLeft:100,marginRight:20,marginTop:50,marginBottom:100,showDivider:!0,xPadding:.3,yLabel:"Random Value",showSubX:!0,showX:!0,xAngle:0,subXAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0};function cc(e=fc){console.log(e.data);let t={top:e.marginTop,right:e.marginRight,bottom:e.marginBottom,left:e.marginLeft};qe(e.id);let n=e.width-(e.marginLeft+e.marginRight),r=e.height-(e.marginTop+e.marginBottom),a=(e.id,e.id+"Tooltip"),i=function(e,t,n,r,a,i="relative"){return qe(e),void 0===a&&(a=e+"-svg"),we("#"+e).append("svg").attr("width",t).attr("height",n).attr("id",a).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}(e.id,e.width,e.height,t);const f=new ic(e.data);return f.render(i,n,r,e.xPadding,void 0,[],e.yLabel,e.showX,e.xAngle,e.showSubX,e.subXAngle,e.showWhisker,e.showDivider,e.showLegend,e.showSampleSize,e.sortSubX,e.showOutliers,e.numPoints),i.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1),f.createTooltip(a),i}function oc(e,t,n,r,a,i=function(){const e="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:e+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:e+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",dyneqtl:e+"association/dyneqtl",snp:e+"reference/variant?format=json&snpId=",variantId:e+"dataset/variant?format=json&variantId=",exonExp:e+"expression/medianExonExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcriptExp:e+"expression/medianTranscriptExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",junctionExp:e+"expression/medianJunctionExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcript:e+"reference/transcript?datasetId=gtex_v8&gencodeId=",exon:e+"reference/exon?datasetId=gtex_v8&gencodeId=",geneModel:e+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneModelUnfiltered:e+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneExp:e+"expression/geneExpression?datasetId=gtex_v8&gencodeId=",medGeneExp:e+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000",geneExpBoxplot:e+"expression/geneExpression?datasetId=gtex_v8&boxplotDetail=full&gencodeId=",topInTissueFiltered:e+"expression/topExpressedGene?datasetId=gtex_v8&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:e+"expression/topExpressedGene?datasetId=gtex_v8&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:e+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",tissue:e+"dataset/tissueInfo?format=json&datasetId=gtex_v8",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){(function(e,t){return fetch(e,t).then(s)})(i.dyneqtl+`?variantId=${n}&gencodeId=${t}&tissueSiteDetailId=${r}`,{credentials:"include"}).then((function(t){let n=function(e){["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach(t=>{if(!e.hasOwnProperty(t))throw console.error(e),"Parse Error: Required json attribute is missing: "+t}),e.expression_values=e.data.map(e=>parseFloat(e)),e.genotypes=e.genotypes.map(e=>parseFloat(e)),e.homoRefExp=e.expression_values.filter((t,n)=>0===e.genotypes[n]),e.homoAltExp=e.expression_values.filter((t,n)=>2===e.genotypes[n]),e.heteroExp=e.expression_values.filter((t,n)=>1===e.genotypes[n]);let t=e.variantId.split(/_/)[2],n=e.variantId.split(/_/)[3];return e.het=t+n,e.ref=t+t,e.alt=n+n,e}(t);e.data=[{group:a||n.tissueSiteDetailId,label:n.ref.length>2?"ref":n.ref,size:n.homoRefExp.length,values:n.homoRefExp},{group:a||n.tissueSiteDetailId,label:n.het.length>2?"het":n.het,size:n.heteroExp.length,values:n.heteroExp},{group:a||n.tissueSiteDetailId,label:n.alt.length>2?"alt":n.alt,size:n.homoAltExp.length,values:n.homoAltExp}],e.numPoints=10,cc(e)}))}var uc={render:oc};e.EqtlViolinPlot=uc,e.render=oc,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
