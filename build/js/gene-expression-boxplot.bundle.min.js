!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("jquery")):"function"==typeof define&&define.amd?define(["exports","jquery"],n):n((t=t||self).GeneExpressionBoxplot={},t.$)}(this,(function(t,n){"use strict";n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n;var e={},r={};function i(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function o(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function a(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function u(t){var n=t.getUTCHours(),e=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+a(-t,6):t>9999?"+"+a(t,6):a(t,4)}(t.getUTCFullYear())+"-"+a(t.getUTCMonth()+1,2)+"-"+a(t.getUTCDate(),2)+(i?"T"+a(n,2)+":"+a(e,2)+":"+a(r,2)+"."+a(i,3)+"Z":r?"T"+a(n,2)+":"+a(e,2)+":"+a(r,2)+"Z":e||n?"T"+a(n,2)+":"+a(e,2)+"Z":"")}function s(t){var n=new RegExp('["'+t+"\n\r]"),a=t.charCodeAt(0);function s(t,n){var i,o=[],u=t.length,s=0,l=0,c=u<=0,f=!1;function h(){if(c)return r;if(f)return f=!1,e;var n,i,o=s;if(34===t.charCodeAt(o)){for(;s++<u&&34!==t.charCodeAt(s)||34===t.charCodeAt(++s););return(n=s)>=u?c=!0:10===(i=t.charCodeAt(s++))?f=!0:13===i&&(f=!0,10===t.charCodeAt(s)&&++s),t.slice(o+1,n-1).replace(/""/g,'"')}for(;s<u;){if(10===(i=t.charCodeAt(n=s++)))f=!0;else if(13===i)f=!0,10===t.charCodeAt(s)&&++s;else if(i!==a)continue;return t.slice(o,n)}return c=!0,t.slice(o,u)}for(10===t.charCodeAt(u-1)&&--u,13===t.charCodeAt(u-1)&&--u;(i=h())!==r;){for(var p=[];i!==e&&i!==r;)p.push(i),i=h();n&&null==(p=n(p,l++))||o.push(p)}return o}function l(n,e){return n.map((function(n){return e.map((function(t){return f(n[t])})).join(t)}))}function c(n){return n.map(f).join(t)}function f(t){return null==t?"":t instanceof Date?u(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,o=s(t,(function(t,o){if(e)return e(t,o-1);r=t,e=n?function(t,n){var e=i(t);return function(r,i){return n(e(r),i,t)}}(t,n):i(t)}));return o.columns=r||[],o},parseRows:s,format:function(n,e){return null==e&&(e=o(n)),[e.map(f).join(t)].concat(l(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=o(t)),l(t,n).join("\n")},formatRows:function(t){return t.map(c).join("\n")},formatRow:c,formatValue:f}}s(","),s("\t"),new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function l(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function c(t,n){return fetch(t,n).then(l)}function f(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var h,p,d=(1===(h=f).length&&(p=h,h=function(t,n){return f(p(t),n)}),{left:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;h(t[i],n)<0?e=i+1:r=i}return e},right:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;h(t[i],n)>0?r=i:e=i+1}return e}}).right;function g(t){return null===t?NaN:+t}function m(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}function v(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var y=Math.sqrt(50),w=Math.sqrt(10),x=Math.sqrt(2);function _(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=b(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o}function b(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=y?10:o>=w?5:o>=x?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=y?10:o>=w?5:o>=x?2:1)}function M(t,n,e){if(null==e&&(e=g),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}var T="http://www.w3.org/1999/xhtml",A={svg:"http://www.w3.org/2000/svg",xhtml:T,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function C(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),A.hasOwnProperty(n)?{space:A[n],local:t}:t}function k(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===T&&n.documentElement.namespaceURI===T?n.createElement(t):n.createElementNS(e,t)}}function N(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function D(t){var n=C(t);return(n.local?N:k)(n)}function S(){}function E(t){return null==t?S:function(){return this.querySelector(t)}}function U(){return[]}function I(t){return null==t?U:function(){return this.querySelectorAll(t)}}function q(t){return function(){return this.matches(t)}}function F(t){return new Array(t.length)}function L(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}L.prototype={constructor:L,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function $(t,n,e,r,i,o){for(var a,u=0,s=n.length,l=o.length;u<l;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new L(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function j(t,n,e,r,i,o,a){var u,s,l,c={},f=n.length,h=o.length,p=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(p[u]=l="$"+a.call(s,s.__data__,u,n),l in c?i[u]=s:c[l]=s);for(u=0;u<h;++u)(s=c[l="$"+a.call(t,o[u],u,o)])?(r[u]=s,s.__data__=o[u],c[l]=null):e[u]=new L(t,o[u]);for(u=0;u<f;++u)(s=n[u])&&c[p[u]]===s&&(i[u]=s)}function H(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function Y(t){return function(){this.removeAttribute(t)}}function P(t){return function(){this.removeAttributeNS(t.space,t.local)}}function B(t,n){return function(){this.setAttribute(t,n)}}function O(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function z(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function V(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function X(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function R(t){return function(){this.style.removeProperty(t)}}function Z(t,n,e){return function(){this.style.setProperty(t,n,e)}}function G(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function W(t,n){return t.style.getPropertyValue(n)||X(t).getComputedStyle(t,null).getPropertyValue(n)}function J(t){return function(){delete this[t]}}function Q(t,n){return function(){this[t]=n}}function K(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function tt(t){return t.trim().split(/^|\s+/)}function nt(t){return t.classList||new et(t)}function et(t){this._node=t,this._names=tt(t.getAttribute("class")||"")}function rt(t,n){for(var e=nt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function it(t,n){for(var e=nt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function ot(t){return function(){rt(this,t)}}function at(t){return function(){it(this,t)}}function ut(t,n){return function(){(n.apply(this,arguments)?rt:it)(this,t)}}function st(){this.textContent=""}function lt(t){return function(){this.textContent=t}}function ct(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function ft(){this.innerHTML=""}function ht(t){return function(){this.innerHTML=t}}function pt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function dt(){this.nextSibling&&this.parentNode.appendChild(this)}function gt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function mt(){return null}function vt(){var t=this.parentNode;t&&t.removeChild(this)}function yt(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function wt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}et.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var xt={},_t=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(xt={mouseenter:"mouseover",mouseleave:"mouseout"}));function bt(t,n,e){return t=Mt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Mt(t,n,e){return function(r){var i=_t;_t=r;try{t.call(this,this.__data__,n,e)}finally{_t=i}}}function Tt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function At(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Ct(t,n,e){var r=xt.hasOwnProperty(t.type)?bt:Mt;return function(i,o,a){var u,s=this.__on,l=r(n,o,a);if(s)for(var c=0,f=s.length;c<f;++c)if((u=s[c]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=l,u.capture=e),void(u.value=n);this.addEventListener(t.type,l,e),u={type:t.type,name:t.name,value:n,listener:l,capture:e},s?s.push(u):this.__on=[u]}}function kt(t,n,e){var r=X(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Nt(t,n){return function(){return kt(this,t,n)}}function Dt(t,n){return function(){return kt(this,t,n.apply(this,arguments))}}var St=[null];function Et(t,n){this._groups=t,this._parents=n}function Ut(){return new Et([[document.documentElement]],St)}function It(t){return"string"==typeof t?new Et([[document.querySelector(t)]],[document.documentElement]):new Et([[t]],St)}function qt(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}Et.prototype=Ut.prototype={constructor:Et,select:function(t){"function"!=typeof t&&(t=E(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],s=u.length,l=r[i]=new Array(s),c=0;c<s;++c)(o=u[c])&&(a=t.call(o,o.__data__,c,u))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new Et(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=I(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],s=u.length,l=0;l<s;++l)(a=u[l])&&(r.push(t.call(a,a.__data__,l,u)),i.push(a));return new Et(r,i)},filter:function(t){"function"!=typeof t&&(t=q(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],l=0;l<u;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new Et(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var e,r=n?j:$,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),s=new Array(a),l=new Array(a),c=0;c<a;++c){var f=i[c],h=o[c],p=h.length,d=t.call(f,f&&f.__data__,c,i),g=d.length,m=s[c]=new Array(g),v=u[c]=new Array(g);r(f,h,m,v,l[c]=new Array(p),d,n);for(var y,w,x=0,_=0;x<g;++x)if(y=m[x]){for(x>=_&&(_=x+1);!(w=v[_])&&++_<g;);y._next=w||null}}return(u=new Et(u,i))._enter=s,u._exit=l,u},enter:function(){return new Et(this._enter||this._groups.map(F),this._parents)},exit:function(){return new Et(this._exit||this._groups.map(F),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],f=l.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;u<r;++u)a[u]=n[u];return new Et(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=H);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,l=i[o]=new Array(s),c=0;c<s;++c)(a=u[c])&&(l[c]=a);l.sort(n)}return new Et(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=C(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?P:Y:"function"==typeof n?e.local?V:z:e.local?O:B)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?R:"function"==typeof n?G:Z)(t,n,null==e?"":e)):W(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?J:"function"==typeof n?K:Q)(t,n)):this.node()[t]},classed:function(t,n){var e=tt(t+"");if(arguments.length<2){for(var r=nt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?ut:n?ot:at)(e,n))},text:function(t){return arguments.length?this.each(null==t?st:("function"==typeof t?ct:lt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?ft:("function"==typeof t?pt:ht)(t)):this.node().innerHTML},raise:function(){return this.each(dt)},lower:function(){return this.each(gt)},append:function(t){var n="function"==typeof t?t:D(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:D(t),r=null==n?mt:"function"==typeof n?n:E(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(vt)},clone:function(t){return this.select(t?wt:yt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Tt(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?Ct:At,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,l=0,c=u.length;l<c;++l)for(r=0,s=u[l];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?Dt:Nt)(t,n))}};function Ft(){}function Lt(t,n){var e=new Ft;if(t instanceof Ft)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function $t(){}Ft.prototype=Lt.prototype={constructor:Ft,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var jt=Lt.prototype;$t.prototype=function(t,n){var e=new $t;if(t instanceof $t)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}.prototype={constructor:$t,has:jt.has,add:function(t){return this["$"+(t+="")]=t,this},remove:jt.remove,clear:jt.clear,values:jt.keys,size:jt.size,empty:jt.empty,each:jt.each};var Ht=Array.prototype,Yt=Ht.map,Pt=Ht.slice,Bt={name:"implicit"};function Ot(){var t=Lt(),n=[],e=[],r=Bt;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==Bt)return r;t.set(o,a=n.push(i))}return e[(a-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Lt();for(var r,o,a=-1,u=e.length;++a<u;)t.has(o=(r=e[a])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=Pt.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Ot(n,e).unknown(r)},qt.apply(i,arguments),i}function zt(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Vt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Xt(){}var Rt="\\s*([+-]?\\d+)\\s*",Zt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Gt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Wt=/^#([0-9a-f]{3,8})$/,Jt=new RegExp("^rgb\\("+[Rt,Rt,Rt]+"\\)$"),Qt=new RegExp("^rgb\\("+[Gt,Gt,Gt]+"\\)$"),Kt=new RegExp("^rgba\\("+[Rt,Rt,Rt,Zt]+"\\)$"),tn=new RegExp("^rgba\\("+[Gt,Gt,Gt,Zt]+"\\)$"),nn=new RegExp("^hsl\\("+[Zt,Gt,Gt]+"\\)$"),en=new RegExp("^hsla\\("+[Zt,Gt,Gt,Zt]+"\\)$"),rn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function on(){return this.rgb().formatHex()}function an(){return this.rgb().formatRgb()}function un(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Wt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?sn(n):3===e?new hn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?ln(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?ln(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Jt.exec(t))?new hn(n[1],n[2],n[3],1):(n=Qt.exec(t))?new hn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Kt.exec(t))?ln(n[1],n[2],n[3],n[4]):(n=tn.exec(t))?ln(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=nn.exec(t))?mn(n[1],n[2]/100,n[3]/100,1):(n=en.exec(t))?mn(n[1],n[2]/100,n[3]/100,n[4]):rn.hasOwnProperty(t)?sn(rn[t]):"transparent"===t?new hn(NaN,NaN,NaN,0):null}function sn(t){return new hn(t>>16&255,t>>8&255,255&t,1)}function ln(t,n,e,r){return r<=0&&(t=n=e=NaN),new hn(t,n,e,r)}function cn(t){return t instanceof Xt||(t=un(t)),t?new hn((t=t.rgb()).r,t.g,t.b,t.opacity):new hn}function fn(t,n,e,r){return 1===arguments.length?cn(t):new hn(t,n,e,null==r?1:r)}function hn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function pn(){return"#"+gn(this.r)+gn(this.g)+gn(this.b)}function dn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function gn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function mn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new yn(t,n,e,r)}function vn(t){if(t instanceof yn)return new yn(t.h,t.s,t.l,t.opacity);if(t instanceof Xt||(t=un(t)),!t)return new yn;if(t instanceof yn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new yn(a,u,s,t.opacity)}function yn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function wn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}zt(Xt,un,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:on,formatHex:on,formatHsl:function(){return vn(this).formatHsl()},formatRgb:an,toString:an}),zt(hn,fn,Vt(Xt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new hn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new hn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:pn,formatHex:pn,formatRgb:dn,toString:dn})),zt(yn,(function(t,n,e,r){return 1===arguments.length?vn(t):new yn(t,n,e,null==r?1:r)}),Vt(Xt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new yn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new yn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new hn(wn(t>=240?t-240:t+120,i,r),wn(t,i,r),wn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var xn=Math.PI/180,_n=180/Math.PI,bn=6/29,Mn=3*bn*bn;function Tn(t){if(t instanceof An)return new An(t.l,t.a,t.b,t.opacity);if(t instanceof En)return Un(t);t instanceof hn||(t=cn(t));var n,e,r=Dn(t.r),i=Dn(t.g),o=Dn(t.b),a=Cn((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=a:(n=Cn((.4360747*r+.3850649*i+.1430804*o)/.96422),e=Cn((.0139322*r+.0971045*i+.7141733*o)/.82521)),new An(116*a-16,500*(n-a),200*(a-e),t.opacity)}function An(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Cn(t){return t>.008856451679035631?Math.pow(t,1/3):t/Mn+4/29}function kn(t){return t>bn?t*t*t:Mn*(t-4/29)}function Nn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Dn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Sn(t){if(t instanceof En)return new En(t.h,t.c,t.l,t.opacity);if(t instanceof An||(t=Tn(t)),0===t.a&&0===t.b)return new En(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*_n;return new En(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function En(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Un(t){if(isNaN(t.h))return new An(t.l,0,0,t.opacity);var n=t.h*xn;return new An(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}zt(An,(function(t,n,e,r){return 1===arguments.length?Tn(t):new An(t,n,e,null==r?1:r)}),Vt(Xt,{brighter:function(t){return new An(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new An(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new hn(Nn(3.1338561*(n=.96422*kn(n))-1.6168667*(t=1*kn(t))-.4906146*(e=.82521*kn(e))),Nn(-.9787684*n+1.9161415*t+.033454*e),Nn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),zt(En,(function(t,n,e,r){return 1===arguments.length?Sn(t):new En(t,n,e,null==r?1:r)}),Vt(Xt,{brighter:function(t){return new En(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new En(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Un(this).rgb()}}));var In=-.14861,qn=1.78277,Fn=-.29227,Ln=-.90649,$n=1.97294,jn=$n*Ln,Hn=$n*qn,Yn=qn*Fn-Ln*In;function Pn(t){if(t instanceof Bn)return new Bn(t.h,t.s,t.l,t.opacity);t instanceof hn||(t=cn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Yn*r+jn*n-Hn*e)/(Yn+jn-Hn),o=r-i,a=($n*(e-i)-Fn*o)/Ln,u=Math.sqrt(a*a+o*o)/($n*i*(1-i)),s=u?Math.atan2(a,o)*_n-120:NaN;return new Bn(s<0?s+360:s,u,i,t.opacity)}function Bn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function On(t){return function(){return t}}function zn(t){return 1==(t=+t)?Vn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):On(isNaN(n)?e:n)}}function Vn(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):On(isNaN(t)?n:t)}zt(Bn,(function(t,n,e,r){return 1===arguments.length?Pn(t):new Bn(t,n,e,null==r?1:r)}),Vt(Xt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Bn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Bn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*xn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new hn(255*(n+e*(In*r+qn*i)),255*(n+e*(Fn*r+Ln*i)),255*(n+e*($n*r)),this.opacity)}}));var Xn=function t(n){var e=zn(n);function r(t,n){var r=e((t=fn(t)).r,(n=fn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=Vn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Rn(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function Zn(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=ne(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}function Gn(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function Wn(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function Jn(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=ne(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var Qn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Kn=new RegExp(Qn.source,"g");function te(t,n){var e,r,i,o=Qn.lastIndex=Kn.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=Qn.exec(t))&&(r=Kn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Wn(e,r)})),o=Kn.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})}function ne(t,n){var e,r,i=typeof n;return null==n||"boolean"===i?On(n):("number"===i?Wn:"string"===i?(e=un(n))?(n=e,Xn):te:n instanceof un?Xn:n instanceof Date?Gn:(r=n,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(n)?Zn:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Jn:Wn:Rn))(t,n)}function ee(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}var re,ie,oe,ae,ue=180/Math.PI,se={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function le(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*ue,skewX:Math.atan(s)*ue,scaleX:a,scaleY:u}}function ce(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:Wn(t,i)},{i:s-2,x:Wn(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Wn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Wn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,s),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Wn(t,e)},{i:u-2,x:Wn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var fe=ce((function(t){return"none"===t?se:(re||(re=document.createElement("DIV"),ie=document.documentElement,oe=document.defaultView),re.style.transform=t,t=oe.getComputedStyle(ie.appendChild(re),null).getPropertyValue("transform"),ie.removeChild(re),le(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),he=ce((function(t){return null==t?se:(ae||(ae=document.createElementNS("http://www.w3.org/2000/svg","g")),ae.setAttribute("transform",t),(t=ae.transform.baseVal.consolidate())?le((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):se)}),", ",")",")");function pe(t){return+t}var de=[0,1];function ge(t){return t}function me(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function ve(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function ye(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=me(i,r),o=e(a,o)):(r=me(r,i),o=e(o,a)),function(t){return o(r(t))}}function we(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=me(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=d(t,n,1,r)-1;return o[e](i[e](n))}}function xe(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function _e(){var t,n,e,r,i,o,a=de,u=de,s=ne,l=ge;function c(){return r=Math.min(a.length,u.length)>2?we:ye,i=o=null,f}function f(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),u,s)))(t(l(n)))}return f.invert=function(e){return l(n((o||(o=r(u,a.map(t),Wn)))(e)))},f.domain=function(t){return arguments.length?(a=Yt.call(t,pe),l===ge||(l=ve(a)),c()):a.slice()},f.range=function(t){return arguments.length?(u=Pt.call(t),c()):u.slice()},f.rangeRound=function(t){return u=Pt.call(t),s=ee,c()},f.clamp=function(t){return arguments.length?(l=t?ve(a):ge,f):l!==ge},f.interpolate=function(t){return arguments.length?(s=t,c()):s},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,c()}}function be(t,n){return _e()(t,n)}function Me(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function Te(t){return(t=Me(Math.abs(t)))?t[1]:NaN}var Ae,Ce=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ke(t){if(!(n=Ce.exec(t)))throw new Error("invalid format: "+t);var n;return new Ne({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Ne(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function De(t,n){var e=Me(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}ke.prototype=Ne.prototype,Ne.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Se={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return De(100*t,n)},r:De,s:function(t,n){var e=Me(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Ae=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Me(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Ee(t){return t}var Ue,Ie,qe,Fe=Array.prototype.map,Le=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function $e(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?Ee:(n=Fe.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?Ee:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(Fe.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=ke(t)).fill,e=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,g=t.comma,m=t.precision,v=t.trim,y=t.type;"n"===y?(g=!0,y="g"):Se[y]||(void 0===m&&(m=12),v=!0,y="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var w="$"===h?i:"#"===h&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",x="$"===h?o:/[%p]/.test(y)?s:"",_=Se[y],b=/[defgprs%]/.test(y);function M(t){var i,o,s,h=w,M=x;if("c"===y)M=_(t)+M,t="";else{var T=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:_(Math.abs(t),m),v&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),T&&0==+t&&"+"!==f&&(T=!1),h=(T?"("===f?f:l:"-"===f||"("===f?"":f)+h,M=("s"===y?Le[8+Ae/3]:"")+M+(T&&"("===f?")":""),b)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){M=(46===s?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var A=h.length+t.length+M.length,C=A<d?new Array(d-A+1).join(n):"";switch(g&&p&&(t=r(C+t,C.length?d-M.length:1/0),C=""),e){case"<":t=h+t+M+C;break;case"=":t=h+C+t+M;break;case"^":t=C.slice(0,A=C.length>>1)+h+t+M+C.slice(A);break;default:t=C+h+t+M}return u(t)}return m=void 0===m?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),M.toString=function(){return t+""},M}return{format:f,formatPrefix:function(t,n){var e=f(((t=ke(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Te(n)/3))),i=Math.pow(10,-r),o=Le[8+r/3];return function(t){return e(i*t)+o}}}}function je(t,n,e,r){var i,o=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=y?i*=10:o>=w?i*=5:o>=x&&(i*=2),n<t?-i:i}(t,n,e);switch((r=ke(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Te(n)/3)))-Te(Math.abs(t)))}(o,a))||(r.precision=i),qe(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Te(n)-Te(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Te(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Ie(r)}function He(t){var n=t.domain;return t.ticks=function(t){var e=n();return _(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return je(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,u=i[o],s=i[a];return s<u&&(r=u,u=s,s=r,r=o,o=a,a=r),(r=b(u,s,e))>0?r=b(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=b(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(s/r)*r,n(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(s*r)/r,n(i)),t},t}function Ye(t){return Math.log(t)}function Pe(t){return Math.exp(t)}function Be(t){return-Math.log(-t)}function Oe(t){return-Math.exp(-t)}function ze(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Ve(t){return function(n){return-t(-n)}}function Xe(t){var n,e,r=t(Ye,Pe),i=r.domain,o=10;function a(){return n=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}(o),e=function(t){return 10===t?ze:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}(o),i()[0]<0?(n=Ve(n),e=Ve(e),t(Be,Oe)):t(Ye,Pe),r}return r.base=function(t){return arguments.length?(o=+t,a()):o},r.domain=function(t){return arguments.length?(i(t),a()):i()},r.ticks=function(t){var r,a=i(),u=a[0],s=a[a.length-1];(r=s<u)&&(h=u,u=s,s=h);var l,c,f,h=n(u),p=n(s),d=null==t?10:+t,g=[];if(!(o%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,u>0){for(;h<p;++h)for(c=1,l=e(h);c<o;++c)if(!((f=l*c)<u)){if(f>s)break;g.push(f)}}else for(;h<p;++h)for(c=o-1,l=e(h);c>=1;--c)if(!((f=l*c)<u)){if(f>s)break;g.push(f)}}else g=_(h,p,Math.min(p-h,d)).map(e);return r?g.reverse():g},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=Ie(i)),t===1/0)return i;null==t&&(t=10);var a=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/e(Math.round(n(t)));return r*o<o-.5&&(r*=o),r<=a?i(t):""}},r.nice=function(){return i(function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t}(i(),{floor:function(t){return e(Math.floor(n(t)))},ceil:function(t){return e(Math.ceil(n(t)))}}))},r}Ue=$e({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Ie=Ue.format,qe=Ue.formatPrefix;var Re=new Date,Ze=new Date;function Ge(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return Ge((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Re.setTime(+n),Ze.setTime(+r),t(Re),t(Ze),Math.floor(e(Re,Ze))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var We=Ge((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));We.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ge((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):We:null};Ge((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()})),Ge((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()})),Ge((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}));var Je=Ge((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}));function Qe(t){return Ge((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Ke=Qe(0),tr=Qe(1),nr=(Qe(2),Qe(3),Qe(4)),er=(Qe(5),Qe(6),Ge((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Ge((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()})));er.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ge((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};Ge((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})),Ge((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}));var rr=Ge((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}));function ir(t){return Ge((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var or=ir(0),ar=ir(1),ur=(ir(2),ir(3),ir(4)),sr=(ir(5),ir(6),Ge((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),Ge((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));function lr(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function cr(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function fr(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}sr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ge((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var hr,pr,dr,gr={"-":"",_:" ",0:"0"},mr=/^\s*\d+/,vr=/^%/,yr=/[\\^$*+?|[\]().{}]/g;function wr(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function xr(t){return t.replace(yr,"\\$&")}function _r(t){return new RegExp("^(?:"+t.map(xr).join("|")+")","i")}function br(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Mr(t,n,e){var r=mr.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Tr(t,n,e){var r=mr.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Ar(t,n,e){var r=mr.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Cr(t,n,e){var r=mr.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function kr(t,n,e){var r=mr.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Nr(t,n,e){var r=mr.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Dr(t,n,e){var r=mr.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Sr(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Er(t,n,e){var r=mr.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Ur(t,n,e){var r=mr.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Ir(t,n,e){var r=mr.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function qr(t,n,e){var r=mr.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Fr(t,n,e){var r=mr.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Lr(t,n,e){var r=mr.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function $r(t,n,e){var r=mr.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function jr(t,n,e){var r=mr.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Hr(t,n,e){var r=mr.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Yr(t,n,e){var r=vr.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Pr(t,n,e){var r=mr.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Br(t,n,e){var r=mr.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Or(t,n){return wr(t.getDate(),n,2)}function zr(t,n){return wr(t.getHours(),n,2)}function Vr(t,n){return wr(t.getHours()%12||12,n,2)}function Xr(t,n){return wr(1+Je.count(er(t),t),n,3)}function Rr(t,n){return wr(t.getMilliseconds(),n,3)}function Zr(t,n){return Rr(t,n)+"000"}function Gr(t,n){return wr(t.getMonth()+1,n,2)}function Wr(t,n){return wr(t.getMinutes(),n,2)}function Jr(t,n){return wr(t.getSeconds(),n,2)}function Qr(t){var n=t.getDay();return 0===n?7:n}function Kr(t,n){return wr(Ke.count(er(t)-1,t),n,2)}function ti(t,n){var e=t.getDay();return t=e>=4||0===e?nr(t):nr.ceil(t),wr(nr.count(er(t),t)+(4===er(t).getDay()),n,2)}function ni(t){return t.getDay()}function ei(t,n){return wr(tr.count(er(t)-1,t),n,2)}function ri(t,n){return wr(t.getFullYear()%100,n,2)}function ii(t,n){return wr(t.getFullYear()%1e4,n,4)}function oi(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+wr(n/60|0,"0",2)+wr(n%60,"0",2)}function ai(t,n){return wr(t.getUTCDate(),n,2)}function ui(t,n){return wr(t.getUTCHours(),n,2)}function si(t,n){return wr(t.getUTCHours()%12||12,n,2)}function li(t,n){return wr(1+rr.count(sr(t),t),n,3)}function ci(t,n){return wr(t.getUTCMilliseconds(),n,3)}function fi(t,n){return ci(t,n)+"000"}function hi(t,n){return wr(t.getUTCMonth()+1,n,2)}function pi(t,n){return wr(t.getUTCMinutes(),n,2)}function di(t,n){return wr(t.getUTCSeconds(),n,2)}function gi(t){var n=t.getUTCDay();return 0===n?7:n}function mi(t,n){return wr(or.count(sr(t)-1,t),n,2)}function vi(t,n){var e=t.getUTCDay();return t=e>=4||0===e?ur(t):ur.ceil(t),wr(ur.count(sr(t),t)+(4===sr(t).getUTCDay()),n,2)}function yi(t){return t.getUTCDay()}function wi(t,n){return wr(ar.count(sr(t)-1,t),n,2)}function xi(t,n){return wr(t.getUTCFullYear()%100,n,2)}function _i(t,n){return wr(t.getUTCFullYear()%1e4,n,4)}function bi(){return"+0000"}function Mi(){return"%"}function Ti(t){return+t}function Ai(t){return Math.floor(+t/1e3)}!function(t){hr=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,l=_r(i),c=br(i),f=_r(o),h=br(o),p=_r(a),d=br(a),g=_r(u),m=br(u),v=_r(s),y=br(s),w={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Or,e:Or,f:Zr,H:zr,I:Vr,j:Xr,L:Rr,m:Gr,M:Wr,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ti,s:Ai,S:Jr,u:Qr,U:Kr,V:ti,w:ni,W:ei,x:null,X:null,y:ri,Y:ii,Z:oi,"%":Mi},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:ai,e:ai,f:fi,H:ui,I:si,j:li,L:ci,m:hi,M:pi,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ti,s:Ai,S:di,u:gi,U:mi,V:vi,w:yi,W:wi,x:null,X:null,y:xi,Y:_i,Z:bi,"%":Mi},_={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return T(t,n,e,r)},d:Ir,e:Ir,f:Hr,H:Fr,I:Fr,j:qr,L:jr,m:Ur,M:Lr,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},q:Er,Q:Pr,s:Br,S:$r,u:Tr,U:Ar,V:Cr,w:Mr,W:kr,x:function(t,n,r){return T(t,e,n,r)},X:function(t,n,e){return T(t,r,n,e)},y:Dr,Y:Nr,Z:Sr,"%":Yr};function b(t,n){return function(e){var r,i,o,a=[],u=-1,s=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++u<l;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=gr[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function M(t,n){return function(e){var r,i,o=fr(1900,void 0,1);if(T(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=cr(fr(o.y,0,1))).getUTCDay(),r=i>4||0===i?ar.ceil(r):ar(r),r=rr.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=lr(fr(o.y,0,1))).getDay(),r=i>4||0===i?tr.ceil(r):tr(r),r=Je.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?cr(fr(o.y,0,1)).getUTCDay():lr(fr(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,cr(o)):lr(o)}}function T(t,n,e,r){for(var i,o,a=0,u=n.length,s=e.length;a<u;){if(r>=s)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=_[i in gr?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return w.x=b(e,w),w.X=b(r,w),w.c=b(n,w),x.x=b(e,x),x.X=b(r,x),x.c=b(n,x),{format:function(t){var n=b(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=b(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}(t),hr.format,hr.parse,pr=hr.utcFormat,dr=hr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||pr("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||dr("%Y-%m-%dT%H:%M:%S.%LZ");var Ci=Array.prototype.slice;function ki(t){return t}function Ni(t){return"translate("+(t+.5)+",0)"}function Di(t){return"translate(0,"+(t+.5)+")"}function Si(t){return function(n){return+t(n)}}function Ei(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function Ui(){return!this.__axis}function Ii(t,n){var e=[],r=null,i=null,o=6,a=6,u=3,s=1===t||4===t?-1:1,l=4===t||2===t?"x":"y",c=1===t||3===t?Ni:Di;function f(f){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):ki:i,d=Math.max(o,0)+u,g=n.range(),m=+g[0]+.5,v=+g[g.length-1]+.5,y=(n.bandwidth?Ei:Si)(n.copy()),w=f.selection?f.selection():f,x=w.selectAll(".domain").data([null]),_=w.selectAll(".tick").data(h,n).order(),b=_.exit(),M=_.enter().append("g").attr("class","tick"),T=_.select("line"),A=_.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),_=_.merge(M),T=T.merge(M.append("line").attr("stroke","currentColor").attr(l+"2",s*o)),A=A.merge(M.append("text").attr("fill","currentColor").attr(l,s*d).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),f!==w&&(x=x.transition(f),_=_.transition(f),T=T.transition(f),A=A.transition(f),b=b.transition(f).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=y(t))?c(t):this.getAttribute("transform")})),M.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return c(n&&isFinite(n=n(t))?n:y(t))}))),b.remove(),x.attr("d",4===t||2==t?a?"M"+s*a+","+m+"H0.5V"+v+"H"+s*a:"M0.5,"+m+"V"+v:a?"M"+m+","+s*a+"V0.5H"+v+"V"+s*a:"M"+m+",0.5H"+v),_.attr("opacity",1).attr("transform",(function(t){return c(y(t))})),T.attr(l+"2",s*o),A.attr(l,s*d).text(p),w.filter(Ui).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),w.each((function(){this.__axis=y}))}return f.scale=function(t){return arguments.length?(n=t,f):n},f.ticks=function(){return e=Ci.call(arguments),f},f.tickArguments=function(t){return arguments.length?(e=null==t?[]:Ci.call(t),f):e.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:Ci.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=a=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(a=+t,f):a},f.tickPadding=function(t){return arguments.length?(u=+t,f):u},f}var qi={value:function(){}};function Fi(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Li(r)}function Li(t){this._=t}function $i(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function ji(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Hi(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=qi,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}Li.prototype=Fi.prototype={constructor:Li,on:function(t,n){var e,r=this._,i=$i(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=Hi(r[e],t.name,n);else if(null==n)for(e in r)r[e]=Hi(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=ji(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Li(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var Yi,Pi,Bi=0,Oi=0,zi=0,Vi=0,Xi=0,Ri=0,Zi="object"==typeof performance&&performance.now?performance:Date,Gi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Wi(){return Xi||(Gi(Ji),Xi=Zi.now()+Ri)}function Ji(){Xi=0}function Qi(){this._call=this._time=this._next=null}function Ki(t,n,e){var r=new Qi;return r.restart(t,n,e),r}function to(){Xi=(Vi=Zi.now())+Ri,Bi=Oi=0;try{!function(){Wi(),++Bi;for(var t,n=Yi;n;)(t=Xi-n._time)>=0&&n._call.call(null,t),n=n._next;--Bi}()}finally{Bi=0,function(){var t,n,e=Yi,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Yi=n);Pi=t,eo(r)}(),Xi=0}}function no(){var t=Zi.now(),n=t-Vi;n>1e3&&(Ri-=n,Vi=t)}function eo(t){Bi||(Oi&&(Oi=clearTimeout(Oi)),t-Xi>24?(t<1/0&&(Oi=setTimeout(to,t-Zi.now()-Ri)),zi&&(zi=clearInterval(zi))):(zi||(Vi=Zi.now(),zi=setInterval(no,1e3)),Bi=1,Gi(to)))}function ro(t,n,e){var r=new Qi;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}Qi.prototype=Ki.prototype={constructor:Qi,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Wi():+e)+(null==n?0:+n),this._next||Pi===this||(Pi?Pi._next=this:Yi=this,Pi=this),this._call=t,this._time=e,eo()},stop:function(){this._call&&(this._call=null,this._time=1/0,eo())}};var io=Fi("start","end","cancel","interrupt"),oo=[];function ao(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var l,c,f,h;if(1!==e.state)return u();for(l in i)if((h=i[l]).name===e.name){if(3===h.state)return ro(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[l]):+l<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[l])}if(ro((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),l=0,c=-1;l<f;++l)(h=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=h);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Ki((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:io,tween:oo,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function uo(t,n){var e=lo(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function so(t,n){var e=lo(t,n);if(e.state>3)throw new Error("too late; already running");return e}function lo(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function co(t,n){var e,r;return function(){var i=so(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function fo(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=so(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=u;break}s===l&&i.push(u)}o.tween=i}}function ho(t,n,e){var r=t._id;return t.each((function(){var t=so(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return lo(t,r).value[n]}}function po(t,n){var e;return("number"==typeof n?Wn:n instanceof un?Xn:(e=un(n))?(n=e,Xn):te)(t,n)}function go(t){return function(){this.removeAttribute(t)}}function mo(t){return function(){this.removeAttributeNS(t.space,t.local)}}function vo(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function yo(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function wo(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttribute(t)}}function xo(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttributeNS(t.space,t.local)}}function _o(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function bo(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Mo(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&bo(t,i)),e}return i._value=n,i}function To(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&_o(t,i)),e}return i._value=n,i}function Ao(t,n){return function(){uo(this,t).delay=+n.apply(this,arguments)}}function Co(t,n){return n=+n,function(){uo(this,t).delay=n}}function ko(t,n){return function(){so(this,t).duration=+n.apply(this,arguments)}}function No(t,n){return n=+n,function(){so(this,t).duration=n}}function Do(t,n){if("function"!=typeof n)throw new Error;return function(){so(this,t).ease=n}}function So(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?uo:so;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var Eo=Ut.prototype.constructor;function Uo(t){return function(){this.style.removeProperty(t)}}function Io(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function qo(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Io(t,o,e)),r}return o._value=n,o}function Fo(t){return function(n){this.textContent=t.call(this,n)}}function Lo(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Fo(r)),n}return r._value=t,r}var $o=0;function jo(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ho(){return++$o}var Yo=Ut.prototype;jo.prototype=function(t){return Ut().transition(t)}.prototype={constructor:jo,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=E(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,l=r[a],c=l.length,f=o[a]=new Array(c),h=0;h<c;++h)(u=l[h])&&(s=t.call(u,u.__data__,h,l))&&("__data__"in u&&(s.__data__=u.__data__),f[h]=s,ao(f[h],n,e,h,f,lo(u,e)));return new jo(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=I(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,l=r[u],c=l.length,f=0;f<c;++f)if(s=l[f]){for(var h,p=t.call(s,s.__data__,f,l),d=lo(s,e),g=0,m=p.length;g<m;++g)(h=p[g])&&ao(h,n,e,g,p,d);o.push(p),a.push(s)}return new jo(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=q(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],l=0;l<u;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new jo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],f=l.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;u<r;++u)a[u]=n[u];return new jo(a,this._parents,this._name,this._id)},selection:function(){return new Eo(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Ho(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)if(a=u[l]){var c=lo(a,n);ao(a,t,e,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new jo(r,this._parents,t,e)},call:Yo.call,nodes:Yo.nodes,node:Yo.node,size:Yo.size,empty:Yo.empty,each:Yo.each,on:function(t,n){var e=this._id;return arguments.length<2?lo(this.node(),e).on.on(t):this.each(So(e,t,n))},attr:function(t,n){var e=C(t),r="transform"===e?he:po;return this.attrTween(t,"function"==typeof n?(e.local?xo:wo)(e,r,ho(this,"attr."+t,n)):null==n?(e.local?mo:go)(e):(e.local?yo:vo)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=C(t);return this.tween(e,(r.local?Mo:To)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?fe:po;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=W(this,t),a=(this.style.removeProperty(t),W(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,Uo(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=W(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=W(this,t)),a===s?null:a===r&&s===i?o:(i=s,o=n(r=a,u))}}(t,r,ho(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var s=so(this,t),l=s.on,c=null==s.value[a]?o||(o=Uo(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(u,i=c),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=W(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,qo(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(ho(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Lo(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=lo(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?co:fo)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ao:Co)(n,t)):lo(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ko:No)(n,t)):lo(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Do(n,t)):lo(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},s={value:function(){0==--i&&o()}};e.each((function(){var e=so(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n}))}))}};var Po={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Bo(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Po.time=Wi(),Po;return e}Ut.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},Ut.prototype.transition=function(t){var n,e;t instanceof jo?(n=t._id,t=t._name):(n=Ho(),(e=Po).time=Wi(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)(a=u[l])&&ao(a,t,n,l,u,e||Bo(a,n));return new jo(r,this._parents,t,n)};class Oo{constructor(t,n=!1,e=30,r=-40,i=100){this.id=t,this.verbose=n,this.offsetX=e,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),It("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){It("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=_t.pageX,n=_t.pageY){this.verbose&&(console.log(t),console.log(n)),t+=this.offsetX,n=n+this.offsetY<0?10:n+this.offsetY;It("#"+this.id).style("left",t+"px").style("top",n+"px")}edit(t){It("#"+this.id).html(t)}}class zo{constructor(t,n=!0,e=10,r="boxplot-tooltip"){this.boxplotData=t.sort((function(t,n){return t.label<n.label?-1:t.label>n.label?1:0})),this.allVals=[],this.boxplotData.forEach(t=>{t.data.sort(f),this.allVals=this.allVals.concat(t.data),t.q1=M(t.data,.25),t.median=function(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=g(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=g(n(t[i],i,t)))||o.push(e);return M(o.sort(f),.5)}(t.data),t.q3=M(t.data,.75),t.iqr=t.q3-t.q1,t.upperBound=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}(t.data.filter(n=>n<=t.q3+1.5*t.iqr)),t.lowerBound=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}(t.data.filter(n=>n>=t.q1-1.5*t.iqr)),t.outliers=t.data.filter(n=>n<t.lowerBound||n>t.upperBound)}),this.useLog=n,this.logBase=e,this.allVals.sort(f),this.tooltip=void 0,this.createTooltip(r)}render(t,n={}){let e=n.width||1200,r=n.height||800,i=n.marginTop||10,o=n.marginRight||70,a=n.marginBottom||150,u=n.marginLeft||40,s=n.padding||.15,l=n.xAxisFontSize||11,c=n.xAxisLabel||"",f=n.xAxisLabelFontSize||11,h=n.yAxisFontSize||10,p=(this.useLog?`log${this.logBase}(${n.yAxisUnit})`:n.yAxisUnit)||"",d=n.yAxisLabelFontSize||11;const g=this._getLogAdjustment(),m=this._createSvg(t,e,r).append("g").attr("id","gtex-viz-boxplot");let v=this._setScales(e-(u+o),r-(i+a),s),y=Ii(3,v.x);let w=function(t){return Ii(4,t)}(v.y);m.append("g").attr("class","boxplot-x-axis").attr("transform",`translate(${u+v.x.bandwidth()/2}, ${r-a})`).call(y).attr("text-anchor","start").selectAll("text").attr("transform","translate(5,1) rotate(45)").attr("font-size",l),m.append("text").attr("transform",`translate(${u+e/2+v.x.bandwidth()/2}, ${r-f/2})`).attr("text-anchor","middle").style("font-size",f).text(c),m.append("g").attr("class","boxplot-y-axis").attr("transform",`translate(${u}, ${i})`).call(w).attr("font-size",h),m.append("text").attr("transform",`translate(${d}, ${(r-a)/2}) rotate(270)`).attr("text-anchor","middle").style("font-size",d).text(p),m.append("g").attr("class","boxplot-iqr").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("rect").data(this.boxplotData).enter().append("rect").attr("x",t=>v.x(t.label)-v.x.bandwidth()/2).attr("y",t=>this.useLog?v.y(t.q3+g):v.y(t.q3)).attr("width",t=>v.x.bandwidth()).attr("height",t=>this.useLog?v.y(t.q1+g)-v.y(t.q3+g):v.y(t.q1)-v.y(t.q3)).attr("fill",t=>"#"+t.color).attr("stroke","#aaa").on("mouseover",(t,n,e)=>{let r=It(e[n]);this.boxplotMouseover(t,r)}).on("mouseout",(t,n,e)=>{let r=It(e[n]);this.boxplotMouseout(t,r)}),m.append("g").attr("class","boxplot-median").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("line").data(this.boxplotData).enter().append("line").attr("x1",t=>v.x(t.label)-v.x.bandwidth()/2).attr("y1",t=>this.useLog?v.y(t.median+g):v.y(t.median)).attr("x2",t=>v.x(t.label)+v.x.bandwidth()/2).attr("y2",t=>this.useLog?v.y(t.median+g):v.y(t.median)).attr("stroke","#000").attr("stroke-width",2);let x=m.append("g").attr("class","boxplot-whisker");x.append("g").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("line").data(this.boxplotData).enter().append("line").attr("x1",t=>v.x(t.label)).attr("y1",t=>this.useLog?v.y(t.q3+g):v.y(t.q3)).attr("x2",t=>v.x(t.label)).attr("y2",t=>this.useLog?v.y(t.upperBound+g):v.y(t.upperBound)).attr("stroke","#aaa"),x.append("g").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("line").data(this.boxplotData).enter().append("line").attr("x1",t=>v.x(t.label)-v.x.bandwidth()/4).attr("y1",t=>this.useLog?v.y(t.upperBound+g):v.y(t.upperBound)).attr("x2",t=>v.x(t.label)+v.x.bandwidth()/4).attr("y2",t=>this.useLog?v.y(t.upperBound+g):v.y(t.upperBound)).attr("stroke","#aaa"),x.append("g").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("line").data(this.boxplotData).enter().append("line").attr("x1",t=>v.x(t.label)).attr("y1",t=>this.useLog?v.y(t.q1+g):v.y(t.q1)).attr("x2",t=>v.x(t.label)).attr("y2",t=>this.useLog?v.y(t.lowerBound+g):v.y(t.lowerBound)).attr("stroke","#aaa"),x.append("g").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("line").data(this.boxplotData).enter().append("line").attr("x1",t=>v.x(t.label)-v.x.bandwidth()/4).attr("y1",t=>this.useLog?v.y(t.lowerBound+g):v.y(t.lowerBound)).attr("x2",t=>v.x(t.label)+v.x.bandwidth()/4).attr("y2",t=>this.useLog?v.y(t.lowerBound+g):v.y(t.lowerBound)).attr("stroke","#aaa"),m.append("g").attr("class","boxplot-outliers").attr("transform",`translate(${u+v.x.bandwidth()}, ${i})`).selectAll("g").data(this.boxplotData).enter().append("g").selectAll("circle").data(t=>t.outliers.map(n=>({label:t.label,val:n}))).enter().append("circle").attr("cx",t=>v.x(t.label)).attr("cy",t=>this.useLog?v.y(t.val+g):v.y(t.val)).attr("r","2").attr("stroke","#aaa").attr("fill","none")}createTooltip(t){0==n("#"+t).length&&n("<div/>").attr("id",t).appendTo(n("body")),this.tooltip=new Oo(t),It("#"+t).attr("class","boxplot-tooltip")}boxplotMouseover(t,n){void 0!==this.tooltip&&this.tooltip.show(`${t.label}<br/>\n            ${this.useLog?"Log10(Median TPM)":"Median TPM"}: ${t.median.toPrecision(3)}<br/>\n            Number of Samples: ${t.data.length}`),n.classed("highlighted",!0)}boxplotMouseout(t,n){void 0!==this.tooltip&&this.tooltip.hide(),n.classed("highlighted",!1)}_createSvg(t,n,e){return It("#"+t).append("svg").attr("width",n).attr("height",e)}_setScales(t,n,e=0){let r,i=function t(){var n,e,r=Ot().unknown(void 0),i=r.domain,o=r.range,a=[0,1],u=!1,s=0,l=0,c=.5;function f(){var t=i().length,r=a[1]<a[0],f=a[r-0],h=a[1-r];n=(h-f)/Math.max(1,t-s+2*l),u&&(n=Math.floor(n)),f+=(h-f-n*(t-s))*c,e=n*(1-s),u&&(f=Math.round(f),e=Math.round(e));var p=v(t).map((function(t){return f+n*t}));return o(r?p.reverse():p)}return delete r.unknown,r.domain=function(t){return arguments.length?(i(t),f()):i()},r.range=function(t){return arguments.length?(a=[+t[0],+t[1]],f()):a.slice()},r.rangeRound=function(t){return a=[+t[0],+t[1]],u=!0,f()},r.bandwidth=function(){return e},r.step=function(){return n},r.round=function(t){return arguments.length?(u=!!t,f()):u},r.padding=function(t){return arguments.length?(s=Math.min(1,l=+t),f()):s},r.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),f()):s},r.paddingOuter=function(t){return arguments.length?(l=+t,f()):l},r.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),f()):c},r.copy=function(){return t(i(),a).round(u).paddingInner(s).paddingOuter(l).align(c)},qt.apply(f(),arguments)}().domain(this.boxplotData.map(t=>t.label)).range([0,t]).paddingInner(e);if(this.useLog){const t=this._getLogAdjustment();r=function t(){var n=Xe(_e()).domain([1,10]);return n.copy=function(){return xe(n,t()).base(n.base())},qt.apply(n,arguments),n}().domain(m(this.allVals).map(n=>n+t)).range([n,0]).base(this.logBase)}else r=function t(){var n=be(ge,ge);return n.copy=function(){return xe(n,t())},qt.apply(n,arguments),He(n)}().domain(m(this.allVals)).range([n,0]);return{x:i,y:r}}_getLogAdjustment(){return 1}}function Vo(t,n,e=function(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v8&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v8&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v8&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v8&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v8&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v8&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v8",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){const r=[c(e.tissue,{credentials:"include"}),c(e.geneExp+n,{credentials:"include"})];Promise.all(r).then((function(n){const e=function(t){const n="tissueInfo";if(!t.hasOwnProperty(n))throw"Parsing Error: required json attr is missing: "+n;const e=t[n];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!e[0].hasOwnProperty(t))throw"Parsing Error: required json attr is missing: "+t}),e}(n[0]),r={},i={};e.forEach(t=>{r[t.tissueSiteDetailId]=t.tissueSiteDetail,i[t.tissueSiteDetailId]=t.colorHex});const o=function(t,n,e){const r="geneExpression";if(!t.hasOwnProperty(r))throw`Parsing error: required JSON attribute ${r} missing.`;return t[r].forEach(t=>{["data","gencodeId","geneSymbol","tissueSiteDetailId"].forEach(n=>{if(!t.hasOwnProperty(n))throw console.error(t),`Parsing error: required JSON attribute ${n} is missing from a record.`}),t.label=void 0===n?t.tissueSiteDetailId:n[t.tissueSiteDetailId],t.color=void 0===e?"#4682b4":e[t.tissueSiteDetailId]}),t[r]}(n[1],r,i);let a={rootId:t,tooltipId:"boxplot-tooltip"};new zo(o).render(a.rootId,{width:1e3,height:600,marginLeft:50,marginRight:100,marginBottom:160,yAxisUnit:"TPM"})}))}var Xo={launch:Vo};t.GeneExpressionBoxplot=Xo,t.launch=Vo,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZS1leHByZXNzaW9uLWJveHBsb3QuYnVuZGxlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvY3N2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvYXV0b1R5cGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2pzb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVhbnRpbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tYXRjaGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXRhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NvcnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXR0ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zdHlsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9wcm9wZXJ0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbGFzc2VkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3RleHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaHRtbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yYWlzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9sb3dlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbnNlcnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmVtb3ZlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9pbml0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9qb2luLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL21hcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9zZXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2FycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9vcmRpbmFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2NvbG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9tYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9sYWIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2N1YmVoZWxpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlckFycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9vYmplY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbG9nLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9uaWNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2ludGVydmFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbGxpc2Vjb25kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3NlY29uZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kdXJhdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taW51dGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaG91ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvd2Vlay5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21vbnRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01pbnV0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0RheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNXZWVrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1llYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTW9udGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvRm9ybWF0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29QYXJzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9heGlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0clR3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZGVsYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kdXJhdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2Vhc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHRUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZmlsdGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vbWVyZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90cmFuc2l0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdGV4dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3JlbW92ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9Ub29sdGlwLmpzIiwiLi4vLi4vc3JjL21vZHVsZXMvQm94cGxvdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVkaWFuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tYXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21pbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYmFuZC5qcyIsIi4uLy4uL3NyYy9HZW5lRXhwcmVzc2lvbkJveHBsb3QuanMiLCIuLi8uLi9zcmMvbW9kdWxlcy9ndGV4RGF0YVBhcnNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRU9MID0ge30sXG4gICAgRU9GID0ge30sXG4gICAgUVVPVEUgPSAzNCxcbiAgICBORVdMSU5FID0gMTAsXG4gICAgUkVUVVJOID0gMTM7XG5cbmZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobmFtZSkgKyBcIjogZFtcIiArIGkgKyBcIl0gfHwgXFxcIlxcXCJcIjtcbiAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUNvbnZlcnRlcihjb2x1bW5zLCBmKSB7XG4gIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICByZXR1cm4gZihvYmplY3Qocm93KSwgaSwgY29sdW1ucyk7XG4gIH07XG59XG5cbi8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxuZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBjb2x1bW5zID0gW107XG5cbiAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgIGlmICghKGNvbHVtbiBpbiBjb2x1bW5TZXQpKSB7XG4gICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn1cblxuZnVuY3Rpb24gcGFkKHZhbHVlLCB3aWR0aCkge1xuICB2YXIgcyA9IHZhbHVlICsgXCJcIiwgbGVuZ3RoID0gcy5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oMCkgKyBzIDogcztcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcih5ZWFyKSB7XG4gIHJldHVybiB5ZWFyIDwgMCA/IFwiLVwiICsgcGFkKC15ZWFyLCA2KVxuICAgIDogeWVhciA+IDk5OTkgPyBcIitcIiArIHBhZCh5ZWFyLCA2KVxuICAgIDogcGFkKHllYXIsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcbiAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpLFxuICAgICAgbWludXRlcyA9IGRhdGUuZ2V0VVRDTWludXRlcygpLFxuICAgICAgc2Vjb25kcyA9IGRhdGUuZ2V0VVRDU2Vjb25kcygpLFxuICAgICAgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgcmV0dXJuIGlzTmFOKGRhdGUpID8gXCJJbnZhbGlkIERhdGVcIlxuICAgICAgOiBmb3JtYXRZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSwgNCkgKyBcIi1cIiArIHBhZChkYXRlLmdldFVUQ01vbnRoKCkgKyAxLCAyKSArIFwiLVwiICsgcGFkKGRhdGUuZ2V0VVRDRGF0ZSgpLCAyKVxuICAgICAgKyAobWlsbGlzZWNvbmRzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIjpcIiArIHBhZChzZWNvbmRzLCAyKSArIFwiLlwiICsgcGFkKG1pbGxpc2Vjb25kcywgMykgKyBcIlpcIlxuICAgICAgOiBzZWNvbmRzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIjpcIiArIHBhZChzZWNvbmRzLCAyKSArIFwiWlwiXG4gICAgICA6IG1pbnV0ZXMgfHwgaG91cnMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiWlwiXG4gICAgICA6IFwiXCIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWxpbWl0ZXIpIHtcbiAgdmFyIHJlRm9ybWF0ID0gbmV3IFJlZ0V4cChcIltcXFwiXCIgKyBkZWxpbWl0ZXIgKyBcIlxcblxccl1cIiksXG4gICAgICBERUxJTUlURVIgPSBkZWxpbWl0ZXIuY2hhckNvZGVBdCgwKTtcblxuICBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBmKSB7XG4gICAgdmFyIGNvbnZlcnQsIGNvbHVtbnMsIHJvd3MgPSBwYXJzZVJvd3ModGV4dCwgZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgICBpZiAoY29udmVydCkgcmV0dXJuIGNvbnZlcnQocm93LCBpIC0gMSk7XG4gICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XG4gICAgfSk7XG4gICAgcm93cy5jb2x1bW5zID0gY29sdW1ucyB8fCBbXTtcbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUm93cyh0ZXh0LCBmKSB7XG4gICAgdmFyIHJvd3MgPSBbXSwgLy8gb3V0cHV0IHJvd3NcbiAgICAgICAgTiA9IHRleHQubGVuZ3RoLFxuICAgICAgICBJID0gMCwgLy8gY3VycmVudCBjaGFyYWN0ZXIgaW5kZXhcbiAgICAgICAgbiA9IDAsIC8vIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgICAgdCwgLy8gY3VycmVudCB0b2tlblxuICAgICAgICBlb2YgPSBOIDw9IDAsIC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9GP1xuICAgICAgICBlb2wgPSBmYWxzZTsgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0w/XG5cbiAgICAvLyBTdHJpcCB0aGUgdHJhaWxpbmcgbmV3bGluZS5cbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gTkVXTElORSkgLS1OO1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBSRVRVUk4pIC0tTjtcblxuICAgIGZ1bmN0aW9uIHRva2VuKCkge1xuICAgICAgaWYgKGVvZikgcmV0dXJuIEVPRjtcbiAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuXG4gICAgICAvLyBVbmVzY2FwZSBxdW90ZXMuXG4gICAgICB2YXIgaSwgaiA9IEksIGM7XG4gICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGopID09PSBRVU9URSkge1xuICAgICAgICB3aGlsZSAoSSsrIDwgTiAmJiB0ZXh0LmNoYXJDb2RlQXQoSSkgIT09IFFVT1RFIHx8IHRleHQuY2hhckNvZGVBdCgrK0kpID09PSBRVU9URSk7XG4gICAgICAgIGlmICgoaSA9IEkpID49IE4pIGVvZiA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpIC0gMSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgbmV4dCBkZWxpbWl0ZXIgb3IgbmV3bGluZS5cbiAgICAgIHdoaWxlIChJIDwgTikge1xuICAgICAgICBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoaSA9IEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IERFTElNSVRFUikgY29udGludWU7XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIGkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gbGFzdCB0b2tlbiBiZWZvcmUgRU9GLlxuICAgICAgcmV0dXJuIGVvZiA9IHRydWUsIHRleHQuc2xpY2UoaiwgTik7XG4gICAgfVxuXG4gICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xuICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHJvdy5wdXNoKHQpLCB0ID0gdG9rZW4oKTtcbiAgICAgIGlmIChmICYmIChyb3cgPSBmKHJvdywgbisrKSkgPT0gbnVsbCkgY29udGludWU7XG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykge1xuICAgIHJldHVybiByb3dzLm1hcChmdW5jdGlvbihyb3cpIHtcbiAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tjb2x1bW5dKTtcbiAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdChyb3dzLCBjb2x1bW5zKSB7XG4gICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICByZXR1cm4gW2NvbHVtbnMubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcildLmNvbmNhdChwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSB7XG4gICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICByZXR1cm4gcHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93cyhyb3dzKSB7XG4gICAgcmV0dXJuIHJvd3MubWFwKGZvcm1hdFJvdykuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvdyhyb3cpIHtcbiAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgOiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgPyBmb3JtYXREYXRlKHZhbHVlKVxuICAgICAgICA6IHJlRm9ybWF0LnRlc3QodmFsdWUgKz0gXCJcIikgPyBcIlxcXCJcIiArIHZhbHVlLnJlcGxhY2UoL1wiL2csIFwiXFxcIlxcXCJcIikgKyBcIlxcXCJcIlxuICAgICAgICA6IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgZm9ybWF0Qm9keTogZm9ybWF0Qm9keSxcbiAgICBmb3JtYXRSb3dzOiBmb3JtYXRSb3dzLFxuICAgIGZvcm1hdFJvdzogZm9ybWF0Um93LFxuICAgIGZvcm1hdFZhbHVlOiBmb3JtYXRWYWx1ZVxuICB9O1xufVxuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3YuanNcIjtcblxudmFyIGNzdiA9IGRzdihcIixcIik7XG5cbmV4cG9ydCB2YXIgY3N2UGFyc2UgPSBjc3YucGFyc2U7XG5leHBvcnQgdmFyIGNzdlBhcnNlUm93cyA9IGNzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIGNzdkZvcm1hdCA9IGNzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIGNzdkZvcm1hdEJvZHkgPSBjc3YuZm9ybWF0Qm9keTtcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Um93cyA9IGNzdi5mb3JtYXRSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3cgPSBjc3YuZm9ybWF0Um93O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRWYWx1ZSA9IGNzdi5mb3JtYXRWYWx1ZTtcbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2LmpzXCI7XG5cbnZhciB0c3YgPSBkc3YoXCJcXHRcIik7XG5cbmV4cG9ydCB2YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG5leHBvcnQgdmFyIHRzdlBhcnNlUm93cyA9IHRzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdCA9IHRzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIHRzdkZvcm1hdEJvZHkgPSB0c3YuZm9ybWF0Qm9keTtcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Um93cyA9IHRzdi5mb3JtYXRSb3dzO1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3cgPSB0c3YuZm9ybWF0Um93O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRWYWx1ZSA9IHRzdi5mb3JtYXRWYWx1ZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGF1dG9UeXBlKG9iamVjdCkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV0udHJpbSgpLCBudW1iZXIsIG07XG4gICAgaWYgKCF2YWx1ZSkgdmFsdWUgPSBudWxsO1xuICAgIGVsc2UgaWYgKHZhbHVlID09PSBcInRydWVcIikgdmFsdWUgPSB0cnVlO1xuICAgIGVsc2UgaWYgKHZhbHVlID09PSBcImZhbHNlXCIpIHZhbHVlID0gZmFsc2U7XG4gICAgZWxzZSBpZiAodmFsdWUgPT09IFwiTmFOXCIpIHZhbHVlID0gTmFOO1xuICAgIGVsc2UgaWYgKCFpc05hTihudW1iZXIgPSArdmFsdWUpKSB2YWx1ZSA9IG51bWJlcjtcbiAgICBlbHNlIGlmIChtID0gdmFsdWUubWF0Y2goL14oWy0rXVxcZHsyfSk/XFxkezR9KC1cXGR7Mn0oLVxcZHsyfSk/KT8oVFxcZHsyfTpcXGR7Mn0oOlxcZHsyfShcXC5cXGR7M30pPyk/KFp8Wy0rXVxcZHsyfTpcXGR7Mn0pPyk/JC8pKSB7XG4gICAgICBpZiAoZml4dHogJiYgISFtWzRdICYmICFtWzddKSB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLy0vZywgXCIvXCIpLnJlcGxhY2UoL1QvLCBcIiBcIik7XG4gICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBjb250aW51ZTtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1kc3YvaXNzdWVzLzQ1XG52YXIgZml4dHogPSBuZXcgRGF0ZShcIjIwMTktMDEtMDFUMDA6MDBcIikuZ2V0SG91cnMoKSB8fCBuZXcgRGF0ZShcIjIwMTktMDctMDFUMDA6MDBcIikuZ2V0SG91cnMoKTsiLCJmdW5jdGlvbiByZXNwb25zZUpzb24ocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwNCB8fCByZXNwb25zZS5zdGF0dXMgPT09IDIwNSkgcmV0dXJuO1xuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VKc29uKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3RvclwiO1xuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCB2YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApKSB8IDAsXG4gICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHJhbmdlW2ldID0gc3RhcnQgKyBpICogc3RlcDtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn1cbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgcCwgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PSBudWxsKSB2YWx1ZW9mID0gbnVtYmVyO1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkpIHJldHVybjtcbiAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbMF0sIDAsIHZhbHVlcyk7XG4gIGlmIChwID49IDEpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbbiAtIDFdLCBuIC0gMSwgdmFsdWVzKTtcbiAgdmFyIG4sXG4gICAgICBpID0gKG4gLSAxKSAqIHAsXG4gICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICB2YWx1ZTAgPSArdmFsdWVvZih2YWx1ZXNbaTBdLCBpMCwgdmFsdWVzKSxcbiAgICAgIHZhbHVlMSA9ICt2YWx1ZW9mKHZhbHVlc1tpMCArIDFdLCBpMCArIDEsIHZhbHVlcyk7XG4gIHJldHVybiB2YWx1ZTAgKyAodmFsdWUxIC0gdmFsdWUwKSAqIChpIC0gaTApO1xufVxuIiwiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2VcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZShmYWxzZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKHRydWUpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwidmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG5leHBvcnQgdmFyIGV2ZW50ID0gbnVsbDtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50KSkge1xuICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQxKSB7XG4gICAgdmFyIGV2ZW50MCA9IGV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICB2YXIgZXZlbnQwID0gZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICBldmVudCA9IGV2ZW50MTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0gZmluYWxseSB7XG4gICAgZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW5cIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBqb2luOiBzZWxlY3Rpb25fam9pbixcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGluaXRSYW5nZShkb21haW4sIHJhbmdlKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLnJhbmdlKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMucmFuZ2UocmFuZ2UpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRJbnRlcnBvbGF0b3IoZG9tYWluLCBpbnRlcnBvbGF0b3IpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMuaW50ZXJwb2xhdG9yKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMuaW50ZXJwb2xhdG9yKGludGVycG9sYXRvcikuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgZW50ZXIgPSB0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiID8gb25lbnRlcihlbnRlcikgOiBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICBpZiAob251cGRhdGUgIT0gbnVsbCkgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rpb24pIHtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBub2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5leHQpIF4gNCkgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBpID0gLTE7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgbm9kZXNbKytpXSA9IHRoaXM7IH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgKytzaXplOyB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJleHBvcnQgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAob2JqZWN0LCBmKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwO1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChmKG8gPSBvYmplY3RbaV0sIGksIG9iamVjdCksIG8pO1xuICB9XG5cbiAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwO1xuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIG1hcCwgcHJlZml4fSBmcm9tIFwiLi9tYXBcIjtcblxuZnVuY3Rpb24gU2V0KCkge31cblxudmFyIHByb3RvID0gbWFwLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZXQsXG4gIGhhczogcHJvdG8uaGFzLFxuICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgKz0gXCJcIjtcbiAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gIHNpemU6IHByb3RvLnNpemUsXG4gIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgZWFjaDogcHJvdG8uZWFjaFxufTtcblxuZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xuICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2V0KSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSkgeyBzZXQuYWRkKHZhbHVlKTsgfSk7XG5cbiAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0O1xuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbiIsImltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmV4cG9ydCB2YXIgaW1wbGljaXQgPSB7bmFtZTogXCJpbXBsaWNpdFwifTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbCgpIHtcbiAgdmFyIGluZGV4ID0gbWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBtYXAoKTtcbiAgICB2YXIgaSA9IC0xLCBuID0gXy5sZW5ndGgsIGQsIGtleTtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoa2V5ID0gKGQgPSBfW2ldKSArIFwiXCIpKSBpbmRleC5zZXQoa2V5LCBkb21haW4ucHVzaChkKSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbChkb21haW4sIHJhbmdlKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleCA9IC9eIyhbMC05YS1mXXszLDh9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBjb3B5OiBmdW5jdGlvbihjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhzbCgpIHtcbiAgcmV0dXJuIGhzbENvbnZlcnQodGhpcykuZm9ybWF0SHNsKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdFJnYigpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0UmdiKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbSwgbDtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleC5leGVjKGZvcm1hdCkpID8gKGwgPSBtWzFdLmxlbmd0aCwgbSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbCA9PT0gNiA/IHJnYm4obSkgLy8gI2ZmMDAwMFxuICAgICAgOiBsID09PSAzID8gbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSAvLyAjZjAwXG4gICAgICA6IGwgPT09IDggPyByZ2JhKG0gPj4gMjQgJiAweGZmLCBtID4+IDE2ICYgMHhmZiwgbSA+PiA4ICYgMHhmZiwgKG0gJiAweGZmKSAvIDB4ZmYpIC8vICNmZjAwMDAwMFxuICAgICAgOiBsID09PSA0ID8gcmdiYSgobSA+PiAxMiAmIDB4ZikgfCAobSA+PiA4ICYgMHhmMCksIChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpKSAvIDB4ZmYpIC8vICNmMDAwXG4gICAgICA6IG51bGwpIC8vIGludmFsaWQgaGV4XG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgtMC41IDw9IHRoaXMuciAmJiB0aGlzLnIgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5nICYmIHRoaXMuZyA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmIgJiYgdGhpcy5iIDwgMjU1LjUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogcmdiX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiByZ2JfZm9ybWF0SGV4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdFJnYigpIHtcbiAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgZm9ybWF0SHNsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcImhzbChcIiA6IFwiaHNsYShcIilcbiAgICAgICAgKyAodGhpcy5oIHx8IDApICsgXCIsIFwiXG4gICAgICAgICsgKHRoaXMucyB8fCAwKSAqIDEwMCArIFwiJSwgXCJcbiAgICAgICAgKyAodGhpcy5sIHx8IDApICogMTAwICsgXCIlXCJcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgdmFyIGRlZzJyYWQgPSBNYXRoLlBJIC8gMTgwO1xuZXhwb3J0IHZhciByYWQyZGVnID0gMTgwIC8gTWF0aC5QSTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdifSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbi8vIGh0dHBzOi8vb2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIGhjbDJsYWIobyk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwIDwgby5sICYmIG8ubCA8IDEwMCA/IDAgOiBOYU4sIG8ubCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIHJhZDJkZWc7XG4gIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMuYyA9ICtjO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmZ1bmN0aW9uIGhjbDJsYWIobykge1xuICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IG8uaCAqIGRlZzJyYWQ7XG4gIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoY2wybGFiKHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYiwgZGFya2VyLCBicmlnaHRlcn0gZnJvbSBcIi4vY29sb3IuanNcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG52YXIgQSA9IC0wLjE0ODYxLFxuICAgIEIgPSArMS43ODI3NyxcbiAgICBDID0gLTAuMjkyMjcsXG4gICAgRCA9IC0wLjkwNjQ5LFxuICAgIEUgPSArMS45NzI5NCxcbiAgICBFRCA9IEUgKiBELFxuICAgIEVCID0gRSAqIEIsXG4gICAgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgYmwgPSBiIC0gbCxcbiAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY3ViZWhlbGl4Q29udmVydChoKSA6IG5ldyBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShDdWJlaGVsaXgsIGN1YmVoZWxpeCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IGlzTmFOKHRoaXMuaCkgPyAwIDogKHRoaXMuaCArIDEyMCkgKiBkZWcycmFkLFxuICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgYSA9IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zICogbCAqICgxIC0gbCksXG4gICAgICAgIGNvc2ggPSBNYXRoLmNvcyhoKSxcbiAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoRSAqIGNvc2gpKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5cbmZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnRpYWwoYSwgYiwgeSkge1xuICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhID8gZXhwb25lbnRpYWwoYSwgYiwgeSkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG4iLCJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXMuanNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZC5qc1wiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgaWYgKCFiKSBiID0gW107XG4gIHZhciBuID0gYSA/IE1hdGgubWluKGIubGVuZ3RoLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgYyA9IGIuc2xpY2UoKSxcbiAgICAgIGk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY1tpXSA9IGFbaV0gKiAoMSAtIHQpICsgYltpXSAqIHQ7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlckFycmF5KHgpIHtcbiAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyh4KSAmJiAhKHggaW5zdGFuY2VvZiBEYXRhVmlldyk7XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIChpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXkgOiBnZW5lcmljQXJyYXkpKGEsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJpY0FycmF5KGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICogKDEgLSB0KSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKiAoMSAtIHQpICsgYiAqIHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCByZ2IgZnJvbSBcIi4vcmdiLmpzXCI7XG5pbXBvcnQge2dlbmVyaWNBcnJheX0gZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBkYXRlIGZyb20gXCIuL2RhdGUuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5pbXBvcnQgb2JqZWN0IGZyb20gXCIuL29iamVjdC5qc1wiO1xuaW1wb3J0IHN0cmluZyBmcm9tIFwiLi9zdHJpbmcuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBudW1iZXJcbiAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgcmdiKSA6IHN0cmluZylcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXlcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGdlbmVyaWNBcnJheVxuICAgICAgOiB0eXBlb2YgYi52YWx1ZU9mICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGIudG9TdHJpbmcgIT09IFwiZnVuY3Rpb25cIiB8fCBpc05hTihiKSA/IG9iamVjdFxuICAgICAgOiBudW1iZXIpKGEsIGIpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhICogKDEgLSB0KSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2UuanNcIjtcblxudmFyIGNzc05vZGUsXG4gICAgY3NzUm9vdCxcbiAgICBjc3NWaWV3LFxuICAgIHN2Z05vZGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlci5qc1wiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlLmpzXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiAreDtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGUgYXMgaW50ZXJwb2xhdGVWYWx1ZSwgaW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHttYXAsIHNsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQoaXNOYU4oYikgPyBOYU4gOiAwLjUpO1xufVxuXG5mdW5jdGlvbiBjbGFtcGVyKGRvbWFpbikge1xuICB2YXIgYSA9IGRvbWFpblswXSwgYiA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sIHQ7XG4gIGlmIChhID4gYikgdCA9IGEsIGEgPSBiLCBiID0gdDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubWF4KGEsIE1hdGgubWluKGIsIHgpKTsgfTtcbn1cblxuLy8gbm9ybWFsaXplKGEsIGIpKHgpIHRha2VzIGEgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHQgaW4gWzAsMV0uXG4vLyBpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJhbmdlIHZhbHVlIHggaW4gW2EsYl0uXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgZDAgPSBkb21haW5bMF0sIGQxID0gZG9tYWluWzFdLCByMCA9IHJhbmdlWzBdLCByMSA9IHJhbmdlWzFdO1xuICBpZiAoZDEgPCBkMCkgZDAgPSBub3JtYWxpemUoZDEsIGQwKSwgcjAgPSBpbnRlcnBvbGF0ZShyMSwgcjApO1xuICBlbHNlIGQwID0gbm9ybWFsaXplKGQwLCBkMSksIHIwID0gaW50ZXJwb2xhdGUocjAsIHIxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHIwKGQwKHgpKTsgfTtcbn1cblxuZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IG5vcm1hbGl6ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgIHJbaV0gPSBpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKVxuICAgICAgLnVua25vd24oc291cmNlLnVua25vd24oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICByYW5nZSA9IHVuaXQsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWUsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB1bnRyYW5zZm9ybSxcbiAgICAgIHVua25vd24sXG4gICAgICBjbGFtcCA9IGlkZW50aXR5LFxuICAgICAgcGllY2V3aXNlLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBwaWVjZXdpc2UgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4ubWFwKHRyYW5zZm9ybSksIHJhbmdlLCBpbnRlcnBvbGF0ZSkpKSh0cmFuc2Zvcm0oY2xhbXAoeCkpKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gY2xhbXAodW50cmFuc2Zvcm0oKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCBpbnRlcnBvbGF0ZU51bWJlcikpKSh5KSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCBjbGFtcCA9PT0gaWRlbnRpdHkgfHwgKGNsYW1wID0gY2xhbXBlcihkb21haW4pKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyBjbGFtcGVyKGRvbWFpbikgOiBpZGVudGl0eSwgc2NhbGUpIDogY2xhbXAgIT09IGlkZW50aXR5O1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgcmVzY2FsZSgpKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQsIHUpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB1bnRyYW5zZm9ybSA9IHU7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cyh0cmFuc2Zvcm0sIHVudHJhbnNmb3JtKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcigpKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCIvLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWwoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC0oIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoe1xuICAgIGZpbGw6IG1hdGNoWzFdLFxuICAgIGFsaWduOiBtYXRjaFsyXSxcbiAgICBzaWduOiBtYXRjaFszXSxcbiAgICBzeW1ib2w6IG1hdGNoWzRdLFxuICAgIHplcm86IG1hdGNoWzVdLFxuICAgIHdpZHRoOiBtYXRjaFs2XSxcbiAgICBjb21tYTogbWF0Y2hbN10sXG4gICAgcHJlY2lzaW9uOiBtYXRjaFs4XSAmJiBtYXRjaFs4XS5zbGljZSgxKSxcbiAgICB0cmltOiBtYXRjaFs5XSxcbiAgICB0eXBlOiBtYXRjaFsxMF1cbiAgfSk7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHRoaXMuZmlsbCA9IHNwZWNpZmllci5maWxsID09PSB1bmRlZmluZWQgPyBcIiBcIiA6IHNwZWNpZmllci5maWxsICsgXCJcIjtcbiAgdGhpcy5hbGlnbiA9IHNwZWNpZmllci5hbGlnbiA9PT0gdW5kZWZpbmVkID8gXCI+XCIgOiBzcGVjaWZpZXIuYWxpZ24gKyBcIlwiO1xuICB0aGlzLnNpZ24gPSBzcGVjaWZpZXIuc2lnbiA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBzcGVjaWZpZXIuc2lnbiArIFwiXCI7XG4gIHRoaXMuc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci5zeW1ib2wgKyBcIlwiO1xuICB0aGlzLnplcm8gPSAhIXNwZWNpZmllci56ZXJvO1xuICB0aGlzLndpZHRoID0gc3BlY2lmaWVyLndpZHRoID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLndpZHRoO1xuICB0aGlzLmNvbW1hID0gISFzcGVjaWZpZXIuY29tbWE7XG4gIHRoaXMucHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci5wcmVjaXNpb247XG4gIHRoaXMudHJpbSA9ICEhc3BlY2lmaWVyLnRyaW07XG4gIHRoaXMudHlwZSA9IHNwZWNpZmllci50eXBlID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnR5cGUgKyBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiAoeCAqIDEwMCkudG9GaXhlZChwKTsgfSxcbiAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXG4gIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgXCJkXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTApOyB9LFxuICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICBcImdcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b1ByZWNpc2lvbihwKTsgfSxcbiAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICBcInhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXAuanNcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFscy5qc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXIuanNcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW0uanNcIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlcy5qc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyA9PT0gdW5kZWZpbmVkIHx8IGxvY2FsZS50aG91c2FuZHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0R3JvdXAobWFwLmNhbGwobG9jYWxlLmdyb3VwaW5nLCBOdW1iZXIpLCBsb2NhbGUudGhvdXNhbmRzICsgXCJcIiksXG4gICAgICBjdXJyZW5jeVByZWZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVswXSArIFwiXCIsXG4gICAgICBjdXJyZW5jeVN1ZmZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVsxXSArIFwiXCIsXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwgPT09IHVuZGVmaW5lZCA/IFwiLlwiIDogbG9jYWxlLmRlY2ltYWwgKyBcIlwiLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0TnVtZXJhbHMobWFwLmNhbGwobG9jYWxlLm51bWVyYWxzLCBTdHJpbmcpKSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCA9PT0gdW5kZWZpbmVkID8gXCIlXCIgOiBsb2NhbGUucGVyY2VudCArIFwiXCIsXG4gICAgICBtaW51cyA9IGxvY2FsZS5taW51cyA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBsb2NhbGUubWludXMgKyBcIlwiLFxuICAgICAgbmFuID0gbG9jYWxlLm5hbiA9PT0gdW5kZWZpbmVkID8gXCJOYU5cIiA6IGxvY2FsZS5uYW4gKyBcIlwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09PSB1bmRlZmluZWQgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVByZWZpeCA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5U3VmZml4IDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBzaWduLiAtMCBpcyBub3QgbGVzcyB0aGFuIDAsIGJ1dCAxIC8gLTAgaXMhXG4gICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gdmFsdWUgPCAwIHx8IDEgLyB2YWx1ZSA8IDA7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IG5hbiA6IGZvcm1hdFR5cGUoTWF0aC5hYnModmFsdWUpLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIC8vIFRyaW0gaW5zaWduaWZpY2FudCB6ZXJvcy5cbiAgICAgICAgaWYgKHRyaW0pIHZhbHVlID0gZm9ybWF0VHJpbSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBhZnRlciBmb3JtYXR0aW5nLCBhbmQgbm8gZXhwbGljaXQgcG9zaXRpdmUgc2lnbiBpcyByZXF1ZXN0ZWQsIGhpZGUgdGhlIHNpZ24uXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCAmJiBzaWduICE9PSBcIitcIikgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IG1pbnVzKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdLFxuICBtaW51czogXCItXCJcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG51bWVyYWxzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgIH0pO1xuICB9O1xufVxuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKCErc1tpXSkgYnJlYWsgb3V0OyBpZiAoaTAgPiAwKSBpMCA9IDA7IGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTAgPiAwID8gcy5zbGljZSgwLCBpMCkgKyBzLnNsaWNlKGkxICsgMSkgOiBzO1xufVxuIiwiaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0UHJlZml4LCBmb3JtYXRTcGVjaWZpZXIsIHByZWNpc2lvbkZpeGVkLCBwcmVjaXNpb25QcmVmaXgsIHByZWNpc2lvblJvdW5kfSBmcm9tIFwiZDMtZm9ybWF0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weSwgaWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGlkZW50aXR5LCBpZGVudGl0eSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiaW1wb3J0IHt0aWNrc30gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuaW1wb3J0IG5pY2UgZnJvbSBcIi4vbmljZVwiO1xuaW1wb3J0IHtjb3B5LCB0cmFuc2Zvcm1lcn0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtTG9nKHgpIHtcbiAgcmV0dXJuIE1hdGgubG9nKHgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1FeHAoeCkge1xuICByZXR1cm4gTWF0aC5leHAoeCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUxvZ24oeCkge1xuICByZXR1cm4gLU1hdGgubG9nKC14KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtRXhwbih4KSB7XG4gIHJldHVybiAtTWF0aC5leHAoLXgpO1xufVxuXG5mdW5jdGlvbiBwb3cxMCh4KSB7XG4gIHJldHVybiBpc0Zpbml0ZSh4KSA/ICsoXCIxZVwiICsgeCkgOiB4IDwgMCA/IDAgOiB4O1xufVxuXG5mdW5jdGlvbiBwb3dwKGJhc2UpIHtcbiAgcmV0dXJuIGJhc2UgPT09IDEwID8gcG93MTBcbiAgICAgIDogYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5leHBcbiAgICAgIDogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5wb3coYmFzZSwgeCk7IH07XG59XG5cbmZ1bmN0aW9uIGxvZ3AoYmFzZSkge1xuICByZXR1cm4gYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5sb2dcbiAgICAgIDogYmFzZSA9PT0gMTAgJiYgTWF0aC5sb2cxMFxuICAgICAgfHwgYmFzZSA9PT0gMiAmJiBNYXRoLmxvZzJcbiAgICAgIHx8IChiYXNlID0gTWF0aC5sb2coYmFzZSksIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubG9nKHgpIC8gYmFzZTsgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZmxlY3QoZikge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAtZigteCk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2dnaXNoKHRyYW5zZm9ybSkge1xuICB2YXIgc2NhbGUgPSB0cmFuc2Zvcm0odHJhbnNmb3JtTG9nLCB0cmFuc2Zvcm1FeHApLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgYmFzZSA9IDEwLFxuICAgICAgbG9ncyxcbiAgICAgIHBvd3M7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBsb2dzID0gbG9ncChiYXNlKSwgcG93cyA9IHBvd3AoYmFzZSk7XG4gICAgaWYgKGRvbWFpbigpWzBdIDwgMCkge1xuICAgICAgbG9ncyA9IHJlZmxlY3QobG9ncyksIHBvd3MgPSByZWZsZWN0KHBvd3MpO1xuICAgICAgdHJhbnNmb3JtKHRyYW5zZm9ybUxvZ24sIHRyYW5zZm9ybUV4cG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm0odHJhbnNmb3JtTG9nLCB0cmFuc2Zvcm1FeHApO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGJhc2UgPSArXywgcmVzY2FsZSgpKSA6IGJhc2U7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICB1ID0gZFswXSxcbiAgICAgICAgdiA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgcjtcblxuICAgIGlmIChyID0gdiA8IHUpIGkgPSB1LCB1ID0gdiwgdiA9IGk7XG5cbiAgICB2YXIgaSA9IGxvZ3ModSksXG4gICAgICAgIGogPSBsb2dzKHYpLFxuICAgICAgICBwLFxuICAgICAgICBrLFxuICAgICAgICB0LFxuICAgICAgICBuID0gY291bnQgPT0gbnVsbCA/IDEwIDogK2NvdW50LFxuICAgICAgICB6ID0gW107XG5cbiAgICBpZiAoIShiYXNlICUgMSkgJiYgaiAtIGkgPCBuKSB7XG4gICAgICBpID0gTWF0aC5yb3VuZChpKSAtIDEsIGogPSBNYXRoLnJvdW5kKGopICsgMTtcbiAgICAgIGlmICh1ID4gMCkgZm9yICg7IGkgPCBqOyArK2kpIHtcbiAgICAgICAgZm9yIChrID0gMSwgcCA9IHBvd3MoaSk7IGsgPCBiYXNlOyArK2spIHtcbiAgICAgICAgICB0ID0gcCAqIGs7XG4gICAgICAgICAgaWYgKHQgPCB1KSBjb250aW51ZTtcbiAgICAgICAgICBpZiAodCA+IHYpIGJyZWFrO1xuICAgICAgICAgIHoucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGZvciAoOyBpIDwgajsgKytpKSB7XG4gICAgICAgIGZvciAoayA9IGJhc2UgLSAxLCBwID0gcG93cyhpKTsgayA+PSAxOyAtLWspIHtcbiAgICAgICAgICB0ID0gcCAqIGs7XG4gICAgICAgICAgaWYgKHQgPCB1KSBjb250aW51ZTtcbiAgICAgICAgICBpZiAodCA+IHYpIGJyZWFrO1xuICAgICAgICAgIHoucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB6ID0gdGlja3MoaSwgaiwgTWF0aC5taW4oaiAtIGksIG4pKS5tYXAocG93cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHIgPyB6LnJldmVyc2UoKSA6IHo7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICBpZiAoc3BlY2lmaWVyID09IG51bGwpIHNwZWNpZmllciA9IGJhc2UgPT09IDEwID8gXCIuMGVcIiA6IFwiLFwiO1xuICAgIGlmICh0eXBlb2Ygc3BlY2lmaWVyICE9PSBcImZ1bmN0aW9uXCIpIHNwZWNpZmllciA9IGZvcm1hdChzcGVjaWZpZXIpO1xuICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG4gICAgdmFyIGsgPSBNYXRoLm1heCgxLCBiYXNlICogY291bnQgLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7IC8vIFRPRE8gZmFzdCBlc3RpbWF0ZT9cbiAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIGkgPSBkIC8gcG93cyhNYXRoLnJvdW5kKGxvZ3MoZCkpKTtcbiAgICAgIGlmIChpICogYmFzZSA8IGJhc2UgLSAwLjUpIGkgKj0gYmFzZTtcbiAgICAgIHJldHVybiBpIDw9IGsgPyBzcGVjaWZpZXIoZCkgOiBcIlwiO1xuICAgIH07XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4obmljZShkb21haW4oKSwge1xuICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBvd3MoTWF0aC5mbG9vcihsb2dzKHgpKSk7IH0sXG4gICAgICBjZWlsOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguY2VpbChsb2dzKHgpKSk7IH1cbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZG9tYWluLCBpbnRlcnZhbCkge1xuICBkb21haW4gPSBkb21haW4uc2xpY2UoKTtcblxuICB2YXIgaTAgPSAwLFxuICAgICAgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSxcbiAgICAgIHgwID0gZG9tYWluW2kwXSxcbiAgICAgIHgxID0gZG9tYWluW2kxXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHgxIDwgeDApIHtcbiAgICB0ID0gaTAsIGkwID0gaTEsIGkxID0gdDtcbiAgICB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcbiAgfVxuXG4gIGRvbWFpbltpMF0gPSBpbnRlcnZhbC5mbG9vcih4MCk7XG4gIGRvbWFpbltpMV0gPSBpbnRlcnZhbC5jZWlsKHgxKTtcbiAgcmV0dXJuIGRvbWFpbjtcbn1cbiIsInZhciB0MCA9IG5ldyBEYXRlLFxuICAgIHQxID0gbmV3IERhdGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgPyBuZXcgRGF0ZSA6IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW10sIHByZXZpb3VzO1xuICAgIHN0YXJ0ID0gaW50ZXJ2YWwuY2VpbChzdGFydCk7XG4gICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgIGRvIHJhbmdlLnB1c2gocHJldmlvdXMgPSBuZXcgRGF0ZSgrc3RhcnQpKSwgb2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCk7XG4gICAgd2hpbGUgKHByZXZpb3VzIDwgc3RhcnQgJiYgc3RhcnQgPCBzdG9wKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkgZGF0ZS5zZXRUaW1lKGRhdGUgLSAxKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB0MC5zZXRUaW1lKCtzdGFydCksIHQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDApLCBmbG9vcmkodDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAsIHQxKSk7XG4gICAgfTtcblxuICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgIDogaW50ZXJ2YWwuZmlsdGVyKGZpZWxkXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGludGVydmFsO1xufVxuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciBtaWxsaXNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAvLyBub29wXG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxubWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGspICogayk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWlsbGlzZWNvbmQ7XG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc2Vjb25kO1xuZXhwb3J0IHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuIiwiZXhwb3J0IHZhciBkdXJhdGlvblNlY29uZCA9IDFlMztcbmV4cG9ydCB2YXIgZHVyYXRpb25NaW51dGUgPSA2ZTQ7XG5leHBvcnQgdmFyIGR1cmF0aW9uSG91ciA9IDM2ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uRGF5ID0gODY0ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uV2VlayA9IDYwNDhlNTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBtaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWludXRlO1xuZXhwb3J0IHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCAtIGRhdGUuZ2V0TWludXRlcygpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5LCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIGRheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRheTtcbmV4cG9ydCB2YXIgZGF5cyA9IGRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB3ZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHN1bmRheSA9IHdlZWtkYXkoMCk7XG5leHBvcnQgdmFyIG1vbmRheSA9IHdlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHR1ZXNkYXkgPSB3ZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB0aHVyc2RheSA9IHdlZWtkYXkoNCk7XG5leHBvcnQgdmFyIGZyaWRheSA9IHdlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciBzdW5kYXlzID0gc3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBtb25kYXlzID0gbW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHdlZG5lc2RheXMgPSB3ZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHRodXJzZGF5cyA9IHRodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBzYXR1cmRheXMgPSBzYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciBtb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb250aDtcbmV4cG9ydCB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNNaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01pbnV0ZTtcbmV4cG9ydCB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXJ9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNIb3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNIb3VyO1xuZXhwb3J0IHZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXl9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNEYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0RheTtcbmV4cG9ydCB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbmZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciB1dGNTdW5kYXkgPSB1dGNXZWVrZGF5KDApO1xuZXhwb3J0IHZhciB1dGNNb25kYXkgPSB1dGNXZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5ID0gdXRjV2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5ID0gdXRjV2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXkgPSB1dGNXZWVrZGF5KDQpO1xuZXhwb3J0IHZhciB1dGNGcmlkYXkgPSB1dGNXZWVrZGF5KDUpO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheSA9IHV0Y1dlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5cyA9IHV0Y1N1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheXMgPSB1dGNUdWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5cyA9IHV0Y0ZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXlzID0gdXRjU2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IHtcbiAgdGltZURheSxcbiAgdGltZVN1bmRheSxcbiAgdGltZU1vbmRheSxcbiAgdGltZVRodXJzZGF5LFxuICB0aW1lWWVhcixcbiAgdXRjRGF5LFxuICB1dGNTdW5kYXksXG4gIHV0Y01vbmRheSxcbiAgdXRjVGh1cnNkYXksXG4gIHV0Y1llYXJcbn0gZnJvbSBcImQzLXRpbWVcIjtcblxuZnVuY3Rpb24gbG9jYWxEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbn1cblxuZnVuY3Rpb24gdXRjRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbn1cblxuZnVuY3Rpb24gbmV3RGF0ZSh5LCBtLCBkKSB7XG4gIHJldHVybiB7eTogeSwgbTogbSwgZDogZCwgSDogMCwgTTogMCwgUzogMCwgTDogMH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdExvY2FsZShsb2NhbGUpIHtcbiAgdmFyIGxvY2FsZV9kYXRlVGltZSA9IGxvY2FsZS5kYXRlVGltZSxcbiAgICAgIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsXG4gICAgICBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLFxuICAgICAgbG9jYWxlX3BlcmlvZHMgPSBsb2NhbGUucGVyaW9kcyxcbiAgICAgIGxvY2FsZV93ZWVrZGF5cyA9IGxvY2FsZS5kYXlzLFxuICAgICAgbG9jYWxlX3Nob3J0V2Vla2RheXMgPSBsb2NhbGUuc2hvcnREYXlzLFxuICAgICAgbG9jYWxlX21vbnRocyA9IGxvY2FsZS5tb250aHMsXG4gICAgICBsb2NhbGVfc2hvcnRNb250aHMgPSBsb2NhbGUuc2hvcnRNb250aHM7XG5cbiAgdmFyIHBlcmlvZFJlID0gZm9ybWF0UmUobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgcGVyaW9kTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICB3ZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBtb250aFJlID0gZm9ybWF0UmUobG9jYWxlX21vbnRocyksXG4gICAgICBtb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfbW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydE1vbnRocyksXG4gICAgICBzaG9ydE1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG5cbiAgdmFyIGZvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0V2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0U2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0TW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdE1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0SG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdERheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0TWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0TWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0UGVyaW9kLFxuICAgIFwicVwiOiBmb3JtYXRRdWFydGVyLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0U2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0V2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0V2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0WWVhcixcbiAgICBcIllcIjogZm9ybWF0RnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFpvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHV0Y0Zvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFVUQ1Nob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0VVRDV2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0VVRDU2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0VVRDTW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0VVRDSG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0VVRDTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0VVRDUGVyaW9kLFxuICAgIFwicVwiOiBmb3JtYXRVVENRdWFydGVyLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0VVRDV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICBcIllcIjogZm9ybWF0VVRDRnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHBhcnNlcyA9IHtcbiAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IHBhcnNlV2Vla2RheSxcbiAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgIFwiY1wiOiBwYXJzZUxvY2FsZURhdGVUaW1lLFxuICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImZcIjogcGFyc2VNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IHBhcnNlSG91cjI0LFxuICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcbiAgICBcImpcIjogcGFyc2VEYXlPZlllYXIsXG4gICAgXCJMXCI6IHBhcnNlTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBwYXJzZU1pbnV0ZXMsXG4gICAgXCJwXCI6IHBhcnNlUGVyaW9kLFxuICAgIFwicVwiOiBwYXJzZVF1YXJ0ZXIsXG4gICAgXCJRXCI6IHBhcnNlVW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogcGFyc2VTZWNvbmRzLFxuICAgIFwidVwiOiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogcGFyc2VXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXG4gICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIlpcIjogcGFyc2Vab25lLFxuICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgLy8gVGhlc2UgcmVjdXJzaXZlIGRpcmVjdGl2ZSBkZWZpbml0aW9ucyBtdXN0IGJlIGRlZmVycmVkLlxuICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCBmb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgdXRjRm9ybWF0cyk7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgZWxzZSBwYWQgPSBjID09PSBcImVcIiA/IFwiIFwiIDogXCIwXCI7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBaKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIGQgPSBuZXdEYXRlKDE5MDAsIHVuZGVmaW5lZCwgMSksXG4gICAgICAgICAgaSA9IHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nICs9IFwiXCIsIDApLFxuICAgICAgICAgIHdlZWssIGRheTtcbiAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAvLyBJZiBhIFVOSVggdGltZXN0YW1wIGlzIHNwZWNpZmllZCwgcmV0dXJuIGl0LlxuICAgICAgaWYgKFwiUVwiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLlEpO1xuICAgICAgaWYgKFwic1wiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLnMgKiAxMDAwICsgKFwiTFwiIGluIGQgPyBkLkwgOiAwKSk7XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgdXRjUGFyc2UsIG5ldmVyIHVzZSB0aGUgbG9jYWwgdGltZXpvbmUuXG4gICAgICBpZiAoWiAmJiAhKFwiWlwiIGluIGQpKSBkLlogPSAwO1xuXG4gICAgICAvLyBUaGUgYW0tcG0gZmxhZyBpcyAwIGZvciBBTSwgYW5kIDEgZm9yIFBNLlxuICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgIC8vIElmIHRoZSBtb250aCB3YXMgbm90IHNwZWNpZmllZCwgaW5oZXJpdCBmcm9tIHRoZSBxdWFydGVyLlxuICAgICAgaWYgKGQubSA9PT0gdW5kZWZpbmVkKSBkLm0gPSBcInFcIiBpbiBkID8gZC5xIDogMDtcblxuICAgICAgLy8gQ29udmVydCBkYXktb2Ytd2VlayBhbmQgd2Vlay1vZi15ZWFyIHRvIGRheS1vZi15ZWFyLlxuICAgICAgaWYgKFwiVlwiIGluIGQpIHtcbiAgICAgICAgaWYgKGQuViA8IDEgfHwgZC5WID4gNTMpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gMTtcbiAgICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLCBkYXkgPSB3ZWVrLmdldFVUQ0RheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHV0Y01vbmRheS5jZWlsKHdlZWspIDogdXRjTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXRVVENEYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdlZWsgPSBsb2NhbERhdGUobmV3RGF0ZShkLnksIDAsIDEpKSwgZGF5ID0gd2Vlay5nZXREYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB0aW1lTW9uZGF5LmNlaWwod2VlaykgOiB0aW1lTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB0aW1lRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0RGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpIHtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwidVwiIGluIGQgPyBkLnUgJSA3IDogXCJXXCIgaW4gZCA/IDEgOiAwO1xuICAgICAgICBkYXkgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLmdldFVUQ0RheSgpIDogbG9jYWxEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSkuZ2V0RGF5KCk7XG4gICAgICAgIGQubSA9IDA7XG4gICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0aW1lIHpvbmUgaXMgc3BlY2lmaWVkLCBhbGwgZmllbGRzIGFyZSBpbnRlcnByZXRlZCBhcyBVVEMgYW5kIHRoZW5cbiAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICBkLkggKz0gZC5aIC8gMTAwIHwgMDtcbiAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgIHJldHVybiBsb2NhbERhdGUoZCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nLCBqKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgbSA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIGMsXG4gICAgICAgIHBhcnNlO1xuXG4gICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICBpZiAoaiA+PSBtKSByZXR1cm4gLTE7XG4gICAgICBjID0gc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgIGlmIChjID09PSAzNykge1xuICAgICAgICBjID0gc3BlY2lmaWVyLmNoYXJBdChpKyspO1xuICAgICAgICBwYXJzZSA9IHBhcnNlc1tjIGluIHBhZHMgPyBzcGVjaWZpZXIuY2hhckF0KGkrKykgOiBjXTtcbiAgICAgICAgaWYgKCFwYXJzZSB8fCAoKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApKSByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKGMgIT0gc3RyaW5nLmNoYXJDb2RlQXQoaisrKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGo7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVBlcmlvZChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHBlcmlvZFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLnAgPSBwZXJpb2RMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gd2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0TW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydE1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IHNob3J0TW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlVGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV90aW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0SG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UXVhcnRlcihkKSB7XG4gICAgcmV0dXJuIDEgKyB+fihkLmdldE1vbnRoKCkgLyAzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldFVUQ0hvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1F1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRVVENNb250aCgpIC8gMyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGZhbHNlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH0sXG4gICAgdXRjRm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgdXRjUGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgdHJ1ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gIH07XG59XG5cbnZhciBwYWRzID0ge1wiLVwiOiBcIlwiLCBcIl9cIjogXCIgXCIsIFwiMFwiOiBcIjBcIn0sXG4gICAgbnVtYmVyUmUgPSAvXlxccypcXGQrLywgLy8gbm90ZTogaWdub3JlcyBuZXh0IGRpcmVjdGl2ZVxuICAgIHBlcmNlbnRSZSA9IC9eJS8sXG4gICAgcmVxdW90ZVJlID0gL1tcXFxcXiQqKz98W1xcXSgpLnt9XS9nO1xuXG5mdW5jdGlvbiBwYWQodmFsdWUsIGZpbGwsIHdpZHRoKSB7XG4gIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLFxuICAgICAgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLFxuICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgcmV0dXJuIHNpZ24gKyAobGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpICsgc3RyaW5nIDogc3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gcmVxdW90ZShzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UocmVxdW90ZVJlLCBcIlxcXFwkJlwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UmUobmFtZXMpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyBuYW1lcy5tYXAocmVxdW90ZSkuam9pbihcInxcIikgKyBcIilcIiwgXCJpXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMb29rdXAobmFtZXMpIHtcbiAgdmFyIG1hcCA9IHt9LCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBtYXBbbmFtZXNbaV0udG9Mb3dlckNhc2UoKV0gPSBpO1xuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC53ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJJU08oZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5WID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRnVsbFllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDQpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdICsgKCtuWzBdID4gNjggPyAxOTAwIDogMjAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vab25lKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IC9eKFopfChbKy1dXFxkXFxkKSg/Ojo/KFxcZFxcZCkpPy8uZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5aID0gblsxXSA/IDAgOiAtKG5bMl0gKyAoblszXSB8fCBcIjAwXCIpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVF1YXJ0ZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC5xID0gblswXSAqIDMgLSAzLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9udGhOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZk1vbnRoKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQubSA9IDAsIGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSG91cjI0KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWludXRlcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWxsaXNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWNyb3NlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gTWF0aC5mbG9vcihuWzBdIC8gMTAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VMaXRlcmFsUGVyY2VudChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQucyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdGltZURheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0U2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICByZXR1cm4gZGF5ID09PSAwID8gNyA6IGRheTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZVN1bmRheS5jb3VudCh0aW1lWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB0aW1lVGh1cnNkYXkoZCkgOiB0aW1lVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh0aW1lVGh1cnNkYXkuY291bnQodGltZVllYXIoZCksIGQpICsgKHRpbWVZZWFyKGQpLmdldERheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZU1vbmRheS5jb3VudCh0aW1lWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHV0Y1RodXJzZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpICsgKHV0Y1llYXIoZCkuZ2V0VVRDRGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldFVUQ0RheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSAtIDEsIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgcmV0dXJuIFwiKzAwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gIHJldHVybiBcIiVcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcChkKSB7XG4gIHJldHVybiArZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMoZCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigrZCAvIDEwMDApO1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgdGltZUZvcm1hdDtcbmV4cG9ydCB2YXIgdGltZVBhcnNlO1xuZXhwb3J0IHZhciB1dGNGb3JtYXQ7XG5leHBvcnQgdmFyIHV0Y1BhcnNlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGF0ZVRpbWU6IFwiJXgsICVYXCIsXG4gIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICBwZXJpb2RzOiBbXCJBTVwiLCBcIlBNXCJdLFxuICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICB0aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgdGltZVBhcnNlID0gbG9jYWxlLnBhcnNlO1xuICB1dGNGb3JtYXQgPSBsb2NhbGUudXRjRm9ybWF0O1xuICB1dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7dXRjRm9ybWF0fSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlLmpzXCI7XG5cbmV4cG9ydCB2YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcblxuZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbn1cblxudmFyIGZvcm1hdElzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nXG4gICAgPyBmb3JtYXRJc29OYXRpdmVcbiAgICA6IHV0Y0Zvcm1hdChpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRJc287XG4iLCJpbXBvcnQge2lzb1NwZWNpZmllcn0gZnJvbSBcIi4vaXNvRm9ybWF0LmpzXCI7XG5pbXBvcnQge3V0Y1BhcnNlfSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHBhcnNlSXNvTmF0aXZlKHN0cmluZykge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xufVxuXG52YXIgcGFyc2VJc28gPSArbmV3IERhdGUoXCIyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIilcbiAgICA/IHBhcnNlSXNvTmF0aXZlXG4gICAgOiB1dGNQYXJzZShpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBwYXJzZUlzbztcbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuXG52YXIgdG9wID0gMSxcbiAgICByaWdodCA9IDIsXG4gICAgYm90dG9tID0gMyxcbiAgICBsZWZ0ID0gNCxcbiAgICBlcHNpbG9uID0gMWUtNjtcblxuZnVuY3Rpb24gdHJhbnNsYXRlWCh4KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZShcIiArICh4ICsgMC41KSArIFwiLDApXCI7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVkoeSkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArICh5ICsgMC41KSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBudW1iZXIoc2NhbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gK3NjYWxlKGQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjZW50ZXIoc2NhbGUpIHtcbiAgdmFyIG9mZnNldCA9IE1hdGgubWF4KDAsIHNjYWxlLmJhbmR3aWR0aCgpIC0gMSkgLyAyOyAvLyBBZGp1c3QgZm9yIDAuNXB4IG9mZnNldC5cbiAgaWYgKHNjYWxlLnJvdW5kKCkpIG9mZnNldCA9IE1hdGgucm91bmQob2Zmc2V0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gK3NjYWxlKGQpICsgb2Zmc2V0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBlbnRlcmluZygpIHtcbiAgcmV0dXJuICF0aGlzLl9fYXhpcztcbn1cblxuZnVuY3Rpb24gYXhpcyhvcmllbnQsIHNjYWxlKSB7XG4gIHZhciB0aWNrQXJndW1lbnRzID0gW10sXG4gICAgICB0aWNrVmFsdWVzID0gbnVsbCxcbiAgICAgIHRpY2tGb3JtYXQgPSBudWxsLFxuICAgICAgdGlja1NpemVJbm5lciA9IDYsXG4gICAgICB0aWNrU2l6ZU91dGVyID0gNixcbiAgICAgIHRpY2tQYWRkaW5nID0gMyxcbiAgICAgIGsgPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGxlZnQgPyAtMSA6IDEsXG4gICAgICB4ID0gb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PT0gcmlnaHQgPyBcInhcIiA6IFwieVwiLFxuICAgICAgdHJhbnNmb3JtID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBib3R0b20gPyB0cmFuc2xhdGVYIDogdHJhbnNsYXRlWTtcblxuICBmdW5jdGlvbiBheGlzKGNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWVzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gKHNjYWxlLnRpY2tzID8gc2NhbGUudGlja3MuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogc2NhbGUuZG9tYWluKCkpIDogdGlja1ZhbHVlcyxcbiAgICAgICAgZm9ybWF0ID0gdGlja0Zvcm1hdCA9PSBudWxsID8gKHNjYWxlLnRpY2tGb3JtYXQgPyBzY2FsZS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IGlkZW50aXR5KSA6IHRpY2tGb3JtYXQsXG4gICAgICAgIHNwYWNpbmcgPSBNYXRoLm1heCh0aWNrU2l6ZUlubmVyLCAwKSArIHRpY2tQYWRkaW5nLFxuICAgICAgICByYW5nZSA9IHNjYWxlLnJhbmdlKCksXG4gICAgICAgIHJhbmdlMCA9ICtyYW5nZVswXSArIDAuNSxcbiAgICAgICAgcmFuZ2UxID0gK3JhbmdlW3JhbmdlLmxlbmd0aCAtIDFdICsgMC41LFxuICAgICAgICBwb3NpdGlvbiA9IChzY2FsZS5iYW5kd2lkdGggPyBjZW50ZXIgOiBudW1iZXIpKHNjYWxlLmNvcHkoKSksXG4gICAgICAgIHNlbGVjdGlvbiA9IGNvbnRleHQuc2VsZWN0aW9uID8gY29udGV4dC5zZWxlY3Rpb24oKSA6IGNvbnRleHQsXG4gICAgICAgIHBhdGggPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLmRvbWFpblwiKS5kYXRhKFtudWxsXSksXG4gICAgICAgIHRpY2sgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh2YWx1ZXMsIHNjYWxlKS5vcmRlcigpLFxuICAgICAgICB0aWNrRXhpdCA9IHRpY2suZXhpdCgpLFxuICAgICAgICB0aWNrRW50ZXIgPSB0aWNrLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLFxuICAgICAgICBsaW5lID0gdGljay5zZWxlY3QoXCJsaW5lXCIpLFxuICAgICAgICB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpO1xuXG4gICAgcGF0aCA9IHBhdGgubWVyZ2UocGF0aC5lbnRlcigpLmluc2VydChcInBhdGhcIiwgXCIudGlja1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiY3VycmVudENvbG9yXCIpKTtcblxuICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKSk7XG5cbiAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC5hdHRyKFwiZHlcIiwgb3JpZW50ID09PSB0b3AgPyBcIjBlbVwiIDogb3JpZW50ID09PSBib3R0b20gPyBcIjAuNzFlbVwiIDogXCIwLjMyZW1cIikpO1xuXG4gICAgaWYgKGNvbnRleHQgIT09IHNlbGVjdGlvbikge1xuICAgICAgcGF0aCA9IHBhdGgudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICBsaW5lID0gbGluZS50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGV4dCA9IHRleHQudHJhbnNpdGlvbihjb250ZXh0KTtcblxuICAgICAgdGlja0V4aXQgPSB0aWNrRXhpdC50cmFuc2l0aW9uKGNvbnRleHQpXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gaXNGaW5pdGUoZCA9IHBvc2l0aW9uKGQpKSA/IHRyYW5zZm9ybShkKSA6IHRoaXMuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpOyB9KTtcblxuICAgICAgdGlja0VudGVyXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyB2YXIgcCA9IHRoaXMucGFyZW50Tm9kZS5fX2F4aXM7IHJldHVybiB0cmFuc2Zvcm0ocCAmJiBpc0Zpbml0ZShwID0gcChkKSkgPyBwIDogcG9zaXRpb24oZCkpOyB9KTtcbiAgICB9XG5cbiAgICB0aWNrRXhpdC5yZW1vdmUoKTtcblxuICAgIHBhdGhcbiAgICAgICAgLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT0gcmlnaHRcbiAgICAgICAgICAgID8gKHRpY2tTaXplT3V0ZXIgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyIDogXCJNMC41LFwiICsgcmFuZ2UwICsgXCJWXCIgKyByYW5nZTEpXG4gICAgICAgICAgICA6ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTVwiICsgcmFuZ2UwICsgXCIsMC41SFwiICsgcmFuZ2UxKSk7XG5cbiAgICB0aWNrXG4gICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24oZCkpOyB9KTtcblxuICAgIGxpbmVcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICB0ZXh0XG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAudGV4dChmb3JtYXQpO1xuXG4gICAgc2VsZWN0aW9uLmZpbHRlcihlbnRlcmluZylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLl9fYXhpcyA9IHBvc2l0aW9uOyB9KTtcbiAgfVxuXG4gIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUgPSBfLCBheGlzKSA6IHNjYWxlO1xuICB9O1xuXG4gIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSwgYXhpcztcbiAgfTtcblxuICBheGlzLnRpY2tBcmd1bWVudHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrVmFsdWVzICYmIHRpY2tWYWx1ZXMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSB0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xuICB9O1xuXG4gIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1BhZGRpbmcgPSArXywgYXhpcykgOiB0aWNrUGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gYXhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNUb3Aoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXModG9wLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzUmlnaHQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzTGVmdChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhsZWZ0LCBzY2FsZSk7XG59XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSB8fCAvW1xccy5dLy50ZXN0KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgX1t0XSA9IFtdO1xuICB9XG4gIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG59XG5cbmZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgdGhpcy5fID0gXztcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbkRpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICB0LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcbiAgfSxcbiAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldCh0eXBlLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gYy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIiwidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImNhbmNlbFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobm9kZSwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSZ2IsIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSksIGkgPSBmdWxsbmFtZSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB0aGlzLmF0dHJUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbikoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgOiB2YWx1ZSA9PSBudWxsID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkoZnVsbG5hbWUpXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KShmdWxsbmFtZSwgaSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgaS5jYWxsKHRoaXMsIHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaS5jYWxsKHRoaXMsIHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge2dldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZGVsYXlGdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZGVsYXlGdW5jdGlvblxuICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZGVsYXk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBkdXJhdGlvbkZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkdXJhdGlvbkNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZHVyYXRpb25GdW5jdGlvblxuICAgICAgICAgIDogZHVyYXRpb25Db25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZHVyYXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5lYXNlID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaChlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZWFzZTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbnZhciBTZWxlY3Rpb24gPSBzZWxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzdHlsZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGUuanNcIjtcblxuZnVuY3Rpb24gc3R5bGVOdWxsKG5hbWUsIGludGVycG9sYXRlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgc3RyaW5nMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHN0cmluZzEwID0gc3RyaW5nMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyksXG4gICAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgc3RyaW5nMSA9IHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZU1heWJlUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciBvbjAsIG9uMSwgbGlzdGVuZXIwLCBrZXkgPSBcInN0eWxlLlwiICsgbmFtZSwgZXZlbnQgPSBcImVuZC5cIiArIGtleSwgcmVtb3ZlO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZS5vbixcbiAgICAgICAgbGlzdGVuZXIgPSBzY2hlZHVsZS52YWx1ZVtrZXldID09IG51bGwgPyByZW1vdmUgfHwgKHJlbW92ZSA9IHN0eWxlUmVtb3ZlKG5hbWUpKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCB8fCBsaXN0ZW5lcjAgIT09IGxpc3RlbmVyKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKGV2ZW50LCBsaXN0ZW5lcjAgPSBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBpID0gKG5hbWUgKz0gXCJcIikgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlTnVsbChuYW1lLCBpKSlcbiAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIHN0eWxlUmVtb3ZlKG5hbWUpKVxuICAgIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUZ1bmN0aW9uKG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlKSkpXG4gICAgICAuZWFjaChzdHlsZU1heWJlUmVtb3ZlKHRoaXMuX2lkLCBuYW1lKSlcbiAgICA6IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlQ29uc3RhbnQobmFtZSwgaSwgdmFsdWUpLCBwcmlvcml0eSlcbiAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIG51bGwpO1xufVxuIiwiZnVuY3Rpb24gc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaS5jYWxsKHRoaXMsIHQpLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciB0LCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdCA9IChpMCA9IGkpICYmIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpO1xuICAgIHJldHVybiB0O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIga2V5ID0gXCJzdHlsZS5cIiArIChuYW1lICs9IFwiXCIpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dEludGVycG9sYXRlKGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gaS5jYWxsKHRoaXMsIHQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0VHdlZW4odmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiB0ZXh0SW50ZXJwb2xhdGUoaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcInRleHRcIjtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHRleHRUd2Vlbih2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHIgZnJvbSBcIi4vYXR0ci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0clR3ZWVuIGZyb20gXCIuL2F0dHJUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZGVsYXkgZnJvbSBcIi4vZGVsYXkuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2R1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlIGZyb20gXCIuL2Vhc2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9vbiBmcm9tIFwiLi9vbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0aW9uIGZyb20gXCIuL3NlbGVjdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlVHdlZW4gZnJvbSBcIi4vc3R5bGVUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dCBmcm9tIFwiLi90ZXh0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0VHdlZW4gZnJvbSBcIi4vdGV4dFR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3R3ZWVuIGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lbmQgZnJvbSBcIi4vZW5kLmpzXCI7XG5cbnZhciBpZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgdGV4dFR3ZWVuOiB0cmFuc2l0aW9uX3RleHRUd2VlbixcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBvbjAsIG9uMSwgdGhhdCA9IHRoaXMsIGlkID0gdGhhdC5faWQsIHNpemUgPSB0aGF0LnNpemUoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjYW5jZWwgPSB7dmFsdWU6IHJlamVjdH0sXG4gICAgICAgIGVuZCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7IGlmICgtLXNpemUgPT09IDApIHJlc29sdmUoKTsgfX07XG5cbiAgICB0aGF0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkge1xuICAgICAgICBvbjEgPSAob24wID0gb24pLmNvcHkoKTtcbiAgICAgICAgb24xLl8uY2FuY2VsLnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uaW50ZXJydXB0LnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uZW5kLnB1c2goZW5kKTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwiaW1wb3J0IGludGVycnVwdCBmcm9tIFwiLi4vaW50ZXJydXB0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIHNjaGVkdWxlLm9uLmNhbGwoYWN0aXZlID8gXCJpbnRlcnJ1cHRcIiA6IFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuaW1wb3J0IHtzZWxlY3QsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3RyYW5zaXRpb259IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbHRpcCB7XG4gICAgY29uc3RydWN0b3IoaWQsIHZlcmJvc2U9ZmFsc2UsIG9mZnNldFg9MzAsIG9mZnNldFk9LTQwLCBkdXJhdGlvbj0xMDApe1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMudmVyYm9zZSA9IHZlcmJvc2U7XG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IG9mZnNldFg7XG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IG9mZnNldFk7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB9XG5cbiAgICBzaG93KGluZm8pIHtcbiAgICAgICAgaWYodGhpcy52ZXJib3NlKSBjb25zb2xlLmxvZyhpbmZvKTtcbiAgICAgICAgdGhpcy5lZGl0KGluZm8pO1xuICAgICAgICB0aGlzLm1vdmUoKTtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJpbmxpbmVcIilcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxLjApXG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjApO1xuICAgICAgICB0aGlzLmVkaXQoXCJcIik7XG4gICAgfVxuXG4gICAgbW92ZSh4ID0gZXZlbnQucGFnZVgsIHkgPSBldmVudC5wYWdlWSkge1xuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh4KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHkpO1xuICAgICAgICB9XG4gICAgICAgIHggPSB4ICsgdGhpcy5vZmZzZXRYOyAvLyBUT0RPOiBnZXQgcmlkIG9mIHRoZSBoYXJkLWNvZGVkIGFkanVzdG1lbnRcbiAgICAgICAgeSA9ICh5ICsgdGhpcy5vZmZzZXRZKTwwPzEwOnkrdGhpcy5vZmZzZXRZO1xuICAgICAgICBjb25zdCB0ID0gc2VsZWN0KCcjJyt0aGlzLmlkKVxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBgJHt4fXB4YClcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBgJHt5fXB4YClcbiAgICB9XG5cbiAgICBlZGl0KGluZm8pIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC5odG1sKGluZm8pXG4gICAgfVxufVxuXG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5cbmltcG9ydCBqUXVlcnkgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7YXNjZW5kaW5nLCBtZWRpYW4sIHF1YW50aWxlLCBleHRlbnQsIG1pbiwgbWF4fSBmcm9tICdkMy1hcnJheSc7XG5pbXBvcnQge3NlbGVjdH0gZnJvbSAnZDMtc2VsZWN0aW9uJztcbmltcG9ydCB7c2NhbGVCYW5kLCBzY2FsZUxpbmVhciwgc2NhbGVMb2d9IGZyb20gJ2QzLXNjYWxlJztcbmltcG9ydCB7YXhpc0JvdHRvbSwgYXhpc0xlZnR9IGZyb20gJ2QzLWF4aXMnO1xuXG5pbXBvcnQgVG9vbHRpcCBmcm9tIFwiLi9Ub29sdGlwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJveHBsb3Qge1xuICAgIGNvbnN0cnVjdG9yKGJveHBsb3REYXRhLCB1c2VMb2c9dHJ1ZSwgbG9nQmFzZT0xMCwgdG9vbHRpcElkPSdib3hwbG90LXRvb2x0aXAnKXtcbiAgICAgICAgdGhpcy5ib3hwbG90RGF0YSA9IGJveHBsb3REYXRhLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgaWYgKGEubGFiZWwgPCBiLmxhYmVsKSByZXR1cm4gLTE7XG4gICAgICAgICAgICBlbHNlIGlmIChhLmxhYmVsID4gYi5sYWJlbCkgcmV0dXJuIDE7XG4gICAgICAgICAgICBlbHNlIHJldHVybiAwO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hbGxWYWxzID0gW107XG4gICAgICAgIHRoaXMuYm94cGxvdERhdGEuZm9yRWFjaChkID0+IHtcbiAgICAgICAgICAgIGQuZGF0YS5zb3J0KGFzY2VuZGluZyk7XG4gICAgICAgICAgICB0aGlzLmFsbFZhbHMgPSB0aGlzLmFsbFZhbHMuY29uY2F0KGQuZGF0YSk7XG4gICAgICAgICAgICBkLnExID0gcXVhbnRpbGUoZC5kYXRhLCAwLjI1KTtcbiAgICAgICAgICAgIGQubWVkaWFuID0gbWVkaWFuKGQuZGF0YSk7XG4gICAgICAgICAgICBkLnEzID0gcXVhbnRpbGUoZC5kYXRhLCAwLjc1KTtcbiAgICAgICAgICAgIGQuaXFyID0gZC5xMyAtIGQucTE7XG4gICAgICAgICAgICBkLnVwcGVyQm91bmQgPSBtYXgoZC5kYXRhLmZpbHRlcih4ID0+IHggPD0gZC5xMyArICgxLjUgKiBkLmlxcikpKTtcbiAgICAgICAgICAgIGQubG93ZXJCb3VuZCA9IG1pbihkLmRhdGEuZmlsdGVyKHggPT4geCA+PSBkLnExIC0gKDEuNSAqIGQuaXFyKSkpO1xuICAgICAgICAgICAgZC5vdXRsaWVycyA9IGQuZGF0YS5maWx0ZXIoeCA9PiB4IDwgZC5sb3dlckJvdW5kIHx8IHggPiBkLnVwcGVyQm91bmQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51c2VMb2cgPSB1c2VMb2c7XG4gICAgICAgIHRoaXMubG9nQmFzZSA9IGxvZ0Jhc2U7XG4gICAgICAgIHRoaXMuYWxsVmFscy5zb3J0KGFzY2VuZGluZyk7XG5cbiAgICAgICAgdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNyZWF0ZVRvb2x0aXAodG9vbHRpcElkKTtcbiAgICB9XG5cbiAgICByZW5kZXIocm9vdElkLCBwbG90T3B0aW9ucz17fSkge1xuICAgICAgICAvLyBwbG90IGNvbmZpZ3NcbiAgICAgICAgbGV0IHdpZHRoID0gcGxvdE9wdGlvbnMud2lkdGggfHwgMTIwMDtcbiAgICAgICAgbGV0IGhlaWdodCA9IHBsb3RPcHRpb25zLmhlaWdodCB8fCA4MDA7XG4gICAgICAgIGxldCBtYXJnaW5zID0ge1xuICAgICAgICAgICAgdG9wOiBwbG90T3B0aW9ucy5tYXJnaW5Ub3AgfHwgMTAsXG4gICAgICAgICAgICByaWdodDogcGxvdE9wdGlvbnMubWFyZ2luUmlnaHQgfHwgNzAsXG4gICAgICAgICAgICBib3R0b206IHBsb3RPcHRpb25zLm1hcmdpbkJvdHRvbSB8fCAxNTAsXG4gICAgICAgICAgICBsZWZ0OiBwbG90T3B0aW9ucy5tYXJnaW5MZWZ0IHx8IDQwXG4gICAgICAgIH07XG4gICAgICAgIGxldCBwYWRkaW5nID0gcGxvdE9wdGlvbnMucGFkZGluZyB8fCAwLjE1O1xuICAgICAgICBsZXQgeEF4aXNGb250U2l6ZSA9IHBsb3RPcHRpb25zLnhBeGlzRm9udFNpemUgfHwgMTE7XG4gICAgICAgIGxldCB4QXhpc0xhYmVsID0gcGxvdE9wdGlvbnMueEF4aXNMYWJlbCB8fCAnJztcbiAgICAgICAgbGV0IHhBeGlzTGFiZWxGb250U2l6ZSA9IHBsb3RPcHRpb25zLnhBeGlzTGFiZWxGb250U2l6ZSB8fCAxMTtcbiAgICAgICAgbGV0IHlBeGlzRm9udFNpemUgPSBwbG90T3B0aW9ucy55QXhpc0ZvbnRTaXplIHx8IDEwO1xuICAgICAgICBsZXQgeUF4aXNMYWJlbCA9ICh0aGlzLnVzZUxvZz9gbG9nJHt0aGlzLmxvZ0Jhc2V9KCR7cGxvdE9wdGlvbnMueUF4aXNVbml0fSlgOiBwbG90T3B0aW9ucy55QXhpc1VuaXQpIHx8ICcnO1xuICAgICAgICBsZXQgeUF4aXNMYWJlbEZvbnRTaXplID0gcGxvdE9wdGlvbnMueUF4aXNMYWJlbEZvbnRTaXplIHx8IDExO1xuICAgICAgICBjb25zdCBhZGp1c3QgPSB0aGlzLl9nZXRMb2dBZGp1c3RtZW50KCk7XG5cbiAgICAgICAgY29uc3Qgc3ZnID0gdGhpcy5fY3JlYXRlU3ZnKHJvb3RJZCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnN0IGRvbSA9IHN2Zy5hcHBlbmQoJ2cnKS5hdHRyKCdpZCcsICdndGV4LXZpei1ib3hwbG90Jyk7XG4gICAgICAgIGxldCBzY2FsZXMgPSB0aGlzLl9zZXRTY2FsZXMod2lkdGggLSAobWFyZ2lucy5sZWZ0ICsgbWFyZ2lucy5yaWdodCksIGhlaWdodCAtIChtYXJnaW5zLnRvcCArIG1hcmdpbnMuYm90dG9tKSwgcGFkZGluZyk7XG4gICAgICAgIGxldCB4QXhpcyA9IGF4aXNCb3R0b20oc2NhbGVzLngpO1xuICAgICAgICBsZXQgeUF4aXMgPSBheGlzTGVmdChzY2FsZXMueSk7XG5cbiAgICAgICAgLy8gcmVuZGVyIHgtYXhpc1xuICAgICAgICBkb20uYXBwZW5kKCdnJylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdib3hwbG90LXgtYXhpcycpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbnMubGVmdCArIHNjYWxlcy54LmJhbmR3aWR0aCgpLzJ9LCAke2hlaWdodCAtIG1hcmdpbnMuYm90dG9tfSlgKVxuICAgICAgICAgICAgLmNhbGwoeEF4aXMpXG4gICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnc3RhcnQnKVxuICAgICAgICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSg1LDEpIHJvdGF0ZSg0NSknKVxuICAgICAgICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsIHhBeGlzRm9udFNpemUpO1xuICAgICAgICAvLyB4LWF4aXMgbGFiZWxcbiAgICAgICAgZG9tLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbnMubGVmdCArIHdpZHRoLzIgKyBzY2FsZXMueC5iYW5kd2lkdGgoKS8yfSwgJHtoZWlnaHQgLSB4QXhpc0xhYmVsRm9udFNpemUvMn0pYClcbiAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCB4QXhpc0xhYmVsRm9udFNpemUpXG4gICAgICAgICAgICAudGV4dCh4QXhpc0xhYmVsKTtcblxuICAgICAgICAvLyByZW5kZXIgeS1heGlzXG4gICAgICAgIGRvbS5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2JveHBsb3QteS1heGlzJylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bWFyZ2lucy5sZWZ0fSwgJHttYXJnaW5zLnRvcH0pYClcbiAgICAgICAgICAgIC5jYWxsKHlBeGlzKVxuICAgICAgICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsIHlBeGlzRm9udFNpemUpO1xuICAgICAgICAvLyB5LWF4aXMgbGFiZWxcbiAgICAgICAgZG9tLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3lBeGlzTGFiZWxGb250U2l6ZX0sICR7KGhlaWdodCAtIG1hcmdpbnMuYm90dG9tKS8yfSkgcm90YXRlKDI3MClgKVxuICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIHlBeGlzTGFiZWxGb250U2l6ZSlcbiAgICAgICAgICAgIC50ZXh0KHlBeGlzTGFiZWwpO1xuXG4gICAgICAgIC8vIHJlbmRlciBJUVIgYm94XG4gICAgICAgIGRvbS5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2JveHBsb3QtaXFyJylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bWFyZ2lucy5sZWZ0ICsgc2NhbGVzLnguYmFuZHdpZHRoKCl9LCAke21hcmdpbnMudG9wfSlgKVxuICAgICAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLmJveHBsb3REYXRhKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgICAgLmF0dHIoJ3gnLCAoZCkgPT4gc2NhbGVzLngoZC5sYWJlbCkgLSBzY2FsZXMueC5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoJ3knLCAoZCkgPT4gdGhpcy51c2VMb2c/c2NhbGVzLnkoZC5xMyArIGFkanVzdCkgOiBzY2FsZXMueShkLnEzKSlcbiAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIChkKSA9PiBzY2FsZXMueC5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAoZCkgPT4gdGhpcy51c2VMb2c/c2NhbGVzLnkoZC5xMSArIGFkanVzdCkgLSBzY2FsZXMueShkLnEzICsgYWRqdXN0KSA6IHNjYWxlcy55KGQucTEpIC0gc2NhbGVzLnkoZC5xMykpXG4gICAgICAgICAgICAuYXR0cignZmlsbCcsIChkKSA9PiBgIyR7ZC5jb2xvcn1gKVxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsICcjYWFhJylcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKGQsIGksIG5vZGVzKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdGVkRG9tID0gc2VsZWN0KG5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJveHBsb3RNb3VzZW92ZXIoZCwgc2VsZWN0ZWREb20pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoZCwgaSwgbm9kZXMpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWREb20gPSBzZWxlY3Qobm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuYm94cGxvdE1vdXNlb3V0KGQsIHNlbGVjdGVkRG9tKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlbmRlciBtZWRpYW5cbiAgICAgICAgZG9tLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnYm94cGxvdC1tZWRpYW4nKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHttYXJnaW5zLmxlZnQgKyBzY2FsZXMueC5iYW5kd2lkdGgoKX0sICR7bWFyZ2lucy50b3B9KWApXG4gICAgICAgICAgICAuc2VsZWN0QWxsKCdsaW5lJylcbiAgICAgICAgICAgIC5kYXRhKHRoaXMuYm94cGxvdERhdGEpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZCgnbGluZScpXG4gICAgICAgICAgICAuYXR0cigneDEnLCAoZCkgPT4gc2NhbGVzLngoZC5sYWJlbCkgLSBzY2FsZXMueC5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoJ3kxJywgKGQpID0+IHRoaXMudXNlTG9nP3NjYWxlcy55KGQubWVkaWFuICsgYWRqdXN0KSA6IHNjYWxlcy55KGQubWVkaWFuKSlcbiAgICAgICAgICAgIC5hdHRyKCd4MicsIChkKSA9PiBzY2FsZXMueChkLmxhYmVsKSArIHNjYWxlcy54LmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cigneTInLCAoZCkgPT4gdGhpcy51c2VMb2c/c2NhbGVzLnkoZC5tZWRpYW4gKyBhZGp1c3QpIDogc2NhbGVzLnkoZC5tZWRpYW4pKVxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsICcjMDAwJylcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAyKTtcblxuICAgICAgICBsZXQgd2hpc2tlcnMgPSBkb20uYXBwZW5kKCdnJylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdib3hwbG90LXdoaXNrZXInKTtcbiAgICAgICAgLy8gcmVuZGVyIGhpZ2ggd2hpc2tlclxuICAgICAgICB3aGlza2Vycy5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHttYXJnaW5zLmxlZnQgKyBzY2FsZXMueC5iYW5kd2lkdGgoKX0sICR7bWFyZ2lucy50b3B9KWApXG4gICAgICAgICAgICAuc2VsZWN0QWxsKCdsaW5lJylcbiAgICAgICAgICAgIC5kYXRhKHRoaXMuYm94cGxvdERhdGEpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZCgnbGluZScpXG4gICAgICAgICAgICAuYXR0cigneDEnLCAoZCkgPT4gc2NhbGVzLngoZC5sYWJlbCkpXG4gICAgICAgICAgICAuYXR0cigneTEnLCAoZCkgPT4gdGhpcy51c2VMb2c/c2NhbGVzLnkoZC5xMyArIGFkanVzdCkgOiBzY2FsZXMueShkLnEzKSlcbiAgICAgICAgICAgIC5hdHRyKCd4MicsIChkKSA9PiBzY2FsZXMueChkLmxhYmVsKSlcbiAgICAgICAgICAgIC5hdHRyKCd5MicsIChkKSA9PiB0aGlzLnVzZUxvZz9zY2FsZXMueShkLnVwcGVyQm91bmQgKyBhZGp1c3QpIDogc2NhbGVzLnkoZC51cHBlckJvdW5kKSlcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2FhYScpO1xuICAgICAgICB3aGlza2Vycy5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHttYXJnaW5zLmxlZnQgKyBzY2FsZXMueC5iYW5kd2lkdGgoKX0sICR7bWFyZ2lucy50b3B9KWApXG4gICAgICAgICAgICAuc2VsZWN0QWxsKCdsaW5lJylcbiAgICAgICAgICAgIC5kYXRhKHRoaXMuYm94cGxvdERhdGEpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZCgnbGluZScpXG4gICAgICAgICAgICAuYXR0cigneDEnLCAoZCkgPT4gc2NhbGVzLngoZC5sYWJlbCkgLSBzY2FsZXMueC5iYW5kd2lkdGgoKS80KVxuICAgICAgICAgICAgLmF0dHIoJ3kxJywgKGQpID0+IHRoaXMudXNlTG9nP3NjYWxlcy55KGQudXBwZXJCb3VuZCArIGFkanVzdCkgOiBzY2FsZXMueShkLnVwcGVyQm91bmQpKVxuICAgICAgICAgICAgLmF0dHIoJ3gyJywgKGQpID0+IHNjYWxlcy54KGQubGFiZWwpICsgc2NhbGVzLnguYmFuZHdpZHRoKCkvNClcbiAgICAgICAgICAgIC5hdHRyKCd5MicsIChkKSA9PiB0aGlzLnVzZUxvZz9zY2FsZXMueShkLnVwcGVyQm91bmQgKyBhZGp1c3QpIDogc2NhbGVzLnkoZC51cHBlckJvdW5kKSlcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2FhYScpO1xuXG4gICAgICAgIC8vIHJlbmRlciBsb3cgd2hpc2tlclxuICAgICAgICB3aGlza2Vycy5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHttYXJnaW5zLmxlZnQgKyBzY2FsZXMueC5iYW5kd2lkdGgoKX0sICR7bWFyZ2lucy50b3B9KWApXG4gICAgICAgICAgICAuc2VsZWN0QWxsKCdsaW5lJylcbiAgICAgICAgICAgIC5kYXRhKHRoaXMuYm94cGxvdERhdGEpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZCgnbGluZScpXG4gICAgICAgICAgICAuYXR0cigneDEnLCAoZCkgPT4gc2NhbGVzLngoZC5sYWJlbCkpXG4gICAgICAgICAgICAuYXR0cigneTEnLCAoZCkgPT4gdGhpcy51c2VMb2c/c2NhbGVzLnkoZC5xMSArIGFkanVzdCkgOiBzY2FsZXMueShkLnExKSlcbiAgICAgICAgICAgIC5hdHRyKCd4MicsIChkKSA9PiBzY2FsZXMueChkLmxhYmVsKSlcbiAgICAgICAgICAgIC5hdHRyKCd5MicsIChkKSA9PiB0aGlzLnVzZUxvZz9zY2FsZXMueShkLmxvd2VyQm91bmQgKyBhZGp1c3QpIDogc2NhbGVzLnkoZC5sb3dlckJvdW5kKSlcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2FhYScpO1xuICAgICAgICB3aGlza2Vycy5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHttYXJnaW5zLmxlZnQgKyBzY2FsZXMueC5iYW5kd2lkdGgoKX0sICR7bWFyZ2lucy50b3B9KWApXG4gICAgICAgICAgICAuc2VsZWN0QWxsKCdsaW5lJylcbiAgICAgICAgICAgIC5kYXRhKHRoaXMuYm94cGxvdERhdGEpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZCgnbGluZScpXG4gICAgICAgICAgICAuYXR0cigneDEnLCAoZCkgPT4gc2NhbGVzLngoZC5sYWJlbCkgLSBzY2FsZXMueC5iYW5kd2lkdGgoKS80KVxuICAgICAgICAgICAgLmF0dHIoJ3kxJywgKGQpID0+IHRoaXMudXNlTG9nP3NjYWxlcy55KGQubG93ZXJCb3VuZCArIGFkanVzdCkgOiBzY2FsZXMueShkLmxvd2VyQm91bmQpKVxuICAgICAgICAgICAgLmF0dHIoJ3gyJywgKGQpID0+IHNjYWxlcy54KGQubGFiZWwpICsgc2NhbGVzLnguYmFuZHdpZHRoKCkvNClcbiAgICAgICAgICAgIC5hdHRyKCd5MicsIChkKSA9PiB0aGlzLnVzZUxvZz9zY2FsZXMueShkLmxvd2VyQm91bmQgKyBhZGp1c3QpIDogc2NhbGVzLnkoZC5sb3dlckJvdW5kKSlcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2FhYScpO1xuXG4gICAgICAgIC8vIHJlbmRlciBvdXRsaWVyc1xuICAgICAgICBkb20uYXBwZW5kKCdnJylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdib3hwbG90LW91dGxpZXJzJylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bWFyZ2lucy5sZWZ0ICsgc2NhbGVzLnguYmFuZHdpZHRoKCl9LCAke21hcmdpbnMudG9wfSlgKVxuICAgICAgICAgICAgLnNlbGVjdEFsbCgnZycpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLmJveHBsb3REYXRhKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ2NpcmNsZScpXG4gICAgICAgICAgICAgICAgLmRhdGEoKGQpID0+IGQub3V0bGllcnMubWFwKCh4KSA9PiAoeydsYWJlbCc6IGQubGFiZWwsICd2YWwnOiB4fSkpKVxuICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgICAgICAgICAgICAuYXR0cignY3gnLCAoZCkgPT4gc2NhbGVzLngoZC5sYWJlbCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2N5JywgKGQpID0+IHRoaXMudXNlTG9nP3NjYWxlcy55KGQudmFsICsgYWRqdXN0KSA6IHNjYWxlcy55KGQudmFsKSlcbiAgICAgICAgICAgICAgICAuYXR0cigncicsICcyJylcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJyNhYWEnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVUb29sdGlwKHRvb2x0aXBEb21JZCkge1xuICAgICAgICBpZiAoalF1ZXJ5KGAjJHt0b29sdGlwRG9tSWR9YCkubGVuZ3RoID09IDApIGpRdWVyeSgnPGRpdi8+JykuYXR0cignaWQnLCB0b29sdGlwRG9tSWQpLmFwcGVuZFRvKGpRdWVyeSgnYm9keScpKTtcbiAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IFRvb2x0aXAodG9vbHRpcERvbUlkKTtcbiAgICAgICAgc2VsZWN0KGAjJHt0b29sdGlwRG9tSWR9YCkuYXR0cignY2xhc3MnLCAnYm94cGxvdC10b29sdGlwJyk7XG4gICAgfVxuXG4gICAgYm94cGxvdE1vdXNlb3ZlcihkLCBzZWxlY3RlZCkge1xuICAgICAgICBpZiAodGhpcy50b29sdGlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KGAke2QubGFiZWx9PGJyLz5cbiAgICAgICAgICAgICR7dGhpcy51c2VMb2c/J0xvZzEwKE1lZGlhbiBUUE0pJyA6ICdNZWRpYW4gVFBNJ306ICR7ZC5tZWRpYW4udG9QcmVjaXNpb24oMyl9PGJyLz5cbiAgICAgICAgICAgIE51bWJlciBvZiBTYW1wbGVzOiAke2QuZGF0YS5sZW5ndGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0ZWQuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBib3hwbG90TW91c2VvdXQoZCwgc2VsZWN0ZWQpIHtcbiAgICAgICAgaWYgKHRoaXMudG9vbHRpcCAhPT0gdW5kZWZpbmVkKSB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICBzZWxlY3RlZC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlU3ZnKHJvb3RJZCwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICBsZXQgc3ZnID0gc2VsZWN0KGAjJHtyb290SWR9YCkuYXBwZW5kKCdzdmcnKVxuICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICAgICAgcmV0dXJuIHN2ZztcbiAgICB9XG5cbiAgICBfc2V0U2NhbGVzKGlubmVyV2lkdGgsIGlubmVySGVpZ2h0LCBwYWRkaW5nPTApIHtcbiAgICAgICAgbGV0IHhTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAuZG9tYWluKHRoaXMuYm94cGxvdERhdGEubWFwKGQgPT4gZC5sYWJlbCkpXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGlubmVyV2lkdGhdKVxuICAgICAgICAgICAgLnBhZGRpbmdJbm5lcihwYWRkaW5nKTtcblxuICAgICAgICBsZXQgeVNjYWxlO1xuXG4gICAgICAgIGlmICh0aGlzLnVzZUxvZykge1xuICAgICAgICAgICAgY29uc3QgYWRqdXN0ID0gdGhpcy5fZ2V0TG9nQWRqdXN0bWVudCgpO1xuICAgICAgICAgICAgeVNjYWxlID0gc2NhbGVMb2coKVxuICAgICAgICAgICAgLmRvbWFpbihleHRlbnQodGhpcy5hbGxWYWxzKS5tYXAoZCA9PiBkICsgYWRqdXN0KSlcbiAgICAgICAgICAgIC5yYW5nZShbaW5uZXJIZWlnaHQsIDBdKVxuICAgICAgICAgICAgLmJhc2UodGhpcy5sb2dCYXNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHlTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAgICAgICAgIC5kb21haW4oZXh0ZW50KHRoaXMuYWxsVmFscykpXG4gICAgICAgICAgICAucmFuZ2UoW2lubmVySGVpZ2h0LCAwXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeFNjYWxlLFxuICAgICAgICAgICAgeTogeVNjYWxlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2dldExvZ0FkanVzdG1lbnQoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuaW1wb3J0IHF1YW50aWxlIGZyb20gXCIuL3F1YW50aWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG51bWJlcnMgPSBbXTtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHtcbiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHF1YW50aWxlKG51bWJlcnMuc29ydChhc2NlbmRpbmcpLCAwLjUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1heDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJpbXBvcnQge3JhbmdlIGFzIHNlcXVlbmNlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgb3JkaW5hbCBmcm9tIFwiLi9vcmRpbmFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhbmQoKSB7XG4gIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICBvcmRpbmFsUmFuZ2UgPSBzY2FsZS5yYW5nZSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgc3RlcCxcbiAgICAgIGJhbmR3aWR0aCxcbiAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICBwYWRkaW5nSW5uZXIgPSAwLFxuICAgICAgcGFkZGluZ091dGVyID0gMCxcbiAgICAgIGFsaWduID0gMC41O1xuXG4gIGRlbGV0ZSBzY2FsZS51bmtub3duO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBkb21haW4oKS5sZW5ndGgsXG4gICAgICAgIHJldmVyc2UgPSByYW5nZVsxXSA8IHJhbmdlWzBdLFxuICAgICAgICBzdGFydCA9IHJhbmdlW3JldmVyc2UgLSAwXSxcbiAgICAgICAgc3RvcCA9IHJhbmdlWzEgLSByZXZlcnNlXTtcbiAgICBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgxLCBuIC0gcGFkZGluZ0lubmVyICsgcGFkZGluZ091dGVyICogMik7XG4gICAgaWYgKHJvdW5kKSBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICBzdGFydCArPSAoc3RvcCAtIHN0YXJ0IC0gc3RlcCAqIChuIC0gcGFkZGluZ0lubmVyKSkgKiBhbGlnbjtcbiAgICBiYW5kd2lkdGggPSBzdGVwICogKDEgLSBwYWRkaW5nSW5uZXIpO1xuICAgIGlmIChyb3VuZCkgc3RhcnQgPSBNYXRoLnJvdW5kKHN0YXJ0KSwgYmFuZHdpZHRoID0gTWF0aC5yb3VuZChiYW5kd2lkdGgpO1xuICAgIHZhciB2YWx1ZXMgPSBzZXF1ZW5jZShuKS5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gc3RhcnQgKyBzdGVwICogaTsgfSk7XG4gICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuYmFuZHdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmR3aWR0aDtcbiAgfTtcblxuICBzY2FsZS5zdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHN0ZXA7XG4gIH07XG5cbiAgc2NhbGUucm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWluKDEsIHBhZGRpbmdPdXRlciA9ICtfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgXyksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9ICtfLCByZXNjYWxlKCkpIDogcGFkZGluZ091dGVyO1xuICB9O1xuXG4gIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kKGRvbWFpbigpLCByYW5nZSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShyZXNjYWxlKCksIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBvaW50aXNoKHNjYWxlKSB7XG4gIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICBzY2FsZS5wYWRkaW5nID0gc2NhbGUucGFkZGluZ091dGVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ0lubmVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcG9pbnRpc2goY29weSgpKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCgpIHtcbiAgcmV0dXJuIHBvaW50aXNoKGJhbmQuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYWRkaW5nSW5uZXIoMSkpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge2pzb259IGZyb20gJ2QzLWZldGNoJztcbmltcG9ydCB7Z2V0R3RleFVybHMsIHBhcnNlR2VuZUV4cHJlc3Npb25Gb3JCb3hwbG90LCBwYXJzZVRpc3N1ZXN9IGZyb20gJy4vbW9kdWxlcy9ndGV4RGF0YVBhcnNlcic7XG5cbmltcG9ydCBCb3hwbG90IGZyb20gJy4vbW9kdWxlcy9Cb3hwbG90JztcblxuZXhwb3J0IGZ1bmN0aW9uIGxhdW5jaChyb290SWQsIGdlbmNvZGVJZCwgdXJscz1nZXRHdGV4VXJscygpKSB7XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXG4gICAgICAgIGpzb24odXJscy50aXNzdWUsIHtjcmVkZW50aWFsczogJ2luY2x1ZGUnfSksXG4gICAgICAgIGpzb24odXJscy5nZW5lRXhwICsgZ2VuY29kZUlkLCB7Y3JlZGVudGlhbHM6ICdpbmNsdWRlJ30pXG4gICAgXTtcblxuICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAudGhlbihmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICBjb25zdCB0aXNzdWVzID0gcGFyc2VUaXNzdWVzKGFyZ3NbMF0pO1xuICAgICAgICAgICAgY29uc3QgdGlzc3VlSWROYW1lTWFwID0ge307XG4gICAgICAgICAgICBjb25zdCB0aXNzdWVJZENvbG9yTWFwID0ge307XG4gICAgICAgICAgICB0aXNzdWVzLmZvckVhY2goeCA9PiB7XG4gICAgICAgICAgICAgICAgdGlzc3VlSWROYW1lTWFwW3gudGlzc3VlU2l0ZURldGFpbElkXSA9IHgudGlzc3VlU2l0ZURldGFpbDtcbiAgICAgICAgICAgICAgICB0aXNzdWVJZENvbG9yTWFwW3gudGlzc3VlU2l0ZURldGFpbElkXSA9IHguY29sb3JIZXg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGJveHBsb3REYXRhID0gcGFyc2VHZW5lRXhwcmVzc2lvbkZvckJveHBsb3QoYXJnc1sxXSwgdGlzc3VlSWROYW1lTWFwLCB0aXNzdWVJZENvbG9yTWFwKTtcbiAgICAgICAgICAgIGxldCBpZHMgPSB7XG4gICAgICAgICAgICAgICAgcm9vdElkOiByb290SWQsXG4gICAgICAgICAgICAgICAgdG9vbHRpcElkOiAnYm94cGxvdC10b29sdGlwJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCBib3hwbG90ID0gbmV3IEJveHBsb3QoYm94cGxvdERhdGEpO1xuICAgICAgICAgICAgbGV0IHBsb3RPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNjAwLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDUwLFxuICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAxMDAsXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAxNjAsXG4gICAgICAgICAgICAgICAgeUF4aXNVbml0OiAnVFBNJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJveHBsb3QucmVuZGVyKGlkcy5yb290SWQsIHBsb3RPcHRpb25zKTtcbiAgICAgICAgfSk7XG59XG5cbmV4cG9ydCB2YXIgR2VuZUV4cHJlc3Npb25Cb3hwbG90ID0ge1xuICAgIGxhdW5jaDogbGF1bmNoXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R3RleFVybHMoKXtcbiAgICBjb25zdCBob3N0ID0gJ2h0dHBzOi8vZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nO1xuICAgIC8vIGNvbnN0IGhvc3QgPSAnaHR0cHM6Ly9kZXYuZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIGdlbmUtZXF0bCB2aXN1YWxpemVyIHNwZWNpZmljXG4gICAgICAgIHNpbmdsZVRpc3N1ZUVxdGw6IGhvc3QgKyAnYXNzb2NpYXRpb24vc2luZ2xlVGlzc3VlRXF0bD9mb3JtYXQ9anNvbiZkYXRhc2V0SWQ9Z3RleF92OCZnZW5jb2RlSWQ9JyxcbiAgICAgICAgbGQ6IGhvc3QgKyAnZGF0YXNldC9sZD9mb3JtYXQ9anNvbiZkYXRhc2V0SWQ9Z3RleF92OCZnZW5jb2RlSWQ9JyxcblxuICAgICAgICAvLyBlcXRsIERhc2hib2FyZCBzcGVjaWZpY1xuICAgICAgICBkeW5lcXRsOiBob3N0ICsgJ2Fzc29jaWF0aW9uL2R5bmVxdGwnLFxuICAgICAgICBzbnA6IGhvc3QgKyAncmVmZXJlbmNlL3ZhcmlhbnQ/Zm9ybWF0PWpzb24mc25wSWQ9JyxcbiAgICAgICAgdmFyaWFudElkOiBob3N0ICsgJ2RhdGFzZXQvdmFyaWFudD9mb3JtYXQ9anNvbiZ2YXJpYW50SWQ9JyxcblxuICAgICAgICAvLyB0cmFuc2NyaXB0LCBleG9uLCBqdW5jdGlvbiBleHByZXNzaW9uIHNwZWNpZmljXG4gICAgICAgIGV4b25FeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5FeG9uRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92OCZoY2x1c3Rlcj10cnVlJmdlbmNvZGVJZD0nLFxuICAgICAgICB0cmFuc2NyaXB0RXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuVHJhbnNjcmlwdEV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjgmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAganVuY3Rpb25FeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5KdW5jdGlvbkV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjgmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAgdHJhbnNjcmlwdDogaG9zdCArICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9kYXRhc2V0SWQ9Z3RleF92OCZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZXhvbjogaG9zdCArICdyZWZlcmVuY2UvZXhvbj9kYXRhc2V0SWQ9Z3RleF92OCZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZ2VuZU1vZGVsOiBob3N0ICsgJ2RhdGFzZXQvY29sbGFwc2VkR2VuZU1vZGVsRXhvbj9kYXRhc2V0SWQ9Z3RleF92OCZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZ2VuZU1vZGVsVW5maWx0ZXJlZDogaG9zdCArICdkYXRhc2V0L2Z1bGxDb2xsYXBzZWRHZW5lTW9kZWxFeG9uP2RhdGFzZXRJZD1ndGV4X3Y4JmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiB2aW9saW4gcGxvdCBzcGVjaWZpY1xuICAgICAgICBnZW5lRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vZ2VuZUV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjgmZ2VuY29kZUlkPScsXG5cbiAgICAgICAgLy8gZ2VuZSBleHByZXNzaW9uIGhlYXQgbWFwIHNwZWNpZmljXG4gICAgICAgIG1lZEdlbmVFeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5HZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92OCZoY2x1c3Rlcj10cnVlJnBhZ2VTaXplPTEwMDAwJyxcblxuICAgICAgICAvLyBnZW5lIGV4cHJlc3Npb24gYm94cGxvdCBzcGVjaWZpY1xuICAgICAgICBnZW5lRXhwQm94cGxvdDogaG9zdCArICdleHByZXNzaW9uL2dlbmVFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y4JmJveHBsb3REZXRhaWw9ZnVsbCZnZW5jb2RlSWQ9JyxcblxuICAgICAgICAvLyB0b3AgZXhwcmVzc2VkIGdlbmUgZXhwcmVzc2lvbiBzcGVjaWZpY1xuICAgICAgICB0b3BJblRpc3N1ZUZpbHRlcmVkOiBob3N0ICsgJ2V4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZT9kYXRhc2V0SWQ9Z3RleF92OCZmaWx0ZXJNdEdlbmU9dHJ1ZSZzb3J0Qnk9bWVkaWFuJnNvcnREaXJlY3Rpb249ZGVzYyZwYWdlU2l6ZT01MCZ0aXNzdWVTaXRlRGV0YWlsSWQ9JyxcbiAgICAgICAgdG9wSW5UaXNzdWU6IGhvc3QgKyAnZXhwcmVzc2lvbi90b3BFeHByZXNzZWRHZW5lP2RhdGFzZXRJZD1ndGV4X3Y4JnNvcnRCeT1tZWRpYW4mc29ydERpcmVjdGlvbj1kZXNjJnBhZ2VTaXplPTUwJnRpc3N1ZVNpdGVEZXRhaWxJZD0nLFxuXG4gICAgICAgIGdlbmVJZDogaG9zdCArICdyZWZlcmVuY2UvZ2VuZT9mb3JtYXQ9anNvbiZnZW5jb2RlVmVyc2lvbj12MjYmZ2Vub21lQnVpbGQ9R1JDaDM4JTJGaGczOCZnZW5lSWQ9JyxcblxuICAgICAgICAvLyB0aXNzdWUgbWVudSBzcGVjaWZpY1xuICAgICAgICB0aXNzdWU6ICBob3N0ICsgJ2RhdGFzZXQvdGlzc3VlSW5mbz9mb3JtYXQ9anNvbiZkYXRhc2V0SWQ9Z3RleF92OCcsXG5cbiAgICAgICAgLy8gbG9jYWwgc3RhdGljIGZpbGVzXG4gICAgICAgIHNhbXBsZTogJ3RtcFN1bW1hcnlEYXRhL2d0ZXguU2FtcGxlLmNzdicsXG4gICAgICAgIHJuYXNlcUNyYW06ICd0bXBTdW1tYXJ5RGF0YS9ybmFzZXFfY3JhbV9maWxlc192N19kYkdhUF8wMTE1MTYudHh0JyxcbiAgICAgICAgd2dzQ3JhbTogJ3RtcFN1bW1hcnlEYXRhL3dnc19jcmFtX2ZpbGVzX3Y3X2hnMzhfZGJHYVBfMDExNTE2LnR4dCcsXG5cbiAgICAgICAgLy8gZmlyZUNsb3VkXG4gICAgICAgIGZjQmlsbGluZzogJ2h0dHBzOi8vYXBpLmZpcmVjbG91ZC5vcmcvYXBpL3Byb2ZpbGUvYmlsbGluZycsXG4gICAgICAgIGZjV29ya1NwYWNlOiAnaHR0cHM6Ly9hcGkuZmlyZWNsb3VkLm9yZy9hcGkvd29ya3NwYWNlcycsXG4gICAgICAgIGZjUG9ydGFsV29ya1NwYWNlOiAnaHR0cHM6Ly9wb3J0YWwuZmlyZWNsb3VkLm9yZy8jd29ya3NwYWNlcydcbiAgICB9XG59XG5cbi8qKlxuICogcGFyc2UgR1RFeCBkeW5lcXRsIGpzb25cbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZHluZXF0bCB3ZWIgc2VydmljZVxuICogQHJldHVybnMgZGF0YSB7SlNPTn0gbW9kaWZpZWQgZGF0YVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRHluRXF0bChqc29uKXtcbiAgICAvLyBjaGVjayByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZXNcbiAgICBbJ2RhdGEnLCAnZ2Vub3R5cGVzJywgJ3BWYWx1ZScsICdwVmFsdWVUaHJlc2hvbGQnLCAndGlzc3VlU2l0ZURldGFpbElkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoZCkpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihqc29uKTtcbiAgICAgICAgICAgIHRocm93ICdQYXJzZSBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGpzb24uZXhwcmVzc2lvbl92YWx1ZXMgPSBqc29uLmRhdGEubWFwKChkKT0+cGFyc2VGbG9hdChkKSk7XG4gICAganNvbi5nZW5vdHlwZXMgPSBqc29uLmdlbm90eXBlcy5tYXAoKGQpPT5wYXJzZUZsb2F0KGQpKTtcblxuICAgIGpzb24uaG9tb1JlZkV4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09PSAwXG4gICAgfSk7XG4gICAganNvbi5ob21vQWx0RXhwID0ganNvbi5leHByZXNzaW9uX3ZhbHVlcy5maWx0ZXIoKGQsaSkgPT4ge1xuICAgICAgICByZXR1cm4ganNvbi5nZW5vdHlwZXNbaV0gPT09IDJcbiAgICB9KTtcbiAgICBqc29uLmhldGVyb0V4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09PSAxXG4gICAgfSk7XG5cbiAgICAvLyBnZW5lcmF0ZSBnZW5vdHlwZSB0ZXh0IGxhYmVsc1xuICAgIGxldCByZWYgPSBqc29uLnZhcmlhbnRJZC5zcGxpdCgvXy8pWzJdO1xuICAgIGxldCBhbHQgPSBqc29uLnZhcmlhbnRJZC5zcGxpdCgvXy8pWzNdO1xuICAgIGpzb24uaGV0ID0gcmVmICsgYWx0O1xuICAgIGpzb24ucmVmID0gcmVmICsgcmVmO1xuICAgIGpzb24uYWx0ID0gYWx0ICsgYWx0O1xuXG4gICAgcmV0dXJuIGpzb247XG59XG5cblxuLyoqXG4gKiBQYXJzZSB0aGUgc2luZ2xlIHRpc3N1ZSBlcXRscyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIHRpc3N1ZVNpdGVUYWJsZSB7SnNvbn0gb3B0aW9uYWwgZm9yIG1hcHBpbmcgdGlzc3VlU2l0ZURldGFpbElkIHRvIHRpc3N1ZVNpdGVEZXRhaWwsIGEgZGljdGlvbmFyeSBvZiB0aXNzdWVTaXRlIG9iamVjdHMgKHdpdGggdGhlIGF0dHIgdGlzc3VlU2l0ZURldGFpbCkgaW5kZXhlZCBieSB0aXNzdWVTaXRlRGV0YWlsSWQsIGFuZFxuICogQHJldHVybnMge0xpc3R9IG9mIGVxdGxzIHdpdGggYXR0cmlidXRlcyByZXF1aXJlZCBmb3IgR0VWIHJlbmRlcmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTaW5nbGVUaXNzdWVFcXRscyhkYXRhLCB0aXNzdWVTaXRlVGFibGUgPSB1bmRlZmluZWQpe1xuICAgIGNvbnN0IGF0dHIgPSAnc2luZ2xlVGlzc3VlRXF0bCc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0cmlidXRlIGlzIG5vdCBmb3VuZDogXCIgKyBhdHRyO1xuICAgIFsndmFyaWFudElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICduZXMnLCAncFZhbHVlJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgaWYgKCFkYXRhW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGspKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIH0pO1xuXG5cbiAgICByZXR1cm4gZGF0YVthdHRyXS5tYXAoKGQpPT57XG4gICAgICAgIGQueCA9IGQudmFyaWFudElkO1xuICAgICAgICBkLmRpc3BsYXlYID0gZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChkLnZhcmlhbnRJZCk7XG4gICAgICAgIGQueSA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBpZiAodGlzc3VlU2l0ZVRhYmxlKSBkLmRpc3BsYXlZID0gdGlzc3VlU2l0ZVRhYmxlW2QudGlzc3VlU2l0ZURldGFpbElkXS50aXNzdWVTaXRlRGV0YWlsO1xuICAgICAgICBkLnZhbHVlID0gZC5uZXM7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gZC5uZXMudG9QcmVjaXNpb24oMyk7XG4gICAgICAgIGQuciA9IC1NYXRoLmxvZzEwKGQucFZhbHVlKTsgLy8gc2V0IHIgdG8gYmUgdGhlIC1sb2cxMChwLXZhbHVlKVxuICAgICAgICBkLnJEaXNwbGF5VmFsdWUgPSBwYXJzZUZsb2F0KGQucFZhbHVlLnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oMyk7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH0pXG59XG5cbi8qKlxuICogUGFyc2UgdGhlIGdlbmVzIGZyb20gR1RFeCB3ZWIgc2VydmljZVxuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZ2VuZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2VuZXMoZGF0YSwgc2luZ2xlPWZhbHNlLCBnZW5lSWQ9bnVsbCl7XG4gICAgY29uc3QgYXR0ciA9ICdnZW5lJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgXCJQYXJzaW5nIEVycm9yOiBhdHRyaWJ1dGUgZ2VuZSBkb2Vzbid0IGV4aXN0LlwiO1xuICAgIGlmIChkYXRhLmdlbmUubGVuZ3RoPT09MCl7XG4gICAgICAgICBhbGVydChcIk5vIGdlbmUgaXMgZm91bmRcIik7XG4gICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBnZW5lKHMpIG5vdCBmb3VuZFwiO1xuICAgICB9XG4gICAgaWYgKHNpbmdsZSl7XG4gICAgICAgIGlmIChnZW5lSWQgPT09IG51bGwpIHRocm93IFwiUGxlYXNlIHByb3ZpZGUgYSBnZW5lIElEIGZvciBzZWFyY2ggcmVzdWx0cyB2YWxpZGF0aW9uXCI7XG4gICAgICAgIGlmIChkYXRhLmdlbmUubGVuZ3RoPjEpIHsgLy8gd2hlbiBhIHNpbmdsZSBnZW5lIElEIGhhcyBtdWx0aXBsZSBtYXRjaGVzXG4gICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gZGF0YS5nZW5lLmZpbHRlcigoZyk9PntcbiAgICAgICAgICAgICAgICAgcmV0dXJuIGcuZ2VuZVN5bWJvbFVwcGVyPT09Z2VuZUlkLnRvVXBwZXJDYXNlKCkgfHwgZy5nZW5jb2RlSWQgPT09IGdlbmVJZC50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgYWxlcnQoXCJGYXRhbCBFcnJvcjogaW5wdXQgZ2VuZSBJRCBpcyBub3QgdW5pcXVlLlwiKTtcbiAgICAgICAgICAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogaW5wdXQgZ2VuZSBJRCBpcyBub3QgdW5pcXVlLlwiO1xuICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyZWQubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICAgICAgICAgYWxlcnQoXCJObyBnZW5lIGlzIGZvdW5kIHdpdGggXCIgKyBnZW5lSWQpO1xuICAgICAgICAgICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBnZW5lIG5vdCBmb3VuZFwiO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICBkYXRhLmdlbmUgPSBmaWx0ZXJlZFxuICAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiBkYXRhLmdlbmVbMF1cbiAgICB9XG4gICAgZWxzZSByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3Vlc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgdGlzc3Vlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVzKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlSW5mbyc7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHIgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgY29uc3QgdGlzc3VlcyA9IGpzb25bYXR0cl07XG5cbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICd0aXNzdWVTaXRlRGV0YWlsJywgJ2NvbG9ySGV4J10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCF0aXNzdWVzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRpc3N1ZXM7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXMgYW5kIHJldHVybiBhIGxvb2t1cCB0YWJsZSBpbmRleGVkIGJ5IHRpc3N1ZVNpdGVEZXRhaWxJZFxuICogQHBhcmFtIGpzb24gZnJvbSB3ZWIgc2VydmljZSB0aXNzdWVTaXRlRGV0YWlsXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlRGljdChqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZUluZm8nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uW2F0dHJdO1xuICAgIC8vIHNhbml0eSBjaGVja1xuICAgIFsndGlzc3VlU2l0ZURldGFpbElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWwnLCAnY29sb3JIZXgnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHIgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRpc3N1ZXMucmVkdWNlKChhcnIsIGQpPT57YXJyW2QudGlzc3VlU2l0ZURldGFpbElkXSA9IGQ7IHJldHVybiBhcnI7fSx7fSk7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXMgc2FtcGxlIGNvdW50cywgR1RFeCByZWxlYXNlIHNwZWNpZmljXG4gKiBAcGFyYW0ganNvbiBmcm9tIHdlYiBzZXJ2aWNlIHRpc3N1ZUluZm9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlU2FtcGxlQ291bnRzKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlSW5mbyc7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHIgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgY29uc3QgdGlzc3VlcyA9IGpzb25bYXR0cl07XG5cbiAgICAvLyBjaGVjayBqc29uIHN0cnVjdHVyZVxuICAgIGNvbnN0IHRpc3N1ZSA9IHRpc3N1ZXNbMF07XG4gICAgaWYgKCF0aXNzdWUuaGFzT3duUHJvcGVydHkoJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQgYXR0ciBpcyBtaXNzaW5nOiB0aXNzdWVTaXRlRGV0YWlsSWQnO1xuICAgIGlmICghdGlzc3VlLmhhc093blByb3BlcnR5KCdybmFTZXFBbmRHZW5vdHlwZVNhbXBsZUNvdW50JykpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBhdHRyIGlzIG1pc3Npbmc6IHJuYVNlcUFuZEdlbm90eXBlU2FtcGxlQ291bnQnO1xuICAgIHJldHVybiB0aXNzdWVzO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWUgZ3JvdXBzXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSBmb3JFcXRsIHtCb29sZWFufSByZXN0cmljdCB0byBlcXRsIHRpc3N1ZXNcbiAqIEByZXR1cm5zIHtEaWN0aW9uYXJ5fSBvZiBsaXN0cyBvZiB0aXNzdWVzIGluZGV4ZWQgYnkgdGhlIHRpc3N1ZSBncm91cCBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZVNpdGVzKGRhdGEsIGZvckVxdGw9ZmFsc2Upe1xuICAgIC8vIHRoZSBsaXN0IG9mIGludmFsaWQgZXF0bCB0aXNzdWVzIGR1ZSB0byBzYW1wbGUgc2l6ZSA8IDcwXG4gICAgLy8gYSBoYXJkLWNvZGVkIGxpc3QgYmVjYXVzZSB0aGUgc2FtcGxlIHNpemUgaXMgbm90IGVhc3kgdG8gcmV0cmlldmVcbiAgICBjb25zdCBpbnZhbGlkVGlzc3VlcyA9IFsnQmxhZGRlcicsICdDZXJ2aXhfRWN0b2NlcnZpeCcsICdDZXJ2aXhfRW5kb2NlcnZpeCcsICdGYWxsb3BpYW5fVHViZScsICdLaWRuZXlfQ29ydGV4J107XG5cbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZUluZm8nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgbGV0IHRpc3N1ZXMgPSBkYXRhW2F0dHJdO1xuICAgIFsndGlzc3VlU2l0ZScsJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsJ3Rpc3N1ZVNpdGVEZXRhaWwnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IGBwYXJzZVRpc3N1ZVNpdGVzIGF0dHIgZXJyb3IuICR7ZH0gaXMgbm90IGZvdW5kYDtcbiAgICB9KTtcbiAgICB0aXNzdWVzID0gZm9yRXF0bD09PWZhbHNlP3Rpc3N1ZXM6dGlzc3Vlcy5maWx0ZXIoKGQpPT57cmV0dXJuICFpbnZhbGlkVGlzc3Vlcy5pbmNsdWRlcyhkLnRpc3N1ZVNpdGVEZXRhaWxJZCl9KTsgLy8gYW4gYXJyYXkgb2YgdGlzc3VlU2l0ZURldGFpbElkIG9iamVjdHNcblxuICAgIC8vIGJ1aWxkIHRoZSB0aXNzdWVHcm91cHMgbG9va3VwIGRpY3Rpb25hcnkgaW5kZXhlZCBieSB0aGUgdGlzc3VlIGdyb3VwIG5hbWUgKGkuZS4gdGhlIHRpc3N1ZSBtYWluIHNpdGUgbmFtZSlcbiAgICBsZXQgdGlzc3VlR3JvdXBzID0gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PntcbiAgICAgICAgbGV0IGdyb3VwTmFtZSA9IGQudGlzc3VlU2l0ZTtcbiAgICAgICAgbGV0IHNpdGUgPSB7XG4gICAgICAgICAgICBpZDogZC50aXNzdWVTaXRlRGV0YWlsSWQsXG4gICAgICAgICAgICBuYW1lOiBkLnRpc3N1ZVNpdGVEZXRhaWxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFhcnIuaGFzT3duUHJvcGVydHkoZ3JvdXBOYW1lKSkgYXJyW2dyb3VwTmFtZV0gPSBbXTsgLy8gaW5pdGlhdGUgYW4gYXJyYXlcbiAgICAgICAgYXJyW2dyb3VwTmFtZV0ucHVzaChzaXRlKTtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCB7fSk7XG5cbiAgICAvLyBtb2RpZnkgdGhlIHRpc3N1ZSBncm91cHMgdGhhdCBoYXZlIG9ubHkgYSBzaW5nbGUgc2l0ZVxuICAgIC8vIGJ5IHJlcGxhY2luZyB0aGUgZ3JvdXAncyBuYW1lIHdpdGggdGhlIHNpbmdsZSBzaXRlJ3MgbmFtZSAtLSByZXN1bHRpbmcgYSBiZXR0ZXIgQWxwaGFiZXRpY2FsIG9yZGVyIG9mIHRoZSB0aXNzdWUgZ3JvdXBzXG5cbiAgICBPYmplY3Qua2V5cyh0aXNzdWVHcm91cHMpLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICh0aXNzdWVHcm91cHNbZF0ubGVuZ3RoID09PSAxKXsgLy8gYSBzaW5nbGUtc2l0ZSBncm91cFxuICAgICAgICAgICAgbGV0IHNpdGUgPSB0aXNzdWVHcm91cHNbZF1bMF07IC8vIHRoZSBzaW5nbGUgc2l0ZVxuICAgICAgICAgICAgZGVsZXRlIHRpc3N1ZUdyb3Vwc1tkXTsgLy8gcmVtb3ZlIHRoZSBvbGQgZ3JvdXAgaW4gdGhlIGRpY3Rpb25hcnlcbiAgICAgICAgICAgIHRpc3N1ZUdyb3Vwc1tzaXRlLm5hbWVdID0gW3NpdGVdOyAvLyBjcmVhdGUgYSBuZXcgZ3JvdXAgd2l0aCB0aGUgc2l0ZSdzIG5hbWVcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aXNzdWVHcm91cHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4b25zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSBpc0Z1bGwge0Jvb2xlYW59XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXhvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTW9kZWxFeG9ucyhqc29uLCBpc0Z1bGwpe1xuICAgIGNvbnN0IGF0dHIgPSBpc0Z1bGw/J2Z1bGxDb2xsYXBzZWRHZW5lTW9kZWxFeG9uJzonY29sbGFwc2VkR2VuZU1vZGVsRXhvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpe1xuICAgICAgICBjb25zb2xlLmVycm9yKGpzb24pO1xuICAgICAgICB0aHJvdyAnUGFyc2luZyBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgfVxuICAgIC8vIHNhbml0eSBjaGVja1xuICAgIFsnc3RhcnQnLCAnZW5kJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnUGFyc2luZyBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0ubWFwKChkKT0+e1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBkLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZC5lbmQ7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRoZSBqdW5jdGlvbnNcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YganVuY3Rpb25zXG4gKiAvLyBqdW5jdGlvbiBhbm5vdGF0aW9ucyBhcmUgbm90IHN0b3JlZCBpbiBNb25nb1xuICAgIC8vIHNvIGhlcmUgd2UgdXNlIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlIHRvIHBhcnNlIHRoZSBqdW5jdGlvbiBJRCBmb3IgaXRzIGdlbm9taWMgbG9jYXRpb25cbiAgICAvLyBhc3N1bWluZyB0aGF0IGVhY2ggdGlzc3VlIGhhcyB0aGUgc2FtZSBqdW5jdGlvbnMsXG4gICAgLy8gdG8gZ3JhYiBhbGwgdGhlIGtub3duIGp1bmN0aW9ucyBvZiBhIGdlbmUsIHdlIG9ubHkgbmVlZCB0byBxdWVyeSBvbmUgdGlzc3VlXG4gICAgLy8gaGVyZSB3ZSBhcmJpdHJhcmlseSBwaWNrIExpdmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKdW5jdGlvbnMoanNvbil7XG5cbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkp1bmN0aW9uRXhwcmVzc2lvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiBwYXJzZUp1bmN0aW9ucyBpbnB1dCBlcnJvci4gJyArIGF0dHI7XG5cbiAgICAvLyBjaGVjayByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZXNcbiAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdqdW5jdGlvbklkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgLy8gdXNlIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBqc29uIG9iamVjdHMgYXMgYSB0ZXN0IGNhc2VcbiAgICAgICAgaWYoanNvblthdHRyXS5sZW5ndGggJiYgIWpzb25bYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihqc29uW2F0dHJdWzBdKTtcbiAgICAgICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqdW5jdGlvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ganNvblthdHRyXS5maWx0ZXIoKGQpPT5kLnRpc3N1ZVNpdGVEZXRhaWxJZD09PSdMaXZlcicpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3MgPSBkLmp1bmN0aW9uSWQuc3BsaXQoJ18nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb206IHBvc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbVN0YXJ0OiBwb3NbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21FbmQ6IHBvc1syXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqdW5jdGlvbklkOiBkLmp1bmN0aW9uSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdHJhbnNjcmlwdCBpc29mb3JtcyBmcm9tIHRoZSBHVEV4IHdlYiBzZXJ2aWNlOiAncmVmZXJlbmNlL3RyYW5zY3JpcHQ/cmVsZWFzZT12NyZnZW5jb2RlX2lkPSdcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogcmV0dXJucyBhIGRpY3Rpb25hcnkgb2YgdHJhbnNjcmlwdCBleG9uIG9iamVjdCBsaXN0cyBpbmRleGVkIGJ5IHRyYW5zY3JpcHQgSURzIC0tIEVOU1QgSURzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25zKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAnZXhvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiBleG9uJztcbiAgICByZXR1cm4ganNvblthdHRyXS5yZWR1Y2UoKGEsIGQpPT57XG4gICAgICAgIC8vIGNoZWNrIHJlcXVpcmVkIGF0dHJpYnV0ZXNcbiAgICAgICAgWyd0cmFuc2NyaXB0SWQnLCAnY2hyb21vc29tZScsICdzdGFydCcsICdlbmQnLCAnZXhvbk51bWJlcicsICdleG9uSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsga1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFbZC50cmFuc2NyaXB0SWRdID09PSB1bmRlZmluZWQpIGFbZC50cmFuc2NyaXB0SWRdID0gW107XG4gICAgICAgIGQuY2hyb20gPSBkLmNocm9tb3NvbWU7XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgYVtkLnRyYW5zY3JpcHRJZF0ucHVzaChkKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfSwge30pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gZnJvbSB3ZWIgc2VydmljZSBleG9uXG4gKiByZXR1cm5zIGEgbGlzdCBvZiBhbGwgRXhvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhvbnNUb0xpc3QoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICdleG9uJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IGV4b24nO1xuICAgIHJldHVybiBqc29uW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufSBmcm9tIEdURXggd2ViIHNlcnZpY2UgJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiByZXR1cm5zIGEgbGlzdCBvZiBpc29mb3JtIG9iamVjdHMgc29ydGVkIGJ5IGxlbmd0aCBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRyYW5zY3JpcHRzKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAndHJhbnNjcmlwdCc7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdwYXJzZUlzb2Zvcm1zIGlucHV0IGVycm9yJyk7XG5cbiAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzLCB1c2UgdGhlIGZpcnN0IHRyYW5zY3JpcHQgYXMgdGhlIHRlc3QgY2FzZVxuICAgIFsndHJhbnNjcmlwdElkJywgJ3N0YXJ0JywgJ2VuZCddLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBqc29uW2F0dHJdLnNvcnQoKGEsIGIpPT57XG4gICAgICAgIGNvbnN0IGwxID0gTWF0aC5hYnMoYS5lbmQgLSBhLnN0YXJ0KSArIDE7XG4gICAgICAgIGNvbnN0IGwyID0gTWF0aC5hYnMoYi5lbmQgLSBiLnN0YXJ0KSArIDE7XG4gICAgICAgIHJldHVybiAtKGwxLWwyKTsgLy8gc29ydCBieSBpc29mb3JtIGxlbmd0aCBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgZmluYWwgKG1hc2tlZCkgZ2VuZSBtb2RlbCBleG9uIGV4cHJlc3Npb25cbiAqIGV4cHJlc3Npb24gaXMgbm9ybWFsaXplZCB0byByZWFkcyBwZXIga2JcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBvZiBleG9uIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBleG9ucyB7TGlzdH0gb2YgZXhvbnMgd2l0aCBwb3NpdGlvbnNcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBleG9uIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhvbkV4cHJlc3Npb24oZGF0YSwgZXhvbnMpe1xuICAgIGNvbnN0IGV4b25EaWN0ID0gZXhvbnMucmVkdWNlKChhLCBkKT0+e2FbZC5leG9uSWRdID0gZDsgcmV0dXJuIGE7fSwge30pO1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuRXhvbkV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VFeG9uRXhwcmVzc2lvbiBpbnB1dCBlcnJvcicpO1xuXG4gICAgY29uc3QgZXhvbk9iamVjdHMgPSBkYXRhW2F0dHJdO1xuICAgIC8vIGVycm9yLWNoZWNraW5nXG4gICAgWydtZWRpYW4nLCAnZXhvbklkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZXhvbk9iamVjdHNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VFeG9uRXhwcmVzc2lvbiBhdHRyIG5vdCBmb3VuZDogJyArIGQ7XG4gICAgfSk7XG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4gZXhvbiBjb3VudHNcbiAgICBleG9uT2JqZWN0cy5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIGNvbnN0IGV4b24gPSBleG9uRGljdFtkLmV4b25JZF07IC8vIGZvciByZXRyaWV2aW5nIGV4b24gcG9zaXRpb25zXG4gICAgICAgIC8vIGVycm9yLWNoZWNraW5nXG4gICAgICAgIFsnZW5kJywgJ3N0YXJ0J10uZm9yRWFjaCgocCk9PntcbiAgICAgICAgICAgIGlmICghZXhvbi5oYXNPd25Qcm9wZXJ0eShwKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZUV4b25FeHByZXNzaW9uIHBvc2l0aW9uIGF0dHIgbm90IGZvdW5kOiAnICsgcDtcbiAgICAgICAgfSk7XG4gICAgICAgIGQubCA9IGV4b24uZW5kIC0gZXhvbi5zdGFydCArIDE7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pL2QubDtcbiAgICAgICAgZC5kaXNwbGF5VmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pL2QubDtcbiAgICAgICAgZC54ID0gZC5leG9uSWQ7XG4gICAgICAgIGQueSA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGV4b24uc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBleG9uLmVuZDtcbiAgICAgICAgZC51bml0ID0gJ21lZGlhbiAnICsgZC51bml0ICsgJyBwZXIgYmFzZSc7XG4gICAgICAgIGQudGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICB9KTtcbiAgICByZXR1cm4gZXhvbk9iamVjdHMuc29ydCgoYSxiKT0+e1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PGIuY2hyb21TdGFydCkgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PmIuY2hyb21TdGFydCkgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0pOyAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG59XG5cbi8qKlxuICogUGFyc2UganVuY3Rpb24gbWVkaWFuIHJlYWQgY291bnQgZGF0YVxuICogQHBhcmFtIGRhdGEge0pTT059IG9mIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YganVuY3Rpb24gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5KdW5jdGlvbkV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VKdW5jdGlvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcblxuICAgIGNvbnN0IGp1bmN0aW9ucyA9IGRhdGFbYXR0cl07XG5cbiAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgIGlmIChqdW5jdGlvbnMgPT09IHVuZGVmaW5lZCB8fCBqdW5jdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignTm8ganVuY3Rpb24gZGF0YSBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuXG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4ganVuY3Rpb24gcmVhZCBjb3VudHNcbiAgICBqdW5jdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdqdW5jdGlvbklkJywgJ21lZGlhbicsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2luZ3IgRXJyb3I6IHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGF0dHIgbm90IGZvdW5kOiAnICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgbGV0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnggPSBkLmp1bmN0aW9uSWQ7XG4gICAgICAgIGQueSA9IHRpc3N1ZUlkO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgICAgIGQuZGlzcGxheVZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgfSk7XG5cbiAgICAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgcmV0dXJuIGp1bmN0aW9ucy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmIChhLmp1bmN0aW9uSWQ+Yi5qdW5jdGlvbklkKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5qdW5jdGlvbklkPGIuanVuY3Rpb25JZCkgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5UcmFuc2NyaXB0RXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdQYXJzaW5nIEVycm9yOiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCB0cmFuc2NpcHQgYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQudmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudHJhbnNjcmlwdElkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb24sIGFuZCB0cmFuc3Bvc2UgdGhlIG1hdHJpeFxuICogQHBhcmFtIGRhdGFcbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZShkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xuICAgICAgICB0aHJvdygnUGFyc2luZyBFcnJvcjogcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZSBpbnB1dCBlcnJvci4nKTtcbiAgICB9XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzaW5nIEVycm9yOiBSZXF1aXJlZCB0cmFuc2NyaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtZWRpYW4gPSBkLm1lZGlhbjtcbiAgICAgICAgY29uc3QgdGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLnkgPSBkLnRyYW5zY3JpcHRJZDtcbiAgICAgICAgZC54ID0gdGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC50aXNzdWVJZCA9IHRpc3N1ZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcGFyc2UgbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICogQHBhcmFtIGRhdGEge0pzb259IHdpdGggYXR0ciBtZWRpYW5HZW5lRXhwcmVzc2lvblxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1lZGlhbkV4cHJlc3Npb24oZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5HZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCBhZGp1c3QgPSAxO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICAgIC8vIGVycm9yLWNoZWNraW5nIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGVzOlxuICAgIGlmIChkYXRhW2F0dHJdLmxlbmd0aCA9PT0gMCkgdGhyb3cgJ3BhcnNlTWVkaWFuRXhwcmVzc2lvbiBmaW5kcyBubyBkYXRhLic7XG4gICAgWydtZWRpYW4nLCAndGlzc3VlU2l0ZURldGFpbElkJywgJ2dlbmNvZGVJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkYXRhW2F0dHJdWzBdKTtcbiAgICAgICAgICAgIHRocm93IGBQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5ncDogJHtkfWA7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgcmVzdWx0cyA9IGRhdGFbYXR0cl07XG4gICAgcmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKGQpe1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC54ID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQueSA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLmRpc3BsYXlWYWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHRzO1xufVxuXG4vKipcbiAqIHBhcnNlIHRoZSBleHByZXNzaW9uIGRhdGEgb2YgYSBnZW5lIGZvciBhIGdyb3VwZWQgdmlvbGluIHBsb3RcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZ2VuZSBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gY29sb3JzIHtEaWN0aW9uYXJ5fSB0aGUgdmlvbGluIGNvbG9yIGZvciBnZW5lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbihkYXRhLCB1c2VMb2c9dHJ1ZSwgY29sb3JzPXVuZGVmaW5lZCl7XG4gICAgY29uc3QgYXR0ciA9ICdnZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIFsnZGF0YScsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuZVN5bWJvbCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNpbmcgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZC52YWx1ZXMgPSB1c2VMb2c/ZC5kYXRhLm1hcCgoZGQpPT57cmV0dXJuIE1hdGgubG9nMTAoK2RkKzEpfSk6ZC5kYXRhO1xuICAgICAgICBkLmdyb3VwID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQubGFiZWwgPSBkLmdlbmVTeW1ib2w7XG4gICAgICAgIGQuY29sb3IgPSBjb2xvcnM9PT11bmRlZmluZWQ/JyM5MGMxYzEnOmNvbG9yc1tkLmdlbmNvZGVJZF07XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIExEIChsaW5rYWdlIGRpc2VxdWlsaWJyaXVtIGRhdGEpXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gZnJvbSBHVEV4IGxkIHdlYiBzZXJ2aWNlXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUxEKGRhdGEpIHtcbiAgICBjb25zdCBhdHRyID0gJ2xkJztcbiAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzaW5nIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBsZXQgcGFyc2VkID0gW107XG4gICAgbGV0IHVuaXF1ZSA9IHt9O1xuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBsZXQgbGFiZWxzID0gZFswXS5zcGxpdChcIixcIikuc29ydCgpOyAvLyBzb3J0IHRoZSB2YXJpYW50IElEc1xuICAgICAgICB1bmlxdWVbbGFiZWxzWzBdXSA9IHRydWU7XG4gICAgICAgIHVuaXF1ZVtsYWJlbHNbMV1dID0gdHJ1ZTtcbiAgICAgICAgcGFyc2VkLnB1c2goe1xuICAgICAgICAgICAgeDogbGFiZWxzWzBdLFxuICAgICAgICAgICAgZGlzcGxheVg6IGdlbmVyYXRlU2hvcnRWYXJpYW50SWQobGFiZWxzWzBdKSxcbiAgICAgICAgICAgIHk6IGxhYmVsc1sxXSxcbiAgICAgICAgICAgIGRpc3BsYXlZOiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGxhYmVsc1sxXSksXG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VGbG9hdChkWzFdKSxcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogcGFyc2VGbG9hdChkWzFdKS50b1ByZWNpc2lvbigzKSAvLyB0b1ByZWNpc2lvbigpIHJldHVybnMgYSBzdHJpbmdcbiAgICAgICAgfSlcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyh1bmlxdWUpLmZvckVhY2goKGQpPT57XG4gICAgICAgIHBhcnNlZC5wdXNoKHtcbiAgICAgICAgICAgIHg6IGQsXG4gICAgICAgICAgICBkaXNwbGF5WDogZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChkKSxcbiAgICAgICAgICAgIHk6IGQsXG4gICAgICAgICAgICBkaXNwbGF5WTogZ2VuZXJhdGVTaG9ydFZhcmlhbnRJZChkKSxcbiAgICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICAgICAgZGlzcGxheVZhbHVlOiBcIjFcIlxuICAgICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiBwYXJzZWQ7XG59XG5cbi8qIHBhcnNlIHRoZSBleHByZXNzaW9uIGRhdGEgb2YgYSBnZW5lIGZvciBib3hwbG90XG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gZnJvbSBHVEV4IGdlbmUgZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHBhcmFtIHRpc3N1ZXMge09iamVjdH0gbWFwcGluZyBvZiB0aXNzdWUgaWRzIHRvIGxhYmVscyAodGlzc3VlIG5hbWUpXG4gKiBAcGFyYW0gY29sb3JzIHtPYmplY3R9IG1hcHBpbmcgb2YgdGlzc3VlIGlkcyB0byBib3hwbG90IGNvbG9yc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZW5lRXhwcmVzc2lvbkZvckJveHBsb3QoZGF0YSwgdGlzc3Vlcz11bmRlZmluZWQsIGNvbG9ycz11bmRlZmluZWQpIHtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmVFeHByZXNzaW9uJztcblxuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyhgUGFyc2luZyBlcnJvcjogcmVxdWlyZWQgSlNPTiBhdHRyaWJ1dGUgJHthdHRyfSBtaXNzaW5nLmApO1xuXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBbJ2RhdGEnLCAnZ2VuY29kZUlkJywgJ2dlbmVTeW1ib2wnLCAndGlzc3VlU2l0ZURldGFpbElkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmICghZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgYFBhcnNpbmcgZXJyb3I6IHJlcXVpcmVkIEpTT04gYXR0cmlidXRlICR7a30gaXMgbWlzc2luZyBmcm9tIGEgcmVjb3JkLmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLmxhYmVsID0gdGlzc3Vlcz09PXVuZGVmaW5lZD9kLnRpc3N1ZVNpdGVEZXRhaWxJZDp0aXNzdWVzW2QudGlzc3VlU2l0ZURldGFpbElkXTtcbiAgICAgICAgZC5jb2xvciA9IGNvbG9ycz09PXVuZGVmaW5lZD8nIzQ2ODJiNCc6Y29sb3JzW2QudGlzc3VlU2l0ZURldGFpbElkXTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIGdlbmVyYXRlIHZhcmlhbnQgSUQgc2hvcnRoYW5kXG4gKiBAcGFyYW0gaWRcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVNob3J0VmFyaWFudElkKGlkKXtcbiAgICBsZXQgdGVtcCA9IGlkLnNwbGl0KFwiX1wiKTtcbiAgICBpZih0ZW1wWzJdLmxlbmd0aCA9PT0gMSAmJiB0ZW1wWzNdLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGlkO1xuICAgIGlmKHRlbXBbMl0ubGVuZ3RoID4gdGVtcFszXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFsyXSA9IFwiZGVsXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDMsIDEpOyAvLyBkZWxldGUgdGhlIGFsdFxuICAgIH1cbiAgICBlbHNlIGlmKHRlbXBbM10ubGVuZ3RoID4gdGVtcFsyXS5sZW5ndGgpIHtcbiAgICAgICAgdGVtcFszXSA9IFwiaW5zXCI7XG4gICAgICAgIHRlbXAuc3BsaWNlKDIsIDEpOyAvLyBkZWxldGUgdGhlIHJlZlxuICAgIH1cbiAgICBlbHNlIHsgLy8gdGVtcFszXS5sZW5ndGggPT0gdGVtcFsyXS5sZW5ndGggYW5kIHRlbXBbM10ubGVuZ3RoID4gMVxuICAgICAgICB0ZW1wWzNdID0gXCJzdWJcIjtcbiAgICAgICAgdGVtcC5zcGxpY2UoMiwgMSk7IC8vIGRlbGV0ZSB0aGUgcmVmXG4gICAgfVxuICAgIHJldHVybiB0ZW1wLmpvaW4oXCJfXCIpO1xufVxuIl0sIm5hbWVzIjpbIkVPTCIsIkVPRiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIm1hcCIsIm5hbWUiLCJpIiwiSlNPTiIsInN0cmluZ2lmeSIsImpvaW4iLCJpbmZlckNvbHVtbnMiLCJyb3dzIiwiY29sdW1uU2V0IiwiT2JqZWN0IiwiY3JlYXRlIiwiZm9yRWFjaCIsInJvdyIsImNvbHVtbiIsInB1c2giLCJwYWQiLCJ2YWx1ZSIsIndpZHRoIiwicyIsImxlbmd0aCIsIkFycmF5IiwiZm9ybWF0RGF0ZSIsImRhdGUiLCJob3VycyIsImdldFVUQ0hvdXJzIiwibWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJzZWNvbmRzIiwiZ2V0VVRDU2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImlzTmFOIiwieWVhciIsImZvcm1hdFllYXIiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImRlbGltaXRlciIsInJlRm9ybWF0IiwiUmVnRXhwIiwiREVMSU1JVEVSIiwiY2hhckNvZGVBdCIsInBhcnNlUm93cyIsInRleHQiLCJmIiwidCIsIk4iLCJJIiwibiIsImVvZiIsImVvbCIsInRva2VuIiwiYyIsImoiLCJzbGljZSIsInJlcGxhY2UiLCJwcmVmb3JtYXRCb2R5IiwiZm9ybWF0VmFsdWUiLCJmb3JtYXRSb3ciLCJEYXRlIiwidGVzdCIsInBhcnNlIiwiY29udmVydCIsIm9iamVjdCIsImN1c3RvbUNvbnZlcnRlciIsImZvcm1hdCIsImNvbmNhdCIsImZvcm1hdEJvZHkiLCJmb3JtYXRSb3dzIiwiZHN2IiwiZ2V0SG91cnMiLCJyZXNwb25zZUpzb24iLCJyZXNwb25zZSIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwianNvbiIsImlucHV0IiwiaW5pdCIsImZldGNoIiwidGhlbiIsImEiLCJiIiwiTmFOIiwiY29tcGFyZSIsImJpc2VjdFJpZ2h0IiwiYXNjZW5kaW5nIiwiZCIsIngiLCJsZWZ0IiwibG8iLCJoaSIsIm1pZCIsInJpZ2h0IiwidmFsdWVzIiwidmFsdWVvZiIsIm1pbiIsIm1heCIsInN0YXJ0Iiwic3RvcCIsInN0ZXAiLCJhcmd1bWVudHMiLCJNYXRoIiwiY2VpbCIsInJhbmdlIiwiZTEwIiwic3FydCIsImU1IiwiZTIiLCJjb3VudCIsInJldmVyc2UiLCJ0aWNrcyIsInRpY2tJbmNyZW1lbnQiLCJpc0Zpbml0ZSIsImZsb29yIiwicG93ZXIiLCJsb2ciLCJMTjEwIiwiZXJyb3IiLCJwb3ciLCJwIiwibnVtYmVyIiwiaTAiLCJ2YWx1ZTAiLCJ4aHRtbCIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJwcmVmaXgiLCJpbmRleE9mIiwibmFtZXNwYWNlcyIsImhhc093blByb3BlcnR5Iiwic3BhY2UiLCJsb2NhbCIsImNyZWF0b3JJbmhlcml0IiwiZG9jdW1lbnQiLCJ0aGlzIiwib3duZXJEb2N1bWVudCIsInVyaSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdG9yRml4ZWQiLCJmdWxsbmFtZSIsIm5hbWVzcGFjZSIsIm5vbmUiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJlbXB0eSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVzIiwidXBkYXRlIiwiRW50ZXJOb2RlIiwicGFyZW50IiwiZGF0dW0iLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJiaW5kSW5kZXgiLCJncm91cCIsImVudGVyIiwiZXhpdCIsImRhdGEiLCJub2RlIiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJjYWxsIiwiYXR0clJlbW92ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImF0dHJSZW1vdmVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYXR0ckNvbnN0YW50Iiwic2V0QXR0cmlidXRlIiwiYXR0ckNvbnN0YW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImF0dHJGdW5jdGlvbiIsInYiLCJhcHBseSIsImF0dHJGdW5jdGlvbk5TIiwiZGVmYXVsdFZpZXciLCJzdHlsZVJlbW92ZSIsInN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJzdHlsZUNvbnN0YW50IiwicHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZVZhbHVlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJwcm9wZXJ0eVJlbW92ZSIsInByb3BlcnR5Q29uc3RhbnQiLCJwcm9wZXJ0eUZ1bmN0aW9uIiwiY2xhc3NBcnJheSIsInN0cmluZyIsInRyaW0iLCJzcGxpdCIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsImFkZCIsImNsYXNzZWRSZW1vdmUiLCJyZW1vdmUiLCJjbGFzc2VkVHJ1ZSIsImNsYXNzZWRGYWxzZSIsImNsYXNzZWRGdW5jdGlvbiIsInRleHRSZW1vdmUiLCJ0ZXh0Q29udGVudCIsInRleHRDb25zdGFudCIsInRleHRGdW5jdGlvbiIsImh0bWxSZW1vdmUiLCJpbm5lckhUTUwiLCJodG1sQ29uc3RhbnQiLCJodG1sRnVuY3Rpb24iLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImNvbnN0YW50TnVsbCIsInJlbW92ZUNoaWxkIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lIiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsInNwbGljZSIsImNvbnRhaW5zIiwiZmlsdGVyRXZlbnRzIiwiZXZlbnQiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsImZpbHRlckNvbnRleHRMaXN0ZW5lciIsImxpc3RlbmVyIiwiaW5kZXgiLCJjb250ZXh0TGlzdGVuZXIiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZXZlbnQxIiwiZXZlbnQwIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJ0eXBlIiwib25SZW1vdmUiLCJ0eXBlbmFtZSIsIm9uIiwiX19vbiIsIm8iLCJtIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhcHR1cmUiLCJvbkFkZCIsIndyYXAiLCJhZGRFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsInBhcmFtcyIsIndpbmRvdyIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsImRpc3BhdGNoQ29uc3RhbnQiLCJkaXNwYXRjaEZ1bmN0aW9uIiwicm9vdCIsIlNlbGVjdGlvbiIsImdyb3VwcyIsInBhcmVudHMiLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzZWxlY3Rpb24iLCJpbml0UmFuZ2UiLCJkb21haW4iLCJzZWxlY3QiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJzZWxlY3RBbGwiLCJzZWxlY3RvckFsbCIsImZpbHRlciIsIm1hdGNoIiwibWF0Y2hlciIsInNpemUiLCJlYWNoIiwiYmluZCIsImVudGVyR3JvdXAiLCJ1cGRhdGVHcm91cCIsInByZXZpb3VzIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsInNwYXJzZSIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsImFwcGVuZCIsIm1lcmdlIiwib3JkZXIiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJzb3J0IiwiY29tcGFyZU5vZGUiLCJzb3J0Z3JvdXBzIiwic29ydGdyb3VwIiwiY2FsbGJhY2siLCJub2RlcyIsImF0dHIiLCJnZXRBdHRyaWJ1dGVOUyIsInByb3BlcnR5IiwiY2xhc3NlZCIsImh0bWwiLCJjcmVhdG9yIiwiaW5zZXJ0IiwiYmVmb3JlIiwiZGVlcCIsImRpc3BhdGNoIiwiTWFwIiwic2V0IiwiaXNBcnJheSIsIlNldCIsImhhcyIsImdldCIsImNsZWFyIiwia2V5cyIsImVudHJpZXMiLCJwcm90byIsImFycmF5IiwiaW1wbGljaXQiLCJvcmRpbmFsIiwidW5rbm93biIsInNjYWxlIiwiXyIsImNvcHkiLCJmYWN0b3J5IiwiZXh0ZW5kIiwiZGVmaW5pdGlvbiIsIkNvbG9yIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgiLCJyZVJnYkludGVnZXIiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3JfZm9ybWF0SGV4IiwicmdiIiwiZm9ybWF0SGV4IiwiY29sb3JfZm9ybWF0UmdiIiwiZm9ybWF0UmdiIiwiY29sb3IiLCJsIiwidG9Mb3dlckNhc2UiLCJleGVjIiwicGFyc2VJbnQiLCJyZ2JuIiwiUmdiIiwicmdiYSIsImhzbGEiLCJyIiwiZyIsInJnYkNvbnZlcnQiLCJvcGFjaXR5IiwicmdiX2Zvcm1hdEhleCIsImhleCIsInJnYl9mb3JtYXRSZ2IiLCJyb3VuZCIsInRvU3RyaW5nIiwiaCIsIkhzbCIsImhzbENvbnZlcnQiLCJoc2wycmdiIiwibTIiLCJkZWZpbmUiLCJjaGFubmVscyIsImFzc2lnbiIsImRpc3BsYXlhYmxlIiwiZm9ybWF0SHNsIiwiYnJpZ2h0ZXIiLCJrIiwiZGFya2VyIiwiZGVnMnJhZCIsIlBJIiwicmFkMmRlZyIsInQxIiwidDIiLCJsYWJDb252ZXJ0IiwiTGFiIiwiSGNsIiwiaGNsMmxhYiIsInoiLCJyZ2IybHJnYiIsInkiLCJ4eXoybGFiIiwibGFiMnh5eiIsImxyZ2IycmdiIiwiaGNsQ29udmVydCIsImF0YW4yIiwiY29zIiwic2luIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJFRCIsIkVCIiwiQkNfREEiLCJjdWJlaGVsaXhDb252ZXJ0IiwiQ3ViZWhlbGl4IiwiYmwiLCJnYW1tYSIsIm5vZ2FtbWEiLCJleHBvbmVudGlhbCIsImNvbnN0YW50IiwibGluZWFyIiwiY29zaCIsInNpbmgiLCJyZ2JHYW1tYSIsImVuZCIsImNvbG9yUmdiIiwiZ2VuZXJpY0FycmF5IiwibmIiLCJuYSIsInNldFRpbWUiLCJyZUEiLCJyZUIiLCJzb3VyY2UiLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsInEiLCJvbmUiLCJ6ZXJvIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJEYXRhVmlldyIsInZhbHVlT2YiLCJudW1iZXJBcnJheSIsImNzc05vZGUiLCJjc3NSb290IiwiY3NzVmlldyIsInN2Z05vZGUiLCJkZWdyZWVzIiwiaWRlbnRpdHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZSIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwidHJhbnNmb3JtIiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJtYXRyaXgiLCJ1bml0Iiwibm9ybWFsaXplIiwiY2xhbXBlciIsImJpbWFwIiwiaW50ZXJwb2xhdGUiLCJkMCIsImQxIiwicjAiLCJyMSIsInBvbHltYXAiLCJiaXNlY3QiLCJ0YXJnZXQiLCJjbGFtcCIsInRyYW5zZm9ybWVyIiwidW50cmFuc2Zvcm0iLCJwaWVjZXdpc2UiLCJvdXRwdXQiLCJpbnRlcnBvbGF0ZVZhbHVlIiwicmVzY2FsZSIsImludmVydCIsImludGVycG9sYXRlTnVtYmVyIiwicmFuZ2VSb3VuZCIsImludGVycG9sYXRlUm91bmQiLCJ1IiwiY29udGludW91cyIsInRvRXhwb25lbnRpYWwiLCJjb2VmZmljaWVudCIsImZvcm1hdERlY2ltYWwiLCJhYnMiLCJwcmVmaXhFeHBvbmVudCIsInJlIiwiZm9ybWF0U3BlY2lmaWVyIiwic3BlY2lmaWVyIiwiRm9ybWF0U3BlY2lmaWVyIiwiZmlsbCIsImFsaWduIiwic2lnbiIsInN5bWJvbCIsImNvbW1hIiwicHJlY2lzaW9uIiwidW5kZWZpbmVkIiwiZXhwb25lbnQiLCIlIiwidG9GaXhlZCIsInRvUHJlY2lzaW9uIiwiZm9ybWF0Um91bmRlZCIsIlgiLCJ0b1VwcGVyQ2FzZSIsImxvY2FsZSIsImZvcm1hdFByZWZpeCIsInByZWZpeGVzIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJOdW1iZXIiLCJzdWJzdHJpbmciLCJjdXJyZW5jeVByZWZpeCIsImN1cnJlbmN5IiwiY3VycmVuY3lTdWZmaXgiLCJkZWNpbWFsIiwibnVtZXJhbHMiLCJmb3JtYXROdW1lcmFscyIsIlN0cmluZyIsInBlcmNlbnQiLCJtaW51cyIsIm5hbiIsIm5ld0Zvcm1hdCIsImZvcm1hdFR5cGVzIiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJvdXQiLCJmb3JtYXRUcmltIiwiSW5maW5pdHkiLCJwYWRkaW5nIiwic3RlcDAiLCJzdGVwMSIsInRpY2tTdGVwIiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJwcmVjaXNpb25GaXhlZCIsImxpbmVhcmlzaCIsInRpY2tGb3JtYXQiLCJuaWNlIiwidHJhbnNmb3JtTG9nIiwidHJhbnNmb3JtRXhwIiwiZXhwIiwidHJhbnNmb3JtTG9nbiIsInRyYW5zZm9ybUV4cG4iLCJwb3cxMCIsInJlZmxlY3QiLCJsb2dnaXNoIiwibG9ncyIsInBvd3MiLCJiYXNlIiwibG9nMTAiLCJsb2cyIiwibG9ncCIsInBvd3AiLCJpbnRlcnZhbCIsIngwIiwieDEiLCJmb3JtYXRMb2NhbGUiLCJ0MCIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwib2Zmc2V0IiwiZXZlcnkiLCJtaWxsaXNlY29uZCIsImdldE1pbGxpc2Vjb25kcyIsImdldFNlY29uZHMiLCJnZXRNaW51dGVzIiwiZGF5Iiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0Iiwid2Vla2RheSIsImdldERheSIsInN1bmRheSIsIm1vbmRheSIsInRodXJzZGF5Iiwic2V0TW9udGgiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJzZXRVVENTZWNvbmRzIiwic2V0VVRDTWludXRlcyIsInV0Y0RheSIsInNldFVUQ0hvdXJzIiwic2V0VVRDRGF0ZSIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUaHVyc2RheSIsInV0Y1llYXIiLCJzZXRVVENNb250aCIsInNldFVUQ0Z1bGxZZWFyIiwibG9jYWxEYXRlIiwiSCIsIk0iLCJTIiwiTCIsInV0Y0RhdGUiLCJVVEMiLCJuZXdEYXRlIiwidXRjRm9ybWF0IiwidXRjUGFyc2UiLCJwYWRzIiwiLSIsIjAiLCJudW1iZXJSZSIsInBlcmNlbnRSZSIsInJlcXVvdGVSZSIsInJlcXVvdGUiLCJmb3JtYXRSZSIsImZvcm1hdExvb2t1cCIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInciLCJwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkiLCJwYXJzZVdlZWtOdW1iZXJTdW5kYXkiLCJVIiwicGFyc2VXZWVrTnVtYmVySVNPIiwiViIsInBhcnNlV2Vla051bWJlck1vbmRheSIsIlciLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2VZZWFyIiwicGFyc2Vab25lIiwiWiIsInBhcnNlUXVhcnRlciIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZURheU9mWWVhciIsInBhcnNlSG91cjI0IiwicGFyc2VNaW51dGVzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJRIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJ0aW1lRGF5IiwidGltZVllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJ0aW1lU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsInRpbWVUaHVyc2RheSIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwidGltZU1vbmRheSIsImZvcm1hdEZ1bGxZZWFyIiwiZm9ybWF0Wm9uZSIsImZvcm1hdFVUQ0RheU9mTW9udGgiLCJmb3JtYXRVVENIb3VyMjQiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImZvcm1hdFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImRvdyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVySVNPIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENZZWFyIiwiZm9ybWF0VVRDRnVsbFllYXIiLCJmb3JtYXRVVENab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJmb3JtYXRVbml4VGltZXN0YW1wIiwiZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMiLCJsb2NhbGVfZGF0ZVRpbWUiLCJkYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJ0aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwiZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwic2hvcnREYXlzIiwibG9jYWxlX21vbnRocyIsIm1vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInNob3J0TW9udGhzIiwicGVyaW9kUmUiLCJwZXJpb2RMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsIlkiLCJ1dGNGb3JtYXRzIiwicGFyc2VzIiwicGFyc2VTcGVjaWZpZXIiLCJjaGFyQXQiLCJuZXdQYXJzZSIsIndlZWsiLCJ0b0lTT1N0cmluZyIsImNlbnRlciIsImJhbmR3aWR0aCIsImVudGVyaW5nIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsImNvbnRleHQiLCJzcGFjaW5nIiwicmFuZ2UwIiwicmFuZ2UxIiwicG9zaXRpb24iLCJwYXRoIiwidGljayIsInRpY2tFeGl0IiwidGlja0VudGVyIiwibGluZSIsInRyYW5zaXRpb24iLCJ0aWNrU2l6ZSIsIm5vb3AiLCJEaXNwYXRjaCIsInR5cGVzIiwiVCIsInRoYXQiLCJhcmdzIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsImZyYW1lIiwidGltZW91dCIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJwZXJmb3JtYW5jZSIsIm5vdyIsInNldEZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsImNsZWFyTm93IiwiVGltZXIiLCJfY2FsbCIsIl90aW1lIiwidGltZXIiLCJkZWxheSIsInJlc3RhcnQiLCJ3YWtlIiwidGltZXJGbHVzaCIsInNsZWVwIiwibmFwIiwicG9rZSIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImVsYXBzZWQiLCJUeXBlRXJyb3IiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsImlkIiwidGltaW5nIiwic2NoZWR1bGVzIiwiX190cmFuc2l0aW9uIiwic2VsZiIsInR3ZWVuIiwic3RhdGUiLCJkdXJhdGlvbiIsImVhc2UiLCJzY2hlZHVsZSIsInR3ZWVuUmVtb3ZlIiwidHdlZW4wIiwidHdlZW4xIiwidHdlZW5GdW5jdGlvbiIsInR3ZWVuVmFsdWUiLCJfaWQiLCJpbnRlcnBvbGF0ZVJnYiIsImludGVycG9sYXRlU3RyaW5nIiwidmFsdWUxIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0ckludGVycG9sYXRlIiwiYXR0ckludGVycG9sYXRlTlMiLCJhdHRyVHdlZW5OUyIsIl92YWx1ZSIsImF0dHJUd2VlbiIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJlYXNlQ29uc3RhbnQiLCJvbkZ1bmN0aW9uIiwib24wIiwib24xIiwic2l0Iiwic3R5bGVJbnRlcnBvbGF0ZSIsInN0eWxlVHdlZW4iLCJ0ZXh0SW50ZXJwb2xhdGUiLCJ0ZXh0VHdlZW4iLCJUcmFuc2l0aW9uIiwiX25hbWUiLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJjaGlsZHJlbiIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJzdHlsZU51bGwiLCJsaXN0ZW5lcjAiLCJzdHlsZU1heWJlUmVtb3ZlIiwicmVtb3ZlRnVuY3Rpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNhbmNlbCIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJhY3RpdmUiLCJUb29sdGlwIiwidmVyYm9zZSIsIm9mZnNldFgiLCJvZmZzZXRZIiwic2hvdyIsImluZm8iLCJjb25zb2xlIiwiZWRpdCIsIm1vdmUiLCJoaWRlIiwicGFnZVgiLCJwYWdlWSIsIkJveHBsb3QiLCJib3hwbG90RGF0YSIsInVzZUxvZyIsImxvZ0Jhc2UiLCJ0b29sdGlwSWQiLCJsYWJlbCIsImFsbFZhbHMiLCJxMSIsInF1YW50aWxlIiwibWVkaWFuIiwibnVtYmVycyIsInEzIiwiaXFyIiwidXBwZXJCb3VuZCIsImxvd2VyQm91bmQiLCJvdXRsaWVycyIsInRvb2x0aXAiLCJjcmVhdGVUb29sdGlwIiwicmVuZGVyIiwicm9vdElkIiwicGxvdE9wdGlvbnMiLCJoZWlnaHQiLCJtYXJnaW5zIiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwieEF4aXNGb250U2l6ZSIsInhBeGlzTGFiZWwiLCJ4QXhpc0xhYmVsRm9udFNpemUiLCJ5QXhpc0ZvbnRTaXplIiwieUF4aXNMYWJlbCIsInlBeGlzVW5pdCIsInlBeGlzTGFiZWxGb250U2l6ZSIsImFkanVzdCIsIl9nZXRMb2dBZGp1c3RtZW50IiwiZG9tIiwiX2NyZWF0ZVN2ZyIsInNjYWxlcyIsIl9zZXRTY2FsZXMiLCJ4QXhpcyIsInlBeGlzIiwiYXhpc0xlZnQiLCJzZWxlY3RlZERvbSIsImJveHBsb3RNb3VzZW92ZXIiLCJib3hwbG90TW91c2VvdXQiLCJ3aGlza2VycyIsInZhbCIsInRvb2x0aXBEb21JZCIsImpRdWVyeSIsImFwcGVuZFRvIiwic2VsZWN0ZWQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJ5U2NhbGUiLCJ4U2NhbGUiLCJiYW5kIiwib3JkaW5hbFJhbmdlIiwicGFkZGluZ0lubmVyIiwicGFkZGluZ091dGVyIiwic2VxdWVuY2UiLCJzY2FsZUJhbmQiLCJzY2FsZUxvZyIsImV4dGVudCIsInNjYWxlTGluZWFyIiwibGF1bmNoIiwiZ2VuY29kZUlkIiwidXJscyIsImhvc3QiLCJzaW5nbGVUaXNzdWVFcXRsIiwibGQiLCJkeW5lcXRsIiwic25wIiwidmFyaWFudElkIiwiZXhvbkV4cCIsInRyYW5zY3JpcHRFeHAiLCJqdW5jdGlvbkV4cCIsInRyYW5zY3JpcHQiLCJleG9uIiwiZ2VuZU1vZGVsIiwiZ2VuZU1vZGVsVW5maWx0ZXJlZCIsImdlbmVFeHAiLCJtZWRHZW5lRXhwIiwiZ2VuZUV4cEJveHBsb3QiLCJ0b3BJblRpc3N1ZUZpbHRlcmVkIiwidG9wSW5UaXNzdWUiLCJnZW5lSWQiLCJ0aXNzdWUiLCJzYW1wbGUiLCJybmFzZXFDcmFtIiwid2dzQ3JhbSIsImZjQmlsbGluZyIsImZjV29ya1NwYWNlIiwiZmNQb3J0YWxXb3JrU3BhY2UiLCJnZXRHdGV4VXJscyIsInByb21pc2VzIiwiY3JlZGVudGlhbHMiLCJhbGwiLCJ0aXNzdWVzIiwicGFyc2VUaXNzdWVzIiwidGlzc3VlSWROYW1lTWFwIiwidGlzc3VlSWRDb2xvck1hcCIsInRpc3N1ZVNpdGVEZXRhaWxJZCIsInRpc3N1ZVNpdGVEZXRhaWwiLCJjb2xvckhleCIsImNvbG9ycyIsInBhcnNlR2VuZUV4cHJlc3Npb25Gb3JCb3hwbG90IiwiaWRzIiwiR2VuZUV4cHJlc3Npb25Cb3hwbG90Il0sIm1hcHBpbmdzIjoidVRBQUEsSUFBSUEsRUFBTSxHQUNOQyxFQUFNLEdBS1YsU0FBU0MsRUFBZ0JDLEdBQ3ZCLE9BQU8sSUFBSUMsU0FBUyxJQUFLLFdBQWFELEVBQVFFLEtBQUksU0FBU0MsRUFBTUMsR0FDL0QsT0FBT0MsS0FBS0MsVUFBVUgsR0FBUSxPQUFTQyxFQUFJLGFBQzFDRyxLQUFLLEtBQU8sS0FXakIsU0FBU0MsRUFBYUMsR0FDcEIsSUFBSUMsRUFBWUMsT0FBT0MsT0FBTyxNQUMxQlosRUFBVSxHQVVkLE9BUkFTLEVBQUtJLFNBQVEsU0FBU0MsR0FDcEIsSUFBSyxJQUFJQyxLQUFVRCxFQUNYQyxLQUFVTCxHQUNkVixFQUFRZ0IsS0FBS04sRUFBVUssR0FBVUEsTUFLaENmLEVBR1QsU0FBU2lCLEVBQUlDLEVBQU9DLEdBQ2xCLElBQUlDLEVBQUlGLEVBQVEsR0FBSUcsRUFBU0QsRUFBRUMsT0FDL0IsT0FBT0EsRUFBU0YsRUFBUSxJQUFJRyxNQUFNSCxFQUFRRSxFQUFTLEdBQUdkLEtBQUssR0FBS2EsRUFBSUEsRUFTdEUsU0FBU0csRUFBV0MsR0FDbEIsSUFBSUMsRUFBUUQsRUFBS0UsY0FDYkMsRUFBVUgsRUFBS0ksZ0JBQ2ZDLEVBQVVMLEVBQUtNLGdCQUNmQyxFQUFlUCxFQUFLUSxxQkFDeEIsT0FBT0MsTUFBTVQsR0FBUSxlQVh2QixTQUFvQlUsR0FDbEIsT0FBT0EsRUFBTyxFQUFJLElBQU1qQixHQUFLaUIsRUFBTSxHQUMvQkEsRUFBTyxLQUFPLElBQU1qQixFQUFJaUIsRUFBTSxHQUM5QmpCLEVBQUlpQixFQUFNLEdBU1JDLENBQVdYLEVBQUtZLGtCQUF1QixJQUFNbkIsRUFBSU8sRUFBS2EsY0FBZ0IsRUFBRyxHQUFLLElBQU1wQixFQUFJTyxFQUFLYyxhQUFjLElBQzFHUCxFQUFlLElBQU1kLEVBQUlRLEVBQU8sR0FBSyxJQUFNUixFQUFJ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
