!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("jquery"),require("file-saver")):"function"==typeof define&&define.amd?define(["exports","jquery","file-saver"],n):n((t=t||self).EqtlDashboard={},t.$,t.saveAs)}(this,function(t,n,e){"use strict";n=n&&n.hasOwnProperty("default")?n.default:n,e=e&&e.hasOwnProperty("default")?e.default:e;var r={},i={},o=34,a=10,s=13;function u(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function l(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function c(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function h(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+c(-n,6):n>9999?"+"+c(n,6):c(n,4))+"-"+c(t.getUTCMonth()+1,2)+"-"+c(t.getUTCDate(),2)+(o?"T"+c(e,2)+":"+c(r,2)+":"+c(i,2)+"."+c(o,3)+"Z":i?"T"+c(e,2)+":"+c(r,2)+":"+c(i,2)+"Z":r||e?"T"+c(e,2)+":"+c(r,2)+"Z":"")}function f(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function c(t,n){var u,l=[],c=t.length,h=0,f=0,p=c<=0,d=!1;function g(){if(p)return i;if(d)return d=!1,r;var n,u,l=h;if(t.charCodeAt(l)===o){for(;h++<c&&t.charCodeAt(h)!==o||t.charCodeAt(++h)===o;);return(n=h)>=c?p=!0:(u=t.charCodeAt(h++))===a?d=!0:u===s&&(d=!0,t.charCodeAt(h)===a&&++h),t.slice(l+1,n-1).replace(/""/g,'"')}for(;h<c;){if((u=t.charCodeAt(n=h++))===a)d=!0;else if(u===s)d=!0,t.charCodeAt(h)===a&&++h;else if(u!==e)continue;return t.slice(l,n)}return p=!0,t.slice(l,c)}for(t.charCodeAt(c-1)===a&&--c,t.charCodeAt(c-1)===s&&--c;(u=g())!==i;){for(var v=[];u!==r&&u!==i;)v.push(u),u=g();n&&null==(v=n(v,f++))||l.push(v)}return l}function f(n,e){return n.map(function(n){return e.map(function(t){return d(n[t])}).join(t)})}function p(n){return n.map(d).join(t)}function d(t){return null==t?"":t instanceof Date?h(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,i=c(t,function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=u(t);return function(r,i){return n(e(r),i,t)}}(t,n):u(t)});return i.columns=r||[],i},parseRows:c,format:function(n,e){return null==e&&(e=l(n)),[e.map(d).join(t)].concat(f(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=l(t)),f(t,n).join("\n")},formatRows:function(t){return t.map(p).join("\n")}}}f(","),f("\t");function p(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function d(t,n){return fetch(t,n).then(p)}var g="http://www.w3.org/1999/xhtml",v={svg:"http://www.w3.org/2000/svg",xhtml:g,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function y(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),v.hasOwnProperty(n)?{space:v[n],local:t}:t}function m(t){var n=y(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===g&&n.documentElement.namespaceURI===g?n.createElement(t):n.createElementNS(e,t)}})(n)}function _(){}function x(t){return null==t?_:function(){return this.querySelector(t)}}function w(){return[]}function b(t){return null==t?w:function(){return this.querySelectorAll(t)}}function M(t){return function(){return this.matches(t)}}function T(t){return new Array(t.length)}function k(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}k.prototype={constructor:k,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var A="$";function C(t,n,e,r,i,o){for(var a,s=0,u=n.length,l=o.length;s<l;++s)(a=n[s])?(a.__data__=o[s],r[s]=a):e[s]=new k(t,o[s]);for(;s<u;++s)(a=n[s])&&(i[s]=a)}function E(t,n,e,r,i,o,a){var s,u,l,c={},h=n.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=n[s])&&(p[s]=l=A+a.call(u,u.__data__,s,n),l in c?i[s]=u:c[l]=u);for(s=0;s<f;++s)(u=c[l=A+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):e[s]=new k(t,o[s]);for(s=0;s<h;++s)(u=n[s])&&c[p[s]]===u&&(i[s]=u)}function S(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function N(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function D(t,n){return t.style.getPropertyValue(n)||N(t).getComputedStyle(t,null).getPropertyValue(n)}function I(t){return t.trim().split(/^|\s+/)}function U(t){return t.classList||new z(t)}function z(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function P(t,n){for(var e=U(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function F(t,n){for(var e=U(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Y(){this.textContent=""}function j(){this.innerHTML=""}function q(){this.nextSibling&&this.parentNode.appendChild(this)}function O(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function V(){return null}function H(){var t=this.parentNode;t&&t.removeChild(this)}function L(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function R(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}z.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var X={},B=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(X={mouseenter:"mouseover",mouseleave:"mouseout"}));function G(t,n,e){return t=Z(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Z(t,n,e){return function(r){var i=B;B=r;try{t.call(this,this.__data__,n,e)}finally{B=i}}}function W(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Q(t,n,e){var r=X.hasOwnProperty(t.type)?G:Z;return function(i,o,a){var s,u=this.__on,l=r(n,o,a);if(u)for(var c=0,h=u.length;c<h;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=e),void(s.value=n);this.addEventListener(t.type,l,e),s={type:t.type,name:t.name,value:n,listener:l,capture:e},u?u.push(s):this.__on=[s]}}function J(t,n,e){var r=N(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var K=[null];function tt(t,n){this._groups=t,this._parents=n}function nt(){return new tt([[document.documentElement]],K)}function et(t){return"string"==typeof t?new tt([[document.querySelector(t)]],[document.documentElement]):new tt([[t]],K)}function rt(){for(var t,n=B;t=n.sourceEvent;)n=t;return n}function it(t){var n=rt();return n.changedTouches&&(n=n.changedTouches[0]),function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}(t,n)}function ot(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}tt.prototype=nt.prototype={constructor:tt,select:function(t){"function"!=typeof t&&(t=x(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,s=n[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new tt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=b(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,s=n[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new tt(r,i)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new tt(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each(function(t){d[++c]=t}),d;var e,r=n?E:C,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,s=new Array(a),u=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],p=f.length,d=t.call(h,h&&h.__data__,c,i),g=d.length,v=u[c]=new Array(g),y=s[c]=new Array(g);r(h,f,v,y,l[c]=new Array(p),d,n);for(var m,_,x=0,w=0;x<g;++x)if(m=v[x]){for(x>=w&&(w=x+1);!(_=y[w])&&++w<g;);m._next=_||null}}return(s=new tt(s,i))._enter=u,s._exit=l,s},enter:function(){return new tt(this._enter||this._groups.map(T),this._parents)},exit:function(){return new tt(this._exit||this._groups.map(T),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new tt(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=S);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,s=e[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(n)}return new tt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=y(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):D(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=I(t+"");if(arguments.length<2){for(var r=U(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?P:F)(this,t)}}:n?function(t){return function(){P(this,t)}}:function(t){return function(){F(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Y:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?j:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(q)},lower:function(){return this.each(O)},append:function(t){var n="function"==typeof t?t:m(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:m(t),r=null==n?V:"function"==typeof n?n:x(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(H)},clone:function(t){return this.select(t?R:L)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=o.length;if(!(arguments.length<2)){for(s=n?Q:W,null==e&&(e=!1),r=0;r<a;++r)this.each(s(o[r],n,e));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return J(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return J(this,t,n)}})(t,n))}};var at,st,ut=(1===(at=ot).length&&(st=at,at=function(t,n){return ot(st(t),n)}),{left:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;at(t[i],n)<0?e=i+1:r=i}return e},right:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;at(t[i],n)>0?r=i:e=i+1}return e}}).right;function lt(t){return null===t?NaN:+t}function ct(t,n){var e=function(t,n){var e,r,i=t.length,o=0,a=-1,s=0,u=0;if(null==n)for(;++a<i;)isNaN(e=lt(t[a]))||(u+=(r=e-s)*(e-(s+=r/++o)));else for(;++a<i;)isNaN(e=lt(n(t[a],a,t)))||(u+=(r=e-s)*(e-(s+=r/++o)));if(o>1)return u/(o-1)}(t,n);return e?Math.sqrt(e):e}function ht(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}function ft(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var pt=Math.sqrt(50),dt=Math.sqrt(10),gt=Math.sqrt(2);function vt(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=pt?10:o>=dt?5:o>=gt?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=pt?10:o>=dt?5:o>=gt?2:1)}function yt(t,n,e){if(null==e&&(e=lt),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}function mt(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function _t(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=lt(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=lt(n(t[o],o,t)))?--i:a+=e;if(i)return a/i}function xt(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=lt(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=lt(n(t[i],i,t)))||o.push(e);return yt(o.sort(ot),.5)}function wt(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}function bt(){}function Mt(t,n){var e=new bt;if(t instanceof bt)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function Tt(){var t,n,e,r=[],i=[];function o(e,i,a,s){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var u,l,c,h=-1,f=e.length,p=r[i++],d=Mt(),g=a();++h<f;)(c=d.get(u=p(l=e[h])+""))?c.push(l):d.set(u,[l]);return d.each(function(t,n){s(g,n,o(t,i,a,s))}),g}return e={object:function(t){return o(t,0,kt,At)},map:function(t){return o(t,0,Ct,Et)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,s=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each(function(n,e){a.push({key:e,values:t(n,o)})})),null!=s?a.sort(function(t,n){return s(t.key,n.key)}):a}(o(t,0,Ct,Et),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function kt(){return{}}function At(t,n,e){t[n]=e}function Ct(){return Mt()}function Et(t,n,e){t.set(n,e)}function St(){}bt.prototype=Mt.prototype={constructor:bt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var $t=Mt.prototype;function Nt(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}St.prototype=function(t,n){var e=new St;if(t instanceof St)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}.prototype={constructor:St,has:$t.has,add:function(t){return this["$"+(t+="")]=t,this},remove:$t.remove,clear:$t.clear,values:$t.keys,size:$t.size,empty:$t.empty,each:$t.each};var Dt=Array.prototype,It=Dt.map,Ut=Dt.slice,zt={name:"implicit"};function Pt(){var t,n,e=function t(){var n=Mt(),e=[],r=[],i=zt;function o(t){var o=t+"",a=n.get(o);if(!a){if(i!==zt)return i;n.set(o,a=e.push(t))}return r[(a-1)%r.length]}return o.domain=function(t){if(!arguments.length)return e.slice();e=[],n=Mt();for(var r,i,a=-1,s=t.length;++a<s;)n.has(i=(r=t[a])+"")||n.set(i,e.push(r));return o},o.range=function(t){return arguments.length?(r=Ut.call(t),o):r.slice()},o.unknown=function(t){return arguments.length?(i=t,o):i},o.copy=function(){return t(e,r).unknown(i)},Nt.apply(o,arguments),o}().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,s=0,u=0,l=.5;function c(){var e=r().length,c=o[1]<o[0],h=o[c-0],f=o[1-c];t=(f-h)/Math.max(1,e-s+2*u),a&&(t=Math.floor(t)),h+=(f-h-t*(e-s))*l,n=t*(1-s),a&&(h=Math.round(h),n=Math.round(n));var p=ft(e).map(function(n){return h+t*n});return i(c?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),c()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,c()):a},e.padding=function(t){return arguments.length?(s=Math.min(1,u=+t),c()):s},e.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),c()):s},e.paddingOuter=function(t){return arguments.length?(u=+t,c()):u},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},e.copy=function(){return Pt(r(),o).round(a).paddingInner(s).paddingOuter(u).align(l)},Nt.apply(c(),arguments)}function Ft(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Yt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function jt(){}var qt="\\s*([+-]?\\d+)\\s*",Ot="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Vt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ht=/^#([0-9a-f]{3})$/,Lt=/^#([0-9a-f]{6})$/,Rt=new RegExp("^rgb\\("+[qt,qt,qt]+"\\)$"),Xt=new RegExp("^rgb\\("+[Vt,Vt,Vt]+"\\)$"),Bt=new RegExp("^rgba\\("+[qt,qt,qt,Ot]+"\\)$"),Gt=new RegExp("^rgba\\("+[Vt,Vt,Vt,Ot]+"\\)$"),Zt=new RegExp("^hsl\\("+[Ot,Vt,Vt]+"\\)$"),Wt=new RegExp("^hsla\\("+[Ot,Vt,Vt,Ot]+"\\)$"),Qt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Jt(t){var n;return t=(t+"").trim().toLowerCase(),(n=Ht.exec(t))?new rn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=Lt.exec(t))?Kt(parseInt(n[1],16)):(n=Rt.exec(t))?new rn(n[1],n[2],n[3],1):(n=Xt.exec(t))?new rn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Bt.exec(t))?tn(n[1],n[2],n[3],n[4]):(n=Gt.exec(t))?tn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Zt.exec(t))?an(n[1],n[2]/100,n[3]/100,1):(n=Wt.exec(t))?an(n[1],n[2]/100,n[3]/100,n[4]):Qt.hasOwnProperty(t)?Kt(Qt[t]):"transparent"===t?new rn(NaN,NaN,NaN,0):null}function Kt(t){return new rn(t>>16&255,t>>8&255,255&t,1)}function tn(t,n,e,r){return r<=0&&(t=n=e=NaN),new rn(t,n,e,r)}function nn(t){return t instanceof jt||(t=Jt(t)),t?new rn((t=t.rgb()).r,t.g,t.b,t.opacity):new rn}function en(t,n,e,r){return 1===arguments.length?nn(t):new rn(t,n,e,null==r?1:r)}function rn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function on(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function an(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new sn(t,n,e,r)}function sn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function un(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Ft(jt,Jt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Ft(rn,en,Yt(jt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+on(this.r)+on(this.g)+on(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Ft(sn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof sn)return new sn(t.h,t.s,t.l,t.opacity);if(t instanceof jt||(t=Jt(t)),!t)return new sn;if(t instanceof sn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=n===o?(e-r)/s+6*(e<r):e===o?(r-n)/s+2:(n-e)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new sn(a,s,u,t.opacity)}(t):new sn(t,n,e,null==r?1:r)},Yt(jt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new sn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new sn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new rn(un(t>=240?t-240:t+120,i,r),un(t,i,r),un(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var ln=Math.PI/180,cn=180/Math.PI,hn=.96422,fn=1,pn=.82521,dn=4/29,gn=6/29,vn=3*gn*gn,yn=gn*gn*gn;function mn(t){if(t instanceof _n)return new _n(t.l,t.a,t.b,t.opacity);if(t instanceof Tn){if(isNaN(t.h))return new _n(t.l,0,0,t.opacity);var n=t.h*ln;return new _n(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof rn||(t=nn(t));var e,r,i=Mn(t.r),o=Mn(t.g),a=Mn(t.b),s=xn((.2225045*i+.7168786*o+.0606169*a)/fn);return i===o&&o===a?e=r=s:(e=xn((.4360747*i+.3850649*o+.1430804*a)/hn),r=xn((.0139322*i+.0971045*o+.7141733*a)/pn)),new _n(116*s-16,500*(e-s),200*(s-r),t.opacity)}function _n(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function xn(t){return t>yn?Math.pow(t,1/3):t/vn+dn}function wn(t){return t>gn?t*t*t:vn*(t-dn)}function bn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Mn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Tn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}Ft(_n,function(t,n,e,r){return 1===arguments.length?mn(t):new _n(t,n,e,null==r?1:r)},Yt(jt,{brighter:function(t){return new _n(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new _n(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new rn(bn(3.1338561*(n=hn*wn(n))-1.6168667*(t=fn*wn(t))-.4906146*(e=pn*wn(e))),bn(-.9787684*n+1.9161415*t+.033454*e),bn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Ft(Tn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Tn)return new Tn(t.h,t.c,t.l,t.opacity);if(t instanceof _n||(t=mn(t)),0===t.a&&0===t.b)return new Tn(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*cn;return new Tn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new Tn(t,n,e,null==r?1:r)},Yt(jt,{brighter:function(t){return new Tn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Tn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return mn(this).rgb()}}));var kn=-.14861,An=1.78277,Cn=-.29227,En=-.90649,Sn=1.97294,$n=Sn*En,Nn=Sn*An,Dn=An*Cn-En*kn;function In(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Un(t){return function(){return t}}function zn(t){return 1==(t=+t)?Pn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Un(isNaN(n)?e:n)}}function Pn(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):Un(isNaN(t)?n:t)}Ft(In,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof In)return new In(t.h,t.s,t.l,t.opacity);t instanceof rn||(t=nn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Dn*r+$n*n-Nn*e)/(Dn+$n-Nn),o=r-i,a=(Sn*(e-i)-Cn*o)/En,s=Math.sqrt(a*a+o*o)/(Sn*i*(1-i)),u=s?Math.atan2(a,o)*cn-120:NaN;return new In(u<0?u+360:u,s,i,t.opacity)}(t):new In(t,n,e,null==r?1:r)},Yt(jt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new In(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new In(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ln,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new rn(255*(n+e*(kn*r+An*i)),255*(n+e*(Cn*r+En*i)),255*(n+e*(Sn*r)),this.opacity)}}));var Fn=function t(n){var e=zn(n);function r(t,n){var r=e((t=en(t)).r,(n=en(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=Pn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Yn(t,n){return n-=t=+t,function(e){return t+n*e}}var jn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,qn=new RegExp(jn.source,"g");function On(t,n){var e,r,i,o=jn.lastIndex=qn.lastIndex=0,a=-1,s=[],u=[];for(t+="",n+="";(e=jn.exec(t))&&(r=qn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(e=e[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:Yn(e,r)})),o=qn.lastIndex;return o<n.length&&(i=n.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)s[(e=u[r]).i]=e.x(t);return s.join("")})}function Vn(t,n){var e,r=typeof n;return null==n||"boolean"===r?Un(n):("number"===r?Yn:"string"===r?(e=Jt(n))?(n=e,Fn):On:n instanceof Jt?Fn:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Vn(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Vn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:Yn)(t,n)}function Hn(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}}var Ln,Rn,Xn,Bn,Gn=180/Math.PI,Zn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Wn(t,n,e,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(s=Math.sqrt(e*e+r*r))&&(e/=s,r/=s,u/=s),t*r<n*e&&(t=-t,n=-n,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Gn,skewX:Math.atan(u)*Gn,scaleX:a,scaleY:s}}function Qn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,n,null,e);s.push({i:u-4,x:Yn(t,i)},{i:u-2,x:Yn(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Yn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,s,u),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Yn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,s,u),function(t,n,e,r,o,a){if(t!==e||n!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:Yn(t,e)},{i:s-2,x:Yn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var n,e=-1,r=u.length;++e<r;)s[(n=u[e]).i]=n.x(t);return s.join("")}}}var Jn=Qn(function(t){return"none"===t?Zn:(Ln||(Ln=document.createElement("DIV"),Rn=document.documentElement,Xn=document.defaultView),Ln.style.transform=t,t=Xn.getComputedStyle(Rn.appendChild(Ln),null).getPropertyValue("transform"),Rn.removeChild(Ln),Wn(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Kn=Qn(function(t){return null==t?Zn:(Bn||(Bn=document.createElementNS("http://www.w3.org/2000/svg","g")),Bn.setAttribute("transform",t),(t=Bn.transform.baseVal.consolidate())?Wn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Zn)},", ",")",")");Math.SQRT2;function te(t){return+t}var ne=[0,1];function ee(t){return t}function re(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function ie(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function oe(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=re(i,r),o=e(a,o)):(r=re(r,i),o=e(o,a)),function(t){return o(r(t))}}function ae(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=re(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=ut(t,n,1,r)-1;return o[e](i[e](n))}}function se(t,n){return function(){var t,n,e,r,i,o,a=ne,s=ne,u=Vn,l=ee;function c(){return r=Math.min(a.length,s.length)>2?ae:oe,i=o=null,h}function h(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),s,u)))(t(l(n)))}return h.invert=function(e){return l(n((o||(o=r(s,a.map(t),Yn)))(e)))},h.domain=function(t){return arguments.length?(a=It.call(t,te),l===ee||(l=ie(a)),c()):a.slice()},h.range=function(t){return arguments.length?(s=Ut.call(t),c()):s.slice()},h.rangeRound=function(t){return s=Ut.call(t),u=Hn,c()},h.clamp=function(t){return arguments.length?(l=t?ie(a):ee,h):l!==ee},h.interpolate=function(t){return arguments.length?(u=t,c()):u},h.unknown=function(t){return arguments.length?(e=t,h):e},function(e,r){return t=e,n=r,c()}}()(t,n)}function ue(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function le(t){return(t=ue(Math.abs(t)))?t[1]:NaN}var ce,he=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function fe(t){return new pe(t)}function pe(t){if(!(n=he.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}function de(t,n){var e=ue(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}fe.prototype=pe.prototype,pe.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ge={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return de(100*t,n)},r:de,s:function(t,n){var e=ue(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ce=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ue(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function ve(t){return t}var ye,me,_e,xe=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function we(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,s=n[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=n[a=(a+1)%n.length];return o.reverse().join(e)}):ve,i=t.currency,o=t.decimal,a=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):ve,s=t.percent||"%";function u(t){var n=(t=fe(t)).fill,e=t.align,u=t.sign,l=t.symbol,c=t.zero,h=t.width,f=t.comma,p=t.precision,d=t.trim,g=t.type;"n"===g?(f=!0,g="g"):ge[g]||(null==p&&(p=12),d=!0,g="g"),(c||"0"===n&&"="===e)&&(c=!0,n="0",e="=");var v="$"===l?i[0]:"#"===l&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",y="$"===l?i[1]:/[%p]/.test(g)?s:"",m=ge[g],_=/[defgprs%]/.test(g);function x(t){var i,s,l,x=v,w=y;if("c"===g)w=m(t)+w,t="";else{var b=(t=+t)<0;if(t=m(Math.abs(t),p),d&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),b&&0==+t&&(b=!1),x=(b?"("===u?u:"-":"-"===u||"("===u?"":u)+x,w=("s"===g?xe[8+ce/3]:"")+w+(b&&"("===u?")":""),_)for(i=-1,s=t.length;++i<s;)if(48>(l=t.charCodeAt(i))||l>57){w=(46===l?o+t.slice(i+1):t.slice(i))+w,t=t.slice(0,i);break}}f&&!c&&(t=r(t,1/0));var M=x.length+t.length+w.length,T=M<h?new Array(h-M+1).join(n):"";switch(f&&c&&(t=r(T+t,T.length?h-w.length:1/0),T=""),e){case"<":t=x+t+w+T;break;case"=":t=x+T+t+w;break;case"^":t=T.slice(0,M=T.length>>1)+x+t+w+T.slice(M);break;default:t=T+x+t+w}return a(t)}return p=null==p?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),x.toString=function(){return t+""},x}return{format:u,formatPrefix:function(t,n){var e=u(((t=fe(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(le(n)/3))),i=Math.pow(10,-r),o=xe[8+r/3];return function(t){return e(i*t)+o}}}}function be(t,n,e,r){var i,o=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=pt?i*=10:o>=dt?i*=5:o>=gt&&(i*=2),n<t?-i:i}(t,n,e);switch((r=fe(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(le(n)/3)))-le(Math.abs(t)))}(o,a))||(r.precision=i),_e(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,le(n)-le(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-le(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return me(r)}function Me(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,i,o,a,s=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=vt(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return be(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=vt(s,u,e))>0?r=vt(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,e):r<0&&(r=vt(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,e)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,n(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,n(i)),t},t}function Te(){var t=se(ee,ee);return t.copy=function(){return n=t,Te().domain(n.domain()).range(n.range()).interpolate(n.interpolate()).clamp(n.clamp()).unknown(n.unknown());var n},Nt.apply(t,arguments),Me(t)}ye=we({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),me=ye.format,_e=ye.formatPrefix;var ke=new Date,Ae=new Date;function Ce(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,s=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return s;do{s.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return s},i.filter=function(e){return Ce(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return ke.setTime(+n),Ae.setTime(+r),t(ke),t(Ae),Math.floor(e(ke,Ae))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Ee=Ce(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});Ee.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ce(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):Ee:null};var Se=6e4,$e=6048e5,Ne=(Ce(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Ce(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*Se)},function(t,n){return(n-t)/Se},function(t){return t.getMinutes()}),Ce(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Se)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),Ce(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Se)/864e5},function(t){return t.getDate()-1}));function De(t){return Ce(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Se)/$e})}var Ie=De(0),Ue=De(1),ze=(De(2),De(3),De(4)),Pe=(De(5),De(6),Ce(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Ce(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Pe.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ce(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};Ce(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Se)},function(t,n){return(n-t)/Se},function(t){return t.getUTCMinutes()}),Ce(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()});var Fe=Ce(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1});function Ye(t){return Ce(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/$e})}var je=Ye(0),qe=Ye(1),Oe=(Ye(2),Ye(3),Ye(4)),Ve=(Ye(5),Ye(6),Ce(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Ce(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function He(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Le(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Re(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Ve.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ce(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Xe,Be,Ge,Ze={"-":"",_:" ",0:"0"},We=/^\s*\d+/,Qe=/^%/,Je=/[\\^$*+?|[\]().{}]/g;function Ke(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function tr(t){return t.replace(Je,"\\$&")}function nr(t){return new RegExp("^(?:"+t.map(tr).join("|")+")","i")}function er(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function rr(t,n,e){var r=We.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function ir(t,n,e){var r=We.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function or(t,n,e){var r=We.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function ar(t,n,e){var r=We.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function sr(t,n,e){var r=We.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function ur(t,n,e){var r=We.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function lr(t,n,e){var r=We.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function cr(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function hr(t,n,e){var r=We.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function fr(t,n,e){var r=We.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function pr(t,n,e){var r=We.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function dr(t,n,e){var r=We.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function gr(t,n,e){var r=We.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function vr(t,n,e){var r=We.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function yr(t,n,e){var r=We.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function mr(t,n,e){var r=We.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function _r(t,n,e){var r=Qe.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function xr(t,n,e){var r=We.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function wr(t,n,e){var r=We.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function br(t,n){return Ke(t.getDate(),n,2)}function Mr(t,n){return Ke(t.getHours(),n,2)}function Tr(t,n){return Ke(t.getHours()%12||12,n,2)}function kr(t,n){return Ke(1+Ne.count(Pe(t),t),n,3)}function Ar(t,n){return Ke(t.getMilliseconds(),n,3)}function Cr(t,n){return Ar(t,n)+"000"}function Er(t,n){return Ke(t.getMonth()+1,n,2)}function Sr(t,n){return Ke(t.getMinutes(),n,2)}function $r(t,n){return Ke(t.getSeconds(),n,2)}function Nr(t){var n=t.getDay();return 0===n?7:n}function Dr(t,n){return Ke(Ie.count(Pe(t),t),n,2)}function Ir(t,n){var e=t.getDay();return t=e>=4||0===e?ze(t):ze.ceil(t),Ke(ze.count(Pe(t),t)+(4===Pe(t).getDay()),n,2)}function Ur(t){return t.getDay()}function zr(t,n){return Ke(Ue.count(Pe(t),t),n,2)}function Pr(t,n){return Ke(t.getFullYear()%100,n,2)}function Fr(t,n){return Ke(t.getFullYear()%1e4,n,4)}function Yr(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Ke(n/60|0,"0",2)+Ke(n%60,"0",2)}function jr(t,n){return Ke(t.getUTCDate(),n,2)}function qr(t,n){return Ke(t.getUTCHours(),n,2)}function Or(t,n){return Ke(t.getUTCHours()%12||12,n,2)}function Vr(t,n){return Ke(1+Fe.count(Ve(t),t),n,3)}function Hr(t,n){return Ke(t.getUTCMilliseconds(),n,3)}function Lr(t,n){return Hr(t,n)+"000"}function Rr(t,n){return Ke(t.getUTCMonth()+1,n,2)}function Xr(t,n){return Ke(t.getUTCMinutes(),n,2)}function Br(t,n){return Ke(t.getUTCSeconds(),n,2)}function Gr(t){var n=t.getUTCDay();return 0===n?7:n}function Zr(t,n){return Ke(je.count(Ve(t),t),n,2)}function Wr(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Oe(t):Oe.ceil(t),Ke(Oe.count(Ve(t),t)+(4===Ve(t).getUTCDay()),n,2)}function Qr(t){return t.getUTCDay()}function Jr(t,n){return Ke(qe.count(Ve(t),t),n,2)}function Kr(t,n){return Ke(t.getUTCFullYear()%100,n,2)}function ti(t,n){return Ke(t.getUTCFullYear()%1e4,n,4)}function ni(){return"+0000"}function ei(){return"%"}function ri(t){return+t}function ii(t){return Math.floor(+t/1e3)}!function(t){Xe=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=nr(i),c=er(i),h=nr(o),f=er(o),p=nr(a),d=er(a),g=nr(s),v=er(s),y=nr(u),m=er(u),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:br,e:br,f:Cr,H:Mr,I:Tr,j:kr,L:Ar,m:Er,M:Sr,p:function(t){return i[+(t.getHours()>=12)]},Q:ri,s:ii,S:$r,u:Nr,U:Dr,V:Ir,w:Ur,W:zr,x:null,X:null,y:Pr,Y:Fr,Z:Yr,"%":ei},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:jr,e:jr,f:Lr,H:qr,I:Or,j:Vr,L:Hr,m:Rr,M:Xr,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:ri,s:ii,S:Br,u:Gr,U:Zr,V:Wr,w:Qr,W:Jr,x:null,X:null,y:Kr,Y:ti,Z:ni,"%":ei},w={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=f[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return T(t,n,e,r)},d:fr,e:fr,f:mr,H:dr,I:dr,j:pr,L:yr,m:hr,M:gr,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},Q:xr,s:wr,S:vr,u:ir,U:or,V:ar,w:rr,W:sr,x:function(t,n,r){return T(t,e,n,r)},X:function(t,n,e){return T(t,r,n,e)},y:lr,Y:ur,Z:cr,"%":_r};function b(t,n){return function(e){var r,i,o,a=[],s=-1,u=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=Ze[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function M(t,n){return function(e){var r,i,o=Re(1900);if(T(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Le(Re(o.y))).getUTCDay(),r=i>4||0===i?qe.ceil(r):qe(r),r=Fe.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(Re(o.y))).getDay(),r=i>4||0===i?Ue.ceil(r):Ue(r),r=Ne.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Le(Re(o.y)).getUTCDay():n(Re(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Le(o)):n(o)}}function T(t,n,e,r){for(var i,o,a=0,s=n.length,u=e.length;a<s;){if(r>=u)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=w[i in Ze?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=b(e,_),_.X=b(r,_),_.c=b(n,_),x.x=b(e,x),x.X=b(r,x),x.c=b(n,x),{format:function(t){var n=b(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",He);return n.toString=function(){return t},n},utcFormat:function(t){var n=b(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,Le);return n.toString=function(){return t},n}}}(t),Xe.format,Xe.parse,Be=Xe.utcFormat,Ge=Xe.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Be("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Ge("%Y-%m-%dT%H:%M:%S.%LZ");var oi=Math.PI,ai=2*oi,si=ai-1e-6;function ui(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function li(){return new ui}function ci(t){return function(){return t}}ui.prototype=li.prototype={constructor:ui,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,s=e-t,u=r-n,l=o-t,c=a-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var f=e-o,p=r-a,d=s*s+u*u,g=f*f+p*p,v=Math.sqrt(d),y=Math.sqrt(h),m=i*Math.tan((oi-Math.acos((d+h-g)/(2*v*y)))/2),_=m/y,x=m/v;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*l)+","+(n+_*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+x*s)+","+(this._y1=n+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var a=(e=+e)*Math.cos(r),s=e*Math.sin(r),u=t+a,l=n+s,c=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),e&&(h<0&&(h=h%ai+ai),h>si?this._+="A"+e+","+e+",0,1,"+c+","+(t-a)+","+(n-s)+"A"+e+","+e+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=oi)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};Math.PI;function hi(t){this._context=t}function fi(t){return new hi(t)}function pi(t){return t[0]}function di(t){return t[1]}function gi(){var t=pi,n=null,e=ci(0),r=di,i=ci(!0),o=null,a=fi,s=null;function u(u){var l,c,h,f,p,d=u.length,g=!1,v=new Array(d),y=new Array(d);for(null==o&&(s=a(p=li())),l=0;l<=d;++l){if(!(l<d&&i(f=u[l],l,u))===g)if(g=!g)c=l,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),h=l-1;h>=c;--h)s.point(v[h],y[h]);s.lineEnd(),s.areaEnd()}g&&(v[l]=+t(f,l,u),y[l]=+e(f,l,u),s.point(n?+n(f,l,u):v[l],r?+r(f,l,u):y[l]))}if(p)return s=null,p+""||null}function l(){return function(){var t=pi,n=di,e=ci(!0),r=null,i=fi,o=null;function a(a){var s,u,l,c=a.length,h=!1;for(null==r&&(o=i(l=li())),s=0;s<=c;++s)!(s<c&&e(u=a[s],s,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(u,s,a),+n(u,s,a));if(l)return o=null,l+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:ci(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:ci(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:ci(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return u.x=function(e){return arguments.length?(t="function"==typeof e?e:ci(+e),n=null,u):t},u.x0=function(n){return arguments.length?(t="function"==typeof n?n:ci(+n),u):t},u.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:ci(+t),u):n},u.y=function(t){return arguments.length?(e="function"==typeof t?t:ci(+t),r=null,u):e},u.y0=function(t){return arguments.length?(e="function"==typeof t?t:ci(+t),u):e},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ci(+t),u):r},u.lineX0=u.lineY0=function(){return l().x(t).y(e)},u.lineY1=function(){return l().x(t).y(r)},u.lineX1=function(){return l().x(n).y(e)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:ci(!!t),u):i},u.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),u):a},u.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),u):o},u}function vi(t){return t<0?-1:1}function yi(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(vi(o)+vi(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function mi(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function _i(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*n,o-s,a-s*e,o,a)}function xi(t){this._context=t}function wi(t){this._context=t}hi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}},xi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:_i(this,this._t0,mi(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,_i(this,mi(this,e=yi(this,t,n)),e);break;default:_i(this,this._t0,e=yi(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(function(t){this._context=new wi(t)}.prototype=Object.create(xi.prototype)).point=function(t,n){xi.prototype.point.call(this,n,t)},wi.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}};var bi=Array.prototype.slice;function Mi(t){return t}var Ti=1,ki=2,Ai=3,Ci=4,Ei=1e-6;function Si(t){return"translate("+(t+.5)+",0)"}function $i(t){return"translate(0,"+(t+.5)+")"}function Ni(){return!this.__axis}function Di(t,n){var e=[],r=null,i=null,o=6,a=6,s=3,u=t===Ti||t===Ci?-1:1,l=t===Ci||t===ki?"x":"y",c=t===Ti||t===Ai?Si:$i;function h(h){var f=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):Mi:i,d=Math.max(o,0)+s,g=n.range(),v=+g[0]+.5,y=+g[g.length-1]+.5,m=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),_=h.selection?h.selection():h,x=_.selectAll(".domain").data([null]),w=_.selectAll(".tick").data(f,n).order(),b=w.exit(),M=w.enter().append("g").attr("class","tick"),T=w.select("line"),k=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(M),T=T.merge(M.append("line").attr("stroke","currentColor").attr(l+"2",u*o)),k=k.merge(M.append("text").attr("fill","currentColor").attr(l,u*d).attr("dy",t===Ti?"0em":t===Ai?"0.71em":"0.32em")),h!==_&&(x=x.transition(h),w=w.transition(h),T=T.transition(h),k=k.transition(h),b=b.transition(h).attr("opacity",Ei).attr("transform",function(t){return isFinite(t=m(t))?c(t):this.getAttribute("transform")}),M.attr("opacity",Ei).attr("transform",function(t){var n=this.parentNode.__axis;return c(n&&isFinite(n=n(t))?n:m(t))})),b.remove(),x.attr("d",t===Ci||t==ki?a?"M"+u*a+","+v+"H0.5V"+y+"H"+u*a:"M0.5,"+v+"V"+y:a?"M"+v+","+u*a+"V0.5H"+y+"V"+u*a:"M"+v+",0.5H"+y),w.attr("opacity",1).attr("transform",function(t){return c(m(t))}),T.attr(l+"2",u*o),k.attr(l,u*d).text(p),_.filter(Ni).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===ki?"start":t===Ci?"end":"middle"),_.each(function(){this.__axis=m})}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=bi.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:bi.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:bi.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(s=+t,h):s},h}function Ii(t){return Di(Ai,t)}var Ui={value:function(){}};function zi(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Pi(r)}function Pi(t){this._=t}function Fi(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Yi(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Ui,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function ji(){B.preventDefault(),B.stopImmediatePropagation()}Pi.prototype=zi.prototype={constructor:Pi,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<s;)if(e=(t=o[a]).type)i[e]=Yi(i[e],t.name,n);else if(null==n)for(e in i)i[e]=Yi(i[e],t.name,null);return this}for(;++a<s;)if((e=(t=o[a]).type)&&(e=Fi(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Pi(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var qi,Oi,Vi=0,Hi=0,Li=0,Ri=1e3,Xi=0,Bi=0,Gi=0,Zi="object"==typeof performance&&performance.now?performance:Date,Wi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Qi(){return Bi||(Wi(Ji),Bi=Zi.now()+Gi)}function Ji(){Bi=0}function Ki(){this._call=this._time=this._next=null}function to(t,n,e){var r=new Ki;return r.restart(t,n,e),r}function no(){Bi=(Xi=Zi.now())+Gi,Vi=Hi=0;try{!function(){Qi(),++Vi;for(var t,n=qi;n;)(t=Bi-n._time)>=0&&n._call.call(null,t),n=n._next;--Vi}()}finally{Vi=0,function(){var t,n,e=qi,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:qi=n);Oi=t,ro(r)}(),Bi=0}}function eo(){var t=Zi.now(),n=t-Xi;n>Ri&&(Gi-=n,Xi=t)}function ro(t){Vi||(Hi&&(Hi=clearTimeout(Hi)),t-Bi>24?(t<1/0&&(Hi=setTimeout(no,t-Zi.now()-Gi)),Li&&(Li=clearInterval(Li))):(Li||(Xi=Zi.now(),Li=setInterval(eo,Ri)),Vi=1,Wi(no)))}function io(t,n,e){var r=new Ki;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r}Ki.prototype=to.prototype={constructor:Ki,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Qi():+e)+(null==n?0:+n),this._next||Oi===this||(Oi?Oi._next=this:qi=this,Oi=this),this._call=t,this._time=e,ro()},stop:function(){this._call&&(this._call=null,this._time=1/0,ro())}};var oo=zi("start","end","cancel","interrupt"),ao=[],so=0,uo=1,lo=2,co=3,ho=4,fo=5,po=6;function go(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(u){var l,c,h,f;if(e.state!==uo)return s();for(l in i)if((f=i[l]).name===e.name){if(f.state===co)return io(o);f.state===ho?(f.state=po,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=po,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(io(function(){e.state===co&&(e.state=ho,e.timer.restart(a,e.delay,e.time),a(u))}),e.state=lo,e.on.call("start",t,t.__data__,e.index,e.group),e.state===lo){for(e.state=co,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(s),e.state=fo,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);e.state===fo&&(e.on.call("end",t,t.__data__,e.index,e.group),s())}function s(){for(var r in e.state=po,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=to(function(t){e.state=uo,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:oo,tween:ao,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:so})}function vo(t,n){var e=mo(t,n);if(e.state>so)throw new Error("too late; already scheduled");return e}function yo(t,n){var e=mo(t,n);if(e.state>co)throw new Error("too late; already running");return e}function mo(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function _o(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>lo&&e.state<fo,e.state=po,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}function xo(t,n,e){var r=t._id;return t.each(function(){var t=yo(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return mo(t,r).value[n]}}function wo(t,n){var e;return("number"==typeof n?Yn:n instanceof Jt?Fn:(e=Jt(n))?(n=e,Fn):On)(t,n)}var bo=nt.prototype.constructor;function Mo(t){return function(){this.style.removeProperty(t)}}var To=0;function ko(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ao(){return++To}var Co=nt.prototype;ko.prototype=function(t){return nt().transition(t)}.prototype={constructor:ko,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=x(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,go(h[f],n,e,f,h,mo(s,e)));return new ko(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=b(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=mo(u,e),g=0,v=p.length;g<v;++g)(f=p[g])&&go(f,n,e,g,p,d);o.push(p),a.push(u)}return new ko(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new ko(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new ko(a,this._parents,this._name,this._id)},selection:function(){return new bo(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Ao(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=mo(a,n);go(a,t,e,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new ko(r,this._parents,t,e)},call:Co.call,nodes:Co.nodes,node:Co.node,size:Co.size,empty:Co.empty,each:Co.each,on:function(t,n){var e=this._id;return arguments.length<2?mo(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?vo:yo;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=y(t),r="transform"===e?Kn:wo;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttribute(t)}})(e,r,xo(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}:function(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=y(t);return this.tween(e,(r.local?function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}:function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Jn:wo;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=D(this,t),a=(this.style.removeProperty(t),D(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,Mo(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=D(this,t),s=e(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=D(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=n(r=a,s))}}(t,r,xo(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,s="end."+a;return function(){var u=yo(this,t),l=u.on,c=null==u.value[a]?o||(o=Mo(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=D(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(xo(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=mo(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=yo(this,t),o=i.tween;if(o!==e)for(var a=0,s=(r=e=o).length;a<s;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=yo(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:n,value:e},u=0,l=i.length;u<l;++u)if(i[u].name===n){i[u]=s;break}u===l&&i.push(s)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){vo(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){vo(this,t).delay=n}})(n,t)):mo(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){yo(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){yo(this,t).duration=n}})(n,t)):mo(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){yo(this,t).ease=n}}(n,t)):mo(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};e.each(function(){var e=yo(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(s),n._.interrupt.push(s),n._.end.push(u)),e.on=n})})}};Math.PI,Math.PI;var Eo={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function So(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Eo.time=Qi(),Eo;return e}function $o(t){return function(){return t}}function No(t,n,e){this.target=t,this.type=n,this.selection=e}function Do(){B.stopImmediatePropagation()}function Io(){B.preventDefault(),B.stopImmediatePropagation()}nt.prototype.interrupt=function(t){return this.each(function(){_o(this,t)})},nt.prototype.transition=function(t){var n,e;t instanceof ko?(n=t._id,t=t._name):(n=Ao(),(e=Eo).time=Qi(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&go(a,t,n,l,s,e||So(a,n));return new ko(r,this._parents,t,n)};var Uo={name:"drag"},zo={name:"space"},Po={name:"handle"},Fo={name:"center"},Yo={name:"x",handles:["e","w"].map(Xo),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},jo={name:"y",handles:["n","s"].map(Xo),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},qo={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Xo),input:function(t){return t},output:function(t){return t}},Oo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Vo={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Ho={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Lo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Ro={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Xo(t){return{type:t}}function Bo(){return!B.button}function Go(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Zo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Wo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Qo(){return function(t){var n,e=Go,r=Bo,i=zi(a,"start","brush","end"),o=6;function a(n){var e=n.property("__brush",h).selectAll(".overlay").data([Xo("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Oo.overlay).merge(e).each(function(){var t=Zo(this).extent;et(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([Xo("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Oo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Oo[t.type]}),n.each(s).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",c)}function s(){var t=et(this),n=Zo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function u(t,n){return t.__brush.emitter||new l(t,n)}function l(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function c(){if(B.touches){if(B.changedTouches.length<B.touches.length)return Io()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,a,l,c,h,f,p,d,g,v,y,m=this,_=B.target.__data__.type,x="selection"===(B.metaKey?_="overlay":_)?Uo:B.altKey?Fo:Po,w=t===jo?null:Lo[_],b=t===Yo?null:Ro[_],M=Zo(m),T=M.extent,k=M.selection,A=T[0][0],C=T[0][1],E=T[1][0],S=T[1][1],$=w&&b&&B.shiftKey,N=it(m),D=N,I=u(m,arguments).beforestart();"overlay"===_?M.selection=k=[[e=t===jo?A:N[0],o=t===Yo?C:N[1]],[l=t===jo?E:e,h=t===Yo?S:o]]:(e=k[0][0],o=k[0][1],l=k[1][0],h=k[1][1]),i=e,a=o,c=l,f=h;var U=et(m).attr("pointer-events","none"),z=U.selectAll(".overlay").attr("cursor",Oo[_]);if(B.touches)U.on("touchmove.brush",F,!0).on("touchend.brush touchcancel.brush",j,!0);else{var P=et(B.view).on("keydown.brush",function(){switch(B.keyCode){case 16:$=w&&b;break;case 18:x===Po&&(w&&(l=c-p*w,e=i+p*w),b&&(h=f-d*b,o=a+d*b),x=Fo,Y());break;case 32:x!==Po&&x!==Fo||(w<0?l=c-p:w>0&&(e=i-p),b<0?h=f-d:b>0&&(o=a-d),x=zo,z.attr("cursor",Oo.selection),Y());break;default:return}Io()},!0).on("keyup.brush",function(){switch(B.keyCode){case 16:$&&(v=y=$=!1,Y());break;case 18:x===Fo&&(w<0?l=c:w>0&&(e=i),b<0?h=f:b>0&&(o=a),x=Po,Y());break;case 32:x===zo&&(B.altKey?(w&&(l=c-p*w,e=i+p*w),b&&(h=f-d*b,o=a+d*b),x=Fo):(w<0?l=c:w>0&&(e=i),b<0?h=f:b>0&&(o=a),x=Po),z.attr("cursor",Oo[_]),Y());break;default:return}Io()},!0).on("mousemove.brush",F,!0).on("mouseup.brush",j,!0);!function(t){var n=t.document.documentElement,e=et(t).on("dragstart.drag",ji,!0);"onselectstart"in n?e.on("selectstart.drag",ji,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}(B.view)}Do(),_o(m),s.call(m),I.start()}function F(){var t=it(m);!$||v||y||(Math.abs(t[0]-D[0])>Math.abs(t[1]-D[1])?y=!0:v=!0),D=t,g=!0,Io(),Y()}function Y(){var t;switch(p=D[0]-N[0],d=D[1]-N[1],x){case zo:case Uo:w&&(p=Math.max(A-e,Math.min(E-l,p)),i=e+p,c=l+p),b&&(d=Math.max(C-o,Math.min(S-h,d)),a=o+d,f=h+d);break;case Po:w<0?(p=Math.max(A-e,Math.min(E-e,p)),i=e+p,c=l):w>0&&(p=Math.max(A-l,Math.min(E-l,p)),i=e,c=l+p),b<0?(d=Math.max(C-o,Math.min(S-o,d)),a=o+d,f=h):b>0&&(d=Math.max(C-h,Math.min(S-h,d)),a=o,f=h+d);break;case Fo:w&&(i=Math.max(A,Math.min(E,e-p*w)),c=Math.max(A,Math.min(E,l+p*w))),b&&(a=Math.max(C,Math.min(S,o-d*b)),f=Math.max(C,Math.min(S,h+d*b)))}c<i&&(w*=-1,t=e,e=l,l=t,t=i,i=c,c=t,_ in Vo&&z.attr("cursor",Oo[_=Vo[_]])),f<a&&(b*=-1,t=o,o=h,h=t,t=a,a=f,f=t,_ in Ho&&z.attr("cursor",Oo[_=Ho[_]])),M.selection&&(k=M.selection),v&&(i=k[0][0],c=k[1][0]),y&&(a=k[0][1],f=k[1][1]),k[0][0]===i&&k[0][1]===a&&k[1][0]===c&&k[1][1]===f||(M.selection=[[i,a],[c,f]],s.call(m),I.brush())}function j(){if(Do(),B.touches){if(B.touches.length)return;n&&clearTimeout(n),n=setTimeout(function(){n=null},500),U.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,n){var e=t.document.documentElement,r=et(t).on("dragstart.drag",null);n&&(r.on("click.drag",ji,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}(B.view,g),P.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);U.attr("pointer-events","all"),z.attr("cursor",Oo.overlay),M.selection&&(k=M.selection),Wo(k)&&(M.selection=null,s.call(m)),I.end()}}function h(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return a.move=function(n,e){n.selection?n.on("start.brush",function(){u(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){u(this,arguments).end()}).tween("brush",function(){var n=this,r=n.__brush,i=u(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),l=Vn(o,a);function c(t){r.selection=1===t&&Wo(a)?null:l(t),s.call(n),i.brush()}return o&&a?c:c(1)}):n.each(function(){var n=arguments,r=this.__brush,i=t.input("function"==typeof e?e.apply(this,n):e,r.extent),o=u(this,n).beforestart();_o(this),r.selection=null==i||Wo(i)?null:i,s.call(this),o.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){!function(t,n,e,r){var i=B;t.sourceEvent=B,B=t;try{n.apply(e,r)}finally{B=i}}(new No(a,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},a.extent=function(t){return arguments.length?(e="function"==typeof t?t:$o([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),a):e},a.filter=function(t){return arguments.length?(r="function"==typeof t?t:$o(!!t),a):r},a.handleSize=function(t){return arguments.length?(o=+t,a):o},a.on=function(){var t=i.on.apply(i,arguments);return t===i?a:t},a}(qo)}var Jo=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(function(){return Math.random()});const Ko={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},ta={nrd:function(t){let n=(yt(t,.75)-yt(t,.25))/1.34;return 1.06*Math.min(ct(t),n)*Math.pow(t.length,-.2)}};class na{constructor(t,n=!1,e=30,r=-40,i=100){this.id=t,this.verbose=n,this.offsetX=e,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),et("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){et("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=B.pageX,n=B.pageY){this.verbose&&(console.log(t),console.log(n)),t+=this.offsetX,n=n+this.offsetY<0?10:n+this.offsetY;et("#"+this.id).style("left",`${t}px`).style("top",`${n}px`)}edit(t){et("#"+this.id).html(t)}}class ea{constructor(t,e,r=!1){n(`#${t}`).show();const i=r?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=n("<div/>").addClass(i).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,n,e,r,i="fa-download"){this.createButton(t,i);et(`#${t}`).on("click",()=>{this.downloadSvg(n,e,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,n,e="fa-expand-arrows-alt"){this.createButton(t,e);et(`#${t}`).on("click",n).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const r=n("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return n("<i/>").addClass(`fa ${e}`).appendTo(r),this.buttons[t]=r,r}attachTooltip(t){this.tooltip=t}downloadSvg(t,r,i){let o=n(n(n(`${"#"+t}`))[0]),a=o.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),s=function(t){for(var e="",r=document.styleSheets,i=0;i<r.length;i++)try{if(null==r[i].cssRules)continue;for(var o=r[i].cssRules,a=0;a<o.length;a++){var s=o[a];if(void 0!==s.style){var u,l=void 0===s.selectorText?s.selectorText:s.selectorText.replace(`#${t[0].id} `,"");try{u=n(t).find(l)}catch(t){u=[]}u.length>0&&(e+=s.selectorText+" { "+s.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var c=document.createElement("style");return c.setAttribute("type","text/css"),c.innerHTML="<![CDATA[\n"+e+"\n]]>",c}(o.get());a.prepend(s),n("#"+i).html("").hide();let u=n(`#${i}`).append(a).html(),l=new Blob([u],{type:"image/svg+xml"});e(l,r),n(`#${i}`).html("").hide()}}class ra{constructor(t,n={}){this._sanityCheck(t),this.data=t,this.groupInfo=n,this.toolbar=void 0,this.tooltip=void 0}render(t,n=500,e=357,r=.05,i,o=[-3,3],a="Y axis",s=!0,u=30,l=!0,c=0,h=!1,f=!1,p=!1,d=!1,g=!1,v=!1,y=0){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,n,e,r,i,o,a,s,u,l,c,h,f,p,d,g,v)}),this.updateYScale=function(o,a){t.selectAll("*").remove(),void 0===a&&(a=[]),this.render(t,n,e,r,i,[],o,s,u,l,c,h,f,p,d,g,v)},this.updateXScale=function(i){void 0===i&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,n,e,r,i,[],a,s,u,l,c,h,f,p,d,g,v)},void 0===o||0==o.length){let t=[];this.data.forEach(n=>t=t.concat(n.values)),o=ht(t)}this.groups=Tt().key(t=>t.group).entries(this.data),this.scale={x:Pt().rangeRound([0,n]).domain(i||this.groups.map(t=>t.key)).paddingInner(r),subx:Pt(),y:Te().rangeRound([e,0]).domain(o),z:Te()},this.groups.forEach(n=>{let r=n.key,i=n.values,a=this.groupInfo[r];if(n.index=this.scale.x.domain().indexOf(r),void 0!==a){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(a[t])<=parseFloat(a.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,n)=>{return`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(o[0])+50})`}).text(t=>`${t}: ${parseFloat(parseFloat(a[t]).toPrecision(3)).toExponential()}`)}g&&i.sort((t,n)=>t.label<n.label?-1:t.label>n.label?1:0),this.scale.subx.domain(i.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(e=>{0!=e.values.length&&(e.values=e.values.sort(ot),this._drawViolin(t,e,h,n.index,v,y))});var s=18;if(d){const n=Pt().domain(i.map(t=>null==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${e+s})`).call(Ii(n))}if(l){s=5;const n=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${e+s})`).call(Ii(this.scale.subx));c>0&&n.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${c}, 2, 10)`)}});let m=l?55:0;var _;if(this.xAxis=s?Ii(this.scale.x):Ii(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${e+m})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${u}, -10, 10)`),m=5,this.yAxis=(_=this.scale.y,Di(Ci,_)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${m}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*m+et(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(a),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),f&&this._addGroupDivider(t),p){const n=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");n.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=n.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;e.append("rect").attr("x",(t,n)=>5+60*n+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),e.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,n)=>17+60*n+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,n){let e=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${e}, ${r})`).text(n)}createTooltip(t){return 0==n(`#${t}`).length&&n("<div/>").attr("id",t).appendTo(n("body")),this.tooltip=new na(t),et(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,n){return this.toolbar=new ea(t,n),this.toolbar}addBrush(t){const n=Qo();n.on("end",()=>{this.zoom(t,n)}),t.append("g").attr("class","brush").call(n)}zoom(t,n){let e,r=B.selection;if(void 0===n)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,n)=>{const e=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return n>=e&&n<=i}));const e=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([e,i]),t.select(".brush").call(n.move,null)}else{if(!e)return e=setTimeout(function(){e=null},350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((n,e)=>{let r=n.key,o=n.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),o.forEach(e=>{if(0==e.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${n.index}-${e.label}`);o.select(".violin").transition(i).attr("d",gi().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const a=yt(e.values,.25),s=yt(e.values,.75);o.select(".violin-ir").transition(i).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const u=xt(e.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(u)).attr("y2",this.scale.y(u))})})}_drawViolin(t,n,e,r,i,o){let a=function(t,n,e){return function(r){return n.map(n=>[n,_t(r,r=>t((n-r)/e))/e])}}(Ko.gaussian,this.scale.y.ticks(100),ta.nrd(n.values));const s=ht(n.values),u=a(n.values).filter(t=>t[0]>=s[0]&&t[0]<=s[1]),l=t.append("g").attr("id",`violin${r}-${n.label}`).attr("class","violin-g").datum(n);if(n.values.length>=o&&u.length&&this._validVertices(u)){let o=mt(u,t=>Math.abs(t[1]));this.scale.z.domain([-o,o]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);let a=gi().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const s=l.append("path").datum(u).attr("d",a).classed("violin",!0).style("fill",()=>void 0!==n.color?n.color:r%2==0?"#90c1c1":"#94a8b8"),c=yt(n.values,.25),h=yt(n.values,.75),f=this.scale.z.domain()[1]/3;if(e){const e=Math.abs(h-c),r=mt(n.values.filter(t=>t<=h+1.5*e)),i=wt(n.values.filter(t=>t>=c-1.5*e));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(i)).style("stroke","#fff")}l.append("rect").attr("x",this.scale.z(-f)).attr("y",this.scale.y(h)).attr("width",Math.abs(this.scale.z(-f)-this.scale.z(f))).attr("height",Math.abs(this.scale.y(h)-this.scale.y(c))).attr("class","violin-ir");const p=xt(n.values);if(l.append("line").attr("x1",this.scale.z(-f)).attr("x2",this.scale.z(f)).attr("y1",this.scale.y(p)).attr("y2",this.scale.y(p)).attr("class","violin-median"),i){let t=Jo(0,f/2);const e=Math.abs(h-c),r=mt(n.values.filter(t=>t<=h+1.5*e)),i=wt(n.values.filter(t=>t>=c-1.5*e)),o=n.values.filter(t=>t<i||t>r);l.append("g").attr("class","violin-outliers").selectAll("circle").data(o).enter().append("circle").attr("cx",()=>this.scale.z(t())).attr("cy",t=>this.scale.y(t)).attr("r",2)}l.on("mouseover",()=>{s.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(n.group+"<br/>"+n.label+"<br/>Median: "+p.toPrecision(4)+"<br/>")}),l.on("mouseout",()=>{s.classed("highlighted",!1)})}else if(o){let t=mt(n.values,t=>Math.abs(t));this.scale.z.domain([-t,t]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const e=this.scale.z.domain()[1]/3;let r=Jo(0,e/2);l.append("g").attr("class","violin-points").selectAll("circle").data(n.values).enter().append("circle").attr("cx",()=>this.scale.z(r())).attr("cy",t=>this.scale.y(t)).attr("r",2)}}_sanityCheck(t){const n=["group","label","values"];t.forEach(t=>{n.forEach(n=>{if(void 0===t[n])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const n=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==n.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+e/2:0;t.selectAll(".vline").data(n).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,e)=>e!=n.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,n)=>t.concat(n),[]).filter(t=>isNaN(t)).length}}function ia(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v7&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v7&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v7&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v7",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}function oa(t,e,r,i,o,a,s=ia()){d(s.tissue,{credentials:"include"}).then(function(u){let l=function(t,n=!1){const e=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"],r="tissueInfo";if(!t.hasOwnProperty(r))throw"Parsing Error: required json attribute is missing: "+r;let i=t[r];["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach(t=>{if(!i[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`});let o=(i=!1===n?i:i.filter(t=>!e.includes(t.tissueSiteDetailId))).reduce((t,n)=>{let e=n.tissueSite,r={id:n.tissueSiteDetailId,name:n.tissueSiteDetail};return t.hasOwnProperty(e)||(t[e]=[]),t[e].push(r),t},{});return Object.keys(o).forEach(t=>{if(1===o[t].length){let n=o[t][0];delete o[t],o[n.name]=[n]}}),o}(u,!0);!function(t,e,r=!1,i=!1,o=4){const a="tissue-group-main-level";et(`#${e}`).selectAll("*").remove();const s=n("<div/>").attr("class","col-xs-12 col-md-12").appendTo(n(`#${e}`));r?n(`<label class=${a}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(s):n(`<label class=${a}>`+'<input type="radio" name="allTissues" value="all"> All </label> '+`<label class=${a}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(s),n('input[name="allTissues"]').change(function(){switch(n(this).val()){case"all":n(".tissueGroup").prop("checked",!0),n(".tissueSubGroup").prop("checked",!0);break;case"reset":n(".tissueGroup").prop("checked",!1),n(".tissueSubGroup").prop("checked",!1)}});let u=Object.keys(t).sort((t,n)=>"Brain"==t?-1:"Brain"==n?1:t<n?-1:t>n?1:void 0),l=Object.keys(t).reduce((n,e)=>t[e].length>1?n+1+t[e].length:n+t[e].length,0),c=Math.ceil(l/o),h=l%o,f=Math.floor(12/o);const p=ft(0,o).map(t=>n(`<div id="section${t}" class="col-xs-12 col-md-${f}">`).appendTo(n(`#${e}`)));let d=0,g=0;u.forEach(e=>{let r=t[e];const i=e.replace(/ /g,"_");let o=r.length;o=1==o?o:o+1,0!=d&&o+d>c+h&&(d=0,g+=1),d+=o;let s=p[g];n(`<label class=${a}>`+`<input type="checkbox" id="${i}" class="tissueGroup"> `+`<span>${e}</span>`+"</label><br/>").appendTo(s),r.length>1&&r.sort((t,n)=>t.id>n.id?1:t.id<n.id?-1:0).forEach(function(t,e){let i=n("<label class=tissue-group-sub-level>"+`<input type="checkbox" id="${t.id}" class="tissueSubGroup"> `+`<span>${t.name}</span>`+"</label><br/>").appendTo(s);e==r.length-1&&i.addClass("last-site"),i.click(function(){n('input[name="allTissues"]').prop("checked",!1)})}),n("#"+i).click(function(){n('input[name="allTissues"]').prop("checked",!1),n("#"+i).is(":checked")?r.forEach(function(t){"id"!=t.id&&n("#"+t.id).prop("checked",!0)}):r.forEach(function(t){"id"!=t.id&&n("#"+t.id).prop("checked",!1)})})}),i&&(n('input[name="allTissues"][value="all"]').prop("checked",!0),n(".tissueGroup").prop("checked",!0),n(".tissueSubGroup").prop("checked",!0))}(l,e,!0),$(`#${i}`).click(function(t,e,r,i,o,a,s,u=_getGTExUrls(),l=30){return function(){$(`#${e}`).html("");let o=function(t,e,r=!1){let i=[];return n(`#${e}`).find(":input").each(function(){if(n(this).is(":checked")){const e=n(this).attr("id");if(n(this).hasClass("tissueGroup")){let n=e.replace(/_/g," ");1==t[n].length&&(r?i.push(t[n][0].name):i.push(t[n][0].id))}else r?i.push(n(n(this).siblings()[0]).text()):i.push(e)}}),i.filter(t=>void 0!==t)}(t,r);if(0==o.length)throw alert("Must select at least one tissue."),"Input error";let c=$(`#${i}`).val().split("\n").filter(function(t){return""!=t});if(0==c.length)throw alert("Must input at least one gene-variant pair."),"Input error";c.length>l&&($(`#${s}`).append(`Your input has exceeded the maximum number of allowed entries. Only the first ${l} entries are processed.`),console.warn("User input has exceeded the maximum number of allowed entries."),c=c.slice(0,l));const h={};Object.keys(t).forEach(n=>{t[n].forEach(t=>{h[t.id]=t.name})}),c.forEach(function(t,n){t.replace(/ /g,"");let r=t.split(",")[1],i=t.split(",")[0];const l=u.geneId+i,c=r.toLowerCase().startsWith("rs")?u.snp+r:u.variantId+r;Promise.all([d(l,{credentials:"include"}),d(c,{credentials:"include"})]).then(function(t){const l=function(t,n){if(!t.hasOwnProperty("gene"))throw"Fatal Error: parse gene error";let e=t.gene.filter(t=>t.geneSymbolUpper==n.toUpperCase()||t.gencodeId==n.toUpperCase());return 0==e.length?null:e[0]}(t[0],i),c=function(t){if(!t.hasOwnProperty("variant"))throw"Fatal Error: parse variant error";const n=t.variant;return 0==n.length?null:n[0]}(t[1]);if(null===l){const t=`Input Error: no gene found for ${i}. <br/>`;throw $(`#${s}`).append(t),t}if(null===c){const t=`Input Error: no variant found for ${r} <br/>`;throw $(`#${s}`).append(t),t}!function(t,n,e,r,i,o,a=ia()){const s=`violinplot${o}`;$(`#${n}`).append(`<div id="${s}" class="col-sm-12"></div>`);let u=r.variantId.split(/_/)[2],l=r.variantId.split(/_/)[3];const c=u+l;u+=u,l+=l;let h=[];i.forEach(t=>{let n=a.dyneqtl,i=`${n}?variantId=${r.variantId}&gencodeId=${e.gencodeId}&tissueSiteDetailId=${t}`;h.push(function(t,n){return new Promise(function(e,r){d(t,{credentials:"include"}).then(function(t){e(t)}).catch(function(t){const r={tissue:n,status:"failed"};e(r)})})}(i,t))}),Promise.all(h).then(function(n){let i=[],o={};n.forEach(n=>{if("failed"==n.status){let e=t[n.tissue];i=i.concat([{group:e,label:u.length>2?"ref":u,values:[0]},{group:e,label:c.length>2?"het":c,values:[0]},{group:e,label:l.length>2?"alt":l,values:[0]}])}else{n=function(t){["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach(n=>{if(!t.hasOwnProperty(n))throw console.error(t),"Parse Error: Required json attribute is missing: "+n}),t.expression_values=t.data.map(t=>parseFloat(t)),t.genotypes=t.genotypes.map(t=>parseFloat(t)),t.homoRefExp=t.expression_values.filter((n,e)=>0===t.genotypes[e]),t.homoAltExp=t.expression_values.filter((n,e)=>2===t.genotypes[e]),t.heteroExp=t.expression_values.filter((n,e)=>1===t.genotypes[e]);let n=t.variantId.split(/_/)[2],e=t.variantId.split(/_/)[3];return t.het=n+e,t.ref=n+n,t.alt=e+e,t}(n);let e=t[n.tissueSiteDetailId];i=i.concat([{group:e,label:u.length>2?"ref":u,size:n.homoRefExp.length,values:n.homoRefExp},{group:e,label:c.length>2?"het":c,size:n.heteroExp.length,values:n.heteroExp},{group:e,label:l.length>2?"alt":l,size:n.homoAltExp.length,values:n.homoAltExp}]),o[e]={pvalue:null===n.pValue?1:parseFloat(n.pValue).toPrecision(3),pvalueThreshold:null===n.pValueThreshold?0:parseFloat(n.pValueThreshold).toPrecision(3)}}}),function(t,n,e,r,i){const o={main:e,tooltip:"eqtlTooltip",toolbar:`${e}Toolbar`,clone:`${e}Clone`,chart:`${e}Chart`,svg:`${e}Svg`,buttons:{save:`${e}Save`}};if(0==$(`#${o.main}`).length)throw"Violin Plot Error: the chart DOM doesn't exist";0==$(`#${o.tooltip}`).length&&$("<div/>").attr("id",o.tooltip).appendTo($("body"));et(`#${o.main}`).selectAll("*").remove(),["toolbar","chart","clone"].forEach(t=>{$("<div/>").attr("id",o[t]).appendTo($(`#${o.main}`))});let a={left:50,top:50,right:50,bottom:100},s=40*r.length,u=s+(a.left+a.right),l=80+(a.top+a.bottom),c=et(`#${o.chart}`).append("svg").attr("width",u).attr("height",l).attr("id",o.svg).append("g").attr("transform",`translate(${a.left}, ${a.top})`);c.append("text").classed("ed-section-title",!0).text(`${t.geneSymbol} (${t.gencodeId}) and ${n.snpId||""} (${n.variantId})`).attr("x",0).attr("y",16-a.top);let h=new ra(r,i);const f=h.createTooltip(o.tooltip);h.createToolbar(o.toolbar,f).createDownloadSvgButton(o.buttons.save,o.svg,`${o.main}-save.svg`,o.clone),h.render(c,s,80,.3,void 0,[],"Norm. Expression",!1,0,!0,0,!1,!0,!1,!0,!1,!1),function(t,n){t.groups.forEach(e=>{const r=e.key,i=r.replace(/\(/," - (").split(/\s*-\s*/),o=n.append("g"),a=o.selectAll(".violin-group-label").data(i);a.enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("transform",(n,e)=>{let i=t.scale.x(r)+t.scale.x.bandwidth()/2,o=t.scale.y(t.scale.y.domain()[0])+75+12*e;return`translate(${i}, ${o})`}).text(t=>t)}),n.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1)}(h,c)}(e,r,s,i,o)}).catch(function(t){console.error(t)})}(h,e,l,c,o,n,u),$(`#${a}`).removeClass("show"),$(`#${a}`).removeClass("in")}).catch(function(t){console.error(t)})})}}(l,t,e,r,0,o,a,s))}).catch(function(t){console.error(t)})}var aa={build:oa};t.EqtlDashboard=aa,t.build=oa,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
