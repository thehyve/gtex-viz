!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("jquery"),require("file-saver")):"function"==typeof define&&define.amd?define(["exports","jquery","file-saver"],n):n((t=t||self).EqtlDashboard={},t.$,t.saveAs)}(this,(function(t,n,e){"use strict";n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n,e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e;var r={},i={};function o(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function a(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function s(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function u(t){var n=t.getUTCHours(),e=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+s(-t,6):t>9999?"+"+s(t,6):s(t,4)}(t.getUTCFullYear())+"-"+s(t.getUTCMonth()+1,2)+"-"+s(t.getUTCDate(),2)+(i?"T"+s(n,2)+":"+s(e,2)+":"+s(r,2)+"."+s(i,3)+"Z":r?"T"+s(n,2)+":"+s(e,2)+":"+s(r,2)+"Z":e||n?"T"+s(n,2)+":"+s(e,2)+"Z":"")}function l(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function s(t,n){var o,a=[],s=t.length,u=0,l=0,c=s<=0,h=!1;function f(){if(c)return i;if(h)return h=!1,r;var n,o,a=u;if(34===t.charCodeAt(a)){for(;u++<s&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=s?c=!0:10===(o=t.charCodeAt(u++))?h=!0:13===o&&(h=!0,10===t.charCodeAt(u)&&++u),t.slice(a+1,n-1).replace(/""/g,'"')}for(;u<s;){if(10===(o=t.charCodeAt(n=u++)))h=!0;else if(13===o)h=!0,10===t.charCodeAt(u)&&++u;else if(o!==e)continue;return t.slice(a,n)}return c=!0,t.slice(a,s)}for(10===t.charCodeAt(s-1)&&--s,13===t.charCodeAt(s-1)&&--s;(o=f())!==i;){for(var p=[];o!==r&&o!==i;)p.push(o),o=f();n&&null==(p=n(p,l++))||a.push(p)}return a}function l(n,e){return n.map((function(n){return e.map((function(t){return h(n[t])})).join(t)}))}function c(n){return n.map(h).join(t)}function h(t){return null==t?"":t instanceof Date?u(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,i=s(t,(function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=o(t);return function(r,i){return n(e(r),i,t)}}(t,n):o(t)}));return i.columns=r||[],i},parseRows:s,format:function(n,e){return null==e&&(e=a(n)),[e.map(h).join(t)].concat(l(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=a(t)),l(t,n).join("\n")},formatRows:function(t){return t.map(c).join("\n")},formatRow:c,formatValue:h}}l(","),l("\t"),new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function c(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function h(t,n){return fetch(t,n).then(c)}var f="http://www.w3.org/1999/xhtml",p={svg:"http://www.w3.org/2000/svg",xhtml:f,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function d(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),p.hasOwnProperty(n)?{space:p[n],local:t}:t}function g(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===f&&n.documentElement.namespaceURI===f?n.createElement(t):n.createElementNS(e,t)}}function v(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function y(t){var n=d(t);return(n.local?v:g)(n)}function m(){}function w(t){return null==t?m:function(){return this.querySelector(t)}}function x(){return[]}function _(t){return null==t?x:function(){return this.querySelectorAll(t)}}function b(t){return function(){return this.matches(t)}}function M(t){return new Array(t.length)}function T(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}T.prototype={constructor:T,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function k(t,n,e,r,i,o){for(var a,s=0,u=n.length,l=o.length;s<l;++s)(a=n[s])?(a.__data__=o[s],r[s]=a):e[s]=new T(t,o[s]);for(;s<u;++s)(a=n[s])&&(i[s]=a)}function A(t,n,e,r,i,o,a){var s,u,l,c={},h=n.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=n[s])&&(p[s]=l="$"+a.call(u,u.__data__,s,n),l in c?i[s]=u:c[l]=u);for(s=0;s<f;++s)(u=c[l="$"+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):e[s]=new T(t,o[s]);for(s=0;s<h;++s)(u=n[s])&&c[p[s]]===u&&(i[s]=u)}function C(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function E(t){return function(){this.removeAttribute(t)}}function S(t){return function(){this.removeAttributeNS(t.space,t.local)}}function N(t,n){return function(){this.setAttribute(t,n)}}function D(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function I(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function U(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function z(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function F(t){return function(){this.style.removeProperty(t)}}function P(t,n,e){return function(){this.style.setProperty(t,n,e)}}function Y(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function j(t,n){return t.style.getPropertyValue(n)||z(t).getComputedStyle(t,null).getPropertyValue(n)}function q(t){return function(){delete this[t]}}function H(t,n){return function(){this[t]=n}}function O(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function V(t){return t.trim().split(/^|\s+/)}function L(t){return t.classList||new R(t)}function R(t){this._node=t,this._names=V(t.getAttribute("class")||"")}function B(t,n){for(var e=L(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function X(t,n){for(var e=L(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function G(t){return function(){B(this,t)}}function Z(t){return function(){X(this,t)}}function W(t,n){return function(){(n.apply(this,arguments)?B:X)(this,t)}}function J(){this.textContent=""}function K(t){return function(){this.textContent=t}}function Q(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function tt(){this.innerHTML=""}function nt(t){return function(){this.innerHTML=t}}function et(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function rt(){this.nextSibling&&this.parentNode.appendChild(this)}function it(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ot(){return null}function at(){var t=this.parentNode;t&&t.removeChild(this)}function st(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function ut(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}R.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var lt={},ct=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(lt={mouseenter:"mouseover",mouseleave:"mouseout"}));function ht(t,n,e){return t=ft(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function ft(t,n,e){return function(r){var i=ct;ct=r;try{t.call(this,this.__data__,n,e)}finally{ct=i}}}function pt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function dt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function gt(t,n,e){var r=lt.hasOwnProperty(t.type)?ht:ft;return function(i,o,a){var s,u=this.__on,l=r(n,o,a);if(u)for(var c=0,h=u.length;c<h;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=e),void(s.value=n);this.addEventListener(t.type,l,e),s={type:t.type,name:t.name,value:n,listener:l,capture:e},u?u.push(s):this.__on=[s]}}function vt(t,n,e){var r=z(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function yt(t,n){return function(){return vt(this,t,n)}}function mt(t,n){return function(){return vt(this,t,n.apply(this,arguments))}}var wt=[null];function xt(t,n){this._groups=t,this._parents=n}function _t(){return new xt([[document.documentElement]],wt)}function bt(t){return"string"==typeof t?new xt([[document.querySelector(t)]],[document.documentElement]):new xt([[t]],wt)}function Mt(){for(var t,n=ct;t=n.sourceEvent;)n=t;return n}function Tt(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function kt(t){var n=Mt();return n.changedTouches&&(n=n.changedTouches[0]),Tt(t,n)}function At(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}xt.prototype=_t.prototype={constructor:xt,select:function(t){"function"!=typeof t&&(t=w(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,s=n[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new xt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=_(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,s=n[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new xt(r,i)},filter:function(t){"function"!=typeof t&&(t=b(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new xt(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),l=-1,this.each((function(t){p[++l]=t})),p;var e=n?A:k,r=this._parents,i=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var o=i.length,a=new Array(o),s=new Array(o),u=new Array(o),l=0;l<o;++l){var c=r[l],h=i[l],f=h.length,p=t.call(c,c&&c.__data__,l,r),d=p.length,g=s[l]=new Array(d),v=a[l]=new Array(d);e(c,h,g,v,u[l]=new Array(f),p,n);for(var y,m,w=0,x=0;w<d;++w)if(y=g[w]){for(w>=x&&(x=w+1);!(m=v[x])&&++x<d;);y._next=m||null}}return(a=new xt(a,r))._enter=s,a._exit=u,a},enter:function(){return new xt(this._enter||this._groups.map(M),this._parents)},exit:function(){return new xt(this._exit||this._groups.map(M),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new xt(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=C);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,s=e[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(n)}return new xt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=d(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?S:E:"function"==typeof n?e.local?U:I:e.local?D:N)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?F:"function"==typeof n?Y:P)(t,n,null==e?"":e)):j(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?q:"function"==typeof n?O:H)(t,n)):this.node()[t]},classed:function(t,n){var e=V(t+"");if(arguments.length<2){for(var r=L(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?W:n?G:Z)(e,n))},text:function(t){return arguments.length?this.each(null==t?J:("function"==typeof t?Q:K)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?tt:("function"==typeof t?et:nt)(t)):this.node().innerHTML},raise:function(){return this.each(rt)},lower:function(){return this.each(it)},append:function(t){var n="function"==typeof t?t:y(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:y(t),r=null==n?ot:"function"==typeof n?n:w(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(at)},clone:function(t){return this.select(t?ut:st)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=pt(t+""),a=o.length;if(!(arguments.length<2)){for(s=n?gt:dt,null==e&&(e=!1),r=0;r<a;++r)this.each(s(o[r],n,e));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?mt:yt)(t,n))}};var Ct,Et,St=(1===(Ct=At).length&&(Et=Ct,Ct=function(t,n){return At(Et(t),n)}),{left:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;Ct(t[i],n)<0?e=i+1:r=i}return e},right:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;Ct(t[i],n)>0?r=i:e=i+1}return e}}).right;function Nt(t){return null===t?NaN:+t}function Dt(t,n){var e=function(t,n){var e,r,i=t.length,o=0,a=-1,s=0,u=0;if(null==n)for(;++a<i;)isNaN(e=Nt(t[a]))||(u+=(r=e-s)*(e-(s+=r/++o)));else for(;++a<i;)isNaN(e=Nt(n(t[a],a,t)))||(u+=(r=e-s)*(e-(s+=r/++o)));if(o>1)return u/(o-1)}(t,n);return e?Math.sqrt(e):e}function It(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}function Ut(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var $t=Math.sqrt(50),zt=Math.sqrt(10),Ft=Math.sqrt(2);function Pt(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=$t?10:o>=zt?5:o>=Ft?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=$t?10:o>=zt?5:o>=Ft?2:1)}function Yt(t,n,e){if(null==e&&(e=Nt),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}function jt(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function qt(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=Nt(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=Nt(n(t[o],o,t)))?--i:a+=e;if(i)return a/i}function Ht(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=Nt(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=Nt(n(t[i],i,t)))||o.push(e);return Yt(o.sort(At),.5)}function Ot(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}function Vt(){}function Lt(t,n){var e=new Vt;if(t instanceof Vt)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function Rt(){var t,n,e,r=[],i=[];function o(e,i,a,s){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var u,l,c,h=-1,f=e.length,p=r[i++],d=Lt(),g=a();++h<f;)(c=d.get(u=p(l=e[h])+""))?c.push(l):d.set(u,[l]);return d.each((function(t,n){s(g,n,o(t,i,a,s))})),g}return e={object:function(t){return o(t,0,Bt,Xt)},map:function(t){return o(t,0,Gt,Zt)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,s=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each((function(n,e){a.push({key:e,values:t(n,o)})}))),null!=s?a.sort((function(t,n){return s(t.key,n.key)})):a}(o(t,0,Gt,Zt),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function Bt(){return{}}function Xt(t,n,e){t[n]=e}function Gt(){return Lt()}function Zt(t,n,e){t.set(n,e)}function Wt(){}Vt.prototype=Lt.prototype={constructor:Vt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Jt=Lt.prototype;function Kt(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}Wt.prototype=function(t,n){var e=new Wt;if(t instanceof Wt)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}.prototype={constructor:Wt,has:Jt.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Jt.remove,clear:Jt.clear,values:Jt.keys,size:Jt.size,empty:Jt.empty,each:Jt.each};var Qt=Array.prototype,tn=Qt.map,nn=Qt.slice,en={name:"implicit"};function rn(){var t=Lt(),n=[],e=[],r=en;function i(i){var o=i+"",a=t.get(o);if(!a){if(r!==en)return r;t.set(o,a=n.push(i))}return e[(a-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Lt();for(var r,o,a=-1,s=e.length;++a<s;)t.has(o=(r=e[a])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=nn.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return rn(n,e).unknown(r)},Kt.apply(i,arguments),i}function on(){var t,n,e=rn().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,s=0,u=0,l=.5;function c(){var e=r().length,c=o[1]<o[0],h=o[c-0],f=o[1-c];t=(f-h)/Math.max(1,e-s+2*u),a&&(t=Math.floor(t)),h+=(f-h-t*(e-s))*l,n=t*(1-s),a&&(h=Math.round(h),n=Math.round(n));var p=Ut(e).map((function(n){return h+t*n}));return i(c?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),c()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,c()):a},e.padding=function(t){return arguments.length?(s=Math.min(1,u=+t),c()):s},e.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),c()):s},e.paddingOuter=function(t){return arguments.length?(u=+t,c()):u},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},e.copy=function(){return on(r(),o).round(a).paddingInner(s).paddingOuter(u).align(l)},Kt.apply(c(),arguments)}function an(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function sn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function un(){}var ln="\\s*([+-]?\\d+)\\s*",cn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",hn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",fn=/^#([0-9a-f]{3,8})$/,pn=new RegExp("^rgb\\("+[ln,ln,ln]+"\\)$"),dn=new RegExp("^rgb\\("+[hn,hn,hn]+"\\)$"),gn=new RegExp("^rgba\\("+[ln,ln,ln,cn]+"\\)$"),vn=new RegExp("^rgba\\("+[hn,hn,hn,cn]+"\\)$"),yn=new RegExp("^hsl\\("+[cn,hn,hn]+"\\)$"),mn=new RegExp("^hsla\\("+[cn,hn,hn,cn]+"\\)$"),wn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function xn(){return this.rgb().formatHex()}function _n(){return this.rgb().formatRgb()}function bn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=fn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Mn(n):3===e?new Cn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Tn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Tn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=pn.exec(t))?new Cn(n[1],n[2],n[3],1):(n=dn.exec(t))?new Cn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=gn.exec(t))?Tn(n[1],n[2],n[3],n[4]):(n=vn.exec(t))?Tn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=yn.exec(t))?Dn(n[1],n[2]/100,n[3]/100,1):(n=mn.exec(t))?Dn(n[1],n[2]/100,n[3]/100,n[4]):wn.hasOwnProperty(t)?Mn(wn[t]):"transparent"===t?new Cn(NaN,NaN,NaN,0):null}function Mn(t){return new Cn(t>>16&255,t>>8&255,255&t,1)}function Tn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Cn(t,n,e,r)}function kn(t){return t instanceof un||(t=bn(t)),t?new Cn((t=t.rgb()).r,t.g,t.b,t.opacity):new Cn}function An(t,n,e,r){return 1===arguments.length?kn(t):new Cn(t,n,e,null==r?1:r)}function Cn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function En(){return"#"+Nn(this.r)+Nn(this.g)+Nn(this.b)}function Sn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Nn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Dn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Un(t,n,e,r)}function In(t){if(t instanceof Un)return new Un(t.h,t.s,t.l,t.opacity);if(t instanceof un||(t=bn(t)),!t)return new Un;if(t instanceof Un)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=n===o?(e-r)/s+6*(e<r):e===o?(r-n)/s+2:(n-e)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new Un(a,s,u,t.opacity)}function Un(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function $n(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}an(un,bn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:xn,formatHex:xn,formatHsl:function(){return In(this).formatHsl()},formatRgb:_n,toString:_n}),an(Cn,An,sn(un,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Cn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Cn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:En,formatHex:En,formatRgb:Sn,toString:Sn})),an(Un,(function(t,n,e,r){return 1===arguments.length?In(t):new Un(t,n,e,null==r?1:r)}),sn(un,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Un(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Cn($n(t>=240?t-240:t+120,i,r),$n(t,i,r),$n(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var zn=Math.PI/180,Fn=180/Math.PI,Pn=6/29,Yn=3*Pn*Pn;function jn(t){if(t instanceof qn)return new qn(t.l,t.a,t.b,t.opacity);if(t instanceof Bn)return Xn(t);t instanceof Cn||(t=kn(t));var n,e,r=Ln(t.r),i=Ln(t.g),o=Ln(t.b),a=Hn((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=a:(n=Hn((.4360747*r+.3850649*i+.1430804*o)/.96422),e=Hn((.0139322*r+.0971045*i+.7141733*o)/.82521)),new qn(116*a-16,500*(n-a),200*(a-e),t.opacity)}function qn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Hn(t){return t>.008856451679035631?Math.pow(t,1/3):t/Yn+4/29}function On(t){return t>Pn?t*t*t:Yn*(t-4/29)}function Vn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ln(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Rn(t){if(t instanceof Bn)return new Bn(t.h,t.c,t.l,t.opacity);if(t instanceof qn||(t=jn(t)),0===t.a&&0===t.b)return new Bn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Fn;return new Bn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Bn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Xn(t){if(isNaN(t.h))return new qn(t.l,0,0,t.opacity);var n=t.h*zn;return new qn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}an(qn,(function(t,n,e,r){return 1===arguments.length?jn(t):new qn(t,n,e,null==r?1:r)}),sn(un,{brighter:function(t){return new qn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new qn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Cn(Vn(3.1338561*(n=.96422*On(n))-1.6168667*(t=1*On(t))-.4906146*(e=.82521*On(e))),Vn(-.9787684*n+1.9161415*t+.033454*e),Vn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),an(Bn,(function(t,n,e,r){return 1===arguments.length?Rn(t):new Bn(t,n,e,null==r?1:r)}),sn(un,{brighter:function(t){return new Bn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Bn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Xn(this).rgb()}}));var Gn=-.14861,Zn=1.78277,Wn=-.29227,Jn=-.90649,Kn=1.97294,Qn=Kn*Jn,te=Kn*Zn,ne=Zn*Wn-Jn*Gn;function ee(t){if(t instanceof re)return new re(t.h,t.s,t.l,t.opacity);t instanceof Cn||(t=kn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(ne*r+Qn*n-te*e)/(ne+Qn-te),o=r-i,a=(Kn*(e-i)-Wn*o)/Jn,s=Math.sqrt(a*a+o*o)/(Kn*i*(1-i)),u=s?Math.atan2(a,o)*Fn-120:NaN;return new re(u<0?u+360:u,s,i,t.opacity)}function re(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ie(t){return function(){return t}}function oe(t){return 1==(t=+t)?ae:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ie(isNaN(n)?e:n)}}function ae(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):ie(isNaN(t)?n:t)}an(re,(function(t,n,e,r){return 1===arguments.length?ee(t):new re(t,n,e,null==r?1:r)}),sn(un,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new re(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new re(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*zn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Cn(255*(n+e*(Gn*r+Zn*i)),255*(n+e*(Wn*r+Jn*i)),255*(n+e*(Kn*r)),this.opacity)}}));var se=function t(n){var e=oe(n);function r(t,n){var r=e((t=An(t)).r,(n=An(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=ae(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function ue(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function le(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=ve(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}function ce(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function he(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function fe(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=ve(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var pe=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,de=new RegExp(pe.source,"g");function ge(t,n){var e,r,i,o=pe.lastIndex=de.lastIndex=0,a=-1,s=[],u=[];for(t+="",n+="";(e=pe.exec(t))&&(r=de.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(e=e[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:he(e,r)})),o=de.lastIndex;return o<n.length&&(i=n.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)s[(e=u[r]).i]=e.x(t);return s.join("")})}function ve(t,n){var e,r=typeof n;return null==n||"boolean"===r?ie(n):("number"===r?he:"string"===r?(e=bn(n))?(n=e,se):ge:n instanceof bn?se:n instanceof Date?ce:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(n)?ue:Array.isArray(n)?le:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?fe:he)(t,n)}function ye(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}var me,we,xe,_e,be=180/Math.PI,Me={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Te(t,n,e,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(s=Math.sqrt(e*e+r*r))&&(e/=s,r/=s,u/=s),t*r<n*e&&(t=-t,n=-n,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*be,skewX:Math.atan(u)*be,scaleX:a,scaleY:s}}function ke(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,n,null,e);s.push({i:u-4,x:he(t,i)},{i:u-2,x:he(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:he(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,s,u),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:he(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,s,u),function(t,n,e,r,o,a){if(t!==e||n!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:he(t,e)},{i:s-2,x:he(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var n,e=-1,r=u.length;++e<r;)s[(n=u[e]).i]=n.x(t);return s.join("")}}}var Ae=ke((function(t){return"none"===t?Me:(me||(me=document.createElement("DIV"),we=document.documentElement,xe=document.defaultView),me.style.transform=t,t=xe.getComputedStyle(we.appendChild(me),null).getPropertyValue("transform"),we.removeChild(me),Te(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Ce=ke((function(t){return null==t?Me:(_e||(_e=document.createElementNS("http://www.w3.org/2000/svg","g")),_e.setAttribute("transform",t),(t=_e.transform.baseVal.consolidate())?Te((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Me)}),", ",")",")");function Ee(t){return+t}var Se=[0,1];function Ne(t){return t}function De(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:function(t){return function(){return t}}(isNaN(n)?NaN:.5)}function Ie(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Ue(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=De(i,r),o=e(a,o)):(r=De(r,i),o=e(o,a)),function(t){return o(r(t))}}function $e(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=De(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=St(t,n,1,r)-1;return o[e](i[e](n))}}function ze(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Fe(t,n){return function(){var t,n,e,r,i,o,a=Se,s=Se,u=ve,l=Ne;function c(){return r=Math.min(a.length,s.length)>2?$e:Ue,i=o=null,h}function h(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),s,u)))(t(l(n)))}return h.invert=function(e){return l(n((o||(o=r(s,a.map(t),he)))(e)))},h.domain=function(t){return arguments.length?(a=tn.call(t,Ee),l===Ne||(l=Ie(a)),c()):a.slice()},h.range=function(t){return arguments.length?(s=nn.call(t),c()):s.slice()},h.rangeRound=function(t){return s=nn.call(t),u=ye,c()},h.clamp=function(t){return arguments.length?(l=t?Ie(a):Ne,h):l!==Ne},h.interpolate=function(t){return arguments.length?(u=t,c()):u},h.unknown=function(t){return arguments.length?(e=t,h):e},function(e,r){return t=e,n=r,c()}}()(t,n)}function Pe(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function Ye(t){return(t=Pe(Math.abs(t)))?t[1]:NaN}var je,qe=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function He(t){if(!(n=qe.exec(t)))throw new Error("invalid format: "+t);var n;return new Oe({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Oe(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Ve(t,n){var e=Pe(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}He.prototype=Oe.prototype,Oe.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Le={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Ve(100*t,n)},r:Ve,s:function(t,n){var e=Pe(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(je=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Pe(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Re(t){return t}var Be,Xe,Ge,Ze=Array.prototype.map,We=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Je(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?Re:(n=Ze.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=n[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Re:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(Ze.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var n=(t=He(t)).fill,e=t.align,h=t.sign,f=t.symbol,p=t.zero,d=t.width,g=t.comma,v=t.precision,y=t.trim,m=t.type;"n"===m?(g=!0,m="g"):Le[m]||(void 0===v&&(v=12),y=!0,m="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var w="$"===f?i:"#"===f&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",x="$"===f?o:/[%p]/.test(m)?u:"",_=Le[m],b=/[defgprs%]/.test(m);function M(t){var i,o,u,f=w,M=x;if("c"===m)M=_(t)+M,t="";else{var T=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:_(Math.abs(t),v),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),T&&0==+t&&"+"!==h&&(T=!1),f=(T?"("===h?h:l:"-"===h||"("===h?"":h)+f,M=("s"===m?We[8+je/3]:"")+M+(T&&"("===h?")":""),b)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){M=(46===u?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var k=f.length+t.length+M.length,A=k<d?new Array(d-k+1).join(n):"";switch(g&&p&&(t=r(A+t,A.length?d-M.length:1/0),A=""),e){case"<":t=f+t+M+A;break;case"=":t=f+A+t+M;break;case"^":t=A.slice(0,k=A.length>>1)+f+t+M+A.slice(k);break;default:t=A+f+t+M}return s(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),M.toString=function(){return t+""},M}return{format:h,formatPrefix:function(t,n){var e=h(((t=He(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Ye(n)/3))),i=Math.pow(10,-r),o=We[8+r/3];return function(t){return e(i*t)+o}}}}function Ke(t,n,e,r){var i,o=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=$t?i*=10:o>=zt?i*=5:o>=Ft&&(i*=2),n<t?-i:i}(t,n,e);switch((r=He(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ye(n)/3)))-Ye(Math.abs(t)))}(o,a))||(r.precision=i),Ge(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Ye(n)-Ye(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Ye(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Xe(r)}function Qe(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,i,o,a,s=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=Pt(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return Ke(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=Pt(s,u,e))>0?r=Pt(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,e):r<0&&(r=Pt(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,e)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,n(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,n(i)),t},t}function tr(){var t=Fe(Ne,Ne);return t.copy=function(){return ze(t,tr())},Kt.apply(t,arguments),Qe(t)}Be=Je({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),Xe=Be.format,Ge=Be.formatPrefix;var nr=new Date,er=new Date;function rr(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,s=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return s;do{s.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return s},i.filter=function(e){return rr((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return nr.setTime(+n),er.setTime(+r),t(nr),t(er),Math.floor(e(nr,er))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var ir=rr((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));ir.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?rr((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):ir:null};rr((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()})),rr((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()})),rr((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}));var or=rr((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}));function ar(t){return rr((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var sr=ar(0),ur=ar(1),lr=(ar(2),ar(3),ar(4)),cr=(ar(5),ar(6),rr((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),rr((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()})));cr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?rr((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};rr((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})),rr((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}));var hr=rr((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}));function fr(t){return rr((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var pr=fr(0),dr=fr(1),gr=(fr(2),fr(3),fr(4)),vr=(fr(5),fr(6),rr((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),rr((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));function yr(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function mr(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function wr(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}vr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?rr((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var xr,_r,br,Mr={"-":"",_:" ",0:"0"},Tr=/^\s*\d+/,kr=/^%/,Ar=/[\\^$*+?|[\]().{}]/g;function Cr(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Er(t){return t.replace(Ar,"\\$&")}function Sr(t){return new RegExp("^(?:"+t.map(Er).join("|")+")","i")}function Nr(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Dr(t,n,e){var r=Tr.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Ir(t,n,e){var r=Tr.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Ur(t,n,e){var r=Tr.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function $r(t,n,e){var r=Tr.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function zr(t,n,e){var r=Tr.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Fr(t,n,e){var r=Tr.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Pr(t,n,e){var r=Tr.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Yr(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function jr(t,n,e){var r=Tr.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function qr(t,n,e){var r=Tr.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Hr(t,n,e){var r=Tr.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Or(t,n,e){var r=Tr.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Vr(t,n,e){var r=Tr.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Lr(t,n,e){var r=Tr.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Rr(t,n,e){var r=Tr.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Br(t,n,e){var r=Tr.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Xr(t,n,e){var r=Tr.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Gr(t,n,e){var r=kr.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Zr(t,n,e){var r=Tr.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Wr(t,n,e){var r=Tr.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Jr(t,n){return Cr(t.getDate(),n,2)}function Kr(t,n){return Cr(t.getHours(),n,2)}function Qr(t,n){return Cr(t.getHours()%12||12,n,2)}function ti(t,n){return Cr(1+or.count(cr(t),t),n,3)}function ni(t,n){return Cr(t.getMilliseconds(),n,3)}function ei(t,n){return ni(t,n)+"000"}function ri(t,n){return Cr(t.getMonth()+1,n,2)}function ii(t,n){return Cr(t.getMinutes(),n,2)}function oi(t,n){return Cr(t.getSeconds(),n,2)}function ai(t){var n=t.getDay();return 0===n?7:n}function si(t,n){return Cr(sr.count(cr(t)-1,t),n,2)}function ui(t,n){var e=t.getDay();return t=e>=4||0===e?lr(t):lr.ceil(t),Cr(lr.count(cr(t),t)+(4===cr(t).getDay()),n,2)}function li(t){return t.getDay()}function ci(t,n){return Cr(ur.count(cr(t)-1,t),n,2)}function hi(t,n){return Cr(t.getFullYear()%100,n,2)}function fi(t,n){return Cr(t.getFullYear()%1e4,n,4)}function pi(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Cr(n/60|0,"0",2)+Cr(n%60,"0",2)}function di(t,n){return Cr(t.getUTCDate(),n,2)}function gi(t,n){return Cr(t.getUTCHours(),n,2)}function vi(t,n){return Cr(t.getUTCHours()%12||12,n,2)}function yi(t,n){return Cr(1+hr.count(vr(t),t),n,3)}function mi(t,n){return Cr(t.getUTCMilliseconds(),n,3)}function wi(t,n){return mi(t,n)+"000"}function xi(t,n){return Cr(t.getUTCMonth()+1,n,2)}function _i(t,n){return Cr(t.getUTCMinutes(),n,2)}function bi(t,n){return Cr(t.getUTCSeconds(),n,2)}function Mi(t){var n=t.getUTCDay();return 0===n?7:n}function Ti(t,n){return Cr(pr.count(vr(t)-1,t),n,2)}function ki(t,n){var e=t.getUTCDay();return t=e>=4||0===e?gr(t):gr.ceil(t),Cr(gr.count(vr(t),t)+(4===vr(t).getUTCDay()),n,2)}function Ai(t){return t.getUTCDay()}function Ci(t,n){return Cr(dr.count(vr(t)-1,t),n,2)}function Ei(t,n){return Cr(t.getUTCFullYear()%100,n,2)}function Si(t,n){return Cr(t.getUTCFullYear()%1e4,n,4)}function Ni(){return"+0000"}function Di(){return"%"}function Ii(t){return+t}function Ui(t){return Math.floor(+t/1e3)}!function(t){xr=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=Sr(i),c=Nr(i),h=Sr(o),f=Nr(o),p=Sr(a),d=Nr(a),g=Sr(s),v=Nr(s),y=Sr(u),m=Nr(u),w={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:Jr,e:Jr,f:ei,H:Kr,I:Qr,j:ti,L:ni,m:ri,M:ii,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ii,s:Ui,S:oi,u:ai,U:si,V:ui,w:li,W:ci,x:null,X:null,y:hi,Y:fi,Z:pi,"%":Di},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:di,e:di,f:wi,H:gi,I:vi,j:yi,L:mi,m:xi,M:_i,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ii,s:Ui,S:bi,u:Mi,U:Ti,V:ki,w:Ai,W:Ci,x:null,X:null,y:Ei,Y:Si,Z:Ni,"%":Di},_={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=f[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return T(t,n,e,r)},d:Hr,e:Hr,f:Xr,H:Vr,I:Vr,j:Or,L:Br,m:qr,M:Lr,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},q:jr,Q:Zr,s:Wr,S:Rr,u:Ir,U:Ur,V:$r,w:Dr,W:zr,x:function(t,n,r){return T(t,e,n,r)},X:function(t,n,e){return T(t,r,n,e)},y:Pr,Y:Fr,Z:Yr,"%":Gr};function b(t,n){return function(e){var r,i,o,a=[],s=-1,u=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=Mr[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function M(t,n){return function(e){var r,i,o=wr(1900,void 0,1);if(T(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=mr(wr(o.y,0,1))).getUTCDay(),r=i>4||0===i?dr.ceil(r):dr(r),r=hr.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=yr(wr(o.y,0,1))).getDay(),r=i>4||0===i?ur.ceil(r):ur(r),r=or.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?mr(wr(o.y,0,1)).getUTCDay():yr(wr(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,mr(o)):yr(o)}}function T(t,n,e,r){for(var i,o,a=0,s=n.length,u=e.length;a<s;){if(r>=u)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=_[i in Mr?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return w.x=b(e,w),w.X=b(r,w),w.c=b(n,w),x.x=b(e,x),x.X=b(r,x),x.c=b(n,x),{format:function(t){var n=b(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=b(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}(t),xr.format,xr.parse,_r=xr.utcFormat,br=xr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||_r("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||br("%Y-%m-%dT%H:%M:%S.%LZ");var $i=Math.PI,zi=2*$i,Fi=zi-1e-6;function Pi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Yi(){return new Pi}function ji(t){return function(){return t}}function qi(t){this._context=t}function Hi(t){return new qi(t)}function Oi(t){return t[0]}function Vi(t){return t[1]}function Li(){var t=Oi,n=null,e=ji(0),r=Vi,i=ji(!0),o=null,a=Hi,s=null;function u(u){var l,c,h,f,p,d=u.length,g=!1,v=new Array(d),y=new Array(d);for(null==o&&(s=a(p=Yi())),l=0;l<=d;++l){if(!(l<d&&i(f=u[l],l,u))===g)if(g=!g)c=l,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),h=l-1;h>=c;--h)s.point(v[h],y[h]);s.lineEnd(),s.areaEnd()}g&&(v[l]=+t(f,l,u),y[l]=+e(f,l,u),s.point(n?+n(f,l,u):v[l],r?+r(f,l,u):y[l]))}if(p)return s=null,p+""||null}function l(){return function(){var t=Oi,n=Vi,e=ji(!0),r=null,i=Hi,o=null;function a(a){var s,u,l,c=a.length,h=!1;for(null==r&&(o=i(l=Yi())),s=0;s<=c;++s)!(s<c&&e(u=a[s],s,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(u,s,a),+n(u,s,a));if(l)return o=null,l+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:ji(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:ji(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:ji(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return u.x=function(e){return arguments.length?(t="function"==typeof e?e:ji(+e),n=null,u):t},u.x0=function(n){return arguments.length?(t="function"==typeof n?n:ji(+n),u):t},u.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:ji(+t),u):n},u.y=function(t){return arguments.length?(e="function"==typeof t?t:ji(+t),r=null,u):e},u.y0=function(t){return arguments.length?(e="function"==typeof t?t:ji(+t),u):e},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ji(+t),u):r},u.lineX0=u.lineY0=function(){return l().x(t).y(e)},u.lineY1=function(){return l().x(t).y(r)},u.lineX1=function(){return l().x(n).y(e)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:ji(!!t),u):i},u.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),u):a},u.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),u):o},u}function Ri(t){return t<0?-1:1}function Bi(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(Ri(o)+Ri(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function Xi(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Gi(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*n,o-s,a-s*e,o,a)}function Zi(t){this._context=t}function Wi(t){this._context=t}Pi.prototype=Yi.prototype={constructor:Pi,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,s=e-t,u=r-n,l=o-t,c=a-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var f=e-o,p=r-a,d=s*s+u*u,g=f*f+p*p,v=Math.sqrt(d),y=Math.sqrt(h),m=i*Math.tan(($i-Math.acos((d+h-g)/(2*v*y)))/2),w=m/y,x=m/v;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*l)+","+(n+w*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+x*s)+","+(this._y1=n+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),s=e*Math.sin(r),u=t+a,l=n+s,c=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),e&&(h<0&&(h=h%zi+zi),h>Fi?this._+="A"+e+","+e+",0,1,"+c+","+(t-a)+","+(n-s)+"A"+e+","+e+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=$i)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}},qi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}},Zi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Gi(this,this._t0,Xi(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Gi(this,Xi(this,e=Bi(this,t,n)),e);break;default:Gi(this,this._t0,e=Bi(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(function(t){this._context=new Wi(t)}.prototype=Object.create(Zi.prototype)).point=function(t,n){Zi.prototype.point.call(this,n,t)},Wi.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}};var Ji=Array.prototype.slice;function Ki(t){return t}function Qi(t){return"translate("+(t+.5)+",0)"}function to(t){return"translate(0,"+(t+.5)+")"}function no(t){return function(n){return+t(n)}}function eo(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function ro(){return!this.__axis}function io(t,n){var e=[],r=null,i=null,o=6,a=6,s=3,u=1===t||4===t?-1:1,l=4===t||2===t?"x":"y",c=1===t||3===t?Qi:to;function h(h){var f=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):Ki:i,d=Math.max(o,0)+s,g=n.range(),v=+g[0]+.5,y=+g[g.length-1]+.5,m=(n.bandwidth?eo:no)(n.copy()),w=h.selection?h.selection():h,x=w.selectAll(".domain").data([null]),_=w.selectAll(".tick").data(f,n).order(),b=_.exit(),M=_.enter().append("g").attr("class","tick"),T=_.select("line"),k=_.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),_=_.merge(M),T=T.merge(M.append("line").attr("stroke","currentColor").attr(l+"2",u*o)),k=k.merge(M.append("text").attr("fill","currentColor").attr(l,u*d).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==w&&(x=x.transition(h),_=_.transition(h),T=T.transition(h),k=k.transition(h),b=b.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=m(t))?c(t):this.getAttribute("transform")})),M.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return c(n&&isFinite(n=n(t))?n:m(t))}))),b.remove(),x.attr("d",4===t||2==t?a?"M"+u*a+","+v+"H0.5V"+y+"H"+u*a:"M0.5,"+v+"V"+y:a?"M"+v+","+u*a+"V0.5H"+y+"V"+u*a:"M"+v+",0.5H"+y),_.attr("opacity",1).attr("transform",(function(t){return c(m(t))})),T.attr(l+"2",u*o),k.attr(l,u*d).text(p),w.filter(ro).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),w.each((function(){this.__axis=m}))}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=Ji.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:Ji.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:Ji.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(s=+t,h):s},h}function oo(t){return io(3,t)}var ao={value:function(){}};function so(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new uo(r)}function uo(t){this._=t}function lo(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function co(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function ho(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ao,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function fo(){ct.preventDefault(),ct.stopImmediatePropagation()}function po(t){var n=t.document.documentElement,e=bt(t).on("dragstart.drag",fo,!0);"onselectstart"in n?e.on("selectstart.drag",fo,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function go(t,n){var e=t.document.documentElement,r=bt(t).on("dragstart.drag",null);n&&(r.on("click.drag",fo,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}uo.prototype=so.prototype={constructor:uo,on:function(t,n){var e,r=this._,i=lo(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=ho(r[e],t.name,n);else if(null==n)for(e in r)r[e]=ho(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=co(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new uo(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var vo,yo,mo=0,wo=0,xo=0,_o=0,bo=0,Mo=0,To="object"==typeof performance&&performance.now?performance:Date,ko="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ao(){return bo||(ko(Co),bo=To.now()+Mo)}function Co(){bo=0}function Eo(){this._call=this._time=this._next=null}function So(t,n,e){var r=new Eo;return r.restart(t,n,e),r}function No(){bo=(_o=To.now())+Mo,mo=wo=0;try{!function(){Ao(),++mo;for(var t,n=vo;n;)(t=bo-n._time)>=0&&n._call.call(null,t),n=n._next;--mo}()}finally{mo=0,function(){var t,n,e=vo,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:vo=n);yo=t,Io(r)}(),bo=0}}function Do(){var t=To.now(),n=t-_o;n>1e3&&(Mo-=n,_o=t)}function Io(t){mo||(wo&&(wo=clearTimeout(wo)),t-bo>24?(t<1/0&&(wo=setTimeout(No,t-To.now()-Mo)),xo&&(xo=clearInterval(xo))):(xo||(_o=To.now(),xo=setInterval(Do,1e3)),mo=1,ko(No)))}function Uo(t,n,e){var r=new Eo;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}Eo.prototype=So.prototype={constructor:Eo,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Ao():+e)+(null==n?0:+n),this._next||yo===this||(yo?yo._next=this:vo=this,yo=this),this._call=t,this._time=e,Io()},stop:function(){this._call&&(this._call=null,this._time=1/0,Io())}};var $o=so("start","end","cancel","interrupt"),zo=[];function Fo(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(u){var l,c,h,f;if(1!==e.state)return s();for(l in i)if((f=i[l]).name===e.name){if(3===f.state)return Uo(o);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=6,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(Uo((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(u))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(s),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),s())}function s(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=So((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:$o,tween:zo,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function Po(t,n){var e=jo(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Yo(t,n){var e=jo(t,n);if(e.state>3)throw new Error("too late; already running");return e}function jo(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function qo(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}function Ho(t,n){var e,r;return function(){var i=Yo(this,t),o=i.tween;if(o!==e)for(var a=0,s=(r=e=o).length;a<s;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function Oo(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Yo(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:n,value:e},u=0,l=i.length;u<l;++u)if(i[u].name===n){i[u]=s;break}u===l&&i.push(s)}o.tween=i}}function Vo(t,n,e){var r=t._id;return t.each((function(){var t=Yo(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return jo(t,r).value[n]}}function Lo(t,n){var e;return("number"==typeof n?he:n instanceof bn?se:(e=bn(n))?(n=e,se):ge)(t,n)}function Ro(t){return function(){this.removeAttribute(t)}}function Bo(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Xo(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function Go(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function Zo(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttribute(t)}}function Wo(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttributeNS(t.space,t.local)}}function Jo(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Ko(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Qo(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Ko(t,i)),e}return i._value=n,i}function ta(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Jo(t,i)),e}return i._value=n,i}function na(t,n){return function(){Po(this,t).delay=+n.apply(this,arguments)}}function ea(t,n){return n=+n,function(){Po(this,t).delay=n}}function ra(t,n){return function(){Yo(this,t).duration=+n.apply(this,arguments)}}function ia(t,n){return n=+n,function(){Yo(this,t).duration=n}}function oa(t,n){if("function"!=typeof n)throw new Error;return function(){Yo(this,t).ease=n}}function aa(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Po:Yo;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(n,e),a.on=i}}var sa=_t.prototype.constructor;function ua(t){return function(){this.style.removeProperty(t)}}function la(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function ca(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&la(t,o,e)),r}return o._value=n,o}function ha(t){return function(n){this.textContent=t.call(this,n)}}function fa(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&ha(r)),n}return r._value=t,r}var pa=0;function da(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ga(){return++pa}var va=_t.prototype;da.prototype=function(t){return _t().transition(t)}.prototype={constructor:da,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=w(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,Fo(h[f],n,e,f,h,jo(s,e)));return new da(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=_(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=jo(u,e),g=0,v=p.length;g<v;++g)(f=p[g])&&Fo(f,n,e,g,p,d);o.push(p),a.push(u)}return new da(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=b(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new da(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new da(a,this._parents,this._name,this._id)},selection:function(){return new sa(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=ga(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=jo(a,n);Fo(a,t,e,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new da(r,this._parents,t,e)},call:va.call,nodes:va.nodes,node:va.node,size:va.size,empty:va.empty,each:va.each,on:function(t,n){var e=this._id;return arguments.length<2?jo(this.node(),e).on.on(t):this.each(aa(e,t,n))},attr:function(t,n){var e=d(t),r="transform"===e?Ce:Lo;return this.attrTween(t,"function"==typeof n?(e.local?Wo:Zo)(e,r,Vo(this,"attr."+t,n)):null==n?(e.local?Bo:Ro)(e):(e.local?Go:Xo)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=d(t);return this.tween(e,(r.local?Qo:ta)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Ae:Lo;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=j(this,t),a=(this.style.removeProperty(t),j(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,ua(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=j(this,t),s=e(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=j(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=n(r=a,s))}}(t,r,Vo(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,s="end."+a;return function(){var u=Yo(this,t),l=u.on,c=null==u.value[a]?o||(o=ua(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=j(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,ca(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Vo(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,fa(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=jo(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?Ho:Oo)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?na:ea)(n,t)):jo(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ra:ia)(n,t)):jo(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(oa(n,t)):jo(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};e.each((function(){var e=Yo(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(s),n._.interrupt.push(s),n._.end.push(u)),e.on=n}))}))}};var ya={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function ma(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return ya.time=Ao(),ya;return e}function wa(t){return function(){return t}}function xa(t,n,e){this.target=t,this.type=n,this.selection=e}function _a(){ct.stopImmediatePropagation()}function ba(){ct.preventDefault(),ct.stopImmediatePropagation()}_t.prototype.interrupt=function(t){return this.each((function(){qo(this,t)}))},_t.prototype.transition=function(t){var n,e;t instanceof da?(n=t._id,t=t._name):(n=ga(),(e=ya).time=Ao(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&Fo(a,t,n,l,s,e||ma(a,n));return new da(r,this._parents,t,n)};var Ma={name:"drag"},Ta={name:"space"},ka={name:"handle"},Aa={name:"center"};function Ca(t){return[+t[0],+t[1]]}function Ea(t){return[Ca(t[0]),Ca(t[1])]}function Sa(t){return function(n){return function(t,n,e){arguments.length<3&&(e=n,n=Mt().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return Tt(t,r);return null}(n,ct.touches,t)}}var Na={name:"x",handles:["w","e"].map(Ya),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Da={name:"y",handles:["n","s"].map(Ya),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Ia={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Ya),input:function(t){return null==t?null:Ea(t)},output:function(t){return t}},Ua={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},$a={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},za={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Fa={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Pa={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Ya(t){return{type:t}}function ja(){return!ct.ctrlKey&&!ct.button}function qa(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Ha(){return navigator.maxTouchPoints||"ontouchstart"in this}function Oa(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Va(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function La(){return function(t){var n,e=qa,r=ja,i=Ha,o=!0,a=so("start","brush","end"),s=6;function u(n){var e=n.property("__brush",g).selectAll(".overlay").data([Ya("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Ua.overlay).merge(e).each((function(){var t=Oa(this).extent;bt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([Ya("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Ua.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Ua[t.type]})),n.each(l).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",f).filter(i).on("touchstart.brush",f).on("touchmove.brush",p).on("touchend.brush touchcancel.brush",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function l(){var t=bt(this),n=Oa(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-s/2:n[0][0]-s/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-s/2:n[0][1]-s/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+s:s})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+s:s}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n,e){return!e&&t.__brush.emitter||new h(t,n)}function h(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function f(){if((!n||ct.touches)&&r.apply(this,arguments)){var e,i,a,s,u,h,f,p,d,g,v,y=this,m=ct.target.__data__.type,w="selection"===(o&&ct.metaKey?m="overlay":m)?Ma:o&&ct.altKey?Aa:ka,x=t===Da?null:Fa[m],_=t===Na?null:Pa[m],b=Oa(y),M=b.extent,T=b.selection,k=M[0][0],A=M[0][1],C=M[1][0],E=M[1][1],S=0,N=0,D=x&&_&&o&&ct.shiftKey,I=ct.touches?Sa(ct.changedTouches[0].identifier):kt,U=I(y),$=U,z=c(y,arguments,!0).beforestart();"overlay"===m?(T&&(d=!0),b.selection=T=[[e=t===Da?k:U[0],a=t===Na?A:U[1]],[u=t===Da?C:e,f=t===Na?E:a]]):(e=T[0][0],a=T[0][1],u=T[1][0],f=T[1][1]),i=e,s=a,h=u,p=f;var F=bt(y).attr("pointer-events","none"),P=F.selectAll(".overlay").attr("cursor",Ua[m]);if(ct.touches)z.moved=j,z.ended=H;else{var Y=bt(ct.view).on("mousemove.brush",j,!0).on("mouseup.brush",H,!0);o&&Y.on("keydown.brush",O,!0).on("keyup.brush",V,!0),po(ct.view)}_a(),qo(y),l.call(y),z.start()}function j(){var t=I(y);!D||g||v||(Math.abs(t[0]-$[0])>Math.abs(t[1]-$[1])?v=!0:g=!0),$=t,d=!0,ba(),q()}function q(){var t;switch(S=$[0]-U[0],N=$[1]-U[1],w){case Ta:case Ma:x&&(S=Math.max(k-e,Math.min(C-u,S)),i=e+S,h=u+S),_&&(N=Math.max(A-a,Math.min(E-f,N)),s=a+N,p=f+N);break;case ka:x<0?(S=Math.max(k-e,Math.min(C-e,S)),i=e+S,h=u):x>0&&(S=Math.max(k-u,Math.min(C-u,S)),i=e,h=u+S),_<0?(N=Math.max(A-a,Math.min(E-a,N)),s=a+N,p=f):_>0&&(N=Math.max(A-f,Math.min(E-f,N)),s=a,p=f+N);break;case Aa:x&&(i=Math.max(k,Math.min(C,e-S*x)),h=Math.max(k,Math.min(C,u+S*x))),_&&(s=Math.max(A,Math.min(E,a-N*_)),p=Math.max(A,Math.min(E,f+N*_)))}h<i&&(x*=-1,t=e,e=u,u=t,t=i,i=h,h=t,m in $a&&P.attr("cursor",Ua[m=$a[m]])),p<s&&(_*=-1,t=a,a=f,f=t,t=s,s=p,p=t,m in za&&P.attr("cursor",Ua[m=za[m]])),b.selection&&(T=b.selection),g&&(i=T[0][0],h=T[1][0]),v&&(s=T[0][1],p=T[1][1]),T[0][0]===i&&T[0][1]===s&&T[1][0]===h&&T[1][1]===p||(b.selection=[[i,s],[h,p]],l.call(y),z.brush())}function H(){if(_a(),ct.touches){if(ct.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else go(ct.view,d),Y.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);F.attr("pointer-events","all"),P.attr("cursor",Ua.overlay),b.selection&&(T=b.selection),Va(T)&&(b.selection=null,l.call(y)),z.end()}function O(){switch(ct.keyCode){case 16:D=x&&_;break;case 18:w===ka&&(x&&(u=h-S*x,e=i+S*x),_&&(f=p-N*_,a=s+N*_),w=Aa,q());break;case 32:w!==ka&&w!==Aa||(x<0?u=h-S:x>0&&(e=i-S),_<0?f=p-N:_>0&&(a=s-N),w=Ta,P.attr("cursor",Ua.selection),q());break;default:return}ba()}function V(){switch(ct.keyCode){case 16:D&&(g=v=D=!1,q());break;case 18:w===Aa&&(x<0?u=h:x>0&&(e=i),_<0?f=p:_>0&&(a=s),w=ka,q());break;case 32:w===Ta&&(ct.altKey?(x&&(u=h-S*x,e=i+S*x),_&&(f=p-N*_,a=s+N*_),w=Aa):(x<0?u=h:x>0&&(e=i),_<0?f=p:_>0&&(a=s),w=ka),P.attr("cursor",Ua[m]),q());break;default:return}ba()}}function p(){c(this,arguments).moved()}function d(){c(this,arguments).ended()}function g(){var n=this.__brush||{selection:null};return n.extent=Ea(e.apply(this,arguments)),n.dim=t,n}return u.move=function(n,e){n.selection?n.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=c(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),s=ve(o,a);function u(t){r.selection=1===t&&null===a?null:s(t),l.call(n),i.brush()}return null!==o&&null!==a?u:u(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),a=c(n,r).beforestart();qo(n),i.selection=null===o?null:o,l.call(n),a.start().brush().end()}))},u.clear=function(t){u.move(t,null)},h.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){!function(t,n,e,r){var i=ct;t.sourceEvent=ct,ct=t;try{n.apply(e,r)}finally{ct=i}}(new xa(u,n,t.output(this.state.selection)),a.apply,a,[n,this.that,this.args])}},u.extent=function(t){return arguments.length?(e="function"==typeof t?t:wa(Ea(t)),u):e},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:wa(!!t),u):r},u.touchable=function(t){return arguments.length?(i="function"==typeof t?t:wa(!!t),u):i},u.handleSize=function(t){return arguments.length?(s=+t,u):s},u.keyModifiers=function(t){return arguments.length?(o=!!t,u):o},u.on=function(){var t=a.on.apply(a,arguments);return t===a?u:t},u}(Ia)}var Ra=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}((function(){return Math.random()}));const Ba=function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)},Xa=function(t){let n=(Yt(t,.75)-Yt(t,.25))/1.34;return 1.06*Math.min(Dt(t),n)*Math.pow(t.length,-.2)};class Ga{constructor(t,n=!1,e=30,r=-40,i=100){this.id=t,this.verbose=n,this.offsetX=e,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),bt("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){bt("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=ct.pageX,n=ct.pageY){this.verbose&&(console.log(t),console.log(n)),t+=this.offsetX,n=n+this.offsetY<0?10:n+this.offsetY;bt("#"+this.id).style("left",t+"px").style("top",n+"px")}edit(t){bt("#"+this.id).html(t)}}class Za{constructor(t,e,r=!1){n("#"+t).show();const i=r?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=n("<div/>").addClass(i).appendTo("#"+t),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,n,e,r,i="fa-download"){this.createButton(t,i);bt("#"+t).on("click",()=>{this.downloadSvg(n,e,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,n,e="fa-expand-arrows-alt"){this.createButton(t,e);bt("#"+t).on("click",n).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const r=n("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return n("<i/>").addClass("fa "+e).appendTo(r),this.buttons[t]=r,r}attachTooltip(t){this.tooltip=t}downloadSvg(t,r,i){let o=n(n(n(""+("#"+t)))[0]),a=o.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),s=function(t){for(var e="",r=document.styleSheets,i=0;i<r.length;i++)try{if(null==r[i].cssRules)continue;for(var o=r[i].cssRules,a=0;a<o.length;a++){var s=o[a];if(void 0!==s.style){var u,l=void 0===s.selectorText?s.selectorText:s.selectorText.replace(`#${t[0].id} `,"");try{u=n(t).find(l)}catch(t){u=[]}u.length>0&&(e+=s.selectorText+" { "+s.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var c=document.createElement("style");return c.setAttribute("type","text/css"),c.innerHTML="<![CDATA[\n"+e+"\n]]>",c}(o.get());a.prepend(s),n("#"+i).html("").hide();let u=n("#"+i).append(a).html(),l=new Blob([u],{type:"image/svg+xml"});e(l,r),n("#"+i).html("").hide()}}class Wa{constructor(t,n={}){this._sanityCheck(t),this.data=t,this.groupInfo=n,this.toolbar=void 0,this.tooltip=void 0}render(t,n=500,e=357,r=.05,i,o=[-3,3],a="Y axis",s=!0,u=30,l=!0,c=0,h=!1,f=!1,p=!1,d=!1,g=!1,v=!1,y=0){if(this.reset=()=>{t.selectAll("*").remove(),this.render(t,n,e,r,i,o,a,s,u,l,c,h,f,p,d,g,v)},this.updateYScale=function(o,a){t.selectAll("*").remove(),void 0===a&&(a=[]),this.render(t,n,e,r,i,[],o,s,u,l,c,h,f,p,d,g,v)},this.updateXScale=function(i){void 0===i&&console.error("updateXScale called without new X domain"),t.selectAll("*").remove(),this.render(t,n,e,r,i,[],a,s,u,l,c,h,f,p,d,g,v)},void 0===o||0==o.length){let t=[];this.data.forEach(n=>t=t.concat(n.values)),o=It(t)}this.groups=Rt().key(t=>t.group).entries(this.data),this.scale={x:on().rangeRound([0,n]).domain(i||this.groups.map(t=>t.key)).paddingInner(r),subx:on(),y:tr().rangeRound([e,0]).domain(o),z:tr()},this.groups.forEach(n=>{let r=n.key,i=n.values,a=this.groupInfo[r];if(n.index=this.scale.x.domain().indexOf(r),void 0!==a){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",t=>"pvalue"==t&&parseFloat(a[t])<=parseFloat(a.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,n)=>`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(o[0])+50})`).text(t=>`${t}: ${parseFloat(parseFloat(a[t]).toPrecision(3)).toExponential()}`)}g&&i.sort((t,n)=>t.label<n.label?-1:t.label>n.label?1:0),this.scale.subx.domain(i.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(e=>{0!=e.values.length&&(e.values=e.values.sort(At),this._drawViolin(t,e,h,n.index,v,y))});var s=18;if(d){const n=on().domain(i.map(t=>null==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${e+s})`).call(oo(n))}if(l){s=5;const n=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${e+s})`).call(oo(this.scale.subx));c>0&&n.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${c}, 2, 10)`)}});let m=l?55:0;var w;if(this.xAxis=s?oo(this.scale.x):oo(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${e+m})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${u}, -10, 10)`),m=5,this.yAxis=(w=this.scale.y,io(4,w)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${m}, 0)`).call(this.yAxis),t.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*m+bt(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(a),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),f&&this._addGroupDivider(t),p){const n=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");n.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=n.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;e.append("rect").attr("x",(t,n)=>5+60*n+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),e.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,n)=>17+60*n+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(t,n){let e=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;t.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${e}, ${r})`).text(n)}createTooltip(t){return 0==n("#"+t).length&&n("<div/>").attr("id",t).appendTo(n("body")),this.tooltip=new Ga(t),bt("#"+t).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,n){return this.toolbar=new Za(t,n),this.toolbar}addBrush(t){const n=La();n.on("end",()=>{this.zoom(t,n)}),t.append("g").attr("class","brush").call(n)}zoom(t,n){let e,r=ct.selection;if(void 0===n)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,n)=>{const e=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return n>=e&&n<=i}));const e=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([e,i]),t.select(".brush").call(n.move,null)}else{if(!e)return e=setTimeout((function(){e=null}),350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((n,e)=>{let r=n.key,o=n.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),o.forEach(e=>{if(0==e.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${n.index}-${e.label}`);o.select(".violin").transition(i).attr("d",Li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const a=Yt(e.values,.25),s=Yt(e.values,.75),u=.1;o.select(".violin-ir").transition(i).attr("x",this.scale.z(-u)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-u)-this.scale.z(u))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const l=Ht(e.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-u)).attr("x2",this.scale.z(u)).attr("y1",this.scale.y(l)).attr("y2",this.scale.y(l))})})}_drawViolin(t,n,e,r,i,o){let a=function(t,n,e){return function(r){return n.map(n=>[n,qt(r,r=>t((n-r)/e))/e])}}(Ba,this.scale.y.ticks(100),Xa(n.values));const s=It(n.values),u=a(n.values).filter(t=>t[0]>=s[0]&&t[0]<=s[1]),l=t.append("g").attr("id",`violin${r}-${n.label}`).attr("class","violin-g").datum(n);if(n.values.length>=o&&u.length&&this._validVertices(u)){let o=jt(u,t=>Math.abs(t[1]));this.scale.z.domain([-o,o]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);let a=Li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const s=l.append("path").datum(u).attr("d",a).classed("violin",!0).style("fill",()=>void 0!==n.color?n.color:r%2==0?"#90c1c1":"#94a8b8"),c=Yt(n.values,.25),h=Yt(n.values,.75),f=this.scale.z.domain()[1]/3;if(e){const e=Math.abs(h-c),r=jt(n.values.filter(t=>t<=h+1.5*e)),i=Ot(n.values.filter(t=>t>=c-1.5*e));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(i)).style("stroke","#fff")}l.append("rect").attr("x",this.scale.z(-f)).attr("y",this.scale.y(h)).attr("width",Math.abs(this.scale.z(-f)-this.scale.z(f))).attr("height",Math.abs(this.scale.y(h)-this.scale.y(c))).attr("class","violin-ir");const p=Ht(n.values);if(l.append("line").attr("x1",this.scale.z(-f)).attr("x2",this.scale.z(f)).attr("y1",this.scale.y(p)).attr("y2",this.scale.y(p)).attr("class","violin-median"),i){let t=Ra(0,f/2);const e=Math.abs(h-c),r=jt(n.values.filter(t=>t<=h+1.5*e)),i=Ot(n.values.filter(t=>t>=c-1.5*e)),o=n.values.filter(t=>t<i||t>r);l.append("g").attr("class","violin-outliers").selectAll("circle").data(o).enter().append("circle").attr("cx",()=>this.scale.z(t())).attr("cy",t=>this.scale.y(t)).attr("r",2)}l.on("mouseover",()=>{s.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(n.group+"<br/>"+n.label+"<br/>Median: "+p.toPrecision(4)+"<br/>")}),l.on("mouseout",()=>{s.classed("highlighted",!1)})}else if(o){let t=jt(n.values,t=>Math.abs(t));this.scale.z.domain([-t,t]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const e=this.scale.z.domain()[1]/3;let r=Ra(0,e/2);l.append("g").attr("class","violin-points").selectAll("circle").data(n.values).enter().append("circle").attr("cx",()=>this.scale.z(r())).attr("cy",t=>this.scale.y(t)).attr("r",2)}}_sanityCheck(t){const n=["group","label","values"];t.forEach(t=>{n.forEach(n=>{if(void 0===t[n])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const n=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==n.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+e/2:0;t.selectAll(".vline").data(n).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,e)=>e!=n.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(t){return!t.reduce((t,n)=>t.concat(n),[]).filter(t=>isNaN(t)).length}}function Ja(){const t="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:t+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:t+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v8&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v8&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneModelUnfiltered:t+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v8&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000",geneExpBoxplot:t+"expression/geneExpression?datasetId=gtex_v8&boxplotDetail=full&gencodeId=",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v8&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v8&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",tissue:t+"dataset/tissueInfo?format=json&datasetId=gtex_v8",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}function Ka(t,e,r,i,o,a,s=Ja()){h(s.tissue,{credentials:"include"}).then((function(u){let l=function(t,n=!1){const e=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"],r="tissueInfo";if(!t.hasOwnProperty(r))throw"Parsing Error: required json attribute is missing: "+r;let i=t[r];["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach(t=>{if(!i[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`}),i=!1===n?i:i.filter(t=>!e.includes(t.tissueSiteDetailId));let o=i.reduce((t,n)=>{let e=n.tissueSite,r={id:n.tissueSiteDetailId,name:n.tissueSiteDetail};return t.hasOwnProperty(e)||(t[e]=[]),t[e].push(r),t},{});return Object.keys(o).forEach(t=>{if(1===o[t].length){let n=o[t][0];delete o[t],o[n.name]=[n]}}),o}(u,!0);!function(t,e,r=!1,i=!1,o=4){const a="tissue-group-main-level";bt("#"+e).selectAll("*").remove();const s=n("<div/>").attr("class","col-xs-12 col-md-12").appendTo(n("#"+e));r?n(`<label class=${a}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(s):n(`<label class=${a}><input type="radio" name="allTissues" value="all"> All </label> <label class=${a}><input type="radio" name="allTissues" value="reset"> Reset </label><br/>`).appendTo(s),n('input[name="allTissues"]').change((function(){switch(n(this).val()){case"all":n(".tissueGroup").prop("checked",!0),n(".tissueSubGroup").prop("checked",!0);break;case"reset":n(".tissueGroup").prop("checked",!1),n(".tissueSubGroup").prop("checked",!1)}}));let u=Object.keys(t).sort((t,n)=>"Brain"==t?-1:"Brain"==n?1:t<n?-1:t>n?1:void 0),l=Object.keys(t).reduce((n,e)=>t[e].length>1?n+1+t[e].length:n+t[e].length,0),c=Math.ceil(l/o),h=l%o,f=Math.floor(12/o);const p=Ut(0,o).map(t=>n(`<div id="section${t}" class="col-xs-12 col-md-${f}">`).appendTo(n("#"+e)));let d=0,g=0;u.forEach(e=>{let r=t[e];const i=e.replace(/ /g,"_");let o=r.length;o=1==o?o:o+1,0!=d&&o+d>c+h&&(d=0,g+=1),d+=o;let s=p[g];n(`<label class=${a}><input type="checkbox" id="${i}" class="tissueGroup"> <span>${e}</span></label><br/>`).appendTo(s),r.length>1&&r.sort((t,n)=>t.id>n.id?1:t.id<n.id?-1:0).forEach((function(t,e){let i=n(`<label class=tissue-group-sub-level><input type="checkbox" id="${t.id}" class="tissueSubGroup"> <span>${t.name}</span></label><br/>`).appendTo(s);e==r.length-1&&i.addClass("last-site"),i.click((function(){n('input[name="allTissues"]').prop("checked",!1)}))})),n("#"+i).click((function(){n('input[name="allTissues"]').prop("checked",!1),n("#"+i).is(":checked")?r.forEach((function(t){"id"!=t.id&&n("#"+t.id).prop("checked",!0)})):r.forEach((function(t){"id"!=t.id&&n("#"+t.id).prop("checked",!1)}))}))}),i&&(n('input[name="allTissues"][value="all"]').prop("checked",!0),n(".tissueGroup").prop("checked",!0),n(".tissueSubGroup").prop("checked",!0))}(l,e,!0),$("#"+i).click(function(t,e,r,i,o,a,s,u=_getGTExUrls(),l=30){return function(){$("#"+e).html("");let o=function(t,e,r=!1){let i=[];return n("#"+e).find(":input").each((function(){if(n(this).is(":checked")){const e=n(this).attr("id");if(n(this).hasClass("tissueGroup")){let n=e.replace(/_/g," ");1==t[n].length&&(r?i.push(t[n][0].name):i.push(t[n][0].id))}else r?i.push(n(n(this).siblings()[0]).text()):i.push(e)}})),i.filter(t=>void 0!==t)}(t,r);if(0==o.length)throw alert("Must select at least one tissue."),"Input error";let c=$("#"+i).val().split("\n").filter((function(t){return""!=t}));if(0==c.length)throw alert("Must input at least one gene-variant pair."),"Input error";c.length>l&&($("#"+s).append(`Your input has exceeded the maximum number of allowed entries. Only the first ${l} entries are processed.`),console.warn("User input has exceeded the maximum number of allowed entries."),c=c.slice(0,l));const f={};Object.keys(t).forEach(n=>{t[n].forEach(t=>{f[t.id]=t.name})}),c.forEach((function(t,n){t.replace(/ /g,"");let r=t.split(",")[1],i=t.split(",")[0];const l=u.geneId+i,c=r.toLowerCase().startsWith("rs")?u.snp+r:u.variantId+r;Promise.all([h(l,{credentials:"include"}),h(c,{credentials:"include"})]).then((function(t){const l=function(t,n){if(!t.hasOwnProperty("gene"))throw"Fatal Error: parse gene error";let e=t.gene.filter(t=>t.geneSymbolUpper==n.toUpperCase()||t.gencodeId==n.toUpperCase());return 0==e.length?null:e[0]}(t[0],i),c=function(t){if(!t.hasOwnProperty("variant"))throw"Fatal Error: parse variant error";const n=t.variant;return 0==n.length?null:n[0]}(t[1]);if(null===l){const t=`Input Error: no gene found for ${i}. <br/>`;throw $("#"+s).append(t),t}if(null===c){const t=`Input Error: no variant found for ${r} <br/>`;throw $("#"+s).append(t),t}!function(t,n,e,r,i,o,a=Ja()){const s="violinplot"+o;$("#"+n).append(`<div id="${s}" class="col-sm-12"></div>`);let u=r.variantId.split(/_/)[2],l=r.variantId.split(/_/)[3];const c=u+l;u+=u,l+=l;let f=[];i.forEach(t=>{let n=`${a.dyneqtl}?variantId=${r.variantId}&gencodeId=${e.gencodeId}&tissueSiteDetailId=${t}`;f.push(function(t,n){return new Promise((function(e,r){h(t,{credentials:"include"}).then((function(t){e(t)})).catch((function(t){e({tissue:n,status:"failed"})}))}))}(n,t))}),Promise.all(f).then((function(n){let i=[],o={};n.forEach(n=>{if("failed"==n.status){let e=t[n.tissue];i=i.concat([{group:e,label:u.length>2?"ref":u,values:[0]},{group:e,label:c.length>2?"het":c,values:[0]},{group:e,label:l.length>2?"alt":l,values:[0]}])}else{n=function(t){["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach(n=>{if(!t.hasOwnProperty(n))throw console.error(t),"Parse Error: Required json attribute is missing: "+n}),t.expression_values=t.data.map(t=>parseFloat(t)),t.genotypes=t.genotypes.map(t=>parseFloat(t)),t.homoRefExp=t.expression_values.filter((n,e)=>0===t.genotypes[e]),t.homoAltExp=t.expression_values.filter((n,e)=>2===t.genotypes[e]),t.heteroExp=t.expression_values.filter((n,e)=>1===t.genotypes[e]);let n=t.variantId.split(/_/)[2],e=t.variantId.split(/_/)[3];return t.het=n+e,t.ref=n+n,t.alt=e+e,t}(n);let e=t[n.tissueSiteDetailId];i=i.concat([{group:e,label:u.length>2?"ref":u,size:n.homoRefExp.length,values:n.homoRefExp},{group:e,label:c.length>2?"het":c,size:n.heteroExp.length,values:n.heteroExp},{group:e,label:l.length>2?"alt":l,size:n.homoAltExp.length,values:n.homoAltExp}]),o[e]={pvalue:null===n.pValue?1:parseFloat(n.pValue).toPrecision(3),pvalueThreshold:null===n.pValueThreshold?0:parseFloat(n.pValueThreshold).toPrecision(3)}}}),function(t,n,e,r,i){const o={main:e,tooltip:"eqtlTooltip",toolbar:e+"Toolbar",clone:e+"Clone",chart:e+"Chart",svg:e+"Svg",buttons:{save:e+"Save"}};if(0==$("#"+o.main).length)throw"Violin Plot Error: the chart DOM doesn't exist";0==$("#"+o.tooltip).length&&$("<div/>").attr("id",o.tooltip).appendTo($("body"));bt("#"+o.main).selectAll("*").remove(),["toolbar","chart","clone"].forEach(t=>{$("<div/>").attr("id",o[t]).appendTo($("#"+o.main))});let a={left:50,top:50,right:50,bottom:100},s=40*r.length,u=s+(a.left+a.right),l=80+(a.top+a.bottom),c=bt("#"+o.chart).append("svg").attr("width",u).attr("height",l).attr("id",o.svg).append("g").attr("transform",`translate(${a.left}, ${a.top})`);c.append("text").classed("ed-section-title",!0).text(`${t.geneSymbol} (${t.gencodeId}) and ${n.snpId||""} (${n.variantId})`).attr("x",0).attr("y",16-a.top);let h=new Wa(r,i);const f=h.createTooltip(o.tooltip);h.createToolbar(o.toolbar,f).createDownloadSvgButton(o.buttons.save,o.svg,o.main+"-save.svg",o.clone),h.render(c,s,80,.3,void 0,[],"Norm. Expression",!1,0,!0,0,!1,!0,!1,!0,!1,!1),function(t,n){t.groups.forEach(e=>{const r=e.key,i=r.replace(/\(/," - (").split(/\s*-\s*/);n.append("g").selectAll(".violin-group-label").data(i).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("transform",(n,e)=>`translate(${t.scale.x(r)+t.scale.x.bandwidth()/2}, ${t.scale.y(t.scale.y.domain()[0])+75+12*e})`).text(t=>t)}),n.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1)}(h,c)}(e,r,s,i,o)})).catch((function(t){console.error(t)}))}(f,e,l,c,o,n,u),$("#"+a).removeClass("show"),$("#"+a).removeClass("in")})).catch((function(t){console.error(t)}))}))}}(l,t,e,r,0,o,a,s))})).catch((function(t){console.error(t)}))}var Qa={build:Ka};t.EqtlDashboard=Qa,t.build=Ka,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
